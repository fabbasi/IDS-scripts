<html>
<head>
<title>Orange Widgets: OWGUIEx</title>
<link rel=stylesheet HREF="../style.css" type="text/css">
<link rel=stylesheet href="style-print.css" type="text/css" media=print>


<script type="text/javascript">
function toggleVisibility(obj)
{
   var exampleStyle = obj.parentNode.getElementsByTagName('div')[0].style;
   var buttonText = obj.firstChild;

   if ((exampleStyle.visibility == "hidden") || (exampleStyle.visibility=="")) {
     exampleStyle.visibility = "visible";
     exampleStyle.height = "auto";
     buttonText.data = "Hide Example";
     if (navigator.appName == "Microsoft Internet Explorer")
       exampleStyle.position = "fixed";
   }
   else {
     exampleStyle.visibility = "hidden";
     exampleStyle.height = "1%";
     buttonText.data = "Show Example";
     if (navigator.appName == "Microsoft Internet Explorer")
       exampleStyle.position = "absolute";
   }
}

function onLoad()
{
   if (navigator.appName == "Microsoft Internet Explorer") {
       try {
            for(var x = 0, ss = document.styleSheets; ss[x]; x++) {
                for (var y=0, rr = ss[x].rules; rr[y]; y++) {
                    if (rr[y].selectorText == ".example") {
                        rr[y].style.position = "absolute";
                        rr[y].style.marginTop = "0px";
                    }
                    if (rr[y].selectorText == ".hideShow")
                        rr[y].style.marginBottom = "0px";
                }
            }
       }
       catch (e) {}
   }
}

</script>

<style>
P.function { font-family: monospace; font-weight: bold; font-size: 8pt; margin-top: 1em }

xmp.code { font-size: 8pt; background-color: white; }

.example { visibility: hidden; height: 1%; border: 1px solid #000000; padding-left: 6px; margin-top: -7px; padding-top: 0px; background-color: #f8f8f8; }

.hideshow { border: 1px dotted #000000; padding: 2px; margin-bottom: -7px; background-color: #eeeeee; margin-right: 6px; }

/*.example { visibility: hidden; height: 1%; border: 1px solid #000000; padding-left: 6px; margin-top: -5px; padding-top: 0px; background-color: #f8f8f8; z-index: -1;}

.hideshow { border: 1px dotted #000000; padding: 2px; margin-bottom: -5px; background-color: #eeeeee; margin-right: 6px; z-index: 1;}
*/

.header {margin: 0px; padding: 0px;  }

.function { background-color: #eeeeee; padding: 2px; }

H1 { margin-top: 48px; font-size: 12pt; background-color: white; color: black; }
H2 { margin-top: 36px; font-size: 10pt; background-color: white; font-weight: bold; color: blue; }

</style>

</head>
<body onLoad="onLoad();">


<h1>OWGUIEx: Library of Advanced GUI Controls</h1>

<p>OWGUIEx library contains a set of more advanced GUI components. We didn't simply put them in the OWGUI module since these components typically take tens or hundreds of lines of code and are less frequently used in widgets.</p>

<hr>

<h1>Common Attributes</h1>

<P>Since this file is basically an extension of the OWGUI library, many of the attributes that can be specified when constructing a control are described in the "Common attributes" section in the documentation on <a href="owgui.htm">OWGUI</a>. It is highly recomended that you are familiar with those attributes.</P>


<h1>Controls</h1>

<P>This section describes the OWGUI wrappers for controls that are defined in OWGUIEx.</P>

<h2>Line Edit with Filter</h2>

<P>A modification of the <a href="owgui.htm#lineedit">OWGUI.lineEdit</a> control. It can be used to filter content of a list box based on the text in this control. </P>

<p class="function">
lineEditFilter(widget, master, value [, label, labelWidth, orientation, box, tooltip, valueType, validator, controlWidth, caseSensitive, useRE, matchAnywhere, callback, emptyText])
</p>

The meaning of attributes <code>label</code>, <code>labelWidth</code>, <code>orientation</code>, <code>box</code>, <code>tooltip</code>, <code>valueType</code>, <code>validator</code> and <code>controlWidth</code> are described in the <a href="owgui.htm#lineedit">OWGUI.lineEdit</a> documentation. 


<dl class="attributes">

<DT>caseSensitive (default: 1)</DT>
<DD>Determines whether the filtering of items in the list box will be case sensitive or not.</DD>

<DT>useRE (default: 0)</DT>
<DD>Determines whether use of regular expressions is allowed or not. If regular expressions are allowed then certain characters have different meaning, e.g. typing ".a" in the line edit will keep all those list box items that have letter a as the second character (no matter what the first character is).</DD>

<DT>matchAnywhere (default: 0)</DT>
<DD>Do we want to match only those list box items that start with the text in the line edit control or can the text appear anywhere in the item's text. <code>matchAnywhere</code> attribute is relevant only when we don't use regular expressions (<code>useRe = 0</code>).</DD>

<dt>callback (default: None)</dt>
<dd>The specified callback function will be called each time the line edit control is changed (edited).</dd>

<dt>emptyText (default: "")</dt>
<dd>When the text in the control will be empty and the control will be out of focus, the specified <code>emptyText</code> will be displayed in gray color. This attribute can be used to make it easier for the user to know what is the function of the control. For example, by setting <code>emptyText="Filter attributes..."</code> we can let user know that he can use the control to filter out the attributes.</dd>
</dl>

Along with the described attributes there are also some important methods that can/have to be used:

<dl class="attributes">

<DT>setListBox(listbox)</DT>
<DD>Using this method we can specify which list box instance we would like to control using the line edit.</DD>

<DT>setAllListItems(items)</DT>
<DD>Using this method we tell the line edit control what is the complete (unfiltered) content of the list box. The list of items can be a list of strings or <code>QListWidgetItem</code> instances.</DD>

<DT>updateListBoxItems(callCallback=1)</DT>
<DD>We can call this function if we want manually to cause the update of the associated list box based on the content of the line edit. The value of <code>callCallback</code> argument determines whether we would like to call the callback function after this update or not.</DD>
</dl>

<span>
<span onclick="toggleVisibility(this);" class="hideshow">Show Example</span>
<span class="hideshow"><a href="gui_lineeditFilter.py">Download example (gui_lineeditFilter.py)</a></span>
<div class="example">

<p>In the following code we create a lineEditFilter and a list box component. We add to the list box 10.000 randomly generated strings of length 10 and also tell the line edit control that these are all of the items. By typing in the line edit we can then keep only those list box items that match the text.</p>

<table><tr>
<td width="600px">
<xmp class=code>self.filter = ""
self.listboxValue = ""
lineEdit = OWGUIEx.lineEditFilter(self.controlArea, self, "filter", "Filter:", useRE = 1, emptyText = "filter...")

listbox = OWGUI.listBox(self.controlArea, self, "listboxValue")
lineEdit.setListBox(listbox)

names = []
for i in range(10000):
  names.append("".join([string.ascii_lowercase[random.randint(0, len(string.ascii_lowercase)-1)] for c in range(10)]))
lineEdit.listbox.addItems(names)
lineEdit.setAllListItems(names)
</xmp>
</td>
<td valign="top"><img src="gui_lineeditFilter.png"></td>
</tr></table>
</div></span>

<h2>Line Edit with Hint</h2>

<P>A modification of the <a href="owgui.htm#lineedit">OWGUI.lineEdit</a> control. It helps the user to enter the text by showing a drop-down list of items that match the current text.</P>

<p class="function">
lineEditHint(widget, master, value [, label, labelWidth, orientation, box, tooltip, valueType, validator, controlWidth, caseSensitive, useRE, matchAnywhere, callback, listUpdateCallback, nrOfSuggestions, autoSizeListWidget, delimiters])
</p>

The meaning of attributes <code>label</code>, <code>labelWidth</code>, <code>orientation</code>, <code>box</code>, <code>tooltip</code>, <code>valueType</code>, <code>validator</code> and <code>controlWidth</code> are described in the <a href="owgui.htm#lineedit">OWGUI.lineEdit</a> documentation. 

<dl class="attributes">

<DT>caseSensitive (default: 1)</DT>
<DD>Determines whether the filtering of items in the list box will be case sensitive or not.</DD>

<DT>useRE (default: 0)</DT>
<DD>Determines whether use of regular expressions is allowed or not. If regular expressions are allowed then certain characters have different meaning, e.g. typing ".a" in the line edit will show in the suggestion-list all those items that have letter a as the second character (no matter what the first character is).</DD>

<DT>matchAnywhere (default: 0)</DT>
<DD>Do we want to match only those items that start with the text in the line edit control or can the text appear anywhere in the item's text. <code>matchAnywhere</code> attribute is relevant only when we don't use regular expressions (<code>useRe = 0</code>).</DD>

<dt>callback (default: None)</dt>
<dd>The specified callback function will be called each time some suggested item is selected.</dd>

<dt>listUpdateCallback (default: None)</dt>
<dd>The specified function will be called each time the list of suggested items is updated.</dd>

<dt>nrOfSuggestions (default: 10)</dt>
<dd>This attribute determines the height of the list of suggested items. By default, the height is determined so that the list will show maximum 10 items. If more items match the criteria, a vertical scrollbar will be shown.</dd>

<dt>autoSizeListWidget (default: 0)</dt>
<dd>If <code>autoSizeListWidget</code> is 1 then the width of the suggestions list will be adjusted automatically based on the width of the items in the list. The width of the list will be at least as wide as the line edit control.
</dd>

<dt>delimiters (default: None)</dt>
<dd>Sometimes we would like to have more than one item in the line edit. To be able to show the suggestions when entering the second, third, ... item, we have to specify which characters are delimiters that separate items. For example, let's assume we would like to use the line edit to specify a list of our favourite colors, which are red, blue and yellow. If we'd like to get a list of suggestions when we start typing the second color name (blue) we have to set <code>delimiters=', '</code> (notice that the string also contains SPACE besides the comma).
</dd>
</dl>

Along with the described attributes there is also an important methods that has to be used:

<dl class="attributes">

<DT>setItems(items)</DT>
<DD>Using this method we tell the line edit control what are the possible items that can be suggested when user is entering text. The list of items can be a list of strings or <code>QListWidgetItem</code> instances.</DD>
</dl>

<span>
<span onclick="toggleVisibility(this);" class="hideshow">Show Example</span>
<span class="hideshow"><a href="gui_lineeditHint.py">Download example (gui_lineeditHint.py)</a></span>
<div class="example">

<p>In the following example we create a lineEditHint and set a short list of items. By typing in the line edit we can then keep only those list box items that match the text.</p>

<table><tr>
<td width="600px">
<xmp class=code>s = OWGUIEx.lineEditHint(self.controlArea, self, "text", useRE = 0, caseSensitive = 0, matchAnywhere = 0, delimiters = "., ")
s.listWidget.setSpacing(2)
items = ["janez", "joza", "danica", "jani", "jok", "jure"]
s.setItems(items)
</xmp>
</td>
<td valign="top"><img src="gui_lineeditHint.png"></td>
</tr></table>
</div></span>

</body>
</html>

