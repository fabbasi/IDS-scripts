<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>
<h1>Basic Statistics for Continuous Attributes</h1>

<P>Orange contains two simple classes for computing <INDEX>basic statistics</INDEX> for continuous attributes, such as their minimal and maximal value or average: <code>BasicAttrStat</code> holds the statistics for a single attribute and <code>DomainBasicAttrStat</code> holds the statistics for all attributes in the domain.

<hr>

<h2>BasicAttrStat</h2>
<index name="classes/BasicAttrStat">

<p class=section>Attributes</p>

<dl class=attributes>
<dt>variable</dt>
<dd>The descriptor for the attribute to which the data applies.</dd>
<dt>min, max</dt>
<dd>Minimal and maximal attribute value that was encountered in the data.</dd>
<dt>avg, dev</dt>
<dd>Average value and deviation.</dd>
<dt>n</dt>
<dd>Number of examples for which the value was defined (and used in the statistics). If examples were weighted, <CODE>n</code> is the sum of weights of those examples.</dd>
<dt>sum, sum2</dt>
<dd>Weighted sum of values and weighted sum of squared values of this attribute.</dd>
<dt>holdRecomputation</dt>
<dd>Holds recomputation of the average and deviation.</dd>
</dl>

<P class=section>Methods</p>

<dl class=attributes>
<dt>add(value[, weight])</dt>
<dd>Adds a value to the statistics. Both arguments should be numbers; <CODE>weight</CODE> is optional, default is 1.0.</dd>
<dt>recompute()</dt>
<dd>Recomputes the average and deviation.</dd>
</dl>

<p>You most probably won't construct the class yourself, but instead call <CODE>DomainBasicAttrStat</CODE> to compute statistics for all continuous attributes in the dataset.</p>

<P>Nevertheless, here's how the class works. Values are fed into <code>add</code>; this is usually done by <CODE>DomainBasicAttrStat</Code>, but you can traverse the examples and feed the values in Python, if you want to. For each value it checks and, if necessary, adjusts <code>min</code> and <code>max</code>, adds the value to <code>sum</code> and its square to <code>sum2</code>. The weight is added to <code>n</code>. If <code>holdRecomputation</code> is <CODE>false</CODE>, it also computes the average and the deviation. If <CODE>true</CODE>, this gets postponed until <code>recompute</code> is called. It makes sense to postpone recomputation when using the class from C++, while when using it from Python, the recomputation will take much much less time than the Python interpreter, so you can leave it on.</p>

<p>You can see that the statistics does not include the median or,
more generally, any quantiles. That's because it only collects
statistics that can be computed on the fly, without remembering the
data. If you need quantiles, you will need to construct a <a
href="distributions.htm"><code>ContDistribution</code></A>.</p>

<h2>DomainBasicAttrStat</h2>
<index name="classes/DomainBasicAttrStat">

<p><code>DomainBasicAttrStat</code> behaves as a list of <code>BasicAttrStat</code> except for a few details.</p>

<P class=section>Methods</P>
<DL class=attributes>
<DT>&lt;constructor&gt;</DT>
<DD>Constructor expects an example generator; if examples are weighted, the second (otherwise optional) arguments should give the id of the meta-attribute with weights.</P>

<p class=header style="margin-bottom: 12pt">part of <a href="basicattrstat.py">basicattrstat.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<xmp class=code>import orange
data = orange.ExampleTable("iris")
bas = orange.DomainBasicAttrStat(data)
print "%20s  %5s  %5s  %5s" % ("attribute", "min", "max", "avg")
for a in bas:
    if a:
        print "%20s  %5.3f  %5.3f  %5.3f" % (
          a.variable.name, a.min, a.max, a.avg)
</xmp>

<p>This will print</p>

<xmp class="code">           attribute    min    max    avg
        sepal length  4.300  7.900  5.843
         sepal width  2.000  4.400  3.054
        petal length  1.000  6.900  3.759
         petal width  0.100  2.500  1.199
</xmp>

<DT>purge()</DT>
<DD>Noticed the "<code>if a</code>" in the script? It's needed because of discrete attributes for which this statistics cannot be measured and are thus represented by a <code>None</code>. Method <CODE>purge</CODE> gets rid of them by removing the <CODE>None</CODE>'s from the list.</p>

<DT>&lt;list-like operations&gt;</DT>
<DD><CODE>DomainBasicAttrStat</CODE> behaves like a ordinary list, except that its elements can also be indexed by attribute descriptors or attribute names.</p>

<xmp class="code">>>> print bas["sepal length"].avg
5.84333467484
</xmp>
</DL>

<P>If you need more statistics, see information on <a href="distributions.htm">distributions</a>.</P>
</body> 