<html> <HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD> <body>

<h1>Random Classifier</h1>
<index name="classifiers+random classifier">

<P>Random classifier (class <code><INDEX name="classes/RandomClassifier">RandomClassifier</code>)disregards the examples and returns random predictions. Curious enough though, the classifier will always predict the same class for the same example. Predictions can be distributed by the prescribed distribution.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>probabilites</DT>
<DD>Distribution of probabilities for the classifier.</DD>
</DL>

<P>To verify this miraculous classifier, we shall classify the first ten examples from lenses dataset for three times.</P>

<p class="header"><A href="random_classifier.py">random_classifier.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class=code>import orange, orngTest, orngStat

data = orange.ExampleTable("lenses")

rc = orange.RandomClassifier()
rc.classVar = data.domain.classVar
rc.probabilities = [0.5, 0.3, 0.2]

for i in range(3):
    for ex in data[:5]:
        print ex, rc(ex)
    print
</XMP>

<P>The script always prints</P>

<XMP class=code>['young', 'myope', 'no', 'reduced', 'none'] none
['young', 'myope', 'no', 'normal', 'soft'] soft
['young', 'myope', 'yes', 'reduced', 'none'] none
['young', 'myope', 'yes', 'normal', 'hard'] soft
['young', 'hypermetrope', 'no', 'reduced', 'none'] none
</XMP>

<P>Setting <CODE>classVar</CODE> is needed for nicer output. Remove it and see what happens.</p>

<P>OK, how does this really work? Random classifier computes the hash value of example (equivalent to calling <CODE>hash(ex)</CODE>, where <CODE>hash</CODE> is a Python's built-in function), masks it by <CODE>0x7fffffff</CODE> and divides it by <CODE>0x7fffffff</CODE> to get a floating point number between 0 and 1. This value's position in the distribution determines the class. In our example, random values below 0.5 give the first class, those between 0.5 and 0.8 give the second and the rest give the third.</P>

<h1>Random Learner</h1>

<P><code>RandomLearner</code> returns the above classifier.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>probabilites</DT>
<DD>Distribution of probabilities for the classifier. If not given, the learner will use the class distribution from the training data.</DD>
</DL>

</BODY></HTML>
