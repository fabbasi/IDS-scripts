<html> <HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD> <body>

<index name="classifiers/in Python">
<h1>Classifiers in Python</h1>

<P>Classifiers and learners can be written in Python.</P>

<P>You can often program them as classes or functions written entirely in Python and independent from Orange, as shown in  <A href="../ofb/c_nb_disc.htm">Orange for Beginners</A>. Such classes can participate, for instance, in the common evaluation functions like those available in modules <CODE>orngTest</CODE> and <CODE>orngStat</CODE>.</P>

<P>On the other hand, these classes can't be used as components for pure C++ classes. For instance, <CODE>TreeLearner</CODE>'s attribute <CODE>nodeLearner</CODE> should contain a (wrapped) C++ object derived from <CODE>Learner</CODE>, such as <CODE>MajorityLearner</CODE> or <CODE>BayesLearner</CODE>, and <CODE>Variables</CODE>'s <CODE>getValueFrom</CODE> can only store classes derived from <CODE>Classifier</CODE>, like for instance <CODE>ClassifierFromVar</CODE>. They cannot accommodate Python's classes or even functions.</P>

<P>There's a workaround, though. You can subtype Orange classes <CODE>Learner</CODE> or <CODE>Classifier</CODE> as if the two classes were defined in Python, but later use your derived Python classes as if they were written in Orange's core. That is, you can define your class in a Python script like this:</P>

<XMP class=code>class MyLearner(orange.Learner):
  def __call__(self, examples, weightID = 0):
     < do something smart here >
</XMP>

<P>Such a learner can then be used as any regular learner written in Orange. You can, for instance, construct a tree learner and use your learner to learn node classifier:</P>

<XMP class=code>treeLearner = orange.TreeLearner()
treeLearner.nodeLearner = MyLearner()
</XMP>

<P>If your learner or classifier is simple enough, you even don't need to derive a class yourself. You can define the learner or classifier as an ordinary Python function and assign it to an attribute of Orange class that would expect a <CODE>Learner</CODE> or a <CODE>Classifier</CODE>. Wrapping into a class derived from <CODE>Learner</CODE> or <CODE>Classifier</CODE> is done by Orange.</P>

<XMP class=code>def myLearner(examples, weightID = 0):
  < do something less smart here >

treeLearner = orange.TreeLearner()
treeLearner.nodeLearner = myLearner
</XMP>

<P>Finally, if your learner is really simple (that is, trivial :-), you can even stuff it into a lambda function.</P>

<XMP class=code>treeLearner = orange.TreeLearner()
treeLearner.nodeLearner = lambda examples, weightID = 0: <do something trivial>
</xmp>

<P>Detailed description of the mechanisms involved and example scripts are given in a separate documentation on <A href="callbacks.htm">subtyping Orange classes in Python</A>.</P>

</BODY>
</HTML> 