<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>
<h1>Values of attributes</h1>
<index name="attribute values">

<p><code>Orange.<INDEX name="classes/Value">Value</code> contains a value of an attribute. Value can be discrete, continuous or of some other type, like discrete or continuous distribution, or a string. The value can also contain an attribute descriptor of type <code>Variable</code>. This enables several operations which are otherwise unavailable.</P>

<p>When taking a value from an example (e.g. <code>value = example[2]</code>), what you get is a copy of the value, not a reference. Changing the value would not change the example from which it was got.</P>

<hr>

<p class=section>Attributes</p>
<DL class=attributes>
<DT>value</DT>
<DD>The attribute's value. Values of discrete and continuous attributes are internally stored as integers or floating point numbers, respectively. This field, however, "contains" floating point numbers for continuous attributes and strings for discrete. If attribute descriptor (field <CODE>variable</CODE>) is known, the string is a symbolic value for the attribute; otherwise it contains a number enclosed in "&lt;" and "&gt;". If value is continuous or unknown, no descriptor is needed. For the latter, the result is a string '?', '~' or '.'  for don't know, don't care and other, respectively.</DD>

<DT>svalue</DT>
<DD>While the previous field (<CODE>value</CODE>) can store only integers and floats, <CODE>svalue</CODE> can contain objects of any type derived from <code>SomeValue</code>, such as <code>StringValue</code>, <code>DiscDistribution</code> or <code>ContDistribution</code>.</DD>

<DT>variable</DT>
<DD>An attribute descriptor, associatied with the value. Can be <code>None</code>.</DD>

<DT>varType <SPAN class=normalfont>(read only)</SPAN></DT>
<DD>The value's type. It can be <code>orange.VarTypes.Discrete</code> (1), <code>orange.VarTypes.Continuous</code> (2) or <code>orange.VarType.OtherVar</code> (3).</DD>

<DT>valueType <SPAN class=normalfont>(read only)</SPAN></DT>
<DD>Tells whether the value is regular (known) or special. This field can be <code>orange.ValueType.Regular</code> (0), <code>orange.ValueType.DC</code> (1), <code>orange.ValueType.DK</code> (2), or any value from 3 to 255. </DD>
</DL>

<p class=section>Methods</p>
<DL class=attributes>
<DT>&lt;constructors&gt;</DT>
<DD>The are many ways to construct the Value. See the examples section.</DD>

<DT>&lt;casting to numerical types&gt;</DT>
<DD>Value can be casted to an int, float, long. Casting to numerical types requires the values to be known. For nominal values, the result of numerical cast is an index of the value. </DD>

<DT>&lt;casting to string&gt;</DT>
<DD>For nominal values, it returns symbolic value if the descriptor is defined. If not, it returns an index in arrow brackets (like "<2>"). For continuous values, a string representation of the value is returned. Symbols "?", "~" and "." are used for don't-knows, don't-cares and other types of unspecified values, respectively. <code>StringValues</code> can be casted to strings as well.</DT>

<DT>&lt;casting to bool&gt;</DT>
<DD>Values can be used in conditional expression. A <CODE>Value</CODE> is <CODE>true</CODE> if it is known (i.e. not special).</DD>


<DT>&lt;arithmetic operations&gt;</DT>
<DD>Continuous values can be added, subtracted, multiplied, divider, raised to powers. A negative and absolute value can also be computed. Results of arithmetic operations are not values but floats. Value can be added (subtracted...) to another value or to an float or integer.
</DD>


<DT>&lt;comparison&gt;</DT>
<DD>Values can be compared. Both values must be of the same type (discrete, continuous). Continuous values can be compared as expected. Discrete values are compared by indices, not alphabetically. This enables ordered attributes; values "tiny", "little", "big" and "huge" should be compared as listed, not alphabetically. All discrete attributes are here treated as ordinal, not nominal; the descriptor's flag <code>ordered</code> is ignored. It is possible to compare two values of the same attribute (i.e. with the same descriptor) or two values of different attributes. When the values belong to different attributes, orange tries different ways to compare them. See examples below for details. Both, discrete and continuous values can be compared to strings, provided that the strings can be converted to attribute's values. It is not possible to compare any of the above attributes with string "small", and it is not possible to compare a continuous attribute with "parrot". Discrete values can be compared with integers which get treated as indices. Continuous values can be compared with any numeric object. Comparing two undefined values yields equality and comparing an undefined value with a defined yields an error.
</DD>

<DT>native()</DT>
<DD>Returns the same as the attribute <CODE>value</CODE> - string for discrete and undefined values, floating point number for continuous.</DD>

<DT>firstValue(), nextValue(), randomValue()</DT>
<DD>These functions set the value to the firstValue, the next (from the current) or to a random value. This is not always possible - the value must have a descriptor and the descriptor must support the methods. Functions return <CODE>true</CODE> on success and <CODE>false</CODE> on failure.</DD>

<DT>isDK(), isDC(), isSpecial()</DT>
<DD>Return 1 if the value is don't know, don't care, or of these or any other special type, respectively. <code>val.isSpecial()</code> is thus equivalent to <code>val.valueType!=0</code> and to <CODE>not not val</CODE>.</DD>
</DL>

<hr>

<H3>Examples</H3>

<H4>Construction</H4>
<A name="construction">

<p>Let us first assume that you have defined two attribute descriptors</p>
<xmp class="code">>>> fruit = orange.EnumVariable("fruit", values = ["plum", "apple", "lemon"])
>>> iq = orange.FloatVariable("iq")
</xmp>
<p>Let us now define several values.</p>
<xmp class="code">>>> lm = orange.Value(fruit, "lemon")
>>> ap = orange.Value(fruit, 1)
>>> un = orange.Value(fruit)
>>>
>>> Mary = orange.Value(iq, "105")
>>> Harry = orange.Value(iq, 80)
>>> Dick = orange.Value(iq)
</xmp>
<p>When a descriptor is given, as in above cases, the attribute's value can be converted from a string. In case of <code>EnumVariable</code>, this can be a symbolic value (as for <code>lm</code>), in case of continuous attributes, the string should contain a number (as for <code>Mary</code>). Discrete values can also be given as indices.</p>
<xmp class="code">>>> print ap
apple
</xmp>
<p>The value of <code>ap</code> is <code>apple</code>, since <code>apple</code> is the second fruit in the list of values. Thus, saying "<code>ap = orange.Value(fruit, 1)</code>" is equivalent to "<code>ap = orange.Value(fruit, fruit.values[1])</code>". Values of continuous attributes can be given numerically, as for <code>Harry</code>.</P>

<p>What about <code>un</code> and <code>Dick</code>? Those two <code>Value</code>'s correspond to attributes <code>fruit</code> and <code>iq</code>, but the values are not specified. More accurately, they are unknown.</P>

<p>We can also omit the descriptor.</p>
<xmp class="code">>>> sf = orange.Value(2)
>>> Sally = orange.Value(118.0)
>>>
>>> print sf
<2>
>>> print Sally
118.000000
</xmp>

<p>Note that the outputs are different. There's a reason for it. <code>sf</code> is discrete and <code>Sally</code> is continuous. The type of the argument - int or float - defines the type of the value constructed. But why &lt;2&gt;? It means "the third value" of some discrete attribute, but there's no descriptor so we have no symbolical name for it. But we can assign a descriptor:</p>
<xmp class="code">>>> sf.variable = fruit
>>> print sf
lemon
</xmp>
<p>Before delving into the <code>Value</code>'s fields, let us list some further - working and non-working - ways to construct a <code>Value</code>.</p>
<xmp class="code">>>> m = orange.Value("plum")
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: cannot convert 'plum' to value of an unknown attribute
</xmp>
<p>This is hardly surprising when you think about it. The string "plum" cannot be converted to an index without having the attribute descriptor. The only two strings which can be passed without a descriptor are '?' and '~', the Orange's representation of "don't know" and "don't care". The value will be discrete.</P>

<p>How do we construct a continuous unknown value? You'll probably never need it, but, well, here it is.</p>
<xmp class="code">>>> udv = orange.Value(orange.VarTypes.Continuous, orange.ValueTypes.DK)
</xmp>
<p>This says that udv is a continuous variable with value "don't know". Replace DK with DC and you have a don't-care value. Replace Continuous with Discrete and you have a discrete value.</P>

<p>There's another way to construct a <code>Value</code>: you can pass any class derived from <code>SomeValue</code> to constructor. There are three such classes at the moment: <code>StringValue</code>, <code>DiscDistribution</code> and <code>ContDistribution</code>.</p>

<xmp class="code">>>> city = orange.Value(orange.StringValue("Cicely"))
>>> print city
Cicely
</xmp>

<p>There's another temptation you might have:</p>
<xmp class="code">>>> val = orange.Value(fruit)
>>> val = "plum"
</xmp>

<p>This actually works, but not as you might wish. After the second line, <code>val</code> becomes an ordinary string, not an <code>orange.Value</code>. What you can do is</p>
<xmp class="code">>>> val = orange.Value(fruit)
>>> val.value = "plum"
</xmp>

<H4>Casting, Arithmetics and Comparison</H4>

<p>There's not much to tell about casting and arithmetics since both work exactly as you'd expected them to. Well, probably - it depends upon whether you meant to apply arithmetical operations to any attributes but continuous. You cannot do that, you cannot add <code>lemon</code> to an <code>apple</code>.</P>

<p>When comparing values, you don't need to convert them into numbers. You can simply compare them to builtin types</p>

<xmp class="code">>>> Harry>80
0
>>> Harry>=80
1
</xmp>

<p>More often, you will check values within examples. We're skipping a part of documentation, but if the attribute <code>iq</code> appears in a domain of example table <code>tab</code>, you can print the examples with lower <code>iq</code>'s by</p>

<xmp class="code">>>> for e in tab:
...    if e[iq]<90:
...        print e
</xmp>

<p>Comparing nominal values with strings is just as simple, except that strings are not compared alphabetically but by indices. Strings must be legal attribute's values:</p>
<xmp class="code">>>> lm=="melon"
Traceback (most recent call last):
  File "<interactive input>", line 1, in ?
Exception: Attribute 'fruit' has no value 'melon'
</xmp>

<p>When comparing values of different nominal attributes, Orange tries converting string representations from one attribute to another. Let us have a three- and a four-valued attribute.</p>
<xmp class="code">>>> deg3 = orange.EnumVariable("deg3", values=["little", "medium", "big"])
>>> deg4 = orange.EnumVariable("deg4", values=["tiny", "little", "big", "huge"])
>>> val3 = orange.Value(deg3)
>>> val4 = orange.Value(deg4)
</xmp>

<p>When both attributes have the same value, such as "little" or "big", there's no problem. A more interesting case is</p>
<xmp class="code">val3.value = "medium"
val4.value = "little"
</xmp>
<p>The values can be compared since it is known (from deg3) that "little" is less than "medium". But what about the following:</p>
<xmp class="code">val3.value = "medium"
val4.value = "huge"
</xmp>
<p><code>Medium</code> and <code>huge</code> can't be compared since they don't (both) appear in the same attribute. (There is a way: from attribute <code>deg4</code> we see that "huge" is bigger than "big", which is in turn bigger than <code>medium</code> (from <code>deg3</code>). But Orange is not as smart as we.)</P>

<p>Orange requires that both attributes have the same ordering.</p>
<xmp class="code">>>> degb = orange.EnumVariable(values=["black", "white"])
>>> degd = orange.EnumVariable(values=["white", "black"])
>>> print orange.Value(degb, "white") == orange.Value(degd, "white")
1
>>> print orange.Value(degb, "black") < orange.Value(degd, "white")
Traceback (most recent call last):
  File "<interactive input>", line 1, in ?
TypeError: Value.compare: values are of different types and have different orders
</xmp>

<p>The first test succeeds. <code>White</code> equals <code>white</code> for both attributes. The second reports an error since the two attributes rank <code>black</code> and <code>white</code> differently.</p>
</BODY> 