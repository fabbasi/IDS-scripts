<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>
<h1>Removal of Unused Attribute Values</h1>
<index name="preprocessing+removal of unused values">

<P>It can often happen that the definition of a discrete attribute (<CODE>EnumVariable</CODE>) declares values that do not actually appear in the data, either originally or as a consequence of some preprocessing. Such anomalies are taken care of by class <CODE><INDEX name="classes/RemoveUnusedValues">RemoveUnusedValues</CODE> that, given an attribute and the data, determines whether there are any unused values and reduces the attribute if needed. There are four possible cases.

<UL>
<LI>The attribute does not have any used values in the data - value of this attribute is undefined for all examples. The attribute is thus useless and the class returns <CODE>None</CODE>.</LI>

<LI>The attribute has only one used value (or, possibly, only one value at all). Such an attribute is in fact useless, and can probably be removed without harm. Nevertheless, its fate is decided by the flag <CODE>removeOneValued</CODE> which is <CODE>False</CODE> by default, so such attributes are retained unless explicitly specified otherwise.</LI>

<LI>All attribute's values occur in the data (and the attribute it has more than one value; otherwise the above case applies). The original attribute is returned.</LI>

<LI>There are some unused values. A new attribute is constructed and the unused values are omitted. The value of the new attribute is computed automatically from the value of the original attribute (<A href="lookup.htm"><CODE>ClassifierByLookupTable1</CODE></a> is used for mapping).</LI>
</UL>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>removeOneValued</DT>
<DD>Decides whether to remove or to retain the attributes with only one value defined (default: <CODE>False</CODE>).</DD>
</DL>


<P>Let us show the use of the class on a simple dataset with three examples, given by the following tab-delimited file.</P>

<XMP CLASS=CODE>a       b      c         d         y
0 1     0 1 2  discrete  discrete  discrete
                                   class
0       0      ?         0         0
1       2      ?         0         0
0       0      ?         0         1
</XMP>

<P>The below script construct a list <CODE>newattrs</CODE> which contains either the original attribute, <CODE>None</CODE> or a reduced attribute, for each attribute from the original dataset.</P>

<p class="header">part of <A href="unusedValues.py">unusedValues.py</a>
(uses <a href="unusedValues.tab">unusedValues.tab</a>)</P>
<XMP class="code">import orange
data = orange.ExampleTable("unusedValues")

newattrs = [orange.RemoveUnusedValues(attr, data) for attr in data.domain.variables]

print
for attr in range(len(data.domain)):
    print data.domain[attr],
    if newattrs[attr] == data.domain[attr]:
        print "retained as is"
    elif newattrs[attr]:
        print "reduced, new values are", newattrs[attr].values
    else:
        print "removed"
</XMP>

<P>And here's the script's output.</P>
<XMP class="code">EnumVariable 'a' retained as is
EnumVariable 'b' reduced, new values are <0, 2>
EnumVariable 'c' removed
EnumVariable 'd' retained as is
EnumVariable 'y' retained as is
</xmp>

<P>Attributes <CODE>a</CODE> and <CODE>y</CODE> are OK and are left alone. In <CODE>b</CODE>, value 1 is not used and is removed (not in the original attribute, of course; a new attribute is created). <CODE>c</CODE> is useless and is removed altogether. <CODE>d</CODE> is retained since <CODE>removeOneValued</CODE> was left at <CODE>False</CODE>; if we set it to <CODE>True</CODE>, this attribute would be removed as well.</P>

<P>The values of the new attribute for <CODE>b</CODE> are automatically computed from the original. The script can thus proceed as follows.</P>

<p class="header">part of <A href="unusedValues.py">unusedValues.py</a>
(uses <a href="unusedValues.tab">unusedValues.tab</a>)</P>
<XMP class="code">filteredattrs = filter(bool, newattrs)
newdata = orange.ExampleTable(orange.Domain(filteredattrs), data)

print "\nOriginal example table"
for ex in data:
    print ex

print "\nReduced example table"
for ex in newdata:
    print ex
</XMP>

<P>List <CODE>newattrs</CODE> includes some original attributes (<CODE>a</CODE>, <CODE>d</CODE> and <CODE>y</CODE>) a new attribute (<CODE>b</CODE>) and a <CODE>None</CODE> (for <CODE>c</CODE>). The latter is removed by <CODE>filter</CODE> called at the beginning of the script. We use <CODE>filteredattrs</CODE> to construct a new domain and then convert the original <CODE>data</CODE> to <CODE>newdata</CODE>. As the output shows, the two tables are the same except for the removed attribute <CODE>c</CODE>.</P>

<XMP class="code">Original example table
['0', '0', '?', '0', '0']
['1', '2', '?', '0', '0']
['0', '0', '?', '0', '1']

Reduced example table
['0', '0', '0', '0']
['1', '2', '0', '0']
['0', '0', '0', '1']
</XMP>

</BODY></HTML> 