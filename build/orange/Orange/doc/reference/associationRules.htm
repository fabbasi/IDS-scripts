<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>

<index name="Agrawal's algorithm">
<index name="association rules"><H1>Association Rules</H1>

<P>Orange provides two algorithms for induction of association
rules. One is the basic Agrawal's algorithm with dynamic induction of
supported itemsets and rules that is designed specifically for
datasets with a large number of different items. This is, however, not
really suitable for attribute-based machine learning problems, which
are at the primary focus of Orange. We have thus adapted the original
algorithm to be more efficient for the latter type of data, and to
induce the rules in which, for contrast to Agrawal's rules, both sides
don't only contain attributes (like "bread, butter -> jam") but also
their values ("bread = wheat, butter = yes -> jam = plum"). As a
further variation, the algorithm can be limited to search only for
classification rules in which the sole attribute to appear on the
right side of the rule is the class attribute.</P>

<p>It is also possible to extract item sets instead of association rules. These are often more interesting than the rules themselves.</p>

<P>Besides association rule inducer, Orange also provides a rather
simplified method for classification by association rules.</P>

<HR>

<H2>Association Rules Inducer with Agrawal's Algorithm</H2>
<index name="classes/AssociationRulesSparseInducer">

<P>The class that induces rules by Agrawal's algorithm, <CODE></CODE> accepts the data examples of two forms. The first is the standard form in which each examples is described by values of a fixed list of attributes, defined in domain. The algorithm, however, disregards the attribute values but only checks whether the value is defined or not. The rule shown above, "bread, butter -> jam" actually means that if "bread" and "butter" are defined, then "jam" is defined as well. It is expected that most of values will be undefined - if this is not so, you need to use the other association rules inducer, described in the next chapter.</P>

<P>Since the usual representation of examples described above is rather unsuitable for sparse examples, <CODE>AssociationRulesSparseInducer</CODE> can also use examples represented a bit differently. <EM>Sparse examples</EM> have no fixed attributes - the examples' domain is empty, there are neither ordinary nor class attributes. All values assigned to example are given as meta-attributes. All meta-attributes need, however, be <A href="Domain.htm#meta-attributes">registered with the domain descriptor</A>. If you have data of this kind, the most suitable format for it is the <A href="fileformats.htm#basket">.basket format</A>.</P>

<P>In both cases, the examples are first translated into an internal <CODE>AssociationRulesSparseInducer</CODE>'s internal format for sparse datasets. The algorithm first dynamically builds all itemsets (sets of attributes) that have at least the prescribed support. Each of these is then used to derive rules with requested confidence.</P>

<P>If examples were given in the sparse form, so are the left and right side of the induced rules. If examples were given in the standard form, so are the examples in association rules.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>support</DT>
<DD>Minimal support for the rule.</DD>

<DT>confidence</DT>
<DD>Minimal confidence for the rule.</DD>

<DT>storeExamples</DT>
<DD>Tells the inducer to store the examples covered by each rule and those confirming it</DD>

<DT>maxItemSets</DT>
<DD>The maximal number of itemsets.</DD>
</DL>

<P>The last attribute deserves some explanation. The algorithm's running time (and its memory consumption) depends on the minimal support; the lower the requested support, the more eligible itemsets will be found. There is no general rule for knowing the itemset in advance (generally, value should be around 0.3, but this depends upon the number of different items, the diversity of examples...) so it's very easy to set the limit too low. In this case, the algorithm can induce hundreds of thousands of itemsets until it runs out of memory. To prevent this, it will stop inducing itemsets and report an error when the prescribed maximum <CODE>maxItemSets</CODE> is exceeded. In this case, you should increase the required support. On the other hand, you can (reasonably) increase the <CODE>maxItemSets</CODE> to as high as you computer is able to handle.</P>

<P>We shall test the rule inducer on a dataset consisting of a brief description of Spanish Inquisition, given by Palin <EM>et al</EM>:</P>

<BLOCKQUOTE>
NOBODY expects the Spanish Inquisition! Our chief weapon is surprise...surprise and fear...fear and surprise.... Our two weapons are fear and surprise...and ruthless efficiency.... Our *three* weapons are fear, surprise, and ruthless efficiency...and an almost fanatical devotion to the Pope.... Our *four*...no... *Amongst* our weapons.... Amongst our weaponry...are such elements as fear, surprise.... I'll come in again.</BLOCKQUOTE>
<BLOCKQUOTE>
NOBODY expects the Spanish Inquisition! Amongst our weaponry are such diverse elements as: fear, surprise, ruthless efficiency, an almost fanatical devotion to the Pope, and nice red uniforms - Oh damn!
</BLOCKQUOTE>
</P>

<P>The text needs to be cleaned of punctuation marks and capital letters at beginnings of the sentences, each sentence needs to be put in a new line and commas need to be inserted between the words. The first three lines thus become:
<p class="header"><a href="inquisition.basket">part of inquisition.basket</a></p>
<XMP class=code>nobody, expects, the, Spanish, Inquisition
our, chief, weapon, is, surprise, surprise, and, fear,fear, and, surprise
our, two, weapons, are, fear, and, surprise, and, ruthless, efficiency
</XMP>

<P>Inducing the rules is trivial.</P>

<p class="header"><a href="assoc-agrawal.py">assoc-agrawal.py</a>
(uses <a href="inquisition.basket">inquisition.basket</a>)</p>
<XMP class="code">import orange
data = orange.ExampleTable("inquisition")

rules = orange.AssociationRulesSparseInducer(data, support = 0.5)

print "%5s   %5s" % ("supp", "conf")
for r in rules:
    print "%5.3f   %5.3f   %s" % (r.support, r.confidence, r)
</XMP>

<P>The induced rules are surprisingly fear-full.</P>

<XMP class=code>0.500   1.000   fear -> surprise
0.500   1.000   surprise -> fear
0.500   1.000   fear -> surprise our
0.500   1.000   fear surprise -> our
0.500   1.000   fear our -> surprise
0.500   1.000   surprise -> fear our
0.500   1.000   surprise our -> fear
0.500   0.714   our -> fear surprise
0.500   1.000   fear -> our
0.500   0.714   our -> fear
0.500   1.000   surprise -> our
0.500   0.714   our -> surprise
</XMP>

<P>If examples are weighted, weight can be passed as an additional argument to call operator.</P>

<p>To get only a list of supported item sets, one should call the method <code>getItemsets</code>. The result
is a list whose elements are tuples with two elements. The first is a tuple with indices of attributes in the item set. Sparse examples are usually represented with meta attributes, so this indices will be negative. The second element is a list of indices supporting the item set, that is, containing all the items in the set. If <code>storeExamples</code> is <code>False</code>, the second element is <code>None</code>.</p>

<p class="header"><a href="assoc-agrawal.py">assoc-agrawal.py</a>
(uses <a href="inquisition.basket">inquisition.basket</a>)</p>
<XMP class="code">inducer = orange.AssociationRulesSparseInducer(support = 0.5, storeExamples = True)
itemsets = inducer.getItemsets(data)
</XMP>

<p>Now <code>itemsets</code> is a list of itemsets along with the examples supporting them since we set <code>storeExamples</code> to <code>True</code>.</p>

<xmp class="code">>>> itemsets[5]
((-11, -7), [1, 2, 3, 6, 9])
>>> [data.domain[i].name for i in itemsets[5][0]]
['surprise', 'our']
</xmp>

<p>The sixth itemset contains attributes with indices -11 and -7, that is, the words "surprise" and "our". The examples supporting it are those with indices 1,2, 3, 6 and 9.</p>

<p>This way of representing the itemsets is not very programmer-friendly, but it is much more memory efficient than and faster to work with than using objects like Variable and Example.</p>



<H2>Association Rules for Non-sparse Examples</H2>

<P>The other algorithm for association rules provided by Orange,
<CODE><index name="classes/AssociationRulesInducer">AssociationRulesInducer</CODE> is optimized for non-sparse
examples in the usual Orange form. Each example is described by values
of a fixed set of attributes. Unknown values are ignored, while values
of attributes are not (as opposite to the above-described algorithm
for sparse rules). In addition, the algorithm can be directed to
search only for classification rules, in which the only attribute on
the right-hand side is the class attribute.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>support</DT>
<DD>Minimal support for the rule.</DD>

<DT>confidence</DT>
<DD>Minimal confidence for the rule.</DD>

<DT>classificationRules</DT>
<DD>If 1 (default is 0), the algorithm constructs classification rules instead of general association rules.</DD>

<DT>storeExamples</DT>
<DD>Tells the inducer to store the examples covered by each rule and those confirming it</DD>

<DT>maxItemSets</DT>
<DD>The maximal number of itemsets.</DD>
</DL>

<P>Meaning of all attributes (except the new one,
<CODE>classificationRules</CODE>) is the same as for
<CODE>AssociationRulesSparseInducer</CODE>. See the description of
<CODE>maxItemSet</CODE> there.</P>

<p class="header"><a href="assoc-agrawal.py">assoc.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class="code">import orange

data = orange.ExampleTable("lenses")

print "\nAssociation rules"
rules = orange.AssociationRulesInducer(data, supp = 0.5)
for r in rules:
    print "%5.3f  %5.3f  %s" % (r.support, r.confidence, r)
</XMP>

<P>The found rules are</P>
<XMP class=code>0.333  0.533  lenses=none -> prescription=hypermetrope
0.333  0.667  prescription=hypermetrope -> lenses=none
0.333  0.533  lenses=none -> astigmatic=yes
0.333  0.667  astigmatic=yes -> lenses=none
0.500  0.800  lenses=none -> tear_rate=reduced
0.500  1.000  tear_rate=reduced -> lenses=none
</XMP>

<P>To limit the algorithm to classification rules, set <CODE>classificationRules</CODE> to 1.</P>

<p class="header"><a href="assoc-agrawal.py">part of assoc.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class="code">print "\nClassification rules"
rules = orange.AssociationRulesInducer(data, supp = 0.3, classificationRules = 1)
for r in rules:
    print "%5.3f  %5.3f  %s" % (r.support, r.confidence, r)
</XMP>

<P>The found rules are, naturally, a subset of the above rules.</P>

<p class="header"><a href="assoc-agrawal.py">part of assoc.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class="code">0.333  0.667  prescription=hypermetrope -> lenses=none
0.333  0.667  astigmatic=yes -> lenses=none
0.500  1.000  tear_rate=reduced -> lenses=none
</XMP>

<P><CODE>AssociationRulesInducer</CODE> can also work with weighted examples; the ID of weight attribute should be passed as an additional argument in a call.</P>

<p>Itemsets are induced in a similar fashion as for sparse data, except that the first element of the tuple, the item set, is represented not by indices of attributes, as before, but with tuples (attribute-index, value-index).</p>

<p class="header"><a href="assoc-agrawal.py">part of assoc.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<xmp class="code">inducer = orange.AssociationRulesInducer(support = 0.3, storeExamples = True)
itemsets = inducer.getItemsets(data)
print itemsets[8]</xmp>

<p>This prints out
<xmp class="code">(((2, 1), (4, 0)), [2, 6, 10, 14, 15, 18, 22, 23])</xmp>
meaning that the ninth itemset contains the second value of the third attribute, (2, 1), and the first value of the fifth, (4, 0).</p>

<H2>Association Rule</H2>
<index name="classes/AssociationRules">
<index name="classes/AssociationRule">

<P>Both classes for induction of association rules return the induced rules in <CODE><index name="classes/AssociationRules">AssociationRules</CODE> which is basically a list of instances of <CODE>AssociationRule</CODE>.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>left, right</DT>
<DD>The left and the right side of the rule. Both are given as <CODE>Example</CODE>. In rules created by <CODE>AssociationRulesSparseInducer</CODE> from examples that contain all values as meta-values, <CODE>left</CODE> and <CODE>right</CODE> are examples in the same form. Otherwise, values in <CODE>left</CODE> that do not appear in the rule are don't care, and value in <CODE>right</CODE> are don't know. Both can, however, be tested by <CODE>isSpecial</CODE> (see documentation on <A href="Value.htm">Value</A>).</DD>

<DT>nLeft, nRight</DT>
<DD>The number of attributes (ie defined values) on the left and on the right side of the rule.</DD>

<DT>nAppliesLeft, nAppliesRight, nAppliesBoth</DT>
<DD>The number of (learning) examples that conform to the left, the right and to both sides of the rule.</DD>

<DT>nExamples</DT>
<DD>The total number of learning examples.</DD>

<DT>support</DT><DD><CODE>nAppliesBoth/nExamples</CODE></DD>
<DT>confidence</DT><DD><CODE>nAppliesBoth/nAppliesLeft</CODE></DD>
<DT>coverage</DT><DD><CODE>nAppliesLeft/nExamples</CODE></DD>
<DT>strength</DT><DD><CODE>nAppliesRight/nAppliesLeft</CODE></DD>
<DT>lift</DT><DD><CODE>nExamples * nAppliesBoth / (nAppliesLeft * nAppliesRight)</CODE></DD>
<DT>leverage</DT><DD><CODE>(nAppliesBoth * nExamples - nAppliesLeft * nAppliesRight)</CODE></DD>

<dt>examples, matchLeft, matchBoth</dt>
<dd>If <code>storeExamples</code> was <code>True</code> during induction, <code>examples</code> contains a copy of the example table used to induce the rules. Attributes <code>matchLeft</code> and <code>matchBoth</code> are lists of integers, representing the indices of examples which match the left-hand side of the rule and both sides, respectively.</dd>
</DL>

<P class=section>Methods</P>
<DL class=attributes>
<DT>AssociationRule(left, right, nAppliesLeft, nAppliesRight, nAppliesBoth, nExamples)</DT>
<DD>Constructs an association rule and computes all measures listed above.</DD>

<DT>AssociationRule(left, right, support, confidence]])</DT>
<DD>Construct association rule and sets its support and confidence. If you intend to pass such a rule to someone that expects more things to be set, you should set the manually - <CODE>AssociationRules</CODE>'s constructor cannot compute anything from these two arguments.
</DD>

<DT>AssociationRule(rule)</DT>
<DD>Given an association rules as the argument, constructor copies the rule into a new rule.</DD>

<DT>appliesLeft(example), appliesRight(example), appliesBoth(example)</DT>
<DD>Tells whether the example fits into the left, right and both sides of the rule, respectively. If the rule is represented by sparse examples, the given example must be sparse as well.</DD>
</DL>

<P>Association rule inducers do not store evidence about which example supports which rule (although this is available during induction, the information is discarded afterwards). Let us write a function that find the examples that confirm the rule (ie fit both sides of it) and those that contradict it (fit the left-hand side but not the right).</P>

<p class="header"><a href="assoc-rule.py">assoc-rule.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class=code>import orange

data = orange.ExampleTable("lenses")

rules = orange.AssociationRulesInducer(data, supp = 0.3)
rule = rules[0]

print
print "Rule: ", rule
print

print "Supporting examples:"
for example in data:
    if rule.appliesBoth(example):
        print example
print

print "Contradicting examples:"
for example in data:
    if rule.appliesLeft(example) and not rule.appliesRight(example):
        print example
print
</XMP>

<p>The latter printouts get simpler and (way!) faster if we instruct the inducer to store the examples. We can then do, for instance, this.</p>


(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class=code>print "Match left: "
print "\n".join(str(rule.examples[i]) for i in rule.matchLeft)
print "\nMatch both: "
print "\n".join(str(rule.examples[i]) for i in rule.matchBoth)
</XMP>

<p>The "contradicting" examples are then those whose indices are find in <code>matchLeft</code> but not in <code>matchBoth</code>. The memory friendlier and the faster ways to compute this are as follows.</p>

<xmp class="code">>>> [x for x in rule.matchLeft if not x in rule.matchBoth]
[0, 2, 8, 10, 16, 17, 18]
>>> set(rule.matchLeft) - set(rule.matchBoth)
set([0, 2, 8, 10, 16, 17, 18])</xmp>

</BODY> 