<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>

<index name="preprocessing+discretization">
<H1>Discretization</H1>

<HR>

<P>Example-based automatic discretization is in essence similar to learning: given a set of examples, discretization method proposes a list of suitable intervals to cut the attribute's values into. For this reason, Orange structures for discretization resemble its structures for learning. Objects derived from <CODE>orange.Discretization</CODE> play a role of "learner" that, upon observing the examples, construct an <CODE>orange.Discretizer</CODE> whose role is to convert continuous values into discrete according to the rule found by <CODE>Discretization</CODE>.</P>

<P>Orange core now supports several methods of discretization; here's a list of methods with belonging classes.</P>

<!--
<TABLE cellspacing=4pt>
<TR valign=top>
<TD nowrap><B>Equi-distant discretization</B><BR>
<CODE>EquiDistDiscretization<CODE><BR>
<CODE>EquiDiscDiscretizer<CODE></TD>

<TD>The range of attribute's values is split into prescribed number equal-sized intervals.</TD>
</TR>

<TR valign=top>
<TD nowrap><B>Quantile discretization</B><BR>
<CODE>EquiNDiscretization<CODE><BR>
<CODE>IntervalDiscretizer<CODE></TD>

<TD>The range is split into intervals containing equal number of examples.</TD>
</TR>

<TR valign=top>
<TD nowrap><B>Entropy-based discretization</B><BR>
<CODE>EntropyDiscretization<CODE><BR>
<CODE>IntervalDiscretizer<CODE></TD>

<TD>Developed by Fayyad and Irani, this method balances between entropy in intervals and MDL of discretization.</TD>
</TR>


<TR valign=top>
<TD nowrap><B>Bi-modal discretization</B><BR>
<CODE>BiModalDiscretization<CODE><BR>
<CODE>IntervalDiscretizer<CODE><BR>
or <CODE>BiModalDiscretizer</CODE></TD>

<TD>Two cut-off points set to optimize the difference of the distribution in the middle interval and the distributions outside it.</TD>
</TR>


<TR valign=top>
<TD nowrap><B>Fixed discretization</B><BR>
<CODE>FixedDiscretization<CODE><BR>
<CODE>IntervalDiscretizer<CODE></TD>

<TD>Discretization with user-prescribed cut-off points.</TD>
</TR>
</TABLE>
-->

<DL>
<DT><B>Equi-distant discretization (<CODE>EquiDistDiscretization</CODE>,
<CODE>EquiDistDiscretizer</CODE>)</B></DT>
<DD>The range of attribute's values is split into prescribed number equal-sized intervals.<P></DD>

<DT><B>Quantile-based discretization
(<CODE>EquiNDiscretization</CODE>,
<CODE>IntervalDiscretizer</CODE>)</B></DT> <DD>The range is split into
intervals containing equal number of examples.<P></DD>

<DT><B>Entropy-based discretization (<CODE>EntropyDiscretization</CODE>,
<CODE>IntervalDiscretizer</CODE>)</B></DT>
<DD>Developed by Fayyad and Irani, this method balances between entropy in intervals and MDL of discretization.<P></DD>

<DT><B>Bi-modal discretization (<CODE>BiModalDiscretization</CODE>,
<CODE>BiModalDiscretizer</CODE>/<CODE>IntervalDiscretizer</CODE>)</B></DT>
<DD>Two cut-off points set to optimize the difference of the distribution in the middle interval and the distributions outside it.<P></DD>

<DT><B>Fixed discretization (<CODE>FixedDiscretization</CODE>,
<CODE>IntervalDiscretizer</CODE>)</B></DT>
<DD>Discretization with user-prescribed cut-off points.</DD>
</DL>

<HR>

<H2>General Schema</H2>

<P>Instances of classes derived from <CODE>orange.<INDEX name="classes/Discretization">Discretization</INDEX></CODE> define a single method: the call operator. The object can also be called through constructor.</P>

<DL class=attributes>
<DT>__call__(attribute, examples[, weightID])</DT>
<DD>Given a continuous <CODE>attribute</CODE>, examples and, optionally id of attribute with example weight, this function returns a discretized attribute. Argument <CODE>attribute</CODE> can be a descriptor, index or name of the attribute.</DD>
</DL>

<P>Here's an example.</P>

<p class="header"><a href="discretization.py">part of discretization.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class="code">
import orange
data = orange.ExampleTable("iris")

sep_w = orange.EntropyDiscretization("sepal width", data)

data2 = data.select([data.domain["sepal width"], sep_w, data.domain.classVar])

for ex in data2[:10]:
    print ex
</XMP>

<P>The discretized attribute <CODE>sep_w</CODE> is constructed with a call to <CODE>EntropyDiscretization</CODE> (instead of constructing it and calling it afterwards, we passed the arguments for calling to the constructor, as is often allowed in Orange). We then constructed a new <CODE>ExampleTable</CODE> with attributes "sepal width" (the original continuous attribute), <CODE>sep_w</CODE> and the class attribute. Script output is:</p>

<XMP class=code>
[3.500000, '>3.30', 'Iris-setosa']
[3.000000, '(2.90, 3.30]', 'Iris-setosa']
[3.200000, '(2.90, 3.30]', 'Iris-setosa']
[3.100000, '(2.90, 3.30]', 'Iris-setosa']
[3.600000, '>3.30', 'Iris-setosa']
[3.900000, '>3.30', 'Iris-setosa']
[3.400000, '>3.30', 'Iris-setosa']
[3.400000, '>3.30', 'Iris-setosa']
[2.900000, '<2.90', 'Iris-setosa']
[3.100000, '(2.90, 3.30]', 'Iris-setosa']
</XMP>

<P><CODE>EntropyDiscretization</CODE> named the new attribute's values by the interval range (it also named the attribute as "D_sepal width"). The new attribute's values get computed automatically when they are needed.</P>

<P>As those that have read about <A href="Variable.htm#getValueFrom"><CODE>Variable</CODE></A> know, the answer to "How this works?" is hidden in the attribute's field <CODE>getValueFrom</CODE>. This little dialog reveals the secret.</P>

<XML class=code>
>>> sep_w
EnumVariable 'D_sepal width'
>>> sep_w.getValueFrom
<ClassifierFromVar instance at 0x01BA7DC0>
>>> sep_w.getValueFrom.whichVar
FloatVariable 'sepal width'
>>> sep_w.getValueFrom.transformer
<IntervalDiscretizer instance at 0x01BA2100>
>>> sep_w.getValueFrom.transformer.points
<2.90000009537, 3.29999995232>
</XML>

<P>So, the <CODE>select</CODE> statement in the above example converted all examples from <CODE>data</CODE> to the new domain. Since the new domain includes the attribute <CODE>sep_w</CODE> that is not present in the original, <CODE>sep_w</CODE>'s values are computed on the fly. For each example in <CODE>data</CODE>, <CODE>sep_w.getValueFrom</CODE> is called to compute <CODE>sep_w</CODE>'s value (if you ever need to call <CODE>getValueFrom</CODE>, you shouldn't call <CODE>getValueFrom</CODE> directly but call <CODE>computeValue</CODE> instead). <CODE>sep_w.getValueFrom</CODE> looks for value of "sepal width" in the original example. The original, continuous sepal width is passed to the <CODE>transformer</CODE> that determines the interval by its field <CODE>points</CODE>. Transformer returns the discrete value which is in turn returned by <CODE>getValueFrom</CODE> and stored in the new example.</P>

<P>You don't need to understand this mechanism exactly. It's important to know that there are two classes of objects for discretization. Those derived from <CODE>Discretizer</CODE> (such as <CODE>IntervalDiscretizer</CODE> that we've seen above) are used as transformers that translate continuous value into discrete. Discretization algorithms are derived from <CODE>Discretization</CODE>. Their job is to construct a <CODE>Discretizer</CODE> and return a new variable with the discretizer stored in <CODE>getValueFrom.transformer</CODE>.</p>

<HR>

<H2>Discretizers</H2>

<P>Different discretizers support different methods for conversion of continuous values into discrete. The most general is <CODE>IntervalDiscretizer</CODE> that is also used by most discretization methods. Two other discretizers, <CODE>EquiDistDiscretizer</CODE> and <CODE>ThresholdDiscretizer</CODE> could easily be replaced by <CODE>IntervalDiscretizer</CODE> but are used for speed and simplicity. The fourth discretizer, <CODE>BiModalDiscretizer</CODE> is specialized for discretizations induced by <CODE>BiModalDiscretization</CODE>.</P>

<P>All discretizers support a handy method for construction of a new attribute from an existing one.</P>

<P class=section>Methods</P>
<DL class=attributes>
<DT>constructVariable(attribute)</DT>
<DD>Constructs a new attribute descriptor; the new attribute is discretized <CODE>attribute</CODE>. The new attribute's name equal <CODE>attribute.name</CODE> prefixed by "D_", and its symbolic values are discretizer specific. The above example shows what comes out form <CODE>IntervalDiscretizer</CODE>. Discretization algorithms actually first construct a discretizer and then call its <CODE>constructVariable</CODE> to construct an attribute descriptor.</DD>
</DL>

<P>An example of how this method is used is shown in the following section about <CODE>IntervalDiscretizer</CODE>.


<H3>IntervalDiscretizer</H3>
<index name="classes/IntervalDiscretizer">

<P><CODE>IntervalDiscretizer</CODE> is the most common discretizer. It made its first appearance in the example about general discretization schema and you will see more of it later. It has a single interesting attribute.</p>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>points</DT>
<DD>Cut-off points. All values below or equal to the first point belong to the first interval, those between the first and the second (including those equal to the second) go to the second interval and so forth to the last interval which covers all values greater than the last element in <CODE>points</CODE>. The number of intervals is thus <CODE>len(points)+1</CODE>.</DD>
</DL>

<P>Let us manually construct an interval discretizer with cut-off points at 3.0 and 5.0. We shall use the discretizer to construct a discretized sepal length.</P>

<p class="header"><a href="discretization.py">part of discretization.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code>idisc = orange.IntervalDiscretizer(points = [3.0, 5.0])
sep_l = idisc.constructVariable(data.domain["sepal length"])
data2 = data.select([data.domain["sepal length"], sep_l, data.domain.classVar])
</XMP>

<P>That's all. First five examples of <CODE>data2</CODE> are now</P>
<XMP class=code>[5.100000, '>5.00', 'Iris-setosa']
[4.900000, '(3.00, 5.00]', 'Iris-setosa']
[4.700000, '(3.00, 5.00]', 'Iris-setosa']
[4.600000, '(3.00, 5.00]', 'Iris-setosa']
[5.000000, '(3.00, 5.00]', 'Iris-setosa']
</XMP>

<P>Can you use the same discretizer for more than one attribute? Yes, as long as they have same cut-off points, of course. Simply call <CODE>constructVar</CODE> for each continuous attribute.</P>

<p class="header"><a href="discretization.py">part of discretization.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code>idisc = orange.IntervalDiscretizer(points = [3.0, 5.0])
newattrs = [idisc.constructVariable(attr) for attr in data.domain.attributes]
data2 = data.select(newattrs + [data.domain.classVar])
</XMP>

<P>Each attribute now has its own <CODE>ClassifierFromVar</CODE> in its <CODE>getValueFrom</CODE>, but all use the same <CODE>IntervalDiscretizer</CODE>, <CODE>idisc</CODE>. Changing an element of its <CODE>points</CODE> affect all attributes.</P>

<P><B>Do not change the length of <CODE>points</CODE> if the
discretizer is used by any attribute.</B> The length of
<CODE>points</CODE> should always match the number of values of the
attribute, which is determined by the length of the attribute's field
<CODE>values</CODE>. Therefore, if <CODE>attr</CODE> is a discretized
attribute, than <CODE>len(attr.values)</CODE> must equal
<CODE>len(attr.getValueFrom.transformer.points)+1</CODE>. It always
does, unless you deliberately change it. If the sizes don't match,
Orange will probably crash, and it will be entirely your fault.</P>

<H3>EquiDistDiscretizer</H3>
<index name="classes/EquiDistDiscretizer">

<P><CODE>EquiDistDiscretizer</CODE> is a bit faster but more rigid than <CODE>IntervalDiscretizer</CODE>: it uses intervals of fixed width.</CODE>

<P class=section>Attributes</p>
<DL class=attributes>
<DT>firstCut</DT>
<DD>The first cut-off point.</DD>
<DT>step</DT>
<DD>Width of intervals.</DD>
<DT>numberOfIntervals</DT>
<DD>Number of intervals.</DD>
<dt>points (read-only)</dt>
<dd>The cut-off points; this is not a real attribute although it behaves as one. Reading it constructs a list of cut-off points and returns it, but changing the list doesn't affect the discretizer - it's a separate list. This attribute is here only for to give the <code>EquiDistDiscretizer</code> the same interface as that of <code>IntervalDiscretizer</code>.</dd>
</DL>

<P>All values below <CODE>firstCut</CODE> belong to the first interval (including possible values smaller than <CODE>firstVal</CODE>. Otherwise, value <CODE>val</CODE>'s interval is <CODE>floor((val-firstVal)/step)</CODE>. If this is turns out to be greater or equal to <CODE>numberOfIntervals</CODE>, it is decreased to <CODE>numberOfIntervals-1</CODE>.</P>

<P>This discretizer is returned by <CODE>EquiDistDiscretization</CODE>; you can see an example in the corresponding section. You can also construct an <CODE>EquiDistDiscretization</CODE> manually and call its <CODE>constructVariable</CODE>, just as already shown for the <CODE>IntervalDiscretizer</CODE>.</P>


<H3>ThresholdDiscretizer</H3>
<index name="classes/ThresholdDiscretizer">

<P>Threshold discretizer converts continuous values into binary by comparing them with a threshold. This discretizer is actually not used by any discretization method, but you can use it for manual discretization. Orange needs this discretizer for binarization of continuous attributes in decision trees.</P>

<P class=section>Attributes</P>
<dl class=attributes</dl>
<DT>threshold</DT>
<DD>Threshold; values below or equal to the threshold belong to the first interval and those that are greater go to the second.</DD>
</DL>


<H3>BiModalDiscretizer</H3>
<index name="classes/BiModalDiscretizer">

<P>This discretizer is the first discretizer that couldn't be replaced by <CODE>IntervalDiscretizer</CODE>. It has two cut off points and values are discretized according to whether they belong to the middle region (which includes the lower but not the upper boundary) or not. The discretizer is returned by <CODE>ByModalDiscretization</CODE> if its field <CODE>splitInTwo</CODE> is <CODE>true</CODE> (which by default is); see an example there.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>low, high</DT>
<DD>Lower and upper boundary of the interval. The lower is included in the interval and the upper is not.</DD>
</DL>


<HR>

<H2>Discretization Algorithms</H2>

<H3>Discretization with Intervals of Equal Size</H3>
<index name="discretization/intervals with same width">
<index name="classes/EquiDistDiscretization">

<P><CODE>EquiDistDiscretization</CODE> discretizes the attribute by cutting it into the prescribed number of intervals of equal width. The examples are needed to determine the span of attribute values. The interval between the smallest and the largest is then cut into equal parts.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>numberOfIntervals</DT>
<DD>Number of intervals into which the attribute is to be discretized. Default value is 4.</DD>
</DL>

<P>For an example, we shall discretize all attributes of Iris dataset into 6 intervals. We shall construct an <CODE>ExampleTable</CODE> with discretized attributes and print description of the attributes.</P>

<XMP class=code>disc = orange.EquiDistDiscretization(numberOfIntervals = 6)
newattrs = [disc(attr, data) for attr in data.domain.attributes]
data2 = data.select(newattrs + [data.domain.classVar])

for attr in newattrs:
    print "%s: %s" % (attr.name, attr.values)
</XMP>

<P>Script's answer is</P>
<XMP class=code>D_sepal length: <<4.90, [4.90, 5.50), [5.50, 6.10), [6.10, 6.70), [6.70, 7.30), >7.30>
D_sepal width: <<2.40, [2.40, 2.80), [2.80, 3.20), [3.20, 3.60), [3.60, 4.00), >4.00>
D_petal length: <<1.98, [1.98, 2.96), [2.96, 3.94), [3.94, 4.92), [4.92, 5.90), >5.90>
D_petal width: <<0.50, [0.50, 0.90), [0.90, 1.30), [1.30, 1.70), [1.70, 2.10), >2.10>
</XMP>

<P>Any more decent ways for a script to find the interval boundaries than by
parsing the symbolic values? Sure, they are hidden in the discretizer, which is, as usual, stored in <CODE>attr.getValueFrom.transformer</CODE>.</P>

<P>Compare the following with the values above.</P>
<XMP class=code>>>> for attr in newattrs:
...    print "%s: first interval at %5.3f, step %5.3f" % \
...    (attr.name, attr.getValueFrom.transformer.firstCut, \
...    attr.getValueFrom.transformer.step)
D_sepal length: first interval at 4.900, step 0.600
D_sepal width: first interval at 2.400, step 0.400
D_petal length: first interval at 1.980, step 0.980
D_petal width: first interval at 0.500, step 0.400
</XMP>

<P>As all discretizers, <CODE>EquiDistDiscretizer</CODE> also has the method <CODE>constructVariable</CODE>. The following example discretizes all attributes into six equal intervals of width 1, the first interval

<XMP class=code>edisc = orange.EquiDistDiscretizer(firstVal = 2.0, step = 1.0, numberOfIntervals = 5)
newattrs = [edisc.constructVariable(attr) for attr in data.domain.attributes]
data2 = data.select(newattrs + [data.domain.classVar])
for ex in data2[:10]:
    print ex
</XMP>


<H3>Discretization with Intervals Containing (Approximately) Equal Number of Examples</H3>
<index name="discretization/quantiles-based">
<index name="classes/EquiNDiscretization">

<P><CODE>EquiNDiscretization</CODE> discretizes the attribute by cutting it into the prescribed number of intervals so that each of them contains equal number of examples. The examples are obviously needed for this discretization, too.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>numberOfIntervals</DT>
<DD>Number of intervals into which the attribute is to be discretized. Default value is 4.</DD>
</DL>

<P>The use of this discretization is equivalent to the above one, except that we use <code>EquiNDiscretization</code> instead of <code>EquiDistDiscretization</code>. The resulting discretizer is <code>IntervalDiscretizer</code>, hence it has <code>points</code> instead of <code>firstCut</code>/<code>step</code>/<code>numberOfIntervals</code>.</P>

<H3>Entropy-based Discretization</H3>
<index name="discretization/entropy-based (Fayyad-Irani)">
<index name="Fayyad-Irani discretization">
<index name="classes/EntropyDiscretization">

<P>Fayyad-Irani's discretization method works without a predefined number of intervals. Instead, it recursively splits intervals at the cut-off point that minimizes the entropy, until the entropy decrease is smaller than the increase of MDL induced by the new point.</P>

<P>An interesting thing about this discretization technique is that an attribute can be discretized into a single interval, if no suitable cut-off points are found. If this is the case, the attribute is rendered useless and can be removed. This discretization can therefore also serve for feature subset selection.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>forceAttribute</DT>
<DD>Forces the algorithm to induce at least one cut-off point, even when its information gain is lower than MDL (default: <CODE>false</CODE>).</DD>
</DL>

<p class="header"><a href="discretization.py">part of discretization.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class="code">entro = orange.EntropyDiscretization()
for attr in data.domain.attributes:
    disc = entro(attr, data)
    print "%s: %s" % (attr.name, disc.getValueFrom.transformer.points)
</XMP>

<P>The output shows that all attributes are discretized onto three intervals:</P>
<XMP class=code>sepal length: <5.5, 6.09999990463>
sepal width: <2.90000009537, 3.29999995232>
petal length: <1.89999997616, 4.69999980927>
petal width: <0.600000023842, 1.70000004768>
</XMP>


<H3>Bi-Modal Discretization</H3>
<index name="discretization/bi-modal">
<index name="classes/BiModalDiscretization">

<P><CODE>BiModalDiscretization</CODE> sets two cut-off points so that the class distribution of examples in between is as different from the overall distribution as possible. The difference is measure by chi-square statistics. All possible cut-off points are tried, thus the discretization runs in O(n<SUP>2</SUP>).</P>

<P>This discretization method is especially suitable for the attributes in which the middle region corresponds to normal and the outer regions to abnormal values of the attribute. Depending on the nature of the attribute, we can treat the lower and higher values separately, thus discretizing the attribute into three intervals, or together, in a binary attribute whose values correspond to normal and abnormal.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>splitInTwo</DT>
<DD>Decides whether the resulting attribute should have three or two. If <CODE>true</CODE> (default), we have three intervals and the discretizer is of type <CODE>BiModalDiscretizer</CODE>. If <CODE>false</CODE> the result is the ordinary <CODE>IntervalDiscretizer</CODE>.</DD>
</DL>

<P>Iris dataset has three-valued class attribute, classes are setosa, virginica and versicolor. As the picture below shows, sepal lenghts of versicolors are between lengths of setosas and virginicas (the picture itself is drawn using LOESS probability estimation, see documentation on <a href="BayesLearner.htm">naive Bayesian learner</a>.</P>

<CENTER><IMG src="bayes-iris.gif"></center>

<P>If we merge classes setosa and virginica into one, we can observe whether the bi-modal discretization would correctly recognize the interval in which versicolors dominate.</P>

<XMP class=code>newclass = orange.EnumVariable("is versicolor", values = ["no", "yes"])
newclass.getValueFrom = lambda ex, w: ex["iris"]=="Iris-versicolor"
newdomain = orange.Domain(data.domain.attributes, newclass)
data_v = orange.ExampleTable(newdomain, data)
</XMP>

<P>In this script, we have constructed a new class attribute which tells whether an iris is versicolor or not. We have told how this attribute's value is computed from the original class value with a simple lambda function. Finally, we have constructed a new domain and converted the examples. Now for discretization.</P>

<XMP class=code>for attr in data_v.domain.attributes:
    disc = bimod(attr, data_v)
    print "%s: (%5.3f, %5.3f)" % (attr.name, \
          disc.getValueFrom.transformer.low, \
          disc.getValueFrom.transformer.high)
</XMP>

<P>Script prints out the middle intervals:</P>
<XMP class=code>
Bi-Modal discretization
sepal length: (5.400, 6.200]
sepal width: (2.000, 2.900]
petal length: (1.900, 4.700]
petal width: (0.600, 1.600]
</XMP>

<P>Judging by the graph, the cut-off points for "sepal length" make sense.</P>


<!--  I NEED TO THINK WHETHER THIS IS OBSOLETE OR NOT.
      ONE ARGUMENT AGAINST IS THAT WE DON'T WANT TO HAVE
      TOO MANY WAYS TO DO THE SAME THING. IT'S NOT IN
      THE SPIRIT OF PYTHON.
      (LET THE CLASS BE, BUT NOT EXPORTED?)

<H2>Discretization of Entire Dataset</H2>

<P>There are numerous ways for discretizing entire dataset. We have done it routinely in the above examples. There is a <a href="preprocessing.htm">preprocessor</a> for that. There's module <a href="../modules/orngDisc.htm">orngDisc</a>. The class that is most closely associated with discretization classes is <CODE>DomainDiscretization</CODE>.</P>

<P><CODE>DomainDiscretization</CODE> is an object whom we set a discretization algorithm as a property. <CODE>DomainDiscretization</CODE> can be called with examples (and weights, optionally) as an argument, and returns a discretized domain. What we gain in comparison with we did above and what some other methods do, is that <CODE>DomainDiscretization</CODE> can speed-up the process by optimization tricks that depend on the type of discretization.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>discretization</DT>
<DD>A discretization method; use one of the above classes, such as <CODE>EntropyDiscretization</CODE> or <CODE>EquiDistDiscretization</CODE>.</DD>
</DL>

-->

</BODY> 