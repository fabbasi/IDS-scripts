<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>
<index name="distances between examples">
<h1>Distances between Examples</h1>

<p>This page describes a bunch of classes for different metrics for measure distances between examples.</p>

<P>Typical (although not all) measures of distance between examples require some "learning" - adjusting the measure to the data. For instance, when the dataset contains continuous attributes, the distances between continuous values should be normalized, e.g. by dividing the distance with the range of possible values or with some interquartile distance to ensure that all attributes have, in principle, similar impacts.</P>

<P>Different measures of distance thus appear in pairs - a class that measures the distance and a class that constructs it based on the data. The abstract classes representing such a pair are <CODE>ExamplesDistance</CODE> and <CODE>ExamplesDistanceConstructor</CODE>. Since most measures work on normalized distances between corresponding attributes, there is an abstract intermediate class <CODE>ExamplesDistance_Normalized</CODE> that takes care of normalizing. The remaining classes correspond to different ways of defining the distances, such as Manhattan or Euclidean distance.</P>

<P>Unknown values are treated correctly only by Euclidean and Relief distance. For other measure of distance, a distance between unknown and known or between two unknown values is always 0.5.</P>

<hr>

<H2>ExamplesDistance</H2>
<index name="classes/ExamplesDistance">

<P class=section>Methods</P>
<DL class=attributes><DT>__call__(example1, example2)</DT>
<DD>Returns a distance between the given examples as floating point number.</DD>
</DL>


<H2>ExamplesDistanceConstructor</H2>
<index name="classes/ExamplesDistanceConstructor">

<P class=section>Methods</P>
<DL class=attributes><DT>__call__([examples, weightID][, DomainDistributions][, DomainBasicAttrStat])</DT>
<DD>Constructs an instance of <CODE>ExamplesDistance</CODE>. Not all the data needs to be given. Most measures can be constructed from <CODE>DomainBasicAttrStat</CODE>; if it is not given, they can help themselves either by <CODE>examples</CODE> or <CODE>DomainDistributions</CODE>. Some (e.g. <CODE>ExamplesDistance_Hamming)</CODE> even do not need any arguments.</DD>
</DL>

<H2>ExamplesDistance_Normalized</H2>
<index name="classes/ExamplesDistance_Normalized">

<P>This abstract class provides a function which is given two examples and returns a list of normalized distances between values of their attributes. Many distance measuring classes need such a function and are therefore derived from this class.</p>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>normalizers</DT>
<DD>A precomputed list of normalizing factors for attribute values:
<UL><LI>if a factor positive, differences in attribute's values are multiplied by it; for continuous attributes the factor would be 1/(max_value-min_value) and for ordinal attributes the factor is 1/number-of-values. If either (or both) of attributes are unknown, the distance is 0.5</LI>
<LI>if a factor is -1, the attribute is nominal; the distance between two values is 0 if they are same (or at least one is unknown) and 1 if they are different.</LI>
<LI>if a factor is 0, the attribute is ignored.</LI>
</UL>
</DD>

<DT>bases, averages, variances</DT>
<DD>The minimal values, averages and variances (continuous attributes only)</DD>

<DT>domainVersion</DT>
<DD>stores a domain version for which the normalizers were computed. The domain version is increased each time a domain description is changed (i.e. attributes are added or removed); this is used for a quick check that the user is not attempting to measure distances between examples that do not correspond to normalizers. Since domains are practicably immutable (especially from Python), you don't need to care about this anyway.</DD>
</DL>

<P class=section>Methods</P>
<DL class=attributes>
<DT>attributeDistances(example1, example2)</DT>
<DD>Returns a list of floats representing distances between pairs of attribute values of the two examples.</DD>
</DL>

<H2>ExamplesDistance_Hamming / ExamplesDistanceConstructor_Hamming</H2>
<index name="Hammming distance">
<index name="classes/ExamplesDistance_Hamming">
<index name="classes/ExamplesDistanceConstructor_Hamming">

<P>Hamming distance between two examples is defined as the number of attributes in which the two examples differ. Note that this measure is not really appropriate for examples that contain continuous attributes.</P>

<P>This class is derived directly from <CODE>ExamplesDistance</CODE>, not from <CODE>ExamplesDistance_Normalized</CODE>.</P>

<P><B>Note: in some previous versions of Orange, this distance was wrongly referred to as Hamiltonian, not Hamming.</B> This has been corrected <em>without</em> providing any aliases for backward compatibility.</P>


<H2>ExamplesDistance_Maximal / ExamplesDistanceConstructor_Maximal</H2>
<index name="classes/ExamplesDistance_Maximal">
<index name="classes/ExamplesDistanceConstructor_Maximal">

<P>The maximal (also called infinite distance) between two examples is defined as the maximal distance between two attribute values. If <CODE>dist</CODE> is the result of <CODE>ExamplesDistance_Normalized.attributeDistances</CODE>, then <CODE>ExamplesDistance_Maximal</CODE> returns <CODE>max(dist)</CODE>.</P>


<H2>ExamplesDistance_Manhattan / ExamplesDistanceConstructor_Manhattan</H2>
<index name="Manhattan distance">
<index name="classes/ExamplesDistance_Manhattan">
<index name="classes/ExamplesDistanceConstructor_Manhattan">

<P>Manhattan distance between two examples is a sum of absolute values of distances between pairs of attributes, e.g. <CODE>apply(add, [abs(x) for x in dist])</CODE>, where <CODE>dist</CODE> is the result of <CODE>ExamplesDistance_Normalized.attributeDistances</CODE>.</P>

<H2>ExamplesDistance_Euclidean / ExamplesDistanceConstructor_Euclidean</H2>
<index name="Euclidean distance">
<index name="classes/ExamplesDistance_Euclidean">
<index name="classes/ExamplesDistanceConstructor_Euclidean">

<P>Euclidean distance is a square root of sum of squared per-attribute distances, i.e. <CODE>sqrt(apply(add, [x*x for x in dist]))</CODE>, where <CODE>dist</CODE> is the result of <CODE>ExamplesDistance_Normalized.attributeDistances</CODE>.</P>

<P class=section>Methods</P>
<DL class=attributes>
<DT>distributions</DT>
<DD>An object of type <CODE>DomainDistributions</CODE> that holds the distributions for all discrete attributes. This is needed to compute distances between known and unknown values.</DD>

<DT>bothSpecialDist</DT>
<DD>A list containing the distance between two unknown values for each discrete attribute.</DD>
</DL>
</P>

<P>This measure of distance deals with unknown values by computing the expected square of distance based on the distribution obtained from the "training" data. Squared distance between
<UL>
<LI>a known and unknown continuous attribute equals squared distance between the known and the average, plus variance</LI>
<LI>two unknown continuous attributes equals double variance</LI>
<LI>a known and unknown discrete attribute equals the probability that the unknown attribute has different value than the known (ie, 1 - probability of the known value)</LI>
<LI>two unknown discrete attributes equals the probability that two random chosen values are equal, which can be computed as 1 - sum of squares of probabilities.</LI>
</UL>

<P>Continuous cases can be handled by averages and variances inherited from <CODE>ExamplesDistance_normalized</CODE>. The data for discrete cases are stored in <CODE>distributions</CODE> (used for unknown vs. known value) and in <CODE>bothSpecial</CODE> (the precomputed distance between two unknown values).</P>

<P>See the output of <A href="examplesdistance-missing.py">examplesdistance-missing.py</A> for an example.</A>


<H2>ExampleDistance_Relief / ExampleDistanceConstructor_Relief</H2>
<index name="classes/ExamplesDistance_Relief">
<index name="classes/ExamplesDistanceConstructor_Relief">

<p><CODE>ExamplesDistance_Relief</CODE> is similar to Manhattan distance, but incorporates a more correct treatment of undefined values, which is used by ReliefF measure.</p>

<HR>

<H2>Example</H2>

<P>If attributes are discrete, <CODE>ExamplesDistance_Manhattan</CODE> basically counts the number of attributes in which two examples differ. It's therefore easily to "check" its results.</P>

<p class="header"><a href="examplesdistance.py">examplesdistance.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class=code>import orange

data = orange.ExampleTable("lenses")

distance = orange.ExamplesDistanceConstructor_Manhattan(data)

ref = data[0]
print "*** Reference example: ", ref
for ex in data:
    print ex, distance(ex, ref)
</XMP>

<P>The printout begins with:</P>

<XMP class=code>*** Reference example:  ['young', 'myope', 'no', 'reduced', 'none']
['young', 'myope', 'no', 'reduced', 'none'] 0.0
['young', 'myope', 'no', 'normal', 'soft'] 1.0
['young', 'myope', 'yes', 'reduced', 'none'] 1.0
['young', 'myope', 'yes', 'normal', 'hard'] 2.0
['young', 'hypermetrope', 'no', 'reduced', 'none'] 1.0
['young', 'hypermetrope', 'no', 'normal', 'soft'] 2.0
['young', 'hypermetrope', 'yes', 'reduced', 'none'] 2.0
['young', 'hypermetrope', 'yes', 'normal', 'hard'] 3.0
</XMP> 