<html> <HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
<body>

<h1>User defined output formats</h1>

<P>Orange provides a mechanism for specifying new output formats and to even modify the way that objects are printed out by default.</P>

<P>All classes derived from <CODE>Orange</CODE> define the following two output methods.</P>

<P class="section">Methods</P>
<DL class="attributes">
<DT>dump(format)</DT>
<DD>Returns the string that represents the object in the given <CODE>format</CODE>. For instance, to print a <CODE>classifier</CODE> in XML format, use
<XMP class=code>print classifier.dump("xml")
</XMP>
</DD>

<DT>write(format, file)</DT>
<DD>Writes the object to a file; <CODE>file</CODE> must be an opened file.</DD>
</DL>

<P>Which are the supported formats? Well ... none - by default. And that's what's great about this: you may specify new output formats, write the corresponding functions and register them. Or let others do it for you. For instance, one can program a module containing functions for representing various classes in XML format and register them correspondingly.</P>

<P>There are two functions that deal with output registration.</P>

<P class="section">Functions</P>
<DL class="attributes">
<DT>orange.setoutput(class, format, function)</DT>
<DD>Sets the function for printing the instances of <CODE>class</CODE> in the given <CODE>format</CODE>. <CODE>class</CODE> can be any Orange class; defining output for some format naturally defines it for the subclasses as well (unless it is overloaded). <CODE>function</CODE> must accept a single argument - an instance of <CODE>class</CODE> and return a string with the instance's representation in the given format. <CODE>format</CODE> can be any string; use format names such as "ps", "xml", "ascii"...</DD>

<DT>orange.removeoutput(class, format)</DT>
<DD>Removes the output format for the class.</DD>
</DL>

<P>Output can only be redefined for classes derived from class <CODE>Orange</CODE>; the two classes that are not are <CODE>Value</CODE> and <CODE>Example</CODE>.</P>

<P>For example, here's a simple function for printing a contingency matrix in a tab-delimited format.</P>

<p class="header">part of <A href="output.py">output.py</a></p>
<XMP class=code>import orange

def printTabDelimContingency(c):
    if c.innerVariable.varType != orange.VarTypes.Discrete or \
       c.outerVariable.varType != orange.VarTypes.Discrete:
        raise "printTabDelimContingency can only handle discrete contingencies"

    res = ""
    for v in c.innerVariable.values:
        res += "\t%s" % v
    res += "\n"
    for i in range(len(c.outerVariable.values)):
        res += c.outerVariable.values[i]
        for v in c[i]:
            res += "\t%5.3f" % v
        res += "\n"
    return res
</XMP>


<P>To register the function with format "tab", we call <CODE>setoutput</CODE>.</P>

<XMP class=code>orange.setoutput(orange.Contingency, "tab", printTabDelimContingency)
</XMP>
</P>

<P>Let us now read some data, construct a contingency matrix and print it out.</P>

<p class="header">part of <A href="output.py">output.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>data = orange.ExampleTable("monk1")
cont = orange.ContingencyAttrClass("e", data)

print cont.dump("tab")
</XMP>

<P>Why is this useful? First, by using standard format names and supporting the format for various classes, you can arrange for a more systematic output. For instance, you can define some XML schema for various classifiers (or use a standard one, such as PMML), program the corresponding functions and set the outputs. Afterwards, you can call <CODE>classifier.write("xml", file)</CODE> for any type of <CODE>classifier</CODE> (as long as it supports xml output. You don't need to care about the type of the classifier.</P>

<P>The other reason is that this mechanism allows you to redefine the standard output. The formats for the standard output are "repr" (used by function <CODE>repr()</CODE> and by reverse quotes) and "str" (used by <CODE>str()</CODE> and the <CODE>print</CODE> statement). When objects are printed in interactive session, the former format is used. The format names are based on Python standard methods for converting values into strings). If you find these messy, always redefine both formats.</P>

<P>So, to make <CODE>print</CODE> call our output function, we set the output by</P>

<p class="header">part of <A href="output.py">output.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>orange.setoutput(orange.Contingency, "str", printTabDelimContingency)

print cont
</XMP> 