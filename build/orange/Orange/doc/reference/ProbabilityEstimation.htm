<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>
<h1>Classes for Probability Estimation</h1>
<index name="probability estimation">

<P>Probability estimators are general objects that compute probabilities of values.</P>

<P>There are two branches of probability estimators; those for unconditional and those for conditional probabilities. They are suited for <a href="BayesLearner.htm">naive Bayesian classification</a>, where the former are used to compute p(C) and the latter for p(C|v), where C is a class and v is an attribute value.</P>

<P>Since probability estimation is usually based on the data - learning examples, that is - the whole setup is done in orange way. As for learning, where you use a learner to construct a classifier, in probability estimation there are estimator constructors whose purpose is to construct probability estimators.</P>

<P>This page is divided into three sections. The first describes the basic classes, the second contains classes that are abstract or only support "real" estimators - you would seldom use these directly. The last section contains estimators and constructors that you would most often use. If you are not interested in too many details, you might want to skip the first two sections.</P>

<P>You will seldom use those classes by yourself; most often you'll need them as components for <CODE>BayesLearner</CODE>.</P>

<hr>

<H2>Basic classes</H2>

<P>There are four basic abstract objects that serve as roots of the hierarchy: <CODE>ProbabilityEstimator</CODE>, <CODE>ProbabilityEstimatorConstructor</CODE>, <CODE>ConditionalProbabilityEstimator</CODE> and <CODE>ConditionalProbabilityEstimatorConstructor</CODE>.<P>

<H3>ProbabilityEstimator</H3>
<index name="classes/ProbabilityEstimator">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>supportsDiscrete</DT>
<DD>Tells whether the estimator can handle discrete attributes.</DD>
<DT>supportsContinuous</DT>
<DD>Tells whether the estimator can handle continuous attributes.</DD>
</DL>

<P class=section>Methods</P>
<DL class=attributes>
<DL>
<DT>__call__([Value])</DT>
<DD>
<P>The class defines a single method - a call operator. When given a value, it returns a probability of the value (as float).</P>

<P>When the value is omitted, the object attempts to return a distribution of probabilities for all values (as <CODE>Distribution</CODE>). The result can be <CODE>DiscDistribution</CODE> for discrete, <CODE>ContDistribution</CODE> for continuous attributes or an instance of some other class derived from <CODE>Distribution</CODE>. Note that it indeed makes sense to return continuous distribution. Although probabilities are stored point-wise (as something similar to Python's map, where keys are attribute values and items are probabilities), <CODE>ContDistribution</CODE> can compute probabilities between the recorded values by interpolation.</P>

<P>The estimator does not necessarily support returning precomputed probabilities in form of <CODE>Distribution</CODE>; in this case, it simply returns <CODE>None</CODE>.</P>
</DD>
</DL>

<H3>ProbabilityEstimatorConstructor</H3>
<index name="classes/ProbabilityEstimatorConstructor">

<P>This is an abstract class; derived classes define call operators that return different probability estimators. The class is call-constructible (i.e., if called with appropriate parameters, the constructor returns a probability estimator, not a probability estimator constructor).<P>

<P>The call operator can accept an already computed distribution of classes or a list of examples or both.</P>

<P class=section>Methods</P>
<DL class=attributes>
<DT>__call__([distribution[, apriori]], [examples[, weightID]])</DT>
<DD> If distribution is given, it can be followed by apriori class distribution. Similarly, examples can be followed by with the ID of meta attribute with example weights. (Hint: if you want to have examples and a priori distribution, but don't have distribution ready, just pass None for distribution.) When both, distribution and examples are given, it is up to constructor to decide what to use.</DD>
</DL>

<H3>ConditionalProbabilityEstimator</H3>
<index name="classes/ConditionalProbabilityEstimator">

<p>As a counterpart of <CODE>ProbabilityEstimator</CODE>, this estimator can return conditional probabilities.</p>

<P class=section>Methods</P>
<DL class=attributes>
<DT>__call__([[Value,] ConditionValue])</DT>
<DD>
<P>When given two values, it returns a probability of p(Value|Condition) (as float). When given only one value, it is interpreted as condition; the estimator returns a <CODE>Distribution</CODE> with probabilities p(v|Condition) for each possible value v. When called without arguments, it returns a <CODE>Contingency</CODE> matrix containing probabilities p(v|c) for each possible value and condition; condition is used as outer variable.</P>

<P>If estimator cannot return precomputed distributions and/or contingencies, it returns <CODE>None</CODE>.</P>
</DD>
</DL>

<H3>ConditionalProbabilityEstimatorConstructor</H3>
<index name="classes/ConditionalProbabilityEstimator">

<P>A counterpart of <CODE>ProbabilityEstimatorConstructor</CODE>. It has similar arguments, except that the first argument is not a <CODE>Distribution</CODE> but <CODE>Contingency</CODE>.</P>

<hr>

<H2>Abstract and supporting classes</H2>

<P>There are several abstract classes that simplify the actual classes for probability estimation.</P>

<H3>ProbabilityEstimator_FromDistribution</H3>
<index name="classes/ProbabilityEstimator_FromDistribution">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>probabilities</DT>
<DD>Stores a precomputed list of probabilities.</DD>
</DL>

<P>There are many estimator constructors that compute probabilities of classes from frequencies of classes or from list of examples. Probabilities are stored as <CODE>Distribution</CODE>, and <CODE>ProbabilityEstimator_FromDistribution</CODE> is returned. This is done for estimators that use relative frequencies, Laplace's estimation, m-estimation and even estimators that compute continuous distributions.</P>

<P>When asked about probability of certain value, the estimator returns a corresponding element of <CODE>probabilities</CODE>. Note that when distribution is continuous, linear interpolation between two points is used to compute the probability. When asked for a complete distribution, it returns a copy of <CODE>probabilities</CODE>.</P>

<H3>ConditionalProbabilityEstimator_FromDistribution</H3>
<index name="classes/ConditionalProbabilityEstimator_FromDistribution">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>probabilities</DT>
<DD>stores a precomputed list of probabilities</DD>
</DL>

<P>This counterpart of <CODE>ProbabilityEstimator_FromDistribution</CODE> stores conditional probabilities in <CODE>Contingency</CODE>.</P>

<H3>ConditionalProbabilityEstimator_ByRows</H3>
<index name="classes/ConditionalProbabilityEstimator_ByRows">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>estimatorList</DT>
<DD>A list of estimators; one for each value of <CODE>Condition</CODE>.</DD>
</DL>

<P>This conditional probability estimator has different estimators for different values of conditional attribute. For instance, when used for computing p(c|A) in naive Bayesian classifier, it would have an estimator for each possible value of attribute A. This does not mean that the estimators were constructed by different constructors, i.e. using different probability estimation methods. This class is normally used when we only have a probability estimator constructor for unconditional probabilities but need to construct a conditional probability estimator; the constructor is used to construct estimators for subsets of original example set and the resulting estimators are stored in <CODE>ConditionalProbabilityEstimator_ByRows</CODE>.</P>

<A name="ConditionalProbabilityEstimatorConstructor_ByRows"></A>
<H3>ConditionalProbabilityEstimatorConstructor_ByRows</H3>
<index name="classes/ConditionalProbabilityEstimatorConstructor_ByRows">


<P class=section>Attributes</P>
<DL class=attributes>
<DT>estimatorConstructor</DT>
<DD>An unconditional probability estimator constructor.</DD>
</DL>

<P>This class computes a conditional probability estimator using an unconditional probability estimator constructor. The result can be of type <CODE>ConditionalProbabilityEstimator_FromDistribution</CODE> or <CODE>ConditionalProbabilityEstimator_ByRows</CODE>, depending on the type of constructor.</P>

<P>The class first computes contingency matrix if it hasn't been computed already. Then it calls <CODE>estimatorConstructor</CODE> for each value of condition attribute. If all constructed estimators can return distribution of probabilities for all classes (usually either all or none can), the <CODE>Distribution</CODE>s are put in a contingency, and <CODE>ConditionalProbabilityEstimator_FromDistribution</CODE> is constructed and returned. If constructed estimators are not capable of returning distribution of probabilities, a <CODE>ConditionalProbabilityEstimator_ByRows</CODE> is constructed and the estimators are stored in its <CODE>estimatorList</CODE>.

<hr>

<H2>Concrete probability estimators and constructors</H2>

<A name="ProbabilityEstimatorConstructor_relative">
<H3>ProbabilityEstimatorConstructor_relative</H3>
<index name="classes/ProbabilityEstimatorConstructor_relative">
<index name="probability estimation+relative frequency">

<P>Computes relative frequencies of classes, puts it into a Distribution and returns it as <CODE>ProbabilityEstimator_FromDistribution</CODE>.</P>

<H3>ProbabilityEstimatorConstructor_Laplace</H3>
<index name="classes/ProbabilityEstimatorConstructor_Laplace">
<index name="probability estimation+Laplace estimate">

<P>Uses Laplace estimation to compute probabilities from frequencies of classes.</P>

<CENTER>
p(c) = (Nc+1) / (N+n)
</CENTER>
<P>where Nc is number of occurences of an event (e.g. number of examples in class c), N is the total number of events (examples) and n is the number of different events (classes).</P>

<P>The resulting estimator is again of type <CODE>ProbabilityEstimator_FromDistribution</CODE>.</P>

<a name="mestimate"></a>
<H3>ProbabilityEstimatorConstructor_m</H3>
<index name="classes/ProbabilityEstimatorConstructor_m">
<index name="probability estimation+m-estimate">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>m</DT>
<DD>Parameter for m-estimation</DD>
</DL>

Uses m-estimation to compute probabilities from frequencies of classes.

<CENTER>
p(c) = (Nc+m*ap(c)) / (N+m)
</CENTER>
<P>where Nc is number of occurences of an event (e.g. number of examples in class c), N is the total number of events (examples) and ap(c) is the apriori probability of event (class) c.</P>

<P>The resulting estimator is of type <CODE>ProbabilityEstimator_FromDistribution</CODE>.</P>


<H3>ProbabilityEstimatorConstructor_kernel</H3>
<index name="classes/ProbabilityEstimatorConstructor_kernel">
<index name="probability estimation/kernel">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>minImpact</DT>
<DD>A requested minimal weight of a point (default: 0.01); points with lower weights won't be taken into account</DD>
<DT>smoothing</DT>
<DD>Smoothing factor (default: 1.144)</DD>
<DT>nPoints</DT>
<DD>Number of points for the interpolating curve. If negative, say -3 (default), 3 points will be inserted between each data points.</DD>
</DL>

<P>Useful for continuous distributions, this constructor computes probabilities for certain number of points using <a href="http://www.stat.lsa.umich.edu/~kshedden/Courses/Stat606/Notes/interpolation.pdf">Gaussian kernels</a>. The resulting point-wise continuous distribution is stored as </CODE>ContDistribution</CODE> and returned in <CODE>TProbabilityEstimator_FromDistribution</CODE>.</P>

<P>The points at which probabilities are computed are determined like this.
Probabilities are always computed at all points that are present in the data (i.e. the existing values of the continuous attribute). If <CODE>nPoints</CODE> is positive and greater than the number of existing data points, additional points are inserted between the existing points to achieve the required number of points. Approximately equal number of new points is inserted between each adjacent existing points. If <CODE>nPoints</CODE> is negative, <CODE>-nPoints</CODE> points will be inserted between each pair of data points.</P>

<H3>ProbabilityEstimatorConstructor_loess</H3>
<index name="classes/ProbabilityEstimatorConstructor_loess">
<index name="probability estimation+loess">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>windowProportion</DT>
<DD>a proportion of points in a windows</DD>
<DT>nPoints</DT>
<DD>Number of points for the interpolating curve. If negative, say -3 (default), 3 points will be inserted between each data points.</DD>
</DL>

<P>This method of probability estimation is similar to <CODE>ProbabilityEstimatorConstructor_kernel</CODE>. They both return a curve computed at certain number of points and the points are determined by the same procedure. They differ, however, at the method for estimating the probabilities.</P>

<P>To estimate probability at point <EM>x</EM>, <CODE>ProbabilityEstimatorConstructor_loess</CODE> examines a window containing a prescribed proportion of original data points. The window is as simetric as possible; the number of points to the left of <EM>x</EM> might differ from the number to the right, but the leftmost point is approximately as far from <EM>x</EM> as the rightmost. Let us denote the width of the windows, e.g. the distance to the farther of the two edge points, by <EM>h</EM>.</P>

<P>Points are weighted by bi-cubic weight function; a weight of point at <EM>x'</EM> is (1-|<EM>t</EM>|<SUP>3</SUP>)<SUP>3</SUP>, where <EM>t</EM> is (<EM>x</EM>-<EM>x'</EM>)/<EM>h</EM>.</P>

<P>Probability at point <EM>x</EM> is then computed as weighted local regression of probabilities for points in the window.</P>

<A name="ConditionalProbabilityEstimatorConstructor_loess">
<H3>ConditionalProbabilityEstimatorConstructor_loess</H3>
<index name="classes/ConditionalProbabilityEstimatorConstructor_loess">

<P class=section>Attributes</P>
<DL class=attributes>
<DT>windowProportion</DT>
<DD>a proportion of points in a windows</DD>
<DT>nPoints</DT>
<DD>Number of points for the interpolating curve. If negative, say -3 (default), 3 points will be inserted between each data points.</DD>
</DL>

<p>Constructs similar estimator as <CODE>ProbabilityEstimatorConstructor_loess</CODE>, except that it computes conditional probabilites. The result is of type <CODE>ConditionalProbabilityEstimator_FromDistribution</CODE>.</p>

</BODY> 