<html><HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>
<body>

<h1>Contingency Matrix</h1>

<P>Contingency matrix contains conditional distributions. They can work for both, discrete and continuous attributes; although the examples on this page will be mostly limited to discrete attributes, the analogous could be done with continuous values.</P>

<p class="header"><a href="contingency1.py">part of contingency1.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>>>> import orange
>>> data = orange.ExampleTable("monk1")
>>> cont = orange.ContingencyAttrClass("e", data)
>>> for val, dist in cont.items():
...     print val, dist
1 <0.000, 108.000>
2 <72.000, 36.000>
3 <72.000, 36.000>
4 <72.000, 36.000>
</XMP>

<P>As this simple example shows, contingency is similar to a dictionary (or a list, it is a bit ambiguous), where attribute values serve as keys and class distributions are the dictionary values. The attribute <CODE>e</CODE> is here called the outer attribute, and the class is the inner. That's not the only possible configuration of contingency matrix; class can also be outside or there can be no class at all and the matrix shows distributions of one attribute values given the value of another.</P>

<P>There is a hierarchy of classes with contingencies:</P>
<B>
<P style="margin-bottom: 0cm; margin-left: 1cm"><CODE>Contingency</CODE></P>
<P style="margin-top: 0cm; margin-bottom: 0cm; margin-left: 1cm"><CODE>ContingencyClass</CODE></P>
<P style="margin-top: 0cm; margin-bottom: 0cm; margin-left: 3cm"><CODE>ContingencyClassAttr</CODE></P>
<P style="margin-top: 0cm; margin-bottom: 0cm; margin-left: 3cm"><CODE>ContingencyAttrClass</CODE></P>
<P style="margin-top: 0cm; margin-left: 2cm"><CODE>ContingencyAttrAttr</CODE></P>
</B>

<P>The base object is <CODE>Contingency</CODE>. Derived from it is <CODE>ContingencyClass</CODE> in which one of the attributes is class attribute; <CODE>ContingencyClass</CODE> is a base for two classes, <CODE>ContingencyAttrClass</CODE> and <CODE>ContingencyClassAttr</CODE>, the former having class as the inner and the latter as the outer attribute. Class <CODE>ContingencyAttrAttr</CODE> is derived directly from <CODE>Contingency</CODE> and represents contingency matrices in which none of the attributes is the class attribute.</P>

<P>The most common used of the above classes is <CODE>ContingencyAttrClass</CODE> which resembles conditional probabilities of classes given the attribute value.</P>


<H2>General Contingency Matrix</H2>

<P>Here's what all contingency matrices share in common.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>outerVariable</DT>
<DD>The outer attribute descriptor. In the above case, it is <CODE>e</CODE>. </DD>

<DT>innerVariable</DT>
<DD>The inner attribute descriptor. In the above case, it is the class attribute.</DD>

<DT>outerDistribution</DT>
<DD>The distribution of the outer attribute's values - sums of rows. In the above case, distribution of <CODE>e</CODE> is &lt;108.000, 108.000, 108.000, 108.000&gt;</DD>

<DT>innerDistribution</DT>
<DD>The distribution of the inner attribute. In the above case, it is the class distribution, which is &lt;216.000, 216.000&lt;.

<DT>innerDistributionUnknown</DT>
<DD>The distribution of the inner attribute for the examples where the outer attribute was unknown. This is the difference between the <CODE>innerDistribution</CODE> and the sum of all distributions in the matrix.</DD>

<DT>varType</DT>
<DD>The <CODE>varType</CODE> for the outer attribute (discrete, continuous...); <CODE>varType</CODE> equals <CODE>outerVariable.varType</CODE> and <CODE>outerDistribution.varType</CODE>.</DD>
</DL>


<P class=section>Methods</P>
<DL class=attributes>
<DT>&lt;standard list/dictionary operations&gt;</DT>
<DD>Contingency matrix is a cross between dictionary and a list. It supports standard dictionary methods <CODE>keys</CODE>, <CODE>values</CODE> and <CODE>items</CODE>.

<XMP class=code>>>> print cont.keys()
['1', '2', '3', '4']
>>> print cont.values()
[<0.000, 108.000>, <72.000, 36.000>, <72.000, 36.000>, <72.000, 36.000>]
>>> print cont.items()
[('1', <0.000, 108.000>), ('2', <72.000, 36.000>), ('3', <72.000, 36.000>), ('4', <72.000, 36.000>)]
</XMP>

<P>Although keys returned by the above functions are strings, you can index the contingency with anything that converts into values of the outer attribute - strings, numbers or instances of <CODE>Value</CODE>.</p>

<XMP class=code>>>> print cont[0]
<0.000, 108.000>
>>> print cont["1"]
<0.000, 108.000>
>>> print cont[orange.Value(data.domain["e"], "1")]
</XMP>

<P>Naturally, the length of <CODE>Contingency</CODE> equals the number of values of the outer attribute. The only weird thing is that iterating through contingency (by using a <CODE>for</CODE> loop, for instance) doesn't return keys, as with dictionaries, but dictionary values.</P>

<XMP class=code>>>> for i in cont:
...     print i
<0.000, 108.000>
<72.000, 36.000>
<72.000, 36.000>
<72.000, 36.000>
<72.000, 36.000>
</XMP>

<P>If <CODE>cont</CODE> behaved like a normal dictionary, the above script would print out strings from '0' to '3'.</P>
</dd>

<DT>add(outer_value, inner_value[, weight])</DT>
<DD>Adds an element to the contingency matrix.</DD>

<DT>normalize()</DT>
<DD>Normalizes all distributions (rows) in the contingency to sum to 1. It doesn't change the <CODE>innerDistribution</CODE> or <CODE>outerDistribution</CODE>.

<XMP class=code>>>> cont.normalize()
>>> for val, dist in cont.items():
...     print val, dist
1 <0.000, 1.000>
2 <0.667, 0.333>
3 <0.667, 0.333>
4 <0.667, 0.333>
</XMP>
</DD>
</DL>


<H2>Contingency</H2>

<P>The base class is, once for a change, not abstract. Its constructor expects two attribute descriptors, the first one for the outer and the second for the inner attribute. It initializes empty distributions and it's up to you to fill them. This is, for instance, how to manually reproduce results of the script at the top of the page.</P>

<p class="header"><a href="contingency2.py">part of contingency2.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>import orange
data = orange.ExampleTable("monk1")

cont = orange.Contingency(data.domain["e"], data.domain.classVar)
for ex in data:
    cont [ex["e"]] [ex.getclass()] += 1

print "Contingency items:"
for val, dist in cont.items():
    print val, dist
print
</XMP>

<P>The "reproduction" is not perfect. We didn't care about unknown values and haven't computed <CODE>innerDistribution</CODE> and <CODE>outerDistribution</CODE>. The better way to do it is by using the method <CODE>add</CODE>, so that the loop becomes:</p>

<XMP class=code>for ex in data:
    cont.add(ex["e"], ex.getclass())
</XMP>

<P>It's not only simpler, but also correctly handles unknown values and updates <CODE>innerDistribution</CODE> and <CODE>outerDistribution</CODE>.


<H2>ContingencyClass</H2>

<P><CODE>ContingencyClass</CODE> is an abstract base class for contingency matrices that contain the class attribute, either as the inner or the outer attribute. If offers a function for making filing the contingency clearer.</P>

<P>After reading through the rest of this page you might ask yourself why do we need to separate the classes <CODE>ContingencyAttrClass</CODE>, <CODE>ContingencyClassAttr</CODE> and <CODE>ContingencyAttrAttr</CODE>, given that the underlying matrix is the same. This is to avoid confusion about what is in the inner and the outer variable. Contingency matrices are most often used to compute probabilities of conditional classes or attributes. By separating the classes and giving them specialized methods for computing the probabilities that are most suitable to compute from a particular class, the user (ie, you or the method that gets passed the matrix) is relieved from checking what kind of matrix it got, that is, where is the class and where's the attribute.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>classVar <SPAN style=normalfont>(read only)</SPAN></DT>
<DD>The class attribute descriptor. This is always equal either to <CODE>innerVariable</CODE> or <CODE>outerVariable</CODE></DD>

<DT>variable <SPAN style=normalfont>(read only)</SPAN></DT>
<DD>The class attribute descriptor. This is always equal either to <CODE>innerVariable</CODE> or <CODE>outerVariable</CODE></DD>
</DL>


<P class=section>Methods</P>
<DL class=attributes>
<DT>add_attrclass(attribute_value, class_value[, weight])</DT>
<DD>Adds an element to contingency. The difference between this and <CODE>Contigency.add</CODE> is that the attribute value is always the first argument and class value the second, regardless whether the attribute is actually the outer variable or the inner.</DD>
</DL>


<H2>ContingencyAttrClass</H2>

<P><CODE>ContingencyAttrClass</CODE> is derived from <CODE>ContingencyClass</CODE>. Here, attribute is the outer variable (hence <CODE>variable=outerVariable</CODE>) and class is the inner (<CODE>classVar=innerVariable</CODE>), so this form of contingency matrix is suitable for computing the conditional probabilities of classes given a value of an attribute.</P>

<P>Calling <CODE>add_attrclass(v, c)</CODE> is here equivalent to calling <CODE>add(v, c)</CODE>. In addition to this, the class supports computation of contingency from examples, as you have already seen in the example at the top of this page.</P>

<P class=section>Methods</P>
<DL class=attributes>
<DT>ContingencyAttrClass(attribute, class_attribute)</DT>
<DD>The inherited constructor, which does exactly the same as <CODE>Contingency</CODE>'s constructor.</DD>

<DT>ContingencyAttrClass(attribute, examples[, weightID])</DT>
<DD>Constructor that constructs the contingency and computes the data from the given examples. If these are weighted, the meta attribute with example weights can be specified.
</DD>

<DT>p_class(attribute_value)</DT>
<DD>Returns the distribution of classes given the <CODE>attribute_value</CODE>. If the matrix is normalized, this is equivalent to returning <CODE>self[attribute_value]</CODE>. Result is returned as a normalized <CODE>Distribution</CODE>.</DD>

<DT>p_class(attribute_value, class_value)</DT>
<DD>Returns the conditional probability of <CODE>class_value</CODE> given the <CODE>attribute_value</CODE>. If the matrix is normalized, this is equivalent to returning <CODE>self[attribute_value][class_value]</CODE>.</P>

<P>Don't confuse the order of arguments: attribute value is the first, class value is the second, just as in <CODE>add_attrclass</CODE>. Although in this instance counterintuitive (since the returned value represents the conditional probability P(class_value|attribute_value), this order is uniform for all (applicable) methods of classes derived from <CODE>ContingencyClass</CODE>.</P>
</DD>
</DL>

<P>You have seen this form of matrix used already at the top of the page. We shall only explore the new stuff we've learned about it.</P>

<p class="header"><a href="contingency3.py">part of contingency3.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>import orange
data = orange.ExampleTable("monk1")
cont = orange.ContingencyAttrClass("e", data)

print "Inner variable: ", cont.innerVariable.name
print "Outer variable: ", cont.outerVariable.name
print
print "Class variable: ", cont.classVar.name
print "Attribute:      ", cont.variable.name
print

print "Distributions:"
for val in cont.variable:
    print "  p(.|%s) = %s" % (val.native(), cont.p_class(val))
print

firstclass = orange.Value(cont.classVar, 1)
firstnative = firstclass.native()
print "Probabilities of class '%s'" % firstnative
for val in cont.variable:
    print "  p(%s|%s) = %5.3f" % (firstnative, val.native(), cont.p_class(val, firstclass))
</XMP>

<P>The inner and the outer variable and their relations to the class and the attribute are as expected.</P>

<XMP class=code>Inner variable:  y
Outer variable:  e

Class variable:  y
Attribute:       e
</XMP>

<P>Distributions are normalized and probabilities are elements from the normalized distributions. Knowing that the target concept is <CODE>y := (e=1) or (a=b)</CODE>, distributions are as expected: when <CODE>e</CODE> equals 1, class 1 has a 100% probability, while for the rest, probability is one third, which agrees with a probability that two three-valued independent attributes have the same value.</P>

<XMP class=code>Distributions:
  p(.|1) = <0.000, 1.000>
  p(.|2) = <0.667, 0.333>
  p(.|3) = <0.667, 0.333>
  p(.|4) = <0.667, 0.333>

Probabilities of class '1'
  p(1|1) = 1.000
  p(1|2) = 0.333
  p(1|3) = 0.333
  p(1|4) = 0.333
</XMP>

<P>Manual computation using <CODE>add_attrclass</CODE> is similar (to be precise: exactly the same) as computation using <CODE>add</CODE>.</P>

<XMP class=code>cont = orange.ContingencyAttrClass(data.domain["e"], data.domain.classVar)
for ex in data:
    cont.add_attrclass(ex["e"], ex.getclass())
</XMP>


<H2>ContingencyClassAttr</H2>

<P>ContingencyClassAttr is similar to <CODE>ContingencyAttrClass</CODE> except that here the class attribute is the outer and the attribute the inner variable. As a consequence, this form of contingency matrix is suitable for computing conditional probabilities of attribute values given class values. Constructor and <CODE>add_attrclass</CODE> nevertheless get the arguments in the same order as for <CODE>ContingencyAttrClass</CODE>, that is, attribute first, class second.</P>

<P class=section>Methods</P>
<DL class=attributes>
<DT>ContingencyClassAttr(attribute, class_attribute)</DT>
<DD>The inherited constructor is exactly the same as <CODE>Contingency</CODE>'s constructor, except that the argument order is reversed (in <CODE>Contingency</CODE>, the outer attribute is given first, while here the first argument, <CODE>attribute</CODE>, is the inner attribute).</DD>

<DT>ContingencyAttrClass(attribute, examples[, weightID])</DT>
<DD>Constructs the contingency and computes the data from the given examples. If these are weighted, the meta attribute with example weights can be specified.
</DD>

<DT>p_attr(class_value)</DT>
<DD>Returns the distribution of attribute values given the <CODE>class_value</CODE>. If the matrix is normalized, this is equivalent to returning <CODE>self[class_value]</CODE>. Result is returned as a normalized <CODE>Distribution</CODE>.</DD>

<DT>p_attr(attribute_value, class_value)</DT>
<DD>Returns the conditional probability of <CODE>attribute_value</CODE> given the <CODE>class_value</CODE>. If the matrix is normalized, this is equivalent to returning <CODE>self[class_value][attribute_value]</CODE>.</DD>
</DL>

<P>As you can see, the class is rather similar to <CODE>ContingencyAttrClass</CODE>, except that it has <CODE>p_attr</CODE> instead of <CODE>p_class</CODE>. If you, for instance, take the above script and replace the class name, the first bunch of prints print out

<p class="header"><a href="contingency4.py">part of the output from contingency4.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>Inner variable:  e
Outer variable:  y

Class variable:  y
Attribute:       e
</XMP>

<P>This is exactly the reverse of the printout from <CODE>ContingencyAttrClass</CODE>. To print out the distributions, the only difference now is that you need to iterate through values of the class attribute and call <CODE>p_attr</CODE>. For instance,

<p class="header"><a href="contingency4.py">part of contingency4.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>for val in cont.classVar:
    print "  p(.|%s) = %s" % (val.native(), cont.p_attr(val))
</XMP>

<P>will print</P>

<XMP class=code>  p(.|0) = <0.000, 0.333, 0.333, 0.333>
  p(.|1) = <0.500, 0.167, 0.167, 0.167>
</XMP>

<P>If the class value is '0', than attribute <CODE>e</CODE> cannot be '1' (the first value), but can be anything else, with equal probabilities of 0.333. If the class value is '1', <CODE>e</CODE> is '1' in exactly half of examples (work-out why this is so); in the remaining cases, <CODE>e</CODE> is again distributed uniformly.</p>


<H2>ContingencyAttrAttr</H2>

<P><CODE>ContingencyAttrAttr</CODE> stores contingency matrices in which none of the attributes is the class attribute. This is rather similar to <CODE>Contingency</CODE>, except that it has an additional constructor and method for getting the conditional probabilities.</P>

<P class=section>Methods</P>
<DL class=attributes>
<DT>ContingencyAttrAttr(outer_variable, inner_variable)</DT>
<DD>This constructor is exactly the same as that of <CODE>Contingency</CODE>.</DD>

<DT>ContingencyAttrAttr(outer_variable, inner_variable, examples[, weightID])</DT>
<DD>Computes the contingency from the given <CODE>examples</CODE>.</DD>

<DT>p_attr(outer_value)</DT>
<DD>Returns the probability distribution of the inner variable given the outer variable.</DD>

<DT>p_attr(outer_value, inner_value)</DT>
<DD>Returns the conditional probability of the <CODE>inner_value</CODE> given the <CODE>outer_value</CODE>.</DD>
</DL>

<P>In the following example, we shall use the <CODE>ContingencyAttrAttr</CODE> on dataset "bridges" to determine which material is used for bridges of different lengths.</P>

<p class="header"><a href="contingency5.py">part of contingency5.py</a>
(uses <a href="bridges.tab">bridges.tab</a>)</p>
<XML class=code>
import orange
data = orange.ExampleTable("bridges")
cont = orange.ContingencyAttrAttr("SPAN", "MATERIAL", data)

cont.normalize()
for val in cont.outerVariable:
    print "%s:" % val.native()
    for inval, p in cont[val].items():
        if p:
            print "   %s (%i%%)" % (inval, int(100*p+0.5))
    print
</XML>

<P>The output tells us that short bridges are mostly wooden or iron, and the longer (and the most of middle sized) are made from steel.</P>

<XMP class=code>SHORT:
   WOOD (56%)
   IRON (44%)

MEDIUM:
   WOOD (9%)
   IRON (11%)
   STEEL (79%)

LONG:
   STEEL (100%)
</XMP>

<P>As all other contingency matrices, this one can also be computed "manually".</P>

<p class="header"><a href="contingency5.py">part of contingency5.py</a>
(uses <a href="bridges.tab">bridges.tab</a>)</p>
<XMP class=code>cont = orange.ContingencyAttrAttr(data.domain["SPAN"], data.domain["MATERIAL"])
for ex in data:
    cont.add(ex["SPAN"], ex["MATERIAL"])
</XMP>


<H2>Contingencies with Continuous Values</H2>

<P>What happens if one or both attributes are continuous? As first, contingencies can be built for such attributes as well. Just imagine a contingency as a dictionary with attribute values as keys and objects of type <CODE>Distribution</CODE> as values.</P>

<P>If the outer attribute is continuous, you can use either its values or ordinary floating point number for indexing. The index must be one of the values that do exist in the contingency matrix.</P>

<P>The following script will query for a distribution in between the first two keys, which triggers an exception.</P>

<p class="header"><a href="contingency6.py">part of the output from contingency6.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code>import orange
data = orange.ExampleTable("iris")
cont = orange.ContingencyAttrClass(0, data)

midkey = (cont.keys()[0] + cont.keys()[1])/2.0
print "cont[%5.3f] =" % (midkey, cont[midkey])
</XMP>

<P>If you still find such contingencies useful, you need to take care about what you pass for indices. Always use the values from <CODE>keys()</CODE> directly, instead of manually entering the keys' values you see printed. If, for instance, you print out the first key, see it's <CODE>4.500</CODE> and then request <CODE>cont[4.500]</CODE> this can give an index error due to rounding.</p>

<P>Contingencies with continuous inner attributes are more useful. As first, indexing by discrete values is easier than with continuous. Secondly, class <A href="distributions.htm"><CODE>Distribution</CODE></A> covers both, discrete and continuous distributions, so even the methods <CODE>p_class</CODE> and <CODE>p_attr</CODE> will work, except they won't return is not the probability but the density (interpolated, if necessary). See the page about <A href="distributions.htm"><CODE>Distribution</CODE></A> for more information.</p>

<P>For instance, if you build a <CODE>ContingencyClassAttr</CODE> on the iris dataset, you can enquire about the probability of the sepal length 5.5.</P>

<p class="header"><a href="contingency7.py">part of contingency7.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code>import orange
data = orange.ExampleTable("iris")
cont = orange.ContingencyClassAttr("sepal length", data)

for val in cont.classVar:
    print "  p(%s|%s) = %5.3f" % (5.5, val.native(), cont.p_attr(5.5, val))
</XMP>

<P>The script's output is</P>

<XMP class=code>  p(5.5|Iris-setosa) = 2.000
  p(5.5|Iris-versicolor) = 5.000
  p(5.5|Iris-virginica) = 1.000
</XMP>

<P>These number represent the number of examples having with sepal length of 5.5. If the matrix was normalized, numbers would be divided by the total number of examples in classes setosa, versicolor and virginica, respectively.</P>

<H2>Computing Contingencies for All Attributes</H2>

<P>Computing contingency matrices requires iteration through examples. We often need to compute <CODE>ContingencyAttrClass</CODE> or <CODE>ContingencyClassAttr</CODE> for all attributes in the dataset and it is obvious that this will be faster if we do it for all attributes at once. That's taken care of by class <CODE>DomainContingency</CODE>.</P>

<P><CODE>DomainContingency</CODE> is basically a list of contingencies, either of type <CODE>ContingencyAttrClass</CODE> or <CODE>ContingencyClassAttr</CODE>, with two additional fields and a constructor that computes the contingencies.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>classIsOuter <SPAN=normalfont>(read only)</SPAN></DT>
<DD>Tells whether the class is the outer or the inner attribute. Effectively, this tells whether the elements of the list are <CODE>ContingencyAttrClass</CODE> or <CODE>ContingencyClassAttr</CODE>.</DD>

<DT>classes</DT>
<DD>Contains the distribution of class values on the entire dataset.</DD>
</DL>


<P class=section>Methods</P>
<DL class=attributes>
<DT>DomainContingency(examples[, weightID][, classIsOuter=0|1])</DT>
<DD>Constructor needs to be given a list of examples. It constructs a list of contingencies; if <CODE>classIsOuter</CODE> is 0 (default), these will be <CODE>ContingencyAttrClass</CODE>, if 1, <CODE>ContingencyClassAttr</CODE> are used. It then iterates through examples and computes the contingencies.</DD>

<DT>list-like operations</DT>
<DD>The only real difference between <CODE>DomainContingency</CODE> and an ordinary Python list (except for the additional methods and fields, of course) is that its elements cannot be indexed only by numbers, but also by attribute names and descriptors, as shown in the example below.</DD>

<DT>normalize</DT>
<DD>Calls normalize for each contingency.</DD>
</DL>

<P>The following script will print the contingencies for attributes "a", "b" and "e" for the dataset Monk 1.</P>

<p class="header"><a href="contingency8.py">part of contingency8.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>import orange
data = orange.ExampleTable("monk1")

dc = orange.DomainContingency(data)
print dc["a"]
print dc["b"]
print dc["e"]
</XMP>

<P>The contingencies in the <CODE>DomainContingency</CODE> <CODE>dc</CODE> are of type <CODE>ContingencyAttrClass</CODE> and  tell us conditional distributions of classes, given the value of the attribute. To compute the distribution of attribute values given the class, one needs to get a list of <CODE>ContingencyClassAttr</CODE>.</p>

<p class="header"><a href="contingency8.py">part of contingency8.py</a>
(uses <a href="monk1.tab">monk1.tab</a>)</p>
<XMP class=code>dc = orange.DomainContingency(data, classIsOuter=1)
print dc["a"]
print dc["b"]
print dc["e"]
</XMP>

<P>Note that <CODE>classIsOuter</CODE> cannot be given as positional argument, but needs to be passed by keyword.</P>

</body> </html>
