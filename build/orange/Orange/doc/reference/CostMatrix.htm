<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="style-print.css" TYPE="text/css" MEDIA=print>
</HEAD>

<BODY>
<index name="cost matrices">
<h1>Cost Matrix</h1>

<P><CODE><INDEX name="classes/CostMatrix">CostMatrix</CODE> is an object that stores costs of (mis)classifications. Costs can be either negative or positive.</P>

<P class=section>Attributes</P>
<DL class=attributes>
<DT>classVar</DT>
<DD>The (class) attribute to which the matrix applies. This can also be <CODE>None</CODE>.</DD>

<DT>dimension <SPAN class=normalfont>(read only)</SPAN></DT>
<DD>Matrix dimension, ie. number of classes.</DD>
</DL>

<P class=section>Methods</P>
<DL class=attributes>
<DT>CostMatrix(dimension[, default cost])</DT>
<DD>Constructs a matrix of the given size and initializes it with the default cost (1, if not given). All elements of the matrix are assigned the given cost, except for the diagonal that have the default cost of 0. (Diagonal elements represent correct classifications and these usually have no price; you can, however, change this.)

<p class="header"><a href="CostMatrix.py">part of CostMatrix.py</a>
<XMP class=code style="margin-top: 0mm">import orange

cm = orange.CostMatrix(3)
print "classVar =", cm.classVar
for pred in range(3):
    for corr in range(3):
        print cm.getcost(pred, corr),
    print
</XMP>

<P>This initializes the matrix and print it out:</P>
<XMP class=code>0.0 1.0 1.0
1.0 0.0 1.0
1.0 1.0 0.0
</XMP>
</P>
</DD>


<DT>CostMatrix(class descriptor[, default cost])</DT>
<DD>Similar as above, except that <CODE>classVar</CODE> is also set to the given descriptor. The number of values of the given attribute (which must be discrete) is used for dimension.</P>

<p class="header"><a href="CostMatrix.py">part of CostMatrix.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code style="margin-top: 0mm">data = orange.ExampleTable("iris")
cm = orange.CostMatrix(data.domain.classVar, 2)
</XMP>

<P>This constructs a matrix similar to the one above (the class attribute in iris domain is three-valued) except that the matrix contains 2s instead of 1s.</P>
</DD>

<DT>CostMatrix([attribute descriptor, ]matrix)</DT>
<DD>Initializes the matrix with the elements given as a sequence of sequences (you can mix lists and tuples if you find it funny). Each subsequence represents a row.</P>

<p class="header"><a href="CostMatrix.py">part of CostMatrix.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code  style="margin-top: 0mm">cm = orange.CostMatrix(data.domain.classVar, [(0, 2, 1), (2, 0, 1), (2, 2, 0)])
</XMP>

<P>If you print this matrix out, will it look like this:</P>
<XMP class=code>0.0 2.0 1.0
2.0 0.0 1.0
2.0 2.0 0.0
</XMP>
</DD>

<DT>setcost(predicted value, correct value, cost)</DT>
<DD>Set the misclassification cost.

<P>The matrix above could be constructed by first initializing it with 2s and then changing the prices for virginica's into 1s.</P>

<p class="header"><a href="CostMatrix.py">part of CostMatrix.py</a>
(uses <a href="iris.tab">iris.tab</a>)</p>
<XMP class=code  style="margin-top: 0mm">cm = orange.CostMatrix(data.domain.classVar, 2)
cm.setcost("Iris-setosa", "Iris-virginica", 1)
cm.setcost("Iris-versicolor", "Iris-virginica", 1)
</XMP>
</Dd>

<DT>getcost(predicted value, correct value)</DT>
<DD>Returns the cost of prediction. Values must be integer indices; if <CODE>classVar</CODE> is set, you can also use symbolic values (strings).</P>
</DD>
</DL>

<P>Note that there's no way to change the size of the matrix. Size is set at construction and does not change.</P>

<P>For the final example, we shall compute the profits of knowing attribute values in the dataset lenses with the same cost-matrix as printed above.</P>

<p class="header"><a href="CostMatrix.py">part of CostMatrix.py</a>
(uses <a href="lenses.tab">lenses.tab</a>)</p>
<XMP class=code>data = orange.ExampleTable("lenses")
meas = orange.MeasureAttribute_cost()
meas.cost = ((0, 2, 1), (2, 0, 1), (2, 2, 0))
for attr in data.domain.attributes:
    print "%s: %5.3f" % (attr.name, meas(attr, data))
</xmp>

<P>As the script shows, you don't have to (and usually won't) call the constructor explicitly. Instead, you will set the corresponding field (in our case <CODE>meas.cost</CODE>) to a matrix and let Orange convert it to <CODE>CostMatrix</CODE> automatically.</P>

<P>Funny as it might look, but since Orange uses constructor to perform such conversion, even the above statement is correct (although the cost matrix is rather dull, with 0s on the diagonal and 1s around):</P>

<XMP class=code>meas.cost = data.domain.classVar
</XMP>

</BODY></HTML> 