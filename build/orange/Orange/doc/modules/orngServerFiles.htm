<html>

<head>
<title>orngServerFiles: Orange's file repository</title>
<link rel=stylesheet href="../style.css" type="text/css">
<link rel=stylesheet href="style-print.css" type="text/css" media=print>
</head>

<body>
<h1>orngServerFiles: Orange's file repository</h1>
<index name="modules/orngServerFiles">
<index name="orngServerFiles">
<index name="files">

<p>Module <code>orngServerFiles</code> allows users to download files from a common
repository residing on the Orange server. It was designed to simplify the download and updates of
external data sources for Orange Genomics add-on. Furthermore, an authenticated
user can also manage the repository files with this module.</p>

<p>Orange server file repository was created with the intend to store larger files that do not come with Orange installation, but
may be required from the user when running specific Orange functions. A typical example is Orange bioinformatics package,
which relies on large data files storing genome information. These do not come pre-installed, but are rather downloaded
from the server when needed and stored in the local repository. Module orngServerFiles provides low-level functionality 
to manage these files, and is used by Orange modules to locate the files from the local repository and update/download them when
and if needed.</p>

<p>Each file managed by <code>orngServerFiles</code> is described by domain and
the file name. Domains are like directories - a place where files are put in.</p>

<h2>Local file management</h2>

<p>Downloaded files are saved under Orange's settings directory, subdirectory
<code>buffer/bigfiles</code>. For each new domain a subdirectory containing 
the downloaded files is created. With every download a corresponding 
info file is created with bearing the same name but added an extension plus &quot;.info&quot;. 
Info fail contains file's title, tags, size and date and time of the upload.
</p>

<p class="section">Methods used for managing local files</p>

<dl class="attributes">
<dt>download(domain, filename, serverfiles=None, callback=None, extract=True, verbose=True)</dt>
<dd>Downloads file from the repository to local orange installation. To download 
files as an authenticated user you should also pass an instance of <code>ServerFiles</code> class. 
Callback can be a function without arguments. It will be called once for each downloaded percent of file: 100 times for the whole file.
</dd>
<dt>listdomains()</dt>
<dd>List all file domains in the local repository.</dd>
<dt>listfiles(domain)</dt>
<dd>List all files from a domain in a local repository.</dd>
<dt>info(domain, filename)</dt>
<dd>Returns a dictionary containing downloaded file information. Keys: title, tags, size, datetime. </dd>
<dt>allinfo(domain)</dt>
<dd>Goes through all files in a domain on a local repository and returns a dictionary, where keys are names of the files and values are their information.</dd>
<dt>search(substrings, caseSensitive=False, inTag=True, inTitle=True, inName=True)</dt>
<dd>Function searches for files in the local repository where all substrings in a list are contained
in at least one chosen field (tag, title, name). It returns a list of tuples: first tuple element
is the domain of the file, second its name.</dd>  
<dt>localpath(domain [,filename])</dt>
<dd>Returns a path for the domain in the local repository. If argument <code>filename</code> is given, returns a path to corresponding file.</dd>
<dt>localpath_download(domain, filename, **kwargs)</dt>
<dd>Returns local path for the given domain and file. If file does not exist on the local machine, download it. Additional arguments are passed to the <code>download</code> function.</dd>
<dt>remove_domain(domain [,force])</dt>
<dd>Removes a domain. If force is True, domain is removed even
if it is not empty (contains files).</dd>
<dt>remove(domain, filename)</dt>
<dd>Removes a file from repository.</dd>
<dt>update(domain, filename, access_code=None, verbose=True)</dt>
<dd>Downloads the corresponding file from the server and places it in the local repository, but only if the server copy of the file is newer or the local copy does not exist. An optional <code>access_code</code> can be given to allow server access if the file is protected.</dd>


</dl>

<h2>ServerFiles: the repository</h2>

<p>To work with the repository, you need to create an instance of
<code>ServerFiles</code> object. To access the repository as an authenticated user,
a username and password should be passed to the constructor.
All password
protected operations and transfers are secured by SSL; this secures both password and content.</p>

<p>Repository files are set as protected when first uploaded: 
only authenticated users can see them. They need to be unprotected 
for public use.</p>

<dl class="attributes">
<dt>ServerFiles(username=None, password=None, access_code=None)</dt>
<dd>Creates a ServerFiles instance. Pass your username and password to use
the repository as an authenticated user. If you want to use your access code
(as an non-authenticated user), pass it also.</dd>
</dl>

<p class="section">Non-authenticated users</p>

<dl class="attributes">
<dt>download(domain, filename, target, callback=None)</dt>
<dd>Downloads file from the repository to a given target name. Callback can be a function without arguments. It will be called once for each downloaded percent of file: 100 times for the whole file.
</dd>
<dt>listdomains()</dt>
<dd>List all domains on repository.</dd>
<dt>listfiles(domain)</dt>
<dd>List all files in a repository domain.</dd>
<dt>info(domain, filename)</dt>
<dd>Returns a dictionary containing repository file info. Keys: title, tags, size, datetime.</dd>
<dt>allinfo(domain)</dt>
<dd>Goes through all accessible files in a given domain and returns a dictionary, where key
is file's name and value its info.</dd>
<dt>search(substrings, caseSensitive=False, inTag=True, inTitle=True, inName=True)</dt>
<dd>Function searches for files on the repository where all substrings in a list are contained
in at least one choosen field (tag, title, name). It returns a list of tuples: first tuple element
is the file's domain, second its name. As for now the search is performed locally, therefore
information on files in repository is transfered on first call of this function. </dd>  
<dt>downloadFH(domain, filename)</dt>
<dd>Returns a file handle to the file that we would like to download.
</dd>
</dl>

<p class="section">Authenticated users</p>

Authenticated users can use methods described in &quot;Non-authenticated users&quot;
section, but they can also use the functions that access and modify protected files.

<dl class="attributes">
<dt>create_domain(domain)</dt>
<dd>Creates a repository domain.</dd>
<dt>remove_domain(domain [,force])</dt>
<dd>Removes a domain. If force is True, domain is removed even
if it is not empty (contains files).</dd>
<dt>remove(domain, filename)</dt>
<dd>Removes a file from the repository.</dd>
<dt>protection(domain, filename)</dt>
<dd>Returns file protection. Legend: &quot;0&quot; - public use, &quot;1&quot; - for authenticated
users only, anything else represents a specific access code.</dd>
<dt>protect(domain, filename [, access_code])</dt>
<dd>Hide file from non-authenticated users. If an access code (string) is passed, the file
will be available to authenticated users and non-authenticated users with that access 
code.</dd>
<dt>unprotect(domain, filename)</dt>
<dd>Put a file into public use.</dd>
<dt>upload(domain, filename, localfile [, title, tags])</dt>
<dd>Uploads a file &quot;localfile&quot; to the domain where it is saved with
filename &quot;filename&quot;. If file does not exist yet, set it as
protected. Parameter localfile can be a file handle open for reading or
a file name.</dd>
</dl>

<h2>Examples</h2>

<h3>Downloading and listing files</h3>

<p>Listing local files, files from the repository and downloading all 
available files from domain &quot;demo&quot;.</p>

<xmp class=code>import orngServerFiles

repository = orngServerFiles.ServerFiles()
print "My files", orngServerFiles.listfiles('demo')
print "Repository files", repository.listfiles('demo')

print "Downloading all files in domain 'test'"
for file in repository.listfiles('demo'):
    print "Datetime for", file, repository.info('demo', file)["datetime"]
    orngServerFiles.download('demo', file)

print "My files after download", orngServerFiles.listfiles('demo')
print "My domains", orngServerFiles.listdomains()
</xmp>

<p>Output for first run (and current repository state):</p>

<xmp class=code>My files []
Repository files ['orngServerFiles.py', 'urllib2_file.py']
Downloading all files in domain 'test'
Datetime for orngServerFiles.py 2008-08-20 12:25:54.624000
Datetime for urllib2_file.py 2008-08-20 12:25:54.827000
My files after download ['urllib2_file.py', 'orngServerFiles.py']
My domains ['demo']
</xmp>

<h3>Creating a domain, uploading files</h3>

A similar domain as &quot;demo&quot; in previous example can be built as follows.

<xmp class=code>import orngServerFiles

ordinary = orngServerFiles.ServerFiles()
authenticated = orngServerFiles.ServerFiles(username, password)

try:
    authenticated.remove_domain('demo2', force=True)
except:
    pass

authenticated.create_domain('demo2')

authenticated.upload('demo2', 'orngServerFiles.py', 'orngServerFiles.py', \
    title="orngServerFiles client", tags=["basic", "fileManagement"]) 
authenticated.upload('demo2', 'urllib2_file.py', 'urllib2_file.py')
print "Non-authenticated users see:", ordinary.listfiles('demo2')
print "Authenticated users see:", authenticated.listfiles('demo2')
authenticated.unprotect('demo2', 'orngServerFiles.py')
authenticated.unprotect('demo2', 'urllib2_file.py')
print "Non-authenticated users now see:", ordinary.listfiles('demo2')
print "orngServerFiles.py file info:"
import pprint; pprint.pprint(ordinary.info('demo2', 'orngServerFiles.py'))
</xmp>

<p>Output:</p>

<xmp class=code>Ordinary users see: ['']
Authenticated users see: ['orngServerFiles.py', 'urllib2_file.py']
Non-authenticated users now see: ['orngServerFiles.py', 'urllib2_file.py']
orngServerFiles.py file info:
{'datetime': '2008-08-26 10:30:05.373000',
 'size': '10165',
 'tags': ['basic', 'fileManagement'],
 'title': 'orngServerFiles client'}
</xmp>

</body>
</html>

