<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="../style-print.css" TYPE="text/css" MEDIA=print></LINK>
</HEAD>

<BODY>
<h1>orngMDS</h1>

<index name="modules+multidimensional scaling">

<p>The orngMDS module provides the functionality to perform multi
dimensional scaling</p>

<h2>MDS</h2>

<p><INDEX name="classes/MDS (in orngMDS)">MDS is the main class for
performing multi dimensional scaling</p>

<p class=section>Attributes</p>
<DL class =attributes>
<DT>points</DT>
<DD>Holds the current configuration of projected points</DD>
<DT>distances</DT>
<DD>An orange.SymMatrix that contains the distances that we want to achieve(<code>LSMT</code> changes these)</DD>
<DT>projectedDistances<DT>
<DD>An orange.SymMatrix that contains the distances between the elements of <code>points</code>
<DT>originalDistances</DT>
<DD>An orange.SymMatrix that contains the original distances</DD>
<DT>stress<DT>
<DD>An orange.SymMatrix holding the stress</DD>
<DT>dim</DT>
<DD>An integer holding the dimension of the projected space</DD>
<DT>n</DT>
<DD>An integer holding the number of elements</DD>
<DT>avgStress</DT>
<DD>An float holding the average stress in <code>stress</code></DD>
<DT>progressCallback</DT>
<DD>A function that gets called after each optimization step in the <code>run()</code> method</DD>
</DL>
<P class=section>Methods</P>
<DL class=attributes>
<DT>MDS(diss, dim=2, points=None)</DT>
<DD>Constructor that takes the original (diss)similarity  and an optional arguments <code>dim</code> indicating the dimension of the projected space  and an initial configuration of <code>points</code></DD>
<DT>getDistance()</DT>
<DD>Computes the distances between <code>points</code> and updates the <code>projectedDistances</code> matrix</DD>
<DT>getStress(stressFunc=orngMDS.SgnRelStress)</DT>
<DD>Computes the stress between the current <code>projectedDistances</code> and <code>distances</code> matrix using <code>stressFunc</code> and updates the <code>stress</code> matrix and <code>avgStress</code> accordingly</DD>
<DT>Torgerson()</DT>
<DD>Runs the torgerson algorithm  that computes an initial analytical solution of the problem </DD>
<DT>LSMT()</DT>
<DD>Kruskal monotone transformation</DD>
<DT>SMACOFstep()</DT>
<DD>Performs a single iteration of a Smacof algorithm that optimizes stress and updates the <code>points</code></DD>
<DT>run(numIter, stressFunc=SgnRelStress, eps=1e-3, progressCallback=None)</DT>
<DD>A convenience function that performs optimization until stopping conditions are met. That is eider optimization runs for <code>numIter</code> iteration of SMACOFstep function, or the stress improvement ratio is smaller then <code>eps</code>(oldStress-newStress smaller then oldStress*eps)</DD>
<DT>

<h2>Examples</h2>

<h3>MDS scatterplot</h3>

<p>In our first example, we will take iris data set, compute the
distance between the examples and then run MDS on a distance
matrix. This is done by the following code:</p>

<p class="header">part of <a href="mds2.py">mds2.py</a> (uses <a href=
"iris.tab">iris.tab</a>)</p>
<xmp class=code>import orange
import orngMDS

data=orange.ExampleTable("../datasets/iris.tab")
euclidean = orange.ExamplesDistanceConstructor_Euclidean(data)
distance = orange.SymMatrix(len(data))
for i in range(len(data)):
   for j in range(i+1):
       distance[i, j] = euclidean(data[i], data[j])

mds=orngMDS.MDS(distance)
mds.run(100)
</xmp>

<p>Notice that we are running MDS through 100 iterations. We will now
use <a href"http://matplotlib.sourceforge.net/">matplotlib</a> to plot
the data points using the coordinates computed with MDS (you need to
install <a href"http://matplotlib.sourceforge.net/">matplotlib</a>, it
does not come with Orange). Each data point in iris is classified in
one of the three classes, so we will use colors to denote instance's
class.<p>

<p class="header">part of <a href="mds2.py">mds2.py</a> (uses <a href=
"iris.tab">iris.tab</a>)</p>
<xmp class=code>
from pylab import *
colors = ["red", "yellow", "blue"]

points = []
for (i,d) in enumerate(data):
   points.append((mds.points[i][0], mds.points[i][1], d.getclass()))
for c in range(len(data.domain.classVar.values)):
    sel = filter(lambda x: x[-1]==c, points)
    x = [s[0] for s in sel]
    y = [s[1] for s in sel]
    scatter(x, y, c=colors[c])
show()
</xmp>

<p>Executing the above script pops-up a pylab window with the
following scatterplot:</p>

<img src="mds-iris.png">

<p>Iris is a relatively simple data set with respect to
classification, and to no surprise we see that MDS found such instance
placement in 2-D where instances of different class are well
separated. Notice also that MDS does this with no knowledge on the
instance class.</p>

<h3>A more advanced example</h3>

<p>We are going to write a script that is similar to the functionality
of the orngMDS.run method, but performs 10 steps of Smacof
optimization before computing the stress. This is suitable if you have
a large dataset and want to save some time. First we load the data and
compute the distance matrix (just like in our previous example).</p>

<p class="header"><a href="mds1.py">mds1.py</a> (uses <a href=
"iris.tab">iris.tab</a>)</p>
<XMP class= code>import orange
import orngMDS
import math
data=orange.ExampleTable("../datasets/iris.tab")
dist = orange.ExamplesDistanceConstructor_Euclidean(data)
matrix = orange.SymMatrix(len(data))
for i in range(len(data)):
   for j in range(i+1):
       matrix[i, j] = dist(data[i], data[j])
</XMP>

<p>Then we construct the MDS instance and perform the initial
torgerson approximation, after which we update the stress matrix using
the orngMDS.KruskalStress function.</p>

<XMP class= code>mds=orngMDS.MDS(matrix) mds.Torgerson()
mds.getStress(orngMDS.KruskalStress)
</XMP>

<p>And finally the main optimization loop, after which we print the
projected points along with the data</p>

<XMP class= code>i=0 while 100>i:
    i+=1
    oldStress=mds.avgStress
    for j in range(10): mds.SMACOFstep()
    mds.getStress(orngMDS.KruskalStress)
    if oldStress*1e-3 > math.fabs(oldStress-mds.avgStress):
        break;
for (p, e) in zip(mds.points, data):
    print p, e
</XMP>

<h2>Stress function</h2>
<P><code>StressFunction</code> computes the stress between two points</P>
<P class=section>Methods</P>
<DL class=attributes>
<DT>__call__(correct, current, weight=1.0)</DT>
<DD>computes the stress using the correct and the current distance value(the <code>distances</code> and <code>projectedDistances</code> elements)</DD>
</DL>
<p>The orngMDS module provides 4 stress functions</p>
<p>
<ul>
<li>orngMDS.SgnRelStress</li>
<li>orngMDS.KruskalStress</li>
<li>orngMDS.SammonStress</li>
<li>orngMDS.SgnSammonStress</li>
</ul>
</p>
</body>
</html>


