<html><HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
</HEAD>
<body>
<h1>orngBayes: A Helper Module for Naive Bayesian Classifier</h1>
<index name="classifiers+naive Bayesian classifier">
<index name="modules+bayes learner">
<index name="classes/BayesLearner (in orngBayes)">

<p>Module orngBayes contains a Bayesian learner which uses the one from Orange, with the only difference that using the m-estimate is much simpler than with the learner built in Orange. Besides, the module has a function for printing out the classifier in a textual form.</p>

<h2>Bayes Learner</h2>

<P>Class <code>orngBayes.BayesLearner</code> is similar to <code>orange.BayesLearner</code> (the former in fact uses the latter) except that for estimating the probabilities with m-estimates you don't need to set a bunch of probability estimators, you can simply specify the value of m. To show how, let's compare a naive Bayesian classifier with m-estimate (m=2) with one that uses relative frequencies to estimate probabilities.</P>

<p class="header">part of <a href="bayes.py">bayes.py</a></p>
<xmp class="code">import orange, orngBayes, orngTest, orngStat

data = orange.ExampleTable("lung-cancer")

bayes = orngBayes.BayesLearner()
bayes_m = orngBayes.BayesLearner(m=2)

res = orngTest.crossValidation([bayes, bayes_m], data)
CAs = orngStat.CA(res)
print
print "Without m: %5.3f" % CAs[0]
print "With m=2: %5.3f" % CAs[1]
</xmp>

<p class="section">Attributes</p>

<P>All the attributes listed here are optional in the sense that they appear and are used only if you set them.</P>

<dl class="attributes">
<dt>m</dt>
<dd>m for m-estimate. If you set it, m-estimation of probabilities will be used (through class <a href="../reference/ProbabilityEstimation.htm#mestimate"><code>orange.ProbabilityEstimatorConstructor_m</code></a>). This attribute is ignored if you also set <code>estimatorConstructor</code>.</dd>

<dt>estimatorConstructor</dt>
<dd>Probability estimator constructor to be used for a priori class probabilities. If set, it should be an instance of a class derived from <a href="../reference/ProbabilityEstimation.htm"><code>orange.ProbabilityEstimatorConstructor</code></a>. Setting this attribute disable the above described attribute <code>m</code>.</dd>

<dt>conditionalEstimatorConstructor</dt>
<dd>Probability estimator constructor for conditional probabilities for discrete attributes. If the attribute is omitted, the same estimator will be used as for a priori class probabilities.</dd>

<dt>conditionalEstimatorConstructorContinuous</dt>
<dd>As above, but for continuous attributes.</dd>
</dl>

<P>If none of these attributes is given, relative frequencies are used for a priori class probabilities and conditional probabilities of discrete attributes, and loess is used for continuous attributes.</P>

<p class="section">Methods</p>
<dl class="attributes">
<dt>Constructor</dt>
<dd>As usual, the constructor can be given no arguments or keyword arguments (such as m=2) which are copied to the object's attributes; the constructor will then return an instance of <code>orngBayes.BayesLearner</code>. Or it can be given learning examples (and possibly a weight meta attribute), it will construct and return a classifier (an instance of <code>orange.BayesClassifier</code>).</dd>

<dt>__call__(self, examples, weightID = 0)</dt>
<dd>Call the learner with examples as an argument (and, optionally the id of meta attribute with weights) and you'll get the classifier, as usual. The classifier will be an instance of <code>orange.BayesClassifier</code>, module <code>orngBayes</code> doesn't provide a special classifier.</dd>

<dt>createInstance(self)</dt>
<dd>This function returns an instance of <code>orange.BayesLearner</code> with the components set as defined by the attributes. Actually, when you call <code>orngBayes.BayesLearner</code> it calls <code>createInstance</code> to construct an appropriate <code>orange.BayesLearner</code> and forwards the call to it.</dd>
</dl>

<h2>Printing out the model</h2>

<p>To print out the model in form of contingency matrices, call function <code>orngBayes.printModel(model)</code>, like the code below:</p>
<p class="header">part of <a href="bayes.py">bayes.py</a></p>
<xmp class="code">import orange, orngBayes

data = orange.ExampleTable("voting")
model = orngBayes.BayesLearner(data)
orngBayes.printModel(model)
</xmp>

<P>The output will start with
<xmp>
                     republican   democrat
class probabilities       0.386      0.614

Attribute handicapped-infants
                     republican   democrat
                   n      0.568      0.432
                   y      0.166      0.834

Attribute water-project-cost-sharing
                     republican   democrat
                   y      0.385      0.615
                   n      0.380      0.620
</xmp>
... and so on through all the attributes.</P>

<P>This function is unable to print out the model if it contains continuous attributes or advanced probability estimators which wouldn't store the pre-computed probabilities (we have none like this at the moment).</P>

</body> </html>
