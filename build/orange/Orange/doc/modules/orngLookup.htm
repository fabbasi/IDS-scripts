<html><HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
</HEAD>
<body>
<h1>orngLookup: Functions for Working with Classifiers That Use a Stored Example Table</h1>
<index name="modules+lookup classification">
<index name="classifiers/lookup classification">

<P>This module contains several functions for working with classifiers that use a stored example table for making predictions. There are four such classifiers; the most general stores an <CODE>ExampleTable</CODE> and the other three are specialized and optimized for cases where the domain contains only one, two or three attributes (besides the class attribute).<P>

<hr>

<H2>Functions</H2>

<H3>lookupFromBound(classVar, bound)</H3>

<P>This function constructs an appropriate lookup classifier for one, two or three attributes. If there are more, it returns <CODE>None</CODE>. The resulting classifier is of type <CODE>ClassifierByLookupTable</CODE>, <CODE>ClassifierByLookupTable2</CODE> or <CODE>ClassifierByLookupTable3</CODE>, with <CODE>classVar</CODE> and bound set set as given.</P>

<P>If, for instance, <CODE>data</CODE> contains a dataset Monk 1 and you would like to construct a new feature from attributes <CODE>a</CODE> and <CODE>b</CODE>, you can call this function as follows.

<XMP class="code">>>> newvar = orange.EnumVariable()
>>> bound = [data.domain[name] for name in ["a", "b"]
>>> lookup = orngLookup.lookupFromBound(newvar, bound)
>>> print lookup.lookupTable
<?, ?, ?, ?, ?, ?, ?, ?, ?>
</XMP>

<P>Function <CODE>orngLookup.lookupFromBound</CODE> does not initialize
neither <CODE>newVar</CODE> nor the lookup table...</P>


<H3>lookupFromFunction(classVar, bound, function)</H3>

<P>... and that's exactly where <CODE>lookupFromFunction</CODE> differs from <CODE>lookupFromBound</CODE>. <CODE>lookupFromFunction</CODE> first calls <CODE>lookupFromBound</CODE> and then uses the function to initialize the lookup table. The other difference between this and the previous function is that <CODE>lookupFromFunction</CODE> also accepts bound sets with more than three attributes. In this case, it construct a <CODE>ClassifierByExampleTable</CODE>.
</P>

<P>The function gets the values of attributes as integer indices and should return an integer index of the "class value". The class value must be properly initialized.</P>

<P>For exercise, let us construct a new attribute called <CODE>a=b</CODE> whose value will be "yes" when <CODE>a</CODE> and <CODE>b</CODE> or equal and "no" when they are not. We will then add the attribute to the dataset.</P>

<XMP class="code">>>> bound = [data.domain[name] for name in ["a", "b"]]
>>> newVar = orange.EnumVariable("a=b", values = ["no", "yes"])
>>> lookup = orngLookup.lookupFromFunction(newVar, bound, lambda x: x[0]==x[1])
>>> newVar.getValueFrom = lookup
>>> import orngCI
>>> data2 = orngCI.addAnAttribute(newVar, data)
>>> for i in data2[:30]:
...     print i
['1', '1', '1', '1', '1', '1', 'yes', '1']
['1', '1', '1', '1', '1', '2', 'yes', '1']
['1', '1', '1', '1', '2', '1', 'yes', '1']
['1', '1', '1', '1', '2', '2', 'yes', '1']
   ...
['2', '1', '2', '3', '4', '1', 'no', '0']
['2', '1', '2', '3', '4', '2', 'no', '0']
['2', '2', '1', '1', '1', '1', 'yes', '1']
['2', '2', '1', '1', '1', '2', 'yes', '1']
   ...
</XMP>

<P>The attribute was inserted with use of <CODE>orngCI.addAnAttribute</CODE>.
By setting <CODE>newVar.getValueFrom</CODE> to <CODE>lookup</CODE> we state that when converting domains (either when needed by <CODE>addAnAttribute</CODE> or at some other place), <CODE>lookup</CODE> should be used to compute <CODE>newVar</CODE>'s value. (A bit off topic, but important: you should <B>never call <CODE>getValueFrom</CODE> directly</B>, but always call it through <CODE>computeValue</CODE>.)



<H3>lookupFromExamples(examples [, weight])</H3>

<P>This function takes a set of examples (<CODE>ExampleTable</CODE>, for instance) and turns it into a classifier. If there are one, two or three attributes and no ambiguous examples (examples are ambiguous if they have same values of attributes but with different class values), it will construct an appropriate <CODE>ClassifierByLookupTable</CODE>. Otherwise, it will return an <CODE>ClassifierByExampleTable</CODE>.</P>

<XMP class="code">>>> lookup = orngLookup.lookupFromExamples(data)
>>> testExample = orange.Example(data.domain, ['3', '2', '2', '3', '4', '1', '?'])
>>> lookup(testExample)
<orange.Value 'y'='0'>
</XMP>


<H3>printLookupFunction(func)</H3>

<P><CODE>printLookupFunction</CODE> returns a string with a lookup function in tab-delimited format. Argument <CODE>func</CODE> can be any of the abovementioned classifiers or an attribute whose <CODE>getValueFrom</CODE> points to one of such classifiers.</P>

<P>Module <CODE>orngLookup</CODE> sets the output for those classifiers using the orange output schema. This means that you don't need to call <CODE>printLookupFunction</CODE> directly. Use <CODE>dump</CODE> and <CODE>write</CODE> functions instead.</P>

<P>For instance, if <CODE>lookup</CODE> is such as constructed in example for <CODE>lookupFromFunction</CODE>, you can print it out by</CODE></P>

<XMP class="code">>>> print lookup.dump("tab")
a      b      a=b
------ ------ ------
1      1      yes
1      2      no
1      3      no
2      1      no
2      2      yes
2      3      no
3      1      no
3      2      no
3      3      yes
</XMP>

<P>Function <CODE>write</CODE> writes it to file, either a new one</P>
<XMP class="code">>>> lookup.write("tab", "d:\\t.txt")
</XMP>

<P>or to an already open file (this way you can write more things to one file)</P>
<XMP class="code">>>> lookup.write("tab", f)
</XMP>

</body> </html>
