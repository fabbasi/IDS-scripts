<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="../style-print.css" TYPE="text/css" MEDIA=print></LINK>
</HEAD>

<BODY>
<h1>orngNetwork</h1>

<index name="modules+network">

<p>The orngNetwork module provides the functionality to perform network 
analysis and layout optimization.</p>

<h2>Network</h2>

<p><INDEX name="classes/Network (in orngNetwork)">Network class holds network 
structure information and supports basic network analysis. Network class is 
inherited from <a href='../reference/graph.htm'>orange.GraphAsList</a>. Refer to 
<a href='../reference/graph.htm'>orange.GraphAsList</a> for more graph analysis tools. See the <a href='../reference/pathfinder.htm'>orangeom.Pathfinder</a> class 
for a way to simplify your network.</p>

<p class=section>Attributes</p>
<DL class =attributes>
<DT>coors</DT>
<DD>Coordinates for all vertices. They are initialized to random positions. You can modify them manually or use one of the optimization algorithms. Usage: <code>coors[0][i]</code>, <code>coors[1][i]</code>; 0 for x-axis, 1 for y-axis</DD>
<DT>items</DT>
<DD>ExampleTable with information about vertices. Number of rows should match the number of vertices.</DD>
<DT>links</DT>
<DD>ExampleTable with information about edges. Number of rows should match the number of edges. Two float attributes named <i>"u"</i> and <i>"v"</i> must be in <i>links</i> table domain to relate the data of an example to an edge. Here, egde is defined by two vertices <i>"u"</i> and <i>"v"</i>.</DD>
<DT>optimization</DT>
<DD>An instance of the NetworkOptimization class. Various network layout optimization methods can be applied to the network through this attribute.</DD>
</DL>

<P class=section>Methods</P>
<DL class=attributes>
<DT>Network()</DT>
<DD>Default constrctor. Creates a network with one vertex.</DD>
<DT>Network(nVertices, nEdges, directedGraph=False)</DT>
<DD>Creates a network with n vertices. The nEdges attribute is used to set the number of edge types. It should always be 0, except in some special cases.</DD>
<!-- <DT>fromSymMatrix(matrix, lower, upper, kNN, andor)</DT>
<DD></DD> -->
<DT>fromDistanceMatrix(matrix, lower, upper, kNN=0)</DT>
<DD>Creates edges between vertices with the distance within given threshold. 
Matrix should be of orange.SymMatrix type. The number ob objects in a matrix 
must match the number of vertices in a network. The kNN parameter can be used to 
specify the minimum number of closest vertices to be connected.</DD>
<DT>save(file)</DT>
<DD>Saves the network to a Pajek (.net) or GML file format. ExampleTables <i>items</i> and <i>links</i> are saved automatically if the value is not None. They are saved to "file_items.tab" and "file_links.tab" files.</DD>
</DL>

<P class=section>Static Methods</P>
<DL class=attributes>
<DT>read(file)</DT>
<DD>Reads the network from a Pajek (.net) or GML file. Usage: <code>orngNetwork.Network.read(filename)</code></DD>
</DL>
<h2>NetworkOptimization</h2>

<p><INDEX name="classes/NetworkOptimization (in orngNetwork)">NetworkOptimization  
is the main class for performing network layout optimization. Network structure is defined in orngNetwork.Network class.</p>

<p class=section>Attributes</p>
<DL class =attributes>
<DT>graph</DT>
<DD>Holds the Network object.</DD>
</DL>
<P class=section>Methods</P>
<DL class=attributes>
<DT>NetworkOptimization()</DT>
<DD>Default constrctor.</DD>
<DT>NetworkOptimization(network)</DT>
<DD>Constructor that takes the Network object.</DD>
<DT>random()</DT>
<DD>Random layout optimization.</DD>
<DT>fruchtermanReingold(steps=100, temperature=1000, coolFactor=default, hiddenNodes=[], weighted=False)</DT>
<DD>Fruchterman-Reingold spring layout optimization. Set number of iterations with argument <code>steps</code>, start temperature with <code>temperature</code> (for example: 1000) and set list of hidden nodes with argument <code>hidden_nodes</code>.</DD>
<DT>radialFruchtermanReingold(center, steps=100, temperature=1000)</DT>
<DD>Radial Fruchterman-Reingold spring layout optimization. Set center node with attribute <code>center</code>, number of iterations with argument <code>steps</code> and start temperature with <code>temperature</code> (for example: 1000).</DD>
<DT>circularOriginal()</DT>
<DD>Circular layout optimization based on original order.</DD>
<DT>circularRandom()</DT>
<DD>Circular layout optimization based on random order.</DD>
<DT>circularCrossingReduction()</DT>
<DD>Circular layout optimization (Michael Baur, Ulrik Brandes) with crossing reduction.</DD>
</DL>

<h2>Examples</h2>

<h3>Network constructor and random layout</h3>

<p>In our first example we create a Network object with a simple full graph (K5). Vertices are initially placed randomly. Graph is visualized using pylabs matplotlib. NetworkOptimization class is not needed since we do not apply any layout optimization method in this example.</p>

<p class="header"><a href="network_constructor.py">network_constructor.py</a></p>
<xmp class=code>import orngNetwork
from pylab import *

# create graph object of type GraphAsList
# vertices are placed randomly in Network constructor
net = orngNetwork.Network(5, 0)

# set edges
for i in range(4):
    for j in range(i + 1, 5):
        net[i,j] = 1

# read all edges and plot a line
for u, v in net.getEdges():
    x1, y1 = net.coors[0][u], net.coors[1][u]
    x2, y2 = net.coors[0][v], net.coors[1][v]
    plot([x1, x2], [y1, y2], 'b-')

# read x and y coordinates to Python list
x = net.coors[0]
y = net.coors[1]

# plot vertices
plot(x, y, 'ro')
show()
</xmp>
<p>Executing the above script pops-up a pylab window with the
following graph drawing:</p>
<img src="network_K5_random.png">
<h3>Network layout optimization</h3>

<p>This example demonstrates how to optimize network layout using one of included algorithms.</p>

<p class="header">part of <a href="network_optimization.py">network_optimization.py</a></p>
<xmp class=code># vertices are placed randomly in NetworkOptimization constructor
networkOptimization = orngNetwork.NetworkOptimization(net)

# optimize verices layout with one of included algorithms
networkOptimization.fruchtermanReingold(100, 1000)
</xmp>
<p>You can use one of the following optimization algorithms:</p>
<p>
<ul>
<li>.random()</li>
<li>.fruchtermanReingold(steps, temperature, coolingFactor=Default, hiddenNodes=[], weighted=False)</li>
<li>.radialFruchtermanReingold(center, steps, temperature)</li>
<li>.circularOriginal()</li>
<li>.circularRandom()</li>
<li>.circularCrossingReduction()</li>
</ul>
</p>
<p>Spring forces layout optimization is the result of the above script:</p>
<img src="network_K5_fr.png">
<h3>Reading and saving a network</h3>

<p>This example demonstrates reading a network. Network class can read or write Pajek (.net) or GML file format.</p>

<p class="header"><a href="network_read.py">network_read.py</a> (uses <a href="K5.net">K5.net</a>)</p>

<xmp class=code># read the network from file
net = orngNetwork.Network.read("K5.net")

# save the network to file
net.save("K5.net")
</xmp>

<h3>Visualize a network in NetExplorer widget</h3>

<p>This example demonstrates how to display a network in NetExplorer. </p>

<p class="header">part of <a href="network_widget.py">network_widget.py</a></p>
<xmp class=code>net = orngNetwork.Network.read('musicians.net')
net.items = orange.ExampleTable('musicians_items.tab')

ow = OWNetExplorer.OWNetExplorer()
ow.setNetwork(net)

ow.show()
</xmp>

<img width="800px" src="netexplorer.png">
