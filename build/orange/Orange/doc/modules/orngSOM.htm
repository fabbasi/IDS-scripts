<html>
<head>
<link rel=stylesheet href="../style.css" type="text/css" media=screen>
</head>
<body>
<h1>orngSOM</h1>
<p>orngSOM module contains an implementation of the Self Organizing Map (also known as Kohonen map) algorithm<p>
<h2>SOMLearner</h2>
<p>SOMLearner is a class used to train the SOM on the training data</p>
<p class=section >Arguments</p>
<dl class=arguments>
  <dt>map_shape</dt>
  <dd>A tuple containing the width and height of the map (default (5, 10))</dd>
  <dt>initialize</dt>
  <dd>Specifies one of the two ways the map is initialized, InitializeLinear (default) or InitializeRandom</dd>
  <dt>neighbourhood</dt>
  <dd>Specifies one of the two map neighbourhood types, NeighbourhoodGaussian (default) or NeighbourhoodBubble</dd>
  <dt>topology</dt>
  <dd>Specifies one of the two map topology types, HexagonalTopology (default) or RectangularTopology</dd>
  <dt>radius_ini</dt>
  <dd>The start radius (default 3)</dd>
  <dt>radius_fin</dt>
  <dd>The final radius (default 1)</dd>
  <dt>epochs</dt>
  <dd>The number of training iterations</dd>
</dl>

<h2>SOMSupervisedLearner</h2>
<p>SOMSupervisedLearner is a class used to learn SOM from orange.ExampleTable, by using the
class information in the learning process. This is achieved by adding a value for each class
to the training instances, where 1.0 signals class membership and all other values are 0.0.
After the training, the new values are discarded from the node vectors. Otherwise it behaves
just like the SOMLearner.</p>

<h2>SOMMap</h2>
<p>SOMMap contains the resulting trained map</p>
<p class=section >Methods</p>
<dl class=attributes>
  <dt>getBestMatchingNode(example)</dt>
  <dd>Return the node closest to the example</dd>
  <dt>__call__(example)</dt>
  <dd>Predict the class of the example by finding the best matching node of the example and classify
  it to the majority class of all training instances mapped to this node (only works if the class information
  is present in the learning data)</dd>
  <dt>__getitem__(i, j)</dt>
  <dd>Return the node in the i-th row and i-th column (e.g. map[1, 3])</dd>
  <dt>__iter__()</dt>
  <dd>Return an iterator over all the nodes</dd>
</dl>

<h2>Example</h2>

<xmp class=code>>>> som = orngSOM.SOMLearner(map_shape=(10, 20), initialize=orngSOM.InitializeRandom)
>>> map = som(orange.ExampleTable("iris.tab"))
>>> for n in map:
>>>     print "node:", n.pos[0], n.pos[1]
>>>     for e in n.examples:
>>>         print "\t",e
</xmp>