<html><HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
</HEAD>
<body>

<p class="Path">
Prev: <a href="start.htm">Start with Orange</a>,
Next: <a href="basic_exploration.htm">Basic Data Exploration</a>,
Up: <a href="default.htm">On Tutorial 'Orange for Beginners'</a>
</p>

<H1>Load-In The Data</H1>
<index name="data input">

<p>Orange is a machine learning and data mining suite, so
loading-in the data is, as you may acknowledge, its essential
functionality (we tried not to stop here, though, so read on).
Orange supports C4.5, Assistant, Retis, and tab-delimited (native
Orange) data formats. Of these, you may be most familiar with C4.5,
so we will say something about this here, whereas Orange&rsquo;s
native format is the simplest so most of our data files will come
in this flavor.</p>

<p>Let us start with example and Orange native data format. Let us
consider an artificial data set on lens prescription (from
Cendrowska, J. "PRISM: An algorithm for inducing modular rules",
International Journal of Man-Machine Studies, 1987, 27, 349-370).
The data set has four attributes (age of the patient, spectacle
prescription, notion on astigmatism, and information on tear
production rate) plus an associated three-valued class, that gives
the appropriate lens prescription for patient (hard contact lenses,
soft contact lenses, no lenses). You may have already guessed that
this data set can, in principle, be used to build a classifier
that, based on the four attributes, prescribes the right lenses.
But before we do that, let us see how the data set file is composed
and how to read it in Orange.</p>

<p class=header>first few lines of <a href="lenses.tab">lenses.tab</a></p>
<xmp class=code>age       prescription  astigmatic    tear_rate     lenses
discrete  discrete      discrete      discrete      discrete 
                                                    class
young     myope         no            reduced       none
young     myope         no            normal        soft
young     myope         yes           reduced       none
young     myope         yes           normal        hard
young     hypermetrope  no            reduced       none
</xmp>

<p>First line of the file lists names of attributes and class.
Second line gives the type of the attribute. Here, all attributes
are nominal (or discrete), hence the &ldquo;discrete&rdquo; keyword
any every column. If you get tired of typing
&ldquo;discrete&rdquo;, you may use &ldquo;d&rdquo; instead. We
will later find that attribute may also be continuous, and will
have appropriate keyword (or just &ldquo;c&rdquo;) in their
corresponding columns. The third line adds an additional
description to every column. Note that &ldquo;lenses&rdquo; is a
special variable since it represents a class where each data
instance is classified. This is denoted as &ldquo;class&rdquo; in
the third line of the last column. Other keywords may be used in
this line that we have not used in our example. For instance, for
the attributes that we would like to ignore, we can use
&ldquo;ignore&rdquo; keyword (or simply &ldquo;i&rdquo;). There are
also other keywords that may be used, but for the sake of
simplicity we will skip all this here.</p>

<p>The rest of the table gives the data. Note that there are 5
instances in our table above (check the original file to see
other). Orange is rather free in what attribute value names it
uses, so they do not need all to start with a letter like in our
example.</p>

<p>Attribute values are separated with tabulators (&lt;TAB&gt;).
This is rather hard to see above (it looks like spaces were used),
so to verify that check the original data set <a href=
"lenses.tab">lenses.tab</a> in your favorite text editor.
Alternatively, authors of this text like best to edit these files
in a spreadsheet program (and use tab-delimited format to save the
files), so a snapshot of the data set as edited in Excel can look
like this:</p>

<img border=0 src="excel.png" alt="Data in Excel">

<p>To load the file <a href="lenses.tab">lenses.tab</a> in
Orange, first decide in which folder of your hard disk you want to
put it (you may create this folder first). Say you want to work in
c:\orange directory. Now right click on <a href=
"lenses.tab">lenses.tab</a>, choose &ldquo;Save Target
As&hellip;&rdquo; command and save lenses.tab in c:\orange. Let us
see first how you would load the file if you use Command Prompt
application. Bring up the command prompt window first
(Start-&gt;Programs-&gt;Accessories-&gt;Command Prompt), change the
directory to c:\orange and run Python. Import Orange library and
use ExampleTable method to read in the data. The whole dialog
should look something like this (the text typed in by user is
marked in bold):</p>

<pre class=code class=code>
> <b>cd c:\orange</b>
> <b>python</b>
>>> <b>import orange</b>
>>> <b>data = orange.ExampleTable("lenses")</b>
</pre>

<p>This creates an object called data that holds your data set and
information about the lenses domain. Note that for the file name no
suffix was needed: Orange ventures through the current directory
and checks if any files of the types it knows are available. This
time, it found lenses.tab.</p>

<p>How do we know that data really contains our data set? Well,
let&rsquo;s check this out and print the attribute names and first
3 data items:</p>

<pre class=code>
>>> <b>print data.domain.attributes</b>
&lt;age, prescription, astigmatic, tear_rate&gt;
>>> <b>for i in range(3):</b>
... 	print data[i]
... 	
['young', 'myope', 'no', 'reduced', 'none']
['young', 'myope', 'no', 'normal', 'soft']
['young', 'myope', 'yes', 'reduced', 'none']
>>>
</pre>

<p>Now let&rsquo;s put together a script file that reads lenses
data, prints out names of the attributes and class, and lists first
5 data instances:</p>


<p class=header><a href="lenses.py">lenses.py</a> (uses <a href="lenses.tab">lenses.tab</a>)</p>
<xmp class=code class=code>import orange
data = orange.ExampleTable("lenses")
print "Attributes:",
for i in data.domain.attributes:
    print i.name,
print
print "Class:", data.domain.classVar.name

print "First 5 data items:"
for i in range(5):
   print data[i]
</xmp>

<p>Few comments on this script are in place. First, note that data
is an object that holds both the data and information on the
domain. We show above how to access attribute and class names, but
you may correctly expect that there is much more information there,
including on attribute type, values it may hold, etc. Also notice
the particular syntax python uses for &ldquo;for&rdquo; loops: the
line that declares the loop ends with &ldquo;:&rdquo;, and whatever
is in the loop is indented (we have used three spaces to indent the
statements that are within each loop).</p>

<p>Put <a href="lenses.py">lenses.py</a> script in your
working directory (e.g., c:\orange or alike). There should now be
files lenses.py and lenses.tab. Now let&rsquo;s see if we run the
script we have just written:</p>

<pre class=code>
> <b>cd d:\orange</b>
> <b>python lenses.py</b>
Attributes: age prescription astigmatic tear_rate
Class: lenses
First 5 data items:
['young', 'myope', 'no', 'reduced', 'none']
['young', 'myope', 'no', 'normal', 'soft']
['young', 'myope', 'yes', 'reduced', 'none']
['young', 'myope', 'yes', 'normal', 'hard']
['young', 'hypermetrope', 'no', 'reduced', 'none']
>
</pre>

<p>Now, we promised to say something about C4.5 data files, which
syntax is sort-of common within machine learning community due to
extensive use of this program. Notice that C4.5 data sets are
described within two files: file with extension &ldquo;.data&rdquo;
holds the actual data, whereas domain (attribute and class names
and types) are described in a separate file &ldquo;.names&rdquo;.
Instead of going into how exactly these files are formed, we show
just an example that Orange can handle them. For this purpose, load
<a href="car.data">car.data</a> and <a href=
"car.names">car.names</a> of the <a href=
"/blaz/hint/car_dataset.asp">car evaluation dataset</a>, and run the
following code through your Command Prompt:</p>

<p class="header">loading of C4.5 file (uses <a href="car.data">car.data</a>
and <a href="car.names">car.names</a>)</p>
<pre class=code>
> <b>python</b>
>>> <b>car_data = orange.ExampleTable("car")</b>
>>> <b>print car_data.domain.attributes</b>
&lt;buying, maint, doors, persons, lugboot, safety&gt;
>>>
</pre>

<p>If you think that storing domain information and data in a
single file, or if you better like looking to your data through the
spreadsheet, you may now store your C4.5 data file to a Orange
native (.tab) format:</p>

<pre class=code>
>>> <b>orange.saveTabDelimited ("car.tab", car_data)</b>
>>>
</pre>

<p>Similarly, saving to C4.5 format is possible through
orange.saveC45.</p>

<p>Above all applies if you run Python through Command Prompt. If
you use PythonWin, however, you have to tell it where exactly your
data is located. You may either need to specify absolute path of
your data files, like (type your commands in Interactive
Window):</p>

<pre class=code>
>>> <b>car_data = orange.ExampleTable("c:\\orange\\car")</b>
>>>
</pre>

<p>or set a working directory through Python&rsquo;s os
library:</p>

<pre class=code>
>>> <b>import os</b>
>>> <b>os.chdir("c:\\orange")</b>
>>>
</pre>

<p>Double backslashes (&ldquo;\\&rdquo;) are needed since this is
how Python handles them in strings. If you do not like this (I
don&rsquo;t), you need to put &ldquo;r&rdquo; in front of any
string that specifies file paths, like:</p>

<pre class=code>
>>> <b>car_data = orange.ExampleTable(r"c:\orange\car")</b>
>>>
</pre>

<p>In PythonWin, you would probably like to use the scripts that
come with this tutorial without changing them every time to type in
your specific file paths. To do this, just after opening PythonWin,
in Interactive Window change the working directory (use os.chdir()
as described above). Now open the script (say, lenses.py) using
File-&gt;Open&hellip; menu. To run it, make sure the script&rsquo;s
window is active, and press F5 to run the script. The output of
your script is printed in Interactive Window, just like in snapshot
below.</p>

<img src="python_win_source.png" alt="Orange Scripting in PythonWin">

<p>So much for loading in the data. Remember, we have also learned
how to save the data set and how to print out some basic
information on data domain. In the next lesson, you will learn how
to <a href="basic_exploration.htm">extract some more basic
information on the data sets</a>, and how to use Python to derive
some basic statistics of the data.</p>

<hr><br><p class="Path">
Prev: <a href="start.htm">Start with Orange</a>,
Next: <a href="basic_exploration.htm">Basic Data Exploration</a>,
Up: <a href="default.htm">On Tutorial 'Orange for Beginners'</a>
</p>

</body></html>

