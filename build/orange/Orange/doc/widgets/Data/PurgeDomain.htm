<html>
<head>
<title>Purge Domain</title>
<link rel=stylesheet href="../../../style.css" type="text/css" media=screen>
<link rel=stylesheet href="style-print.css" type="text/css" media=print></link>
</head>

<body>

<h1>Purge Domain</h1>

<img class="screenshot" src="../icons/PurgeDomain.png">
<p>Removes the unused attribute values and useless attributes, sorts values of the remaining.</p>

<h2>Channels</h2>

<h3>Inputs</h3>

<DL class=attributes>
<DT>Examples (ExampleTable)</DT>
<DD>A data set.</DD>
</dl>

<h3>Outputs</h3>

<DL class=attributes>
<DT>Examples (ExampleTable)</DT>
<DD>Filtered data set</DD>
</dl>

<h2>Description</h2>

<p>Definitions of nominal attributes sometimes contain values which don't appear in the data. Even if this does not happen in the original data, filtering the data, selecting examples subsets and similar can remove all examples for which the attribute has some particular value. Such values clutter data presentation, especially various visualizations, and should be removed.</p>

<P>After purging an attribute, it may become single-valued or, in extreme case, have no values at all (if the value of this attribute was undefined for all examples). In such cases, the attribute can be removed.</P>

<P>A different issue is the order of attribute values: if the data is read from a file in a format where the values are not declared in advance, they are sorted "in order of appearance". Sometimes we would prefer to have them sorted alphabetically.</P>

<table><tr><td valign="top">
<img class="screenshot" src="PurgeDomain.png" align="left">
</td>
<td valign="top">
<P>Such purification is done by widget Purge Domain. Ordinary attributes and class attributes are treated separately. For each, we can decide if we want the values sorted or not. Next, we may allow the widget to remove attributes with less than two values, or remove the class attribute if there are less than two classes. Finally, we can instruct the widget to check which values of attributes actually appear in the data and remove the unused values. The widget cannot remove values if it is not allowed to remove the attributes; since (potentially) having attributes without values makes no sense.</P>

<P>If <span class="option">Send automatically</span> is checked, the widget will send data at each change of widget settings. Otherwise, sending the data needs to be explicitly initiated by clicking the <span class="option">Send data</span> button.</P>
</td></tr></table>

<P>The new, reduced attributes get a prefix "R_", which distinguishes them from the original ones. The values of new attributes can be computed from the old ones, but not the opposite. This means that if you construct a classifier from the new attributes, you can use it to classify the examples described by the original attributes. But not the opposite: constructing the classifier from old attributes and using it on examples described by the reduced ones won't work. Fortunately, the latter is seldom the case. In a typical setup, one would explore the data, visualize it, filter it, purify it... and then test the final model on the original data.</P>

<h2>Examples</h2>

<p>Purge Domain would typically appear after data filtering, for instance when selecting a subset of visualized examples.</p>

<img src="PurgeDomain-Schema.png"
alt="Schema with Purge Domain" class="screenshot" border=0></a>

<P>In the above schema we play with the Zoo data set: we visualize it and select a portion of the data which contains only four out of the seven original classes. To get rid of the empty classes, we put the data through Purge Domain before going on in, say, Attribute Statistics widget. The latter shows only the four classes which actually appear. To see the effect of data purification, uncheck <span class="option">Remove unused class values</span> and observe the effect this has on Attribute Statistics.</P>

<img src="PurgeDomain-Widgets.png"
alt="Schema with Purge Domain" class="screenshot" border=0></a>


</body>
</html>
