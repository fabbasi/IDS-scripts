/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern IMPORT_DLL TOrangeType PyOrOrange_Type;


/* -------------- Heatmap --------------*/

PyMethodDef Heatmap_methods[] = {
     {"__reduce__", (binaryfunc)Heatmap__reduce__, METH_NOARGS, "()"},
     {"get_averages", (binaryfunc)Heatmap_getAverages, METH_VARARGS, "(cell_width, cell_height, lowerBound, upperBound, gamma[, grid, firstRow, nRows]) -> bitmap"},
     {"get_bitmap", (binaryfunc)Heatmap_getBitmap, METH_VARARGS, "(cell_width, cell_height, lowerBound, upperBound, gamma[, grid, firstRow, nRows]) -> bitmap"},
     {"get_cell_intensity", (binaryfunc)Heatmap_getCellIntensity, METH_VARARGS, "(row, column) -> float"},
     {"get_percentile_interval", (binaryfunc)Heatmap_getPercentileInterval, METH_VARARGS, "(lower_percentile, upper_percentile) -> (min, max)"},
     {"get_row_intensity", (binaryfunc)Heatmap_getRowIntensity, METH_VARARGS, "(row) -> float"},
     {NULL, NULL}
};


PyObject *Heatmap_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrHeatmap_Type, type, args, kwds); }


PyTypeObject PyOrHeatmap_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Heatmap",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Heatmap_methods,                                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Heatmap_abstract_constructor,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Heatmap(PyObject *obj, void *ptr) { if (!PyOrHeatmap_Check(obj)) return 0;      *(GCPtr<THeatmap> *)(ptr) = PyOrange_AsHeatmap(obj); return 1; }
int ccn_func_Heatmap(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THeatmap> *)(ptr) = GCPtr<THeatmap>(); return 1; }      if (!PyOrHeatmap_Check(obj)) return 0;      *(GCPtr<THeatmap> *)(ptr) = PyOrange_AsHeatmap(obj); return 1; }


ORANGENE_API TOrangeType PyOrHeatmap_Type (PyOrHeatmap_Type_inh, typeid(THeatmap), 0, cc_Heatmap, ccn_Heatmap, NULL, false, NULL, NULL);



/* -------------- HeatmapConstructor --------------*/

PyMethodDef HeatmapConstructor_methods[] = {
     {"__reduce__", (binaryfunc)HeatmapConstructor__reduce__, METH_NOARGS, "()"},
     {"get_legend", (binaryfunc)HeatmapConstructor_getLegend, METH_VARARGS, "(width, height, gamma) -> bitmap"},
     {NULL, NULL}
};

char HeatmapConstructor_doc[] = "(squeeze) -> HeatmapList";


PyTypeObject PyOrHeatmapConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.HeatmapConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)HeatmapConstructor_call,              /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(ExampleTable[, baseHeatmap=None [, disregardClass=0]])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  HeatmapConstructor_methods,                        /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)HeatmapConstructor_new,                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_HeatmapConstructor(PyObject *obj, void *ptr) { if (!PyOrHeatmapConstructor_Check(obj)) return 0;      *(GCPtr<THeatmapConstructor> *)(ptr) = PyOrange_AsHeatmapConstructor(obj); return 1; }
int ccn_func_HeatmapConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THeatmapConstructor> *)(ptr) = GCPtr<THeatmapConstructor>(); return 1; }      if (!PyOrHeatmapConstructor_Check(obj)) return 0;      *(GCPtr<THeatmapConstructor> *)(ptr) = PyOrange_AsHeatmapConstructor(obj); return 1; }


ORANGENE_API TOrangeType PyOrHeatmapConstructor_Type (PyOrHeatmapConstructor_Type_inh, typeid(THeatmapConstructor), 0, cc_HeatmapConstructor, ccn_HeatmapConstructor, NULL, false, NULL, NULL);



/* -------------- HeatmapList --------------*/

PyMethodDef HeatmapList_methods[] = {
     {"__reduce__", (binaryfunc)HeatmapList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)HeatmapList_append, METH_O, "(Heatmap) -> None"},
     {"count", (binaryfunc)HeatmapList_count, METH_O, "(Heatmap) -> int"},
     {"extend", (binaryfunc)HeatmapList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)HeatmapList_filter, METH_VARARGS, "([filter-function]) -> HeatmapList"},
     {"index", (binaryfunc)HeatmapList_index, METH_O, "(Heatmap) -> int"},
     {"insert", (binaryfunc)HeatmapList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)HeatmapList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)HeatmapList_pop, METH_VARARGS, "() -> Heatmap"},
     {"remove", (binaryfunc)HeatmapList_remove, METH_O, "(Heatmap) -> None"},
     {"reverse", (binaryfunc)HeatmapList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)HeatmapList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods HeatmapList_as_sequence = {
  (inquiry)HeatmapList_len_sq,                       /* sq_length */
  (binaryfunc)HeatmapList_concat,                    /* sq_concat */
  (intargfunc)HeatmapList_repeat,                    /* sq_repeat */
  (intargfunc)HeatmapList_getitem_sq,                /* sq_item */
  (intintargfunc)HeatmapList_getslice,               /* sq_slice */
  (intobjargproc)HeatmapList_setitem_sq,             /* sq_ass_item */
  (intintobjargproc)HeatmapList_setslice,            /* sq_ass_slice */
  (objobjproc)HeatmapList_contains,                  /* sq_contains */
};

PyTypeObject PyOrHeatmapList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.HeatmapList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)HeatmapList_repr,                        /* tp_repr */
  0,
  &HeatmapList_as_sequence,                          /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)HeatmapList_str,                         /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Heatmap>)",                             /* tp_doc */
  0, 0,
  (richcmpfunc)HeatmapList_richcmp,                  /* tp_richcmp */
  0, 0, 0,
  HeatmapList_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)HeatmapList_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_HeatmapList(PyObject *obj, void *ptr) { if (!PyOrHeatmapList_Check(obj)) return 0;      *(GCPtr<THeatmapList> *)(ptr) = PyOrange_AsHeatmapList(obj); return 1; }
int ccn_func_HeatmapList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THeatmapList> *)(ptr) = GCPtr<THeatmapList>(); return 1; }      if (!PyOrHeatmapList_Check(obj)) return 0;      *(GCPtr<THeatmapList> *)(ptr) = PyOrange_AsHeatmapList(obj); return 1; }


ORANGENE_API TOrangeType PyOrHeatmapList_Type (PyOrHeatmapList_Type_inh, typeid(THeatmapList), 0, cc_HeatmapList, ccn_HeatmapList, NULL, true, NULL, NULL);



