(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I01
sg6
g112
sg7
S'TConditionalProbabilityEstimator'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
(S'TContingency'
p118
S'probabilities'
p119
g119
S'Contingency that stores conditional probabilities'
p120
I0
I0
I00
Ntp121
a(S'bool'
p122
S'supportsDiscrete'
p123
S'supports_discrete'
p124
S'can estimate probabilities of discrete attributes'
p125
I01
I0
I01
Ntp126
a(S'bool'
p127
S'supportsContinuous'
p128
S'supports_continuous'
p129
S'can estimate probabilities of continuous attributes'
p130
I01
I0
I01
Ntp131
asg29
(dp132
sbsS'THeatmapList'
p133
(ipyprops
ClassDefinition
p134
(dp135
g4
I0
sg5
I01
sg6
g133
sg7
S'TOrange'
p136
sg9
I0
sg10
(lp137
sg12
(lp138
sg29
(dp139
sbsS'TFeatureInducer'
p140
(i__main__
ClassDefinition
p141
(dp142
g4
I1
sg5
I01
sg6
g140
sg7
S'TOrange'
p143
sg9
I01
sg10
(lp144
sg12
(lp145
sg29
(dp146
sbsS'TImputerConstruct_Python'
p147
(i__main__
ClassDefinition
p148
(dp149
g4
I1
sg5
I01
sg6
g147
sg7
S'TImputerConstructor'
p150
sg9
I00
sg10
(lp151
sg12
(lp152
(S'bool'
p153
S'imputeClass'
p154
S'impute_class'
p155
S'tells whether to impute the class value (default: true)'
p156
I0
I0
I01
Ntp157
asg29
(dp158
sbsS'TExampleGeneratorList'
p159
(ipyprops
ClassDefinition
p160
(dp161
g4
I0
sg5
I01
sg6
g159
sg7
g136
sg9
I0
sg10
(lp162
sg12
(lp163
sg29
(dp164
sbsS'TIMByRowsConstructor'
p165
(i__main__
ClassDefinition
p166
(dp167
g4
I1
sg5
I01
sg6
g165
sg7
S'TOrange'
p168
sg9
I01
sg10
(lp169
sg12
(lp170
sg29
(dp171
sbsS'TSubsetsGenerator_withRestrictions'
p172
(i__main__
ClassDefinition
p173
(dp174
g4
I1
sg5
I01
sg6
g172
sg7
S'TSubsetsGenerator'
p175
sg9
I00
sg10
(lp176
sg12
(lp177
(S'TSubsetsGenerator'
p178
S'subGenerator'
p179
S'sub_generator'
p180
S'subset generator'
p181
I0
I0
I00
Ntp182
a(S'TVarList'
p183
S'required'
p184
g184
S'set of required attributes'
p185
I0
I0
I00
Ntp186
a(S'TVarList'
p187
S'forbidden'
p188
g188
S'set of forbidden attributes'
p189
I0
I0
I00
Ntp190
a(S'TVarListList'
p191
S'forbiddenSubSubsets'
p192
S'forbidden_sub_subsets'
p193
S'set of forbidden subsets (attributes that must not occur together)'
p194
I0
I0
I00
Ntp195
a(S'TVarList'
p196
S'varList'
p197
S'var_list'
p198
S'a set of attributes from which subsets are generated'
p199
I0
I0
I00
Ntp200
asg29
(dp201
sbsS'TEVDistList'
p202
(ipyprops
ClassDefinition
p203
(dp204
g4
I0
sg5
I01
sg6
g202
sg7
g136
sg9
I0
sg10
(lp205
sg12
(lp206
sg29
(dp207
sbsS'TValueFilterList'
p208
(ipyprops
ClassDefinition
p209
(dp210
g4
I0
sg5
I01
sg6
g208
sg7
g136
sg9
I0
sg10
(lp211
sg12
(lp212
sg29
(dp213
sbsS'TRuleBeamFilter_Python'
p214
(i__main__
ClassDefinition
p215
(dp216
g4
I1
sg5
I01
sg6
g214
sg7
S'TRuleBeamFilter'
p217
sg9
I00
sg10
(lp218
sg12
(lp219
sg29
(dp220
sbsS'TTreeExampleSplitter'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TOrange'
p224
sg9
I01
sg10
(lp225
sg12
(lp226
sg29
(dp227
sbsS'TSVMClassifier'
p228
(i__main__
ClassDefinition
p229
(dp230
g4
I1
sg5
I01
sg6
g228
sg7
S'TClassifierFD'
p231
sg9
I00
sg10
(lp232
sg12
(lp233
(S'TIntList'
p234
S'nSV'
p235
S'n_SV'
p236
S'nSV'
p237
I0
I0
I00
Ntp238
a(S'TFloatList'
p239
S'rho'
p240
g240
S'rho'
p241
I0
I0
I00
Ntp242
a(S'TFloatListList'
p243
S'coef'
p244
g244
S'coef'
p245
I0
I0
I00
Ntp246
a(S'TFloatList'
p247
S'probA'
p248
S'prob_a'
p249
S'probA - pairwise probability information'
p250
I0
I0
I00
Ntp251
a(S'TFloatList'
p252
S'probB'
p253
S'prob_b'
p254
S'probB - pairwise probability information'
p255
I0
I0
I00
Ntp256
a(S'TExampleTable'
p257
S'supportVectors'
p258
S'support_vectors'
p259
S'support vectors'
p260
I0
I0
I00
Ntp261
a(S'TExampleTable'
p262
S'examples'
p263
g263
S'examples used to train the classifier'
p264
I0
I0
I00
Ntp265
a(S'TKernelFunc'
p266
S'kernelFunc'
p267
S'kernel_func'
p268
S'custom kernel function'
p269
I0
I0
I00
Ntp270
a(S'int'
p271
S'svm_type'
p272
g272
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p273
I0
I0
I01
S'SVMLearner_SVMType'
p274
tp275
a(S'int'
p276
S'kernel_type'
p277
g277
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p278
I0
I0
I01
S'SVMLearner_Kernel'
p279
tp280
a(S'TDomain'
p281
S'domain'
p282
g282
S'domain'
p283
I0
I0
I00
Ntp284
ag94
ag99
asg29
(dp285
sbsS'TFilteredGenerator'
p286
(i__main__
ClassDefinition
p287
(dp288
g4
I1
sg5
I01
sg6
g286
sg7
S'TAdapterGenerator'
p289
sg9
I00
sg10
(lp290
sg12
(lp291
(S'TFilter'
p292
S'filter'
p293
g293
S'decides which examples are skipped'
p294
I0
I0
I00
Ntp295
a(S'TDomain'
p296
S'domain'
p297
g297
S'domain'
p298
I0
I0
I00
Ntp299
a(S'int'
p300
S'version'
p301
g301
S'unique version identifier'
p302
I01
I0
I01
Ntp303
asg29
(dp304
sbsS'TPythonVariable'
p305
(i__main__
ClassDefinition
p306
(dp307
g4
I1
sg5
I01
sg6
g305
sg7
S'TVariable'
p308
sg9
I00
sg10
(lp309
sg12
(lp310
(S'bool'
p311
S'usePickle'
p312
S'use_pickle'
p313
S'tells whether to use pickle for saving to/loading from files'
p314
I0
I0
I01
Ntp315
a(S'bool'
p316
S'useSomeValue'
p317
S'use_some_value'
p318
S'tells whether the Variable will operate on Value or SomeValue (default)'
p319
I0
I0
I01
Ntp320
a(S'int'
p321
S'varType'
p322
S'var_type'
p323
S' variable type'
p324
I0
I0
I01
S'Variable_Type'
p325
tp326
a(S'bool'
p327
S'ordered'
p328
g328
S'variable values are ordered'
p329
I0
I0
I01
Ntp330
a(S'bool'
p331
S'distributed'
p332
g332
S'variable values are distributions'
p333
I0
I0
I01
Ntp334
a(S'int'
p335
S'defaultMetaId'
p336
S'default_meta_id'
p337
S'default (proposed, suggested...) meta id for this variable'
p338
I0
I0
I01
Ntp339
a(S'TRandomGenerator'
p340
S'randomGenerator'
p341
S'random_generator'
p342
S'random generator for random values (initialized when first needed)'
p343
I0
I0
I00
Ntp344
a(S'TVariable'
p345
S'sourceVariable'
p346
S'source_variable'
p347
S'The attribute that this attribute is computed from (when applicable)'
p348
I0
I0
I00
Ntp349
a(S'TClassifier'
p350
S'getValueFrom'
p351
S'get_value_from'
p352
S'Function to compute the value from values of other variables'
p353
I0
I0
I00
Ntp354
asg29
(dp355
sbsS'TTreeLearner'
p356
(i__main__
ClassDefinition
p357
(dp358
g4
I1
sg5
I01
sg6
g356
sg7
S'TLearner'
p359
sg9
I00
sg10
(lp360
sg12
(lp361
(S'TTreeSplitConstructor'
p362
S'split'
p363
g363
S'split criterion'
p364
I0
I0
I00
Ntp365
a(S'TTreeStopCriteria'
p366
S'stop'
p367
g367
S'stop criterion'
p368
I0
I0
I00
Ntp369
a(S'TComputeDomainContingency'
p370
S'contingencyComputer'
p371
S'contingency_computer'
p372
S'computes contingency matrix'
p373
I0
I0
I00
Ntp374
a(S'TLearner'
p375
S'nodeLearner'
p376
S'node_learner'
p377
S'node learner'
p378
I0
I0
I00
Ntp379
a(S'TTreeExampleSplitter'
p380
S'exampleSplitter'
p381
S'example_splitter'
p382
S'splits examples to branches'
p383
I0
I0
I00
Ntp384
a(S'int'
p385
S'maxDepth'
p386
S'max_depth'
p387
S'maximal tree depth (0 = root only, -1 = no limit)'
p388
I0
I0
I01
Ntp389
a(S'bool'
p390
S'storeExamples'
p391
S'store_examples'
p392
S'if true (default: false), learning examples in nodes are stored'
p393
I0
I0
I01
Ntp394
a(S'bool'
p395
S'storeDistributions'
p396
S'store_distributions'
p397
S'if true (default), class distributions of learning examples in nodes are stored'
p398
I0
I0
I01
Ntp399
a(S'bool'
p400
S'storeContingencies'
p401
S'store_contingencies'
p402
S'if true (default), contingency matrices for examples are stored'
p403
I0
I0
I01
Ntp404
a(S'bool'
p405
S'storeNodeClassifier'
p406
S'store_node_classifier'
p407
S'if true (default), the internal nodes have classifiers; needed for pruning'
p408
I0
I0
I01
Ntp409
a(S'TTreeDescender'
p410
S'descender'
p411
g411
S'descends down the tree'
p412
I0
I0
I00
Ntp413
ag110
asg29
(dp414
sbsS'TPreprocessor_shuffle'
p415
(i__main__
ClassDefinition
p416
(dp417
g4
I1
sg5
I01
sg6
g415
sg7
S'TPreprocessor'
p418
sg9
I00
sg10
(lp419
sg12
(lp420
(S'TVarList'
p421
S'attributes'
p422
g422
S'tells which attributes to shuffle'
p423
I0
I0
I00
Ntp424
a(S'TRandomGenerator'
p425
S'randomGenerator'
p426
S'random_generator'
p427
S'random number generator'
p428
I0
I0
I00
Ntp429
asg29
(dp430
sbsS'TLearner'
p431
(i__main__
ClassDefinition
p432
(dp433
g4
I1
sg5
I01
sg6
g431
sg7
S'TOrange'
p434
sg9
I00
sg10
(lp435
sg12
(lp436
g110
asg29
(dp437
sbsS'TExamplesDistance_Maximal'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TExamplesDistance_Normalized'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
(S'TAttributedFloatList'
p444
S'normalizers'
p445
g445
S'normalizing factors for attributes'
p446
I0
I0
I00
Ntp447
a(S'TAttributedFloatList'
p448
S'bases'
p449
g449
S'lowest values for attributes'
p450
I0
I0
I00
Ntp451
a(S'TAttributedFloatList'
p452
S'averages'
p453
g453
S'average values for continuous attribute values'
p454
I0
I0
I00
Ntp455
a(S'TAttributedFloatList'
p456
S'variances'
p457
g457
S'variations for continuous attribute values'
p458
I0
I0
I00
Ntp459
a(S'int'
p460
S'domainVersion'
p461
S'domain_version'
p462
S'version of domain on which the ranges were computed'
p463
I0
I0
I01
Ntp464
a(S'bool'
p465
S'normalize'
p466
g466
S'tells whether to normalize distances between attributes'
p467
I0
I0
I01
Ntp468
a(S'bool'
p469
S'ignoreUnknowns'
p470
S'ignore_unknowns'
p471
S'if true (default: false) unknown values are ignored in computation'
p472
I0
I0
I01
Ntp473
asg29
(dp474
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p475
(i__main__
ClassDefinition
p476
(dp477
g4
I1
sg5
I01
sg6
g475
sg7
S'TSubsetsGenerator_iterator'
p478
sg9
I00
sg10
(lp479
sg12
(lp480
(S'TSubsetsGenerator_iterator'
p481
S'subGenerator_iterator'
p482
S'sub_generator_iterator'
p483
S'subset generator'
p484
I0
I0
I00
Ntp485
a(S'TVarList'
p486
S'required'
p487
g487
S'set of required attributes'
p488
I0
I0
I00
Ntp489
a(S'TVarList'
p490
S'forbidden'
p491
g491
S'set of forbidden attributes'
p492
I0
I0
I00
Ntp493
a(S'TVarListList'
p494
S'forbiddenSubSubsets'
p495
S'forbidden_sub_subsets'
p496
S'set of forbidden subsets (attributes that must not occur together)'
p497
I0
I0
I00
Ntp498
a(S'TVarList'
p499
S'varList'
p500
S'var_list'
p501
S'a set of attributes from which subsets are generated'
p502
I0
I0
I00
Ntp503
asg29
(dp504
sbsS'TPreprocessor_discretize'
p505
(i__main__
ClassDefinition
p506
(dp507
g4
I1
sg5
I01
sg6
g505
sg7
S'TPreprocessor'
p508
sg9
I00
sg10
(lp509
sg12
(lp510
(S'TVarList'
p511
S'attributes'
p512
g512
S'attributes to be discretized (all, if not defined or empty)'
p513
I0
I0
I00
Ntp514
a(S'bool'
p515
S'discretizeClass'
p516
S'discretize_class'
p517
S'also discretize the class attribute (default: false)'
p518
I0
I0
I01
Ntp519
a(S'TDiscretization'
p520
S'method'
p521
g521
S'discretization method'
p522
I0
I0
I00
Ntp523
asg29
(dp524
sbsS'TLookupLearner'
p525
(i__main__
ClassDefinition
p526
(dp527
g4
I1
sg5
I01
sg6
g525
sg7
S'TLearner'
p528
sg9
I00
sg10
(lp529
sg12
(lp530
(S'TLearner'
p531
S'learnerForUnknown'
p532
S'learner_for_unknown'
p533
S'a learner for classifying cases not found in the table'
p534
I0
I0
I00
Ntp535
a(S'bool'
p536
S'allowFastLookups'
p537
S'allow_fast_lookups'
p538
S'if true, it constructs LookupClassifiers for <=3 attributes'
p539
I0
I0
I01
Ntp540
a(S'int'
p541
S'unknownsHandling'
p542
S'unknowns_handling'
p543
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p544
I0
I0
I01
Ntp545
ag110
asg29
(dp546
sbsS'TRuleClassifier_logit'
p547
(i__main__
ClassDefinition
p548
(dp549
g4
I1
sg5
I01
sg6
g547
sg7
S'TRuleClassifier'
p550
sg9
I00
sg10
(lp551
sg12
(lp552
(S'TDistribution'
p553
S'prior'
p554
g554
S'prior distribution'
p555
I0
I0
I00
Ntp556
a(S'TDomain'
p557
S'domain'
p558
g558
S'Domain'
p559
I0
I0
I00
Ntp560
a(S'TFloatList'
p561
S'ruleBetas'
p562
S'rule_betas'
p563
S'Rule betas'
p564
I0
I0
I00
Ntp565
a(S'float'
p566
S'minStep'
p567
S'min_step'
p568
S'minimal step value'
p569
I0
I0
I01
Ntp570
a(S'float'
p571
S'minSignificance'
p572
S'min_significance'
p573
S'minimum requested significance for betas. '
p574
I0
I0
I01
Ntp575
a(S'float'
p576
S'minBeta'
p577
S'min_beta'
p578
S'minimum beta by rule to be included in the model. '
p579
I0
I0
I01
Ntp580
a(S'TClassifier'
p581
S'priorClassifier'
p582
S'prior_classifier'
p583
S'prior classifier used if provided'
p584
I0
I0
I00
Ntp585
a(S'TRuleList'
p586
S'prefixRules'
p587
S'prefix_rules'
p588
S'rules that trigger before logit sum.'
p589
I0
I0
I00
Ntp590
a(S'TRuleList'
p591
S'rules'
p592
g592
S''
p593
I0
I0
I00
Ntp594
a(S'TExampleTable'
p595
S'examples'
p596
g596
g593
I0
I0
I00
Ntp597
a(S'int'
p598
S'weightID'
p599
S'weight_ID'
p600
g593
I0
I0
I01
Ntp601
ag94
ag99
asg29
(dp602
sbsS'TProgressCallback_Python'
p603
(i__main__
ClassDefinition
p604
(dp605
g4
I1
sg5
I01
sg6
g603
sg7
S'TProgressCallback'
p606
sg9
I00
sg10
(lp607
sg12
(lp608
sg29
(dp609
sbsS'TImputeClassifier'
p610
(i__main__
ClassDefinition
p611
(dp612
g4
I1
sg5
I01
sg6
g610
sg7
S'TClassifier'
p613
sg9
I00
sg10
(lp614
sg12
(lp615
(S'TClassifierFromVar'
p616
S'classifierFromVar'
p617
S'classifier_from_var'
p618
S'ClassifierFromVar that is used to retrieve defined values'
p619
I0
I0
I00
Ntp620
a(S'TClassifier'
p621
S'imputer'
p622
g622
S'classifier that is used to determine the missing values '
p623
I0
I0
I00
Ntp624
ag94
ag99
asg29
(dp625
sbsS'TRuleCovererAndRemover'
p626
(i__main__
ClassDefinition
p627
(dp628
g4
I1
sg5
I01
sg6
g626
sg7
S'TOrange'
p629
sg9
I01
sg10
(lp630
sg12
(lp631
sg29
(dp632
sbsS'TFilterList'
p633
(ipyprops
ClassDefinition
p634
(dp635
g4
I0
sg5
I01
sg6
g633
sg7
g136
sg9
I0
sg10
(lp636
sg12
(lp637
sg29
(dp638
sbsS'TPythonValue'
p639
(i__main__
ClassDefinition
p640
(dp641
g4
I1
sg5
I01
sg6
g639
sg7
S'TSomeValue'
p642
sg9
I00
sg10
(lp643
sg12
(lp644
sg29
(dp645
sbsS'TAssociationRulesSparseInducer'
p646
(i__main__
ClassDefinition
p647
(dp648
g4
I1
sg5
I01
sg6
g646
sg7
S'TOrange'
p649
sg9
I00
sg10
(lp650
sg12
(lp651
(S'int'
p652
S'maxItemSets'
p653
S'max_item_sets'
p654
S'maximal number of itemsets (increase if you want)'
p655
I0
I0
I01
Ntp656
a(S'float'
p657
S'confidence'
p658
g658
S'required confidence'
p659
I0
I0
I01
Ntp660
a(S'float'
p661
S'support'
p662
g662
S'required support'
p663
I0
I0
I01
Ntp664
a(S'bool'
p665
S'storeExamples'
p666
S'store_examples'
p667
S'stores examples corresponding to rules'
p668
I0
I0
I01
Ntp669
asg29
(dp670
sbsS'TFilter_sameExample'
p671
(i__main__
ClassDefinition
p672
(dp673
g4
I1
sg5
I01
sg6
g671
sg7
S'TFilter'
p674
sg9
I00
sg10
(lp675
sg12
(lp676
(S'TExample'
p677
S'example'
p678
g678
S'example with which examples are compared'
p679
I0
I0
I00
Ntp680
a(S'bool'
p681
S'negate'
p682
g682
S'if true, filter output should be negated.'
p683
I0
I0
I01
Ntp684
a(S'TDomain'
p685
S'domain'
p686
g686
S'domain to which the examples are converted (if needed)'
p687
I0
I0
I00
Ntp688
asg29
(dp689
sbsS'TRuleClassifierConstructor'
p690
(i__main__
ClassDefinition
p691
(dp692
g4
I1
sg5
I01
sg6
g690
sg7
S'TOrange'
p693
sg9
I01
sg10
(lp694
sg12
(lp695
sg29
(dp696
sbsS'TMakeRandomIndicesMultiple'
p697
(i__main__
ClassDefinition
p698
(dp699
g4
I1
sg5
I01
sg6
g697
sg7
S'TMakeRandomIndices'
p700
sg9
I00
sg10
(lp701
sg12
(lp702
(S'int'
p703
S'stratified'
p704
g704
S' requests stratified distributions'
p705
I0
I0
I01
S'MakeRandomIndices_Stratification'
p706
tp707
a(S'int'
p708
S'randseed'
p709
g709
S'a seed for random generator'
p710
I0
I0
I01
Ntp711
a(S'TRandomGenerator'
p712
S'randomGenerator'
p713
S'random_generator'
p714
S'a random generator'
p715
I0
I0
I00
Ntp716
asg29
(dp717
sbsS'TLearnerFD'
p718
(i__main__
ClassDefinition
p719
(dp720
g4
I1
sg5
I01
sg6
g718
sg7
S'TLearner'
p721
sg9
I00
sg10
(lp722
sg12
(lp723
(S'TDomain'
p724
S'domain'
p725
g725
S'domain'
p726
I0
I0
I00
Ntp727
ag110
asg29
(dp728
sbsS'TP2NN'
p729
(i__main__
ClassDefinition
p730
(dp731
g4
I1
sg5
I01
sg6
g729
sg7
S'TPNN'
p732
sg9
I00
sg10
(lp733
sg12
(lp734
(S'int'
p735
S'dimensions'
p736
g736
S'the number of dimensions'
p737
I01
I0
I01
Ntp738
a(S'TFloatList'
p739
S'offsets'
p740
g740
S'offsets to subtract from the attribute values'
p741
I0
I0
I00
Ntp742
a(S'TFloatList'
p743
S'normalizers'
p744
g744
S'number to divide the values by'
p745
I0
I0
I00
Ntp746
a(S'TFloatList'
p747
S'averages'
p748
g748
S'numbers to use instead of the missing'
p749
I0
I0
I00
Ntp750
a(S'bool'
p751
S'normalizeExamples'
p752
S'normalize_examples'
p753
S'if true, attribute values are divided to sum up to 1'
p754
I0
I0
I01
Ntp755
a(S'int'
p756
S'nExamples'
p757
S'n_examples'
p758
S'the number of examples'
p759
I01
I0
I01
Ntp760
a(S'int'
p761
S'law'
p762
g762
S'law'
p763
I0
I0
I01
Ntp764
ag284
ag94
ag99
asg29
(dp765
sbsS'TTreeSplitConstructor'
p766
(i__main__
ClassDefinition
p767
(dp768
g4
I1
sg5
I01
sg6
g766
sg7
S'TOrange'
p769
sg9
I01
sg10
(lp770
sg12
(lp771
(S'float'
p772
S'minSubset'
p773
S'min_subset'
p774
S'minimal number of examples in a subset'
p775
I0
I0
I01
Ntp776
asg29
(dp777
sbsS'TProbabilityEstimatorList'
p778
(ipyprops
ClassDefinition
p779
(dp780
g4
I0
sg5
I01
sg6
g778
sg7
g136
sg9
I0
sg10
(lp781
sg12
(lp782
sg29
(dp783
sbsNNsS'TMapIntValue'
p784
(i__main__
ClassDefinition
p785
(dp786
g4
I1
sg5
I01
sg6
g784
sg7
S'TTransformValue'
p787
sg9
I00
sg10
(lp788
sg12
(lp789
(S'TIntList'
p790
S'mapping'
p791
g791
S'a lookup table'
p792
I0
I0
I00
Ntp793
a(S'TTransformValue'
p794
S'subTransform'
p795
S'sub_transform'
p796
S'transformation executed prior to this'
p797
I0
I0
I00
Ntp798
asg29
(dp799
sbsS'TDistributionAssessor_Kramer'
p800
(i__main__
ClassDefinition
p801
(dp802
g4
I1
sg5
I01
sg6
g800
sg7
S'TDistributionAssessor'
p803
sg9
I00
sg10
(lp804
sg12
(lp805
sg29
(dp806
sbsS'TIM'
p807
(i__main__
ClassDefinition
p808
(dp809
g4
I1
sg5
I01
sg6
g807
sg7
S'TOrange'
p810
sg9
I00
sg10
(lp811
sg12
(lp812
(S'int'
p813
S'varType'
p814
S'var_type'
p815
S' class variable type'
p816
I0
I0
I01
S'Variable_Type'
p817
tp818
a(S'TExampleTable'
p819
S'rowExamples'
p820
S'row_examples'
p821
S'examples with free attributes for each row'
p822
I0
I0
I00
Ntp823
asg29
(dp824
sbsS'TSymMatrix'
p825
(i__main__
ClassDefinition
p826
(dp827
g4
I1
sg5
I01
sg6
g825
sg7
S'TOrange'
p828
sg9
I00
sg10
(lp829
sg12
(lp830
(S'int'
p831
S'dim'
p832
g832
S'matrix dimension'
p833
I01
I0
I01
Ntp834
a(S'int'
p835
S'matrixType'
p836
S'matrix_type'
p837
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p838
I0
I0
I01
S'SymMatrix_Shape'
p839
tp840
asg29
(dp841
S'Shape'
p842
(lp843
(S'Lower'
p844
I0
tp845
a(S'Upper'
p846
I1
tp847
a(S'Symmetric'
p848
I2
tp849
a(S'LowerFilled'
p850
I3
tp851
a(S'UpperFilled'
p852
I4
tp853
assbsS'TEVDistGetter_Standard'
p854
(i__main__
ClassDefinition
p855
(dp856
g4
I1
sg5
I01
sg6
g854
sg7
S'TEVDistGetter'
p857
sg9
I00
sg10
(lp858
sg12
(lp859
(S'TEVDistList'
p860
S'dists'
p861
g861
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p862
I0
I0
I00
Ntp863
asg29
(dp864
sbsS'TFeatureByIM'
p865
(i__main__
ClassDefinition
p866
(dp867
g4
I1
sg5
I01
sg6
g865
sg7
S'TFeatureInducer'
p868
sg9
I00
sg10
(lp869
sg12
(lp870
(S'TIMConstructor'
p871
S'IMconstructor'
p872
g872
S'incompatibility matrix constructor'
p873
I0
I0
I00
Ntp874
a(S'TClustersFromIM'
p875
S'clustersFromIM'
p876
S'clusters_from_IM'
p877
S'clustering algorithm'
p878
I0
I0
I00
Ntp879
a(S'int'
p880
S'completion'
p881
g881
S' decides how to determine the class for points not covered by any cluster'
p882
I0
I0
I01
S'FeatureByIM_Completion'
p883
tp884
asg29
(dp885
S'Completion'
p886
(lp887
(S'NoCompletion'
p888
S'completion_no'
p889
tp890
a(S'CompletionByDefault'
p891
S'completion_default'
p892
tp893
a(S'CompletionByBayes'
p894
S'completion_bayes'
p895
tp896
assbsS'TMeasureAttributeFromProbabilities'
p897
(i__main__
ClassDefinition
p898
(dp899
g4
I1
sg5
I01
sg6
g897
sg7
S'TMeasureAttribute'
p900
sg9
I01
sg10
(lp901
sg12
(lp902
(S'TProbabilityEstimatorConstructor'
p903
S'estimatorConstructor'
p904
S'estimator_constructor'
p905
S'probability estimator (none by default)'
p906
I0
I0
I00
Ntp907
a(S'TConditionalProbabilityEstimatorConstructor'
p908
S'conditionalEstimatorConstructor'
p909
S'conditional_estimator_constructor'
p910
S'conditional probability estimator (none by default)'
p911
I0
I0
I00
Ntp912
a(S'int'
p913
S'unknownsTreatment'
p914
S'unknowns_treatment'
p915
S' treatment of unknown values'
p916
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p917
tp918
a(S'int'
p919
S'needs'
p920
g920
S' describes what kind of data is needed for computation'
p921
I0
I0
I01
S'MeasureAttribute_Needs'
p922
tp923
a(S'bool'
p924
S'handlesDiscrete'
p925
S'handles_discrete'
p926
S'tells whether the measure can handle discrete attributes'
p927
I0
I0
I01
Ntp928
a(S'bool'
p929
S'handlesContinuous'
p930
S'handles_continuous'
p931
S'tells whether the measure can handle continuous attributes'
p932
I0
I0
I01
Ntp933
a(S'bool'
p934
S'computesThresholds'
p935
S'computes_thresholds'
p936
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p937
I0
I0
I01
Ntp938
asg29
(dp939
sbsS'TProbabilityEstimatorConstructor_relative'
p940
(i__main__
ClassDefinition
p941
(dp942
g4
I1
sg5
I01
sg6
g940
sg7
S'TProbabilityEstimatorConstructor'
p943
sg9
I00
sg10
(lp944
sg12
(lp945
sg29
(dp946
sbsS'TClassifierByLookupTable3'
p947
(i__main__
ClassDefinition
p948
(dp949
g4
I1
sg5
I01
sg6
g947
sg7
S'TClassifierByLookupTable'
p950
sg9
I00
sg10
(lp951
sg12
(lp952
(S'TVariable'
p953
S'variable1'
p954
g954
S'the first attribute used for classification'
p955
I01
I0
I00
Ntp956
a(S'TVariable'
p957
S'variable2'
p958
g958
S'the second attribute used for classification'
p959
I01
I0
I00
Ntp960
a(S'TVariable'
p961
S'variable3'
p962
g962
S'the third attribute used for classification'
p963
I01
I0
I00
Ntp964
a(S'int'
p965
S'noOfValues1'
p966
S'no_of_values1'
p967
S'number of values of the first attribute'
p968
I01
I0
I01
Ntp969
a(S'int'
p970
S'noOfValues2'
p971
S'no_of_values2'
p972
S'number of values of the second attribute'
p973
I01
I0
I01
Ntp974
a(S'int'
p975
S'noOfValues3'
p976
S'no_of_values3'
p977
S'number of values of the third attribute'
p978
I01
I0
I01
Ntp979
a(S'TEFMDataDescription'
p980
S'dataDescription'
p981
S'data_description'
p982
S'data description'
p983
I0
I0
I00
Ntp984
ag85
ag89
ag94
ag99
asg29
(dp985
sbsS'TThresholdCA'
p986
(i__main__
ClassDefinition
p987
(dp988
g4
I1
sg5
I01
sg6
g986
sg7
S'TOrange'
p989
sg9
I00
sg10
(lp990
sg12
(lp991
sg29
(dp992
sbsS'TRuleBeamRefiner'
p993
(i__main__
ClassDefinition
p994
(dp995
g4
I1
sg5
I01
sg6
g993
sg7
S'TOrange'
p996
sg9
I01
sg10
(lp997
sg12
(lp998
sg29
(dp999
sbsS'TSubsetsGenerator_iterator'
p1000
(i__main__
ClassDefinition
p1001
(dp1002
g4
I1
sg5
I01
sg6
g1000
sg7
S'TOrange'
p1003
sg9
I01
sg10
(lp1004
sg12
(lp1005
g503
asg29
(dp1006
sbsS'TEquiDistDiscretizer'
p1007
(i__main__
ClassDefinition
p1008
(dp1009
g4
I1
sg5
I01
sg6
g1007
sg7
S'TDiscretizer'
p1010
sg9
I00
sg10
(lp1011
sg12
(lp1012
(S'int'
p1013
S'numberOfIntervals'
p1014
(g1014
S'n'
p1015
tp1016
S' number of intervals'
p1017
I0
I0
I01
Ntp1018
a(S'float'
p1019
S'firstCut'
p1020
S'first_cut'
p1021
S'the first cut-off point'
p1022
I0
I0
I01
Ntp1023
a(S'float'
p1024
S'step'
p1025
g1025
S'step (width of interval)'
p1026
I0
I0
I01
Ntp1027
ag798
asg29
(dp1028
sbsS'TValueFilter_string'
p1029
(i__main__
ClassDefinition
p1030
(dp1031
g4
I1
sg5
I01
sg6
g1029
sg7
S'TValueFilter'
p1032
sg9
I00
sg10
(lp1033
sg12
(lp1034
(S'string'
p1035
S'min'
p1036
(g1036
S'ref'
p1037
tp1038
S' reference value (lower bound for interval operators)'
p1039
I0
I0
I01
Ntp1040
a(S'string'
p1041
S'max'
p1042
g1042
S'upper bound for interval operators'
p1043
I0
I0
I01
Ntp1044
a(S'int'
p1045
S'oper'
p1046
g1046
S' operator'
p1047
I0
I0
I01
S'ValueFilter_Operator'
p1048
tp1049
a(S'bool'
p1050
S'caseSensitive'
p1051
S'case_sensitive'
p1052
S'if true (default), the operator is case sensitive'
p1053
I0
I0
I01
Ntp1054
a(S'int'
p1055
S'position'
p1056
g1056
S"attribute's position in domain"
p1057
I0
I0
I01
Ntp1058
a(S'int'
p1059
S'acceptSpecial'
p1060
S'accept_special'
p1061
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1062
I0
I0
I01
Ntp1063
asg29
(dp1064
sbsS'TFindNearest_BruteForce'
p1065
(i__main__
ClassDefinition
p1066
(dp1067
g4
I1
sg5
I01
sg6
g1065
sg7
S'TFindNearest'
p1068
sg9
I00
sg10
(lp1069
sg12
(lp1070
(S'TExamplesDistance'
p1071
S'distance'
p1072
g1072
S'metrics'
p1073
I0
I0
I00
Ntp1074
a(S'TExampleGenerator'
p1075
S'examples'
p1076
g1076
S'a list of stored examples'
p1077
I0
I0
I00
Ntp1078
a(S'int'
p1079
S'weightID'
p1080
S'weight_ID'
p1081
S'weight to use when counting examples'
p1082
I0
I0
I01
Ntp1083
a(S'int'
p1084
S'distanceID'
p1085
S'distance_ID'
p1086
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1087
I0
I0
I01
Ntp1088
a(S'bool'
p1089
S'includeSame'
p1090
S'include_same'
p1091
S'tells whether to include examples that are same as the reference example'
p1092
I0
I0
I01
Ntp1093
asg29
(dp1094
sbsS'TRuleBeamInitializer'
p1095
(i__main__
ClassDefinition
p1096
(dp1097
g4
I1
sg5
I01
sg6
g1095
sg7
S'TOrange'
p1098
sg9
I01
sg10
(lp1099
sg12
(lp1100
sg29
(dp1101
sbsS'TMeasureAttribute_relevance'
p1102
(i__main__
ClassDefinition
p1103
(dp1104
g4
I1
sg5
I01
sg6
g1102
sg7
S'TMeasureAttributeFromProbabilities'
p1105
sg9
I00
sg10
(lp1106
sg12
(lp1107
g907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp1108
sbsS'TFilter_hasSpecial'
p1109
(i__main__
ClassDefinition
p1110
(dp1111
g4
I1
sg5
I01
sg6
g1109
sg7
S'TFilter'
p1112
sg9
I00
sg10
(lp1113
sg12
(lp1114
g684
ag688
asg29
(dp1115
sbsS'TDiscDistribution'
p1116
(i__main__
ClassDefinition
p1117
(dp1118
g4
I1
sg5
I01
sg6
g1116
sg7
S'TDistribution'
p1119
sg9
I00
sg10
(lp1120
sg12
(lp1121
(S'TFloatList'
p1122
S'variances'
p1123
g1123
S'variances'
p1124
I0
I0
I00
Ntp1125
a(S'TVariable'
p1126
S'variable'
p1127
g1127
S'attribute descriptor (optional)'
p1128
I0
I0
I00
Ntp1129
a(S'float'
p1130
S'unknowns'
p1131
g1131
S'number of unknown values'
p1132
I0
I0
I01
Ntp1133
a(S'float'
p1134
S'abs'
p1135
g1135
S'sum of frequencies (not including unknown values!)'
p1136
I0
I0
I01
Ntp1137
a(S'float'
p1138
S'cases'
p1139
g1139
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1140
I0
I0
I01
Ntp1141
a(S'bool'
p1142
S'normalized'
p1143
g1143
S'distribution is normalized'
p1144
I0
I0
I01
Ntp1145
a(S'bool'
p1146
S'supportsDiscrete'
p1147
S'supports_discrete'
p1148
S'distribution supports discrete interface'
p1149
I01
I0
I01
Ntp1150
a(S'bool'
p1151
S'supportsContinuous'
p1152
S'supports_continuous'
p1153
S'distribution supports continuous interface'
p1154
I01
I0
I01
Ntp1155
a(S'TRandomGenerator'
p1156
S'randomGenerator'
p1157
S'random_generator'
p1158
S'random generator; initialized when needed, if not given earlier'
p1159
I0
I0
I00
Ntp1160
asg29
(dp1161
sbsS'TBayesLearner'
p1162
(i__main__
ClassDefinition
p1163
(dp1164
g4
I1
sg5
I01
sg6
g1162
sg7
S'TLearner'
p1165
sg9
I00
sg10
(lp1166
sg12
(lp1167
(S'TProbabilityEstimatorConstructor'
p1168
S'estimatorConstructor'
p1169
S'estimator_constructor'
p1170
S'constructs a probability estimator for P(C)'
p1171
I0
I0
I00
Ntp1172
a(S'TConditionalProbabilityEstimatorConstructor'
p1173
S'conditionalEstimatorConstructor'
p1174
S'conditional_estimator_constructor'
p1175
S'constructs a probability estimator for P(C|A) '
p1176
I0
I0
I00
Ntp1177
a(S'TConditionalProbabilityEstimatorConstructor'
p1178
S'conditionalEstimatorConstructorContinuous'
p1179
S'conditional_estimator_constructor_continuous'
p1180
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1181
I0
I0
I00
Ntp1182
a(S'bool'
p1183
S'normalizePredictions'
p1184
S'normalize_predictions'
p1185
S'instructs learner to construct a classifier that normalizes probabilities'
p1186
I0
I0
I01
Ntp1187
a(S'bool'
p1188
S'adjustThreshold'
p1189
S'adjust_threshold'
p1190
S'adjust probability thresholds (for binary classes only)'
p1191
I0
I0
I01
Ntp1192
ag110
asg29
(dp1193
sbsS'TIMByRelief'
p1194
(i__main__
ClassDefinition
p1195
(dp1196
g4
I1
sg5
I01
sg6
g1194
sg7
S'TIMConstructor'
p1197
sg9
I00
sg10
(lp1198
sg12
(lp1199
(S'TExamplesDistance_Relief'
p1200
S'distance'
p1201
g1201
S'distance measure'
p1202
I0
I0
I00
Ntp1203
a(S'float'
p1204
S'k'
p1205
g1205
S'number of neighbours'
p1206
I0
I0
I01
Ntp1207
a(S'float'
p1208
S'm'
p1209
g1209
S'number of reference examples'
p1210
I0
I0
I01
Ntp1211
a(S'float'
p1212
S'kFromColumns'
p1213
S'k_from_columns'
p1214
S'if positive, number of neighbours is #columns*kFromColumns'
p1215
I0
I0
I01
Ntp1216
a(S'bool'
p1217
S'ignoreSameExample'
p1218
S'ignore_same_example'
p1219
S'does not put reference example into M'
p1220
I0
I0
I01
Ntp1221
a(S'bool'
p1222
S'convertToBinary'
p1223
S'convert_to_binary'
p1224
S'convert to binary class (hit-miss)'
p1225
I0
I0
I01
Ntp1226
a(S'bool'
p1227
S'correctClassFirst'
p1228
S'correct_class_first'
p1229
S'puts the correct class proportion to the first place'
p1230
I0
I0
I01
Ntp1231
a(S'bool'
p1232
S'allExamples'
p1233
S'all_examples'
p1234
S'uses all examples for reference examples'
p1235
I0
I0
I01
Ntp1236
a(S'bool'
p1237
S'allSameNeighbours'
p1238
S'all_same_neighbours'
p1239
S'uses all the examples same to the reference as neighbours'
p1240
I0
I0
I01
Ntp1241
a(S'bool'
p1242
S'recordRowExamples'
p1243
S'record_row_examples'
p1244
S'enables creation of rowExample list'
p1245
I0
I0
I01
Ntp1246
asg29
(dp1247
sbsS'TConditionalProbabilityEstimator'
p1248
(i__main__
ClassDefinition
p1249
(dp1250
g4
I1
sg5
I01
sg6
g1248
sg7
S'TOrange'
p1251
sg9
I01
sg10
(lp1252
sg12
(lp1253
g126
ag131
asg29
(dp1254
sbsS'TColumnAssessor_Laplace'
p1255
(i__main__
ClassDefinition
p1256
(dp1257
g4
I1
sg5
I01
sg6
g1255
sg7
S'TColumnAssessor'
p1258
sg9
I00
sg10
(lp1259
sg12
(lp1260
sg29
(dp1261
sbsS'TPreprocessor_addGaussianNoise'
p1262
(i__main__
ClassDefinition
p1263
(dp1264
g4
I1
sg5
I01
sg6
g1262
sg7
S'TPreprocessor'
p1265
sg9
I00
sg10
(lp1266
sg12
(lp1267
(S'TVariableFloatMap'
p1268
S'deviations'
p1269
g1269
S'deviations individual attribute values'
p1270
I0
I0
I00
Ntp1271
a(S'float'
p1272
S'defaultDeviation'
p1273
S'default_deviation'
p1274
S'default deviation'
p1275
I0
I0
I01
Ntp1276
a(S'TRandomGenerator'
p1277
S'randomGenerator'
p1278
S'random_generator'
p1279
S'random number generator'
p1280
I0
I0
I00
Ntp1281
asg29
(dp1282
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1283
(i__main__
ClassDefinition
p1284
(dp1285
g4
I1
sg5
I01
sg6
g1283
sg7
S'TRuleStoppingCriteria'
p1286
sg9
I00
sg10
(lp1287
sg12
(lp1288
sg29
(dp1289
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1290
(i__main__
ClassDefinition
p1291
(dp1292
g4
I1
sg5
I01
sg6
g1290
sg7
S'TTreeSplitConstructor_Measure'
p1293
sg9
I00
sg10
(lp1294
sg12
(lp1295
(S'TMeasureAttribute'
p1296
S'measure'
p1297
g1297
S'attribute quality measure'
p1298
I0
I0
I00
Ntp1299
a(S'float'
p1300
S'worstAcceptable'
p1301
S'worst_acceptable'
p1302
S'the worst acceptable quality of the attribute'
p1303
I0
I0
I01
Ntp1304
ag776
asg29
(dp1305
sbsS'TMeasureAttribute_relief'
p1306
(i__main__
ClassDefinition
p1307
(dp1308
g4
I1
sg5
I01
sg6
g1306
sg7
S'TMeasureAttribute'
p1309
sg9
I00
sg10
(lp1310
sg12
(lp1311
(S'float'
p1312
g1205
g1205
S'number of neighbours'
p1313
I0
I0
I01
Ntp1314
a(S'float'
p1315
g1209
g1209
S'number of reference examples'
p1316
I0
I0
I01
Ntp1317
a(S'bool'
p1318
S'checkCachedData'
p1319
S'check_cached_data'
p1320
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p1321
I0
I0
I01
Ntp1322
ag923
ag928
ag933
ag938
asg29
(dp1323
sbsS'TFilter_compatibleExample'
p1324
(i__main__
ClassDefinition
p1325
(dp1326
g4
I1
sg5
I01
sg6
g1324
sg7
S'TFilter'
p1327
sg9
I00
sg10
(lp1328
sg12
(lp1329
(S'TExample'
p1330
S'example'
p1331
g1331
S'example with which examples are compared'
p1332
I0
I0
I00
Ntp1333
ag684
ag688
asg29
(dp1334
sbsS'TRemoveRedundant'
p1335
(i__main__
ClassDefinition
p1336
(dp1337
g4
I1
sg5
I01
sg6
g1335
sg7
S'TOrange'
p1338
sg9
I01
sg10
(lp1339
sg12
(lp1340
(S'bool'
p1341
S'keepValues'
p1342
S'keep_values'
p1343
S'keep an attribute if number values is only smaller, not one'
p1344
I0
I0
I01
Ntp1345
asg29
(dp1346
sbsS'TExamplesDistanceConstructor_Hamming'
p1347
(i__main__
ClassDefinition
p1348
(dp1349
g4
I1
sg5
I01
sg6
g1347
sg7
S'TExamplesDistanceConstructor'
p1350
sg9
I00
sg10
(lp1351
sg12
(lp1352
(S'bool'
p1353
S'ignoreClass'
p1354
S'ignore_class'
p1355
S'if true (default), class value is ignored when computing distances'
p1356
I0
I0
I01
Ntp1357
a(S'bool'
p1358
S'ignoreUnknowns'
p1359
S'ignore_unknowns'
p1360
S'if true (default: false) unknown values are ignored in computation'
p1361
I0
I0
I01
Ntp1362
a(S'bool'
p1363
S'ignoreClass'
p1364
S'ignore_class'
p1365
S'if true (default), class value is ignored when computing distances'
p1366
I0
I0
I01
Ntp1367
asg29
(dp1368
sbsS'TSomeValue'
p1369
(i__main__
ClassDefinition
p1370
(dp1371
g4
I1
sg5
I01
sg6
g1369
sg7
S'TOrange'
p1372
sg9
I01
sg10
(lp1373
sg12
(lp1374
sg29
(dp1375
sbsS'TRuleClassifierConstructor_firstRule'
p1376
(i__main__
ClassDefinition
p1377
(dp1378
g4
I1
sg5
I01
sg6
g1376
sg7
S'TRuleClassifierConstructor'
p1379
sg9
I00
sg10
(lp1380
sg12
(lp1381
sg29
(dp1382
sbsS'TStopDistributionClustering_noProfit'
p1383
(i__main__
ClassDefinition
p1384
(dp1385
g4
I1
sg5
I01
sg6
g1383
sg7
S'TStopDistributionClustering'
p1386
sg9
I00
sg10
(lp1387
sg12
(lp1388
(S'float'
p1389
S'minProfitProportion'
p1390
S'min_profit_proportion'
p1391
S'minimal allowable profit proportion'
p1392
I0
I0
I01
Ntp1393
asg29
(dp1394
sbsS'TBiModalDiscretization'
p1395
(i__main__
ClassDefinition
p1396
(dp1397
g4
I1
sg5
I01
sg6
g1395
sg7
S'TDiscretization'
p1398
sg9
I00
sg10
(lp1399
sg12
(lp1400
(S'bool'
p1401
S'splitInTwo'
p1402
S'split_in_two'
p1403
S'if true (default), flanks are merged into a single interval'
p1404
I0
I0
I01
Ntp1405
asg29
(dp1406
sbsS'TColoredIG'
p1407
(i__main__
ClassDefinition
p1408
(dp1409
g4
I1
sg5
I01
sg6
g1407
sg7
S'TGeneralExampleClustering'
p1410
sg9
I00
sg10
(lp1411
sg12
(lp1412
(S'TIG'
p1413
S'ig'
p1414
g1414
S'incompatibility graph'
p1415
I0
I0
I00
Ntp1416
a(S'TIntList'
p1417
S'colors'
p1418
g1418
S'colors (one element corresponding to each ig node)'
p1419
I0
I0
I00
Ntp1420
asg29
(dp1421
sbsS'TMeasureAttribute'
p1422
(i__main__
ClassDefinition
p1423
(dp1424
g4
I1
sg5
I01
sg6
g1422
sg7
S'TOrange'
p1425
sg9
I00
sg10
(lp1426
sg12
(lp1427
g923
ag928
ag933
ag938
asg29
(dp1428
S'Needs'
p1429
(lp1430
(S'Contingency_Class'
p1431
I0
tp1432
a(S'DomainContingency'
p1433
I1
tp1434
a(S'Generator'
p1435
I2
tp1436
asS'UnknownsTreatment'
p1437
(lp1438
(S'IgnoreUnknowns'
p1439
I0
tp1440
a(S'ReduceByUnknowns'
p1441
I1
tp1442
a(S'UnknownsToCommon'
p1443
I2
tp1444
a(S'UnknownsAsValue'
p1445
I3
tp1446
assbsS'TRuleEvaluator'
p1447
(i__main__
ClassDefinition
p1448
(dp1449
g4
I1
sg5
I01
sg6
g1447
sg7
S'TOrange'
p1450
sg9
I01
sg10
(lp1451
sg12
(lp1452
sg29
(dp1453
sbsS'TStringVariable'
p1454
(i__main__
ClassDefinition
p1455
(dp1456
g4
I1
sg5
I01
sg6
g1454
sg7
S'TVariable'
p1457
sg9
I00
sg10
(lp1458
sg12
(lp1459
g326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp1460
sbsS'TAssessIMQuality'
p1461
(i__main__
ClassDefinition
p1462
(dp1463
g4
I1
sg5
I01
sg6
g1461
sg7
S'TOrange'
p1464
sg9
I00
sg10
(lp1465
sg12
(lp1466
(S'TColumnAssessor'
p1467
S'columnAssessor'
p1468
S'column_assessor'
p1469
S'column quality assessor'
p1470
I0
I0
I00
Ntp1471
asg29
(dp1472
sbsS'TGraphAsTree'
p1473
(i__main__
ClassDefinition
p1474
(dp1475
g4
I1
sg5
I01
sg6
g1473
sg7
S'TGraph'
p1476
sg9
I00
sg10
(lp1477
sg12
(lp1478
(S'int'
p1479
S'nVertices'
p1480
S'n_vertices'
p1481
S'the number of vertices'
p1482
I01
I0
I01
Ntp1483
a(S'int'
p1484
S'nEdgeTypes'
p1485
S'n_edge_types'
p1486
S'the number of edge types'
p1487
I01
I0
I01
Ntp1488
a(S'bool'
p1489
S'directed'
p1490
g1490
S'directed'
p1491
I01
I0
I01
Ntp1492
asg29
(dp1493
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1494
(i__main__
ClassDefinition
p1495
(dp1496
g4
I1
sg5
I01
sg6
g1494
sg7
S'TTreeExampleSplitter'
p1497
sg9
I00
sg10
(lp1498
sg12
(lp1499
sg29
(dp1500
sbsS'TProbabilityEstimator_FromDistribution'
p1501
(i__main__
ClassDefinition
p1502
(dp1503
g4
I1
sg5
I01
sg6
g1501
sg7
S'TProbabilityEstimator'
p1504
sg9
I00
sg10
(lp1505
sg12
(lp1506
(S'TDistribution'
p1507
S'probabilities'
p1508
g1508
S'probabilities'
p1509
I0
I0
I00
Ntp1510
a(S'bool'
p1511
S'supportsDiscrete'
p1512
S'supports_discrete'
p1513
S'can estimate probabilities of discrete attributes'
p1514
I01
I0
I01
Ntp1515
a(S'bool'
p1516
S'supportsContinuous'
p1517
S'supports_continuous'
p1518
S'can estimate probabilities of continuous attributes'
p1519
I01
I0
I01
Ntp1520
asg29
(dp1521
sbsS'TFilter_index'
p1522
(ipyprops
ClassDefinition
p1523
(dp1524
g4
I0
sg5
I01
sg6
g1522
sg7
g136
sg9
I0
sg10
(lp1525
sg12
(lp1526
sg29
(dp1527
sbsS'TDistributionList'
p1528
(ipyprops
ClassDefinition
p1529
(dp1530
g4
I0
sg5
I01
sg6
g1528
sg7
g136
sg9
I0
sg10
(lp1531
sg12
(lp1532
sg29
(dp1533
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1534
(i__main__
ClassDefinition
p1535
(dp1536
g4
I1
sg5
I01
sg6
g1534
sg7
S'TTreeDescender'
p1537
sg9
I0
sg10
(lp1538
sg12
(lp1539
sg29
(dp1540
sbsS'THierarchicalClusterOrdering'
p1541
(i__main__
ClassDefinition
p1542
(dp1543
g4
I1
sg5
I01
sg6
g1541
sg7
S'TOrange'
p1544
sg9
I00
sg10
(lp1545
sg12
(lp1546
(S'TProgressCallback'
p1547
S'progress_callback'
p1548
g1548
S'progress callback function'
p1549
I0
I0
I00
Ntp1550
asg29
(dp1551
sbsS'TLogitClassifierState'
p1552
(i__main__
ClassDefinition
p1553
(dp1554
g4
I1
sg5
I01
sg6
g1552
sg7
S'TOrange'
p1555
sg9
I00
sg10
(lp1556
sg12
(lp1557
sg29
(dp1558
sbsS'TExamplesDistance'
p1559
(i__main__
ClassDefinition
p1560
(dp1561
g4
I1
sg5
I01
sg6
g1559
sg7
S'TOrange'
p1562
sg9
I01
sg10
(lp1563
sg12
(lp1564
sg29
(dp1565
sbsS'TFileExampleGenerator'
p1566
(i__main__
ClassDefinition
p1567
(dp1568
g4
I1
sg5
I01
sg6
g1566
sg7
S'TExampleGenerator'
p1569
sg9
I01
sg10
(lp1570
sg12
(lp1571
(S'string'
p1572
S'filename'
p1573
g1573
S'filename'
p1574
I0
I0
I01
Ntp1575
a(S'int'
p1576
S'startDataPos'
p1577
S'start_data_pos'
p1578
S'starting position of the data in file'
p1579
I0
I0
I01
Ntp1580
a(S'int'
p1581
S'startDataLine'
p1582
S'start_data_line'
p1583
S'line in the file where the data starts'
p1584
I0
I0
I01
Ntp1585
ag299
ag303
asg29
(dp1586
sbsS'TMeasureAttribute_gainRatio'
p1587
(i__main__
ClassDefinition
p1588
(dp1589
g4
I1
sg5
I01
sg6
g1587
sg7
S'TMeasureAttributeFromProbabilities'
p1590
sg9
I00
sg10
(lp1591
sg12
(lp1592
g907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp1593
sbsS'TContingencyClassAttr'
p1594
(i__main__
ClassDefinition
p1595
(dp1596
g4
I1
sg5
I01
sg6
g1594
sg7
S'TContingencyClass'
p1597
sg9
I00
sg10
(lp1598
sg12
(lp1599
(S'TVariable'
p1600
S'outerVariable'
p1601
S'outer_variable'
p1602
S'outer attribute'
p1603
I0
I0
I00
Ntp1604
a(S'TVariable'
p1605
S'innerVariable'
p1606
S'inner_variable'
p1607
S'inner attribute'
p1608
I0
I0
I00
Ntp1609
a(S'int'
p1610
S'varType'
p1611
S'var_type'
p1612
S' outer attribute type'
p1613
I0
I0
I01
S'Variable_Type'
p1614
tp1615
a(S'TDistribution'
p1616
S'outerDistribution'
p1617
S'outer_distribution'
p1618
S'distribution of values of outer attributes'
p1619
I0
I0
I00
Ntp1620
a(S'TDistribution'
p1621
S'innerDistribution'
p1622
S'inner_distribution'
p1623
S'distribution of values of inner attributes'
p1624
I0
I0
I00
Ntp1625
a(S'TDistribution'
p1626
S'innerDistributionUnknown'
p1627
S'inner_distribution_unknown'
p1628
S'distribution of inner variable for examples where the outer value was unknown'
p1629
I0
I0
I00
Ntp1630
asg29
(dp1631
sbsS'TMissValuesGenerator'
p1632
(i__main__
ClassDefinition
p1633
(dp1634
g4
I1
sg5
I01
sg6
g1632
sg7
S'TChangeExampleGenerator'
p1635
sg9
I00
sg10
(lp1636
sg12
(lp1637
(S'TIntFloatList'
p1638
S'replaceProbabilities'
p1639
S'replace_probabilities'
p1640
S"probabilities for replacing attributes' values"
p1641
I0
I0
I00
Ntp1642
a(S'TRandomGenerator'
p1643
S'randomGenerator'
p1644
S'random_generator'
p1645
S'random generator'
p1646
I0
I0
I00
Ntp1647
ag299
ag303
asg29
(dp1648
sbsS'TLogRegClassifier'
p1649
(i__main__
ClassDefinition
p1650
(dp1651
g4
I1
sg5
I01
sg6
g1649
sg7
S'TClassifierFD'
p1652
sg9
I00
sg10
(lp1653
sg12
(lp1654
(S'TDomain'
p1655
S'continuizedDomain'
p1656
S'continuized_domain'
p1657
S'if absent, there is no continuous attributes in original domain'
p1658
I0
I0
I00
Ntp1659
a(S'TEFMDataDescription'
p1660
S'dataDescription'
p1661
S'data_description'
p1662
S'Data needed for classification in presence of undefined values'
p1663
I0
I0
I00
Ntp1664
a(S'TAttributedFloatList'
p1665
S'beta'
p1666
g1666
S'estimated beta coefficients for logistic regression'
p1667
I0
I0
I00
Ntp1668
a(S'TAttributedFloatList'
p1669
S'beta_se'
p1670
g1670
S'estimated standard errors for beta coefficients'
p1671
I0
I0
I00
Ntp1672
a(S'TAttributedFloatList'
p1673
S'wald_Z'
p1674
g1674
S'Wald Z statstic for beta coefficients'
p1675
I0
I0
I00
Ntp1676
a(S'TAttributedFloatList'
p1677
S'P'
p1678
g1678
S'estimated significances for beta coefficients'
p1679
I0
I0
I00
Ntp1680
a(S'float'
p1681
S'likelihood'
p1682
g1682
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1683
I0
I0
I01
Ntp1684
a(S'int'
p1685
S'fit_status'
p1686
g1686
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1687
I0
I0
I01
Ntp1688
a(S'TImputer'
p1689
S'imputer'
p1690
g1690
S'if present, it imputes unknown values'
p1691
I0
I0
I00
Ntp1692
ag284
ag94
ag99
asg29
(dp1693
sbsS'TEquiDistDiscretization'
p1694
(i__main__
ClassDefinition
p1695
(dp1696
g4
I1
sg5
I01
sg6
g1694
sg7
S'TDiscretization'
p1697
sg9
I00
sg10
(lp1698
sg12
(lp1699
(S'int'
p1700
S'numberOfIntervals'
p1701
(g1701
g1015
tp1702
S' number of intervals'
p1703
I0
I0
I01
Ntp1704
asg29
(dp1705
sbsS'TPreprocessor_select'
p1706
(i__main__
ClassDefinition
p1707
(dp1708
g4
I1
sg5
I01
sg6
g1706
sg7
S'TPreprocessor'
p1709
sg9
I00
sg10
(lp1710
sg12
(lp1711
(S'TVarList'
p1712
S'attributes'
p1713
g1713
S'tells which attributes to select'
p1714
I0
I0
I00
Ntp1715
asg29
(dp1716
sbsS'TSVMClassifierSparse'
p1717
(i__main__
ClassDefinition
p1718
(dp1719
g4
I1
sg5
I01
sg6
g1717
sg7
S'TSVMClassifier'
p1720
sg9
I00
sg10
(lp1721
sg12
(lp1722
(S'bool'
p1723
S'useNonMeta'
p1724
S'use_non_meta'
p1725
S'include non meta attributes'
p1726
I0
I0
I01
Ntp1727
ag238
ag242
ag246
ag251
ag256
ag261
ag265
ag270
ag275
ag280
ag284
ag94
ag99
asg29
(dp1728
sbsS'TFilter_disjunction'
p1729
(i__main__
ClassDefinition
p1730
(dp1731
g4
I1
sg5
I01
sg6
g1729
sg7
S'TFilter'
p1732
sg9
I00
sg10
(lp1733
sg12
(lp1734
(S'TFilterList'
p1735
S'filters'
p1736
g1736
S'a list of filters;'
p1737
I0
I0
I00
Ntp1738
ag684
ag688
asg29
(dp1739
sbsS'TChangeExampleGenerator'
p1740
(i__main__
ClassDefinition
p1741
(dp1742
g4
I1
sg5
I01
sg6
g1740
sg7
S'TAdapterGenerator'
p1743
sg9
I01
sg10
(lp1744
sg12
(lp1745
g299
ag303
asg29
(dp1746
sbsS'TAttributedFloatList'
p1747
(ipyprops
ClassDefinition
p1748
(dp1749
g4
I0
sg5
I01
sg6
g1747
sg7
S'TFloatList'
p1750
sg9
I0
sg10
(lp1751
sg12
(lp1752
sg29
(dp1753
sbsS'TIMByRowsByRelief'
p1754
(i__main__
ClassDefinition
p1755
(dp1756
g4
I1
sg5
I01
sg6
g1754
sg7
S'TIMByRowsConstructor'
p1757
sg9
I00
sg10
(lp1758
sg12
(lp1759
(S'float'
p1760
g1205
g1205
S'number of neighbours'
p1761
I0
I0
I01
Ntp1762
a(S'float'
p1763
g1209
g1209
S'number of reference examples'
p1764
I0
I0
I01
Ntp1765
a(S'float'
p1766
S'kFromColumns'
p1767
S'k_from_columns'
p1768
S'if positive, number of neighbours is #columns*kFromColumns'
p1769
I0
I0
I01
Ntp1770
a(S'bool'
p1771
S'ignoreSameExample'
p1772
S'ignore_same_example'
p1773
S'does not put reference example into M'
p1774
I0
I0
I01
Ntp1775
a(S'bool'
p1776
S'convertToBinary'
p1777
S'convert_to_binary'
p1778
S'convert to binary class (hit-miss)'
p1779
I0
I0
I01
Ntp1780
a(S'bool'
p1781
S'correctClassFirst'
p1782
S'correct_class_first'
p1783
S'puts the correct class proportion to the first place'
p1784
I0
I0
I01
Ntp1785
a(S'bool'
p1786
S'allExamples'
p1787
S'all_examples'
p1788
S'uses all examples for reference examples'
p1789
I0
I0
I01
Ntp1790
a(S'bool'
p1791
S'allSameNeighbours'
p1792
S'all_same_neighbours'
p1793
S'uses all the examples same to the reference as neighbours'
p1794
I0
I0
I01
Ntp1795
asg29
(dp1796
sbsS'TFindNearestConstructor'
p1797
(i__main__
ClassDefinition
p1798
(dp1799
g4
I1
sg5
I01
sg6
g1797
sg7
S'TOrange'
p1800
sg9
I01
sg10
(lp1801
sg12
(lp1802
(S'TExamplesDistanceConstructor'
p1803
S'distanceConstructor'
p1804
S'distance_constructor'
p1805
S'metrics'
p1806
I0
I0
I00
Ntp1807
a(S'bool'
p1808
S'includeSame'
p1809
S'include_same'
p1810
S'tells whether to include examples that are same as the reference example'
p1811
I0
I0
I01
Ntp1812
asg29
(dp1813
sbsS'TRuleClassifier_firstRule'
p1814
(i__main__
ClassDefinition
p1815
(dp1816
g4
I1
sg5
I01
sg6
g1814
sg7
S'TRuleClassifier'
p1817
sg9
I00
sg10
(lp1818
sg12
(lp1819
(S'TDistribution'
p1820
S'prior'
p1821
g1821
S'prior distribution'
p1822
I0
I0
I00
Ntp1823
ag594
ag597
ag601
ag94
ag99
asg29
(dp1824
sbsS'TColumnAssessor'
p1825
(i__main__
ClassDefinition
p1826
(dp1827
g4
I1
sg5
I01
sg6
g1825
sg7
S'TOrange'
p1828
sg9
I01
sg10
(lp1829
sg12
(lp1830
sg29
(dp1831
sbsS'TTableAverager'
p1832
(i__main__
ClassDefinition
p1833
(dp1834
g4
I1
sg5
I01
sg6
g1832
sg7
S'TOrange'
p1835
sg9
I00
sg10
(lp1836
sg12
(lp1837
sg29
(dp1838
sbsS'TComputeDomainContingency_Preprocessor'
p1839
(i__main__
ClassDefinition
p1840
(dp1841
g4
I1
sg5
I01
sg6
g1839
sg7
S'TComputeDomainContingency'
p1842
sg9
I00
sg10
(lp1843
sg12
(lp1844
(S'TPreprocessor'
p1845
S'preprocessor'
p1846
g1846
S'preprocesses the exmaples (see the manual for restrictions!)'
p1847
I0
I0
I00
Ntp1848
a(S'bool'
p1849
S'resultInOriginalDomain'
p1850
S'result_in_original_domain'
p1851
S'tells whether the resulting DomainContingency should consist of original attributes'
p1852
I0
I0
I01
Ntp1853
ag28
asg29
(dp1854
sbsS'TFloatFloatList'
p1855
(ipyprops
ClassDefinition
p1856
(dp1857
g4
I0
sg5
I01
sg6
g1855
sg7
g136
sg9
I0
sg10
(lp1858
sg12
(lp1859
sg29
(dp1860
sbsS'TMeasureAttribute_MSE'
p1861
(i__main__
ClassDefinition
p1862
(dp1863
g4
I1
sg5
I01
sg6
g1861
sg7
S'TMeasureAttribute'
p1864
sg9
I00
sg10
(lp1865
sg12
(lp1866
(S'float'
p1867
g1209
g1209
S'm for m-estimate'
p1868
I0
I0
I01
Ntp1869
a(S'int'
p1870
S'unknownsTreatment'
p1871
S'unknowns_treatment'
p1872
S' treatment of unknown values'
p1873
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1874
tp1875
ag923
ag928
ag933
ag938
asg29
(dp1876
sbsS'TRuleList'
p1877
(ipyprops
ClassDefinition
p1878
(dp1879
g4
I0
sg5
I01
sg6
g1877
sg7
g136
sg9
I0
sg10
(lp1880
sg12
(lp1881
sg29
(dp1882
sbsS'TIntervalDiscretizer'
p1883
(i__main__
ClassDefinition
p1884
(dp1885
g4
I1
sg5
I01
sg6
g1883
sg7
S'TDiscretizer'
p1886
sg9
I00
sg10
(lp1887
sg12
(lp1888
(S'TFloatList'
p1889
S'points'
p1890
g1890
S'cut-off points'
p1891
I0
I0
I00
Ntp1892
ag798
asg29
(dp1893
sbsS'TItemsetsSparseInducer'
p1894
(i__main__
ClassDefinition
p1895
(dp1896
g4
I1
sg5
I01
sg6
g1894
sg7
S'TOrange'
p1897
sg9
I00
sg10
(lp1898
sg12
(lp1899
(S'int'
p1900
S'maxItemSets'
p1901
S'max_item_sets'
p1902
S'maximal number of itemsets (increase if you want)'
p1903
I0
I0
I01
Ntp1904
a(S'float'
p1905
S'support'
p1906
g1906
S'required support'
p1907
I0
I0
I01
Ntp1908
a(S'bool'
p1909
S'storeExamples'
p1910
S'store_examples'
p1911
S'stores examples corresponding to itemsets'
p1912
I0
I0
I01
Ntp1913
asg29
(dp1914
sbsS'TPreprocessor_dropMissing'
p1915
(i__main__
ClassDefinition
p1916
(dp1917
g4
I1
sg5
I01
sg6
g1915
sg7
S'TPreprocessor'
p1918
sg9
I00
sg10
(lp1919
sg12
(lp1920
sg29
(dp1921
sbsS'TDomainContinuizer'
p1922
(i__main__
ClassDefinition
p1923
(dp1924
g4
I1
sg5
I01
sg6
g1922
sg7
S'TOrange'
p1925
sg9
I00
sg10
(lp1926
sg12
(lp1927
(S'bool'
p1928
S'zeroBased'
p1929
S'zero_based'
p1930
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p1931
I0
I0
I01
Ntp1932
a(S'int'
p1933
S'continuousTreatment'
p1934
S'continuous_treatment'
p1935
S' 0-leave as they are, 1-divide by span, 1-normalize'
p1936
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p1937
tp1938
a(S'int'
p1939
S'multinomialTreatment'
p1940
S'multinomial_treatment'
p1941
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p1942
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p1943
tp1944
a(S'int'
p1945
S'classTreatment'
p1946
S'class_treatment'
p1947
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p1948
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p1949
tp1950
asg29
(dp1951
S'MultinomialTreatment'
p1952
(lp1953
(S'LowestIsBase'
p1954
I0
tp1955
a(S'FrequentIsBase'
p1956
I1
tp1957
a(S'NValues'
p1958
I2
tp1959
a(S'Ignore'
p1960
I3
tp1961
a(S'IgnoreAllDiscrete'
p1962
I4
tp1963
a(S'ReportError'
p1964
I5
tp1965
a(S'AsOrdinal'
p1966
I6
tp1967
a(S'AsNormalizedOrdinal'
p1968
I7
tp1969
asS'ClassTreatment'
p1970
(lp1971
(S'LeaveUnlessTarget'
p1972
S'3'
p1973
tp1974
a(S'ErrorIfCannotHandle'
p1975
S'5'
p1976
tp1977
a(S'AsOrdinal'
p1978
S'6'
p1979
tp1980
asS'ContinuousTreatment'
p1981
(lp1982
(S'Leave'
p1983
I0
tp1984
a(S'NormalizeBySpan'
p1985
I1
tp1986
a(S'NormalizeByVariance'
p1987
I2
tp1988
assbsS'TNormalizeContinuous'
p1989
(i__main__
ClassDefinition
p1990
(dp1991
g4
I1
sg5
I01
sg6
g1989
sg7
S'TTransformValue'
p1992
sg9
I00
sg10
(lp1993
sg12
(lp1994
(S'float'
p1995
S'average'
p1996
g1996
S'the average value'
p1997
I0
I0
I01
Ntp1998
a(S'float'
p1999
S'span'
p2000
g2000
S'the value span'
p2001
I0
I0
I01
Ntp2002
ag798
asg29
(dp2003
sbsS'TSimpleTreeClassifier'
p2004
(i__main__
ClassDefinition
p2005
(dp2006
g4
I1
sg5
I01
sg6
g2004
sg7
S'TClassifier'
p2007
sg9
I00
sg10
(lp2008
sg12
(lp2009
g94
ag99
asg29
(dp2010
sbsS'TBiModalDiscretizer'
p2011
(i__main__
ClassDefinition
p2012
(dp2013
g4
I1
sg5
I01
sg6
g2011
sg7
S'TDiscretizer'
p2014
sg9
I00
sg10
(lp2015
sg12
(lp2016
(S'float'
p2017
S'low'
p2018
g2018
S'low threshold'
p2019
I0
I0
I01
Ntp2020
a(S'float'
p2021
S'high'
p2022
g2022
S'high threshold'
p2023
I0
I0
I01
Ntp2024
ag798
asg29
(dp2025
sbsS'TExamplesDistanceConstructor_Euclidean'
p2026
(i__main__
ClassDefinition
p2027
(dp2028
g4
I1
sg5
I01
sg6
g2026
sg7
S'TExamplesDistanceConstructor_Normalized'
p2029
sg9
I00
sg10
(lp2030
sg12
(lp2031
(S'bool'
p2032
S'normalize'
p2033
g2033
S'tells whether to normalize distances between attributes'
p2034
I0
I0
I01
Ntp2035
a(S'bool'
p2036
S'ignoreUnknowns'
p2037
S'ignore_unknowns'
p2038
S'if true (default: false) unknown values are ignored in computation'
p2039
I0
I0
I01
Ntp2040
ag1367
asg29
(dp2041
sbsS'TContingencyAttrAttr'
p2042
(i__main__
ClassDefinition
p2043
(dp2044
g4
I1
sg5
I01
sg6
g2042
sg7
S'TContingency'
p2045
sg9
I00
sg10
(lp2046
sg12
(lp2047
g1604
ag1609
ag1615
ag1620
ag1625
ag1630
asg29
(dp2048
sbsS'TRuleBeamRefiner_Selector'
p2049
(i__main__
ClassDefinition
p2050
(dp2051
g4
I1
sg5
I01
sg6
g2049
sg7
S'TRuleBeamRefiner'
p2052
sg9
I00
sg10
(lp2053
sg12
(lp2054
(S'TDiscretization'
p2055
S'discretization'
p2056
g2056
S'discretization for continuous attributes'
p2057
I0
I0
I00
Ntp2058
asg29
(dp2059
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2060
(i__main__
ClassDefinition
p2061
(dp2062
g4
I1
sg5
I01
sg6
g2060
sg7
S'TProbabilityEstimatorConstructor'
p2063
sg9
I00
sg10
(lp2064
sg12
(lp2065
(S'float'
p2066
S'l'
p2067
g2067
S'number of examples added to each class (default: 1)'
p2068
I0
I0
I01
Ntp2069
a(S'bool'
p2070
S'renormalize'
p2071
g2071
S'computes the estimate on the original (not the normalized) distribution'
p2072
I0
I0
I01
Ntp2073
asg29
(dp2074
sbsS'TExamplesDistance_Relief'
p2075
(i__main__
ClassDefinition
p2076
(dp2077
g4
I1
sg5
I01
sg6
g2075
sg7
S'TExamplesDistance'
p2078
sg9
I00
sg10
(lp2079
sg12
(lp2080
(S'TDomainDistributions'
p2081
S'distributions'
p2082
g2082
S"distributions of attributes' values"
p2083
I0
I0
I00
Ntp2084
a(S'TAttributedFloatList'
p2085
S'averages'
p2086
g2086
S'average values of attributes'
p2087
I0
I0
I00
Ntp2088
a(S'TAttributedFloatList'
p2089
S'normalizations'
p2090
g2090
S"ranges of attributes' values"
p2091
I0
I0
I00
Ntp2092
a(S'TAttributedFloatList'
p2093
S'bothSpecial'
p2094
S'both_special'
p2095
S'distance if both values of both attributes are undefined'
p2096
I0
I0
I00
Ntp2097
asg29
(dp2098
sbsS'TExamplesDistance_Manhattan'
p2099
(i__main__
ClassDefinition
p2100
(dp2101
g4
I1
sg5
I01
sg6
g2099
sg7
S'TExamplesDistance_Normalized'
p2102
sg9
I00
sg10
(lp2103
sg12
(lp2104
g447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp2105
sbsS'TExamplesDistanceConstructor_Manhattan'
p2106
(i__main__
ClassDefinition
p2107
(dp2108
g4
I1
sg5
I01
sg6
g2106
sg7
S'TExamplesDistanceConstructor_Normalized'
p2109
sg9
I00
sg10
(lp2110
sg12
(lp2111
g2035
ag2040
ag1367
asg29
(dp2112
sbsS'TStringList'
p2113
(ipyprops
ClassDefinition
p2114
(dp2115
g4
I0
sg5
I01
sg6
g2113
sg7
g136
sg9
I0
sg10
(lp2116
sg12
(lp2117
sg29
(dp2118
sbsS'TTreeDescender'
p2119
(i__main__
ClassDefinition
p2120
(dp2121
g4
I1
sg5
I01
sg6
g2119
sg7
S'TOrange'
p2122
sg9
I01
sg10
(lp2123
sg12
(lp2124
sg29
(dp2125
sbsS'TColumnAssessor_Measure'
p2126
(i__main__
ClassDefinition
p2127
(dp2128
g4
I1
sg5
I01
sg6
g2126
sg7
S'TColumnAssessor'
p2129
sg9
I00
sg10
(lp2130
sg12
(lp2131
(S'TMeasureAttribute'
p2132
S'measure'
p2133
g2133
S'attribute quality measure'
p2134
I0
I0
I00
Ntp2135
asg29
(dp2136
sbsS'TIMBlurer'
p2137
(i__main__
ClassDefinition
p2138
(dp2139
g4
I1
sg5
I01
sg6
g2137
sg7
S'TIMByRowsPreprocessor'
p2140
sg9
I00
sg10
(lp2141
sg12
(lp2142
(S'float'
p2143
S'weight'
p2144
g2144
S'weight of neighbours'
p2145
I0
I0
I01
Ntp2146
a(S'float'
p2147
S'origWeight'
p2148
S'orig_weight'
p2149
S'weight of original row'
p2150
I0
I0
I01
Ntp2151
a(S'TFloatList'
p2152
S'attrWeights'
p2153
S'attr_weights'
p2154
S'weights by individual (different) attributes'
p2155
I0
I0
I00
Ntp2156
a(S'bool'
p2157
S'adjustOrigWeight'
p2158
S'adjust_orig_weight'
p2159
S'uses 1-weight(s) for weight of original row'
p2160
I0
I0
I01
Ntp2161
a(S'bool'
p2162
S'onlyEmpty'
p2163
S'only_empty'
p2164
S'blurs only empty cells'
p2165
I0
I0
I01
Ntp2166
asg29
(dp2167
sbsS'TStopIMClusteringByAssessor_noBigChange'
p2168
(i__main__
ClassDefinition
p2169
(dp2170
g4
I1
sg5
I01
sg6
g2168
sg7
S'TStopIMClusteringByAssessor'
p2171
sg9
I00
sg10
(lp2172
sg12
(lp2173
sg29
(dp2174
sbsS'TC45Learner'
p2175
(i__main__
ClassDefinition
p2176
(dp2177
g4
I1
sg5
I01
sg6
g2175
sg7
S'TLearner'
p2178
sg9
I00
sg10
(lp2179
sg12
(lp2180
(S'bool'
p2181
S'gainRatio'
p2182
(g2182
S'g'
p2183
tp2184
S' use gain ratio (instead of information gain)'
p2185
I0
I0
I01
Ntp2186
a(S'bool'
p2187
S'subset'
p2188
(g2188
S's'
p2189
tp2190
S' use subsetting'
p2191
I0
I0
I01
Ntp2192
a(S'bool'
p2193
S'batch'
p2194
(g2194
S'b'
p2195
tp2196
S' batch'
p2197
I0
I0
I01
Ntp2198
a(S'bool'
p2199
S'probThresh'
p2200
(g2200
S'p'
p2201
tp2202
S' probability threshold'
p2203
I0
I0
I01
Ntp2204
a(S'int'
p2205
S'minObjs'
p2206
(g2206
g1209
tp2207
S' minimal number of objects (examples) in leaves'
p2208
I0
I0
I01
Ntp2209
a(S'int'
p2210
S'window'
p2211
(g2211
S'w'
p2212
tp2213
S' window'
p2214
I0
I0
I01
Ntp2215
a(S'int'
p2216
S'increment'
p2217
(g2217
S'i'
p2218
tp2219
S' increment'
p2220
I0
I0
I01
Ntp2221
a(S'float'
p2222
S'cf'
p2223
(g2223
S'c'
p2224
tp2225
S' cf'
p2226
I0
I0
I01
Ntp2227
a(S'int'
p2228
S'trials'
p2229
(g2229
S't'
p2230
tp2231
S' trials'
p2232
I0
I0
I01
Ntp2233
a(S'bool'
p2234
S'prune'
p2235
g2235
S'return pruned tree'
p2236
I0
I0
I01
Ntp2237
a(S'bool'
p2238
S'convertToOrange'
p2239
S'convert_to_orange'
p2240
S'return TreeClassifier instead of C45TreeClassifier'
p2241
I0
I0
I01
Ntp2242
a(S'bool'
p2243
S'storeExamples'
p2244
S'store_examples'
p2245
S'stores examples when (if) converting to TreeClassifier'
p2246
I0
I0
I01
Ntp2247
a(S'bool'
p2248
S'storeContingencies'
p2249
S'store_contingencies'
p2250
S'stores contingencies when (if) converting to TreeClassifier'
p2251
I0
I0
I01
Ntp2252
ag110
asg29
(dp2253
sbsS'TAttributedBoolList'
p2254
(ipyprops
ClassDefinition
p2255
(dp2256
g4
I0
sg5
I01
sg6
g2254
sg7
S'TBoolList'
p2257
sg9
I0
sg10
(lp2258
sg12
(lp2259
sg29
(dp2260
sbsS'TFeatureByMinComplexity'
p2261
(i__main__
ClassDefinition
p2262
(dp2263
g4
I1
sg5
I01
sg6
g2261
sg7
S'TFeatureInducer'
p2264
sg9
I00
sg10
(lp2265
sg12
(lp2266
(S'TColorIG'
p2267
S'colorIG'
p2268
S'color_IG'
p2269
S'graph coloring algorithm'
p2270
I0
I0
I00
Ntp2271
a(S'int'
p2272
S'completion'
p2273
g2273
S' decides how to determine the class for points not covered by any cluster'
p2274
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2275
tp2276
asg29
(dp2277
S'Completion'
p2278
(lp2279
(S'NoCompletion'
p2280
S'completion_no'
p2281
tp2282
a(S'CompletionByDefault'
p2283
S'completion_default'
p2284
tp2285
a(S'CompletionByBayes'
p2286
S'completion_bayes'
p2287
tp2288
assbsS'TPreprocessor_dropMissingClasses'
p2289
(i__main__
ClassDefinition
p2290
(dp2291
g4
I1
sg5
I01
sg6
g2289
sg7
S'TPreprocessor'
p2292
sg9
I00
sg10
(lp2293
sg12
(lp2294
sg29
(dp2295
sbsS'TkNNClassifier'
p2296
(i__main__
ClassDefinition
p2297
(dp2298
g4
I1
sg5
I01
sg6
g2296
sg7
S'TClassifierFD'
p2299
sg9
I00
sg10
(lp2300
sg12
(lp2301
(S'TFindNearest'
p2302
S'findNearest'
p2303
S'find_nearest'
p2304
g593
I0
I0
I00
Ntp2305
a(S'float'
p2306
g1205
g1205
S'number of neighbours (0 for sqrt of #examples)'
p2307
I0
I0
I01
Ntp2308
a(S'bool'
p2309
S'rankWeight'
p2310
S'rank_weight'
p2311
S'enable weighting by ranks'
p2312
I0
I0
I01
Ntp2313
a(S'int'
p2314
S'weightID'
p2315
S'weight_ID'
p2316
S'id of meta-attribute with weight'
p2317
I0
I0
I01
Ntp2318
a(S'int'
p2319
S'nExamples'
p2320
S'n_examples'
p2321
S'the number of learning examples '
p2322
I0
I0
I01
Ntp2323
ag284
ag94
ag99
asg29
(dp2324
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2325
(i__main__
ClassDefinition
p2326
(dp2327
g4
I1
sg5
I01
sg6
g2325
sg7
S'TRuleBeamCandidateSelector'
p2328
sg9
I00
sg10
(lp2329
sg12
(lp2330
sg29
(dp2331
sbsS'TCostMatrix'
p2332
(i__main__
ClassDefinition
p2333
(dp2334
g4
I1
sg5
I01
sg6
g2332
sg7
S'TOrange'
p2335
sg9
I00
sg10
(lp2336
sg12
(lp2337
(S'TVariable'
p2338
S'classVar'
p2339
S'class_var'
p2340
S'attribute to which the matrix applies'
p2341
I0
I0
I00
Ntp2342
a(S'int'
p2343
S'dimension'
p2344
g2344
S'dimension (should equal classVar.noOfValues())'
p2345
I01
I0
I01
Ntp2346
asg29
(dp2347
sbsS'TOrange'
p2348
(i__main__
ClassDefinition
p2349
(dp2350
g4
I1
sg5
I01
sg6
g2348
sg7
Nsg9
I00
sg10
(lp2351
sg12
(lp2352
sg29
(dp2353
sbsS'TRuleValidator'
p2354
(i__main__
ClassDefinition
p2355
(dp2356
g4
I1
sg5
I01
sg6
g2354
sg7
S'TOrange'
p2357
sg9
I01
sg10
(lp2358
sg12
(lp2359
sg29
(dp2360
sbsS'TColorIG'
p2361
(i__main__
ClassDefinition
p2362
(dp2363
g4
I1
sg5
I01
sg6
g2361
sg7
S'TOrange'
p2364
sg9
I01
sg10
(lp2365
sg12
(lp2366
sg29
(dp2367
sbsS'TRuleValidator_Python'
p2368
(i__main__
ClassDefinition
p2369
(dp2370
g4
I1
sg5
I01
sg6
g2368
sg7
S'TRuleValidator'
p2371
sg9
I00
sg10
(lp2372
sg12
(lp2373
sg29
(dp2374
sbsS'TSubsetsGenerator_constSize_iterator'
p2375
(i__main__
ClassDefinition
p2376
(dp2377
g4
I1
sg5
I01
sg6
g2375
sg7
S'TSubsetsGenerator_iterator'
p2378
sg9
I00
sg10
(lp2379
sg12
(lp2380
(S'bool'
p2381
S'moreToCome'
p2382
S'more_to_come'
p2383
g593
I01
I0
I01
Ntp2384
ag503
asg29
(dp2385
sbsS'TIMByRowsBySorting'
p2386
(i__main__
ClassDefinition
p2387
(dp2388
g4
I1
sg5
I01
sg6
g2386
sg7
S'TIMByRowsConstructor'
p2389
sg9
I00
sg10
(lp2390
sg12
(lp2391
sg29
(dp2392
sbsS'TEVDist'
p2393
(i__main__
ClassDefinition
p2394
(dp2395
g4
I1
sg5
I01
sg6
g2393
sg7
S'TOrange'
p2396
sg9
I00
sg10
(lp2397
sg12
(lp2398
(S'float'
p2399
S'mu'
p2400
g2400
S'mu of Fisher-Tippett distribution'
p2401
I0
I0
I01
Ntp2402
a(S'float'
p2403
S'beta'
p2404
g2404
S'beta of Fisher-Tippett distribution'
p2405
I0
I0
I01
Ntp2406
a(S'TFloatList'
p2407
S'percentiles'
p2408
g2408
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p2409
I0
I0
I00
Ntp2410
a(S'float'
p2411
S'maxPercentile'
p2412
S'max_percentile'
p2413
S'maxPercentile Value, default 0.95'
p2414
I0
I0
I01
Ntp2415
a(S'float'
p2416
S'step'
p2417
g2417
S'step of percentiles, default 0.1'
p2418
I0
I0
I01
Ntp2419
asg29
(dp2420
sbsS'TAssociationLearner'
p2421
(i__main__
ClassDefinition
p2422
(dp2423
g4
I1
sg5
I01
sg6
g2421
sg7
S'TLearner'
p2424
sg9
I00
sg10
(lp2425
sg12
(lp2426
(S'float'
p2427
S'confidence'
p2428
g2428
S'required confidence'
p2429
I0
I0
I01
Ntp2430
a(S'float'
p2431
S'support'
p2432
g2432
S'required support'
p2433
I0
I0
I01
Ntp2434
a(S'int'
p2435
S'voteWeight'
p2436
S'vote_weight'
p2437
S'vote weight (s=support, c=confidence, p=product)'
p2438
I0
I0
I01
Ntp2439
a(S'int'
p2440
S'maxItemSets'
p2441
S'max_item_sets'
p2442
S'maximal number of itemsets (increase if you want)'
p2443
I0
I0
I01
Ntp2444
ag110
asg29
(dp2445
sbsS'TRuleBeamInitializer_Python'
p2446
(i__main__
ClassDefinition
p2447
(dp2448
g4
I1
sg5
I01
sg6
g2446
sg7
S'TRuleBeamInitializer'
p2449
sg9
I00
sg10
(lp2450
sg12
(lp2451
sg29
(dp2452
sbsS'TDistributionAssessor'
p2453
(i__main__
ClassDefinition
p2454
(dp2455
g4
I1
sg5
I01
sg6
g2453
sg7
S'TOrange'
p2456
sg9
I01
sg10
(lp2457
sg12
(lp2458
sg29
(dp2459
sbsS'TRuleCovererAndRemover_Python'
p2460
(i__main__
ClassDefinition
p2461
(dp2462
g4
I1
sg5
I01
sg6
g2460
sg7
S'TRuleCovererAndRemover'
p2463
sg9
I00
sg10
(lp2464
sg12
(lp2465
sg29
(dp2466
sbsS'TMeasureAttribute_gainRatioA'
p2467
(i__main__
ClassDefinition
p2468
(dp2469
g4
I1
sg5
I01
sg6
g2467
sg7
S'TMeasureAttribute_gainRatio'
p2470
sg9
I00
sg10
(lp2471
sg12
(lp2472
g907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp2473
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2474
(i__main__
ClassDefinition
p2475
(dp2476
g4
I1
sg5
I01
sg6
g2474
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2477
sg9
I00
sg10
(lp2478
sg12
(lp2479
(S'TProbabilityEstimatorConstructor'
p2480
S'estimatorConstructor'
p2481
S'estimator_constructor'
p2482
S'ProbabilityEstimator to be used '
p2483
I0
I0
I00
Ntp2484
asg29
(dp2485
sbsS'TCartesianClassifier'
p2486
(i__main__
ClassDefinition
p2487
(dp2488
g4
I1
sg5
I01
sg6
g2486
sg7
S'TClassifierFD'
p2489
sg9
I00
sg10
(lp2490
sg12
(lp2491
g284
ag94
ag99
asg29
(dp2492
sbsS'TLinearClassifier'
p2493
(i__main__
ClassDefinition
p2494
(dp2495
g4
I1
sg5
I01
sg6
g2493
sg7
S'TClassifierFD'
p2496
sg9
I00
sg10
(lp2497
sg12
(lp2498
(S'TFloatListList'
p2499
S'weights'
p2500
g2500
S'Computed feature weights'
p2501
I0
I0
I00
Ntp2502
a(S'TExampleTable'
p2503
S'examples'
p2504
g2504
S'Examples used to train the classifier'
p2505
I0
I0
I00
Ntp2506
ag284
ag94
ag99
asg29
(dp2507
sbsS'TTreeDescender_UnknownToBranch'
p2508
(i__main__
ClassDefinition
p2509
(dp2510
g4
I1
sg5
I01
sg6
g2508
sg7
g1537
sg9
I0
sg10
(lp2511
sg12
(lp2512
sg29
(dp2513
sbsS'TSubsetsGenerator_constSize'
p2514
(i__main__
ClassDefinition
p2515
(dp2516
g4
I1
sg5
I01
sg6
g2514
sg7
S'TSubsetsGenerator'
p2517
sg9
I00
sg10
(lp2518
sg12
(lp2519
(S'int'
p2520
S'B'
p2521
g2521
S'subset size'
p2522
I0
I0
I01
Ntp2523
ag200
asg29
(dp2524
sbsS'TColorIG_MCF'
p2525
(i__main__
ClassDefinition
p2526
(dp2527
g4
I1
sg5
I01
sg6
g2525
sg7
S'TColorIG'
p2528
sg9
I00
sg10
(lp2529
sg12
(lp2530
sg29
(dp2531
sbsS'TBasicAttrStat'
p2532
(i__main__
ClassDefinition
p2533
(dp2534
g4
I1
sg5
I01
sg6
g2532
sg7
S'TOrange'
p2535
sg9
I00
sg10
(lp2536
sg12
(lp2537
(S'float'
p2538
S'sum'
p2539
g2539
S'sum of values'
p2540
I0
I0
I01
Ntp2541
a(S'float'
p2542
S'sum2'
p2543
g2543
S'sum of squares of values'
p2544
I0
I0
I01
Ntp2545
a(S'float'
p2546
g1015
g1015
S'number of examples for which the attribute is defined'
p2547
I0
I0
I01
Ntp2548
a(S'float'
p2549
S'min'
p2550
g2550
S'the lowest value of the attribute'
p2551
I0
I0
I01
Ntp2552
a(S'float'
p2553
S'max'
p2554
g2554
S'the highest value of the attribute'
p2555
I0
I0
I01
Ntp2556
a(S'float'
p2557
S'avg'
p2558
g2558
S'the average value of the attribute'
p2559
I0
I0
I01
Ntp2560
a(S'float'
p2561
S'dev'
p2562
g2562
S'the deviation of the value of the attribute'
p2563
I0
I0
I01
Ntp2564
a(S'TVariable'
p2565
S'variable'
p2566
g2566
S'the attribute to which the data applies'
p2567
I0
I0
I00
Ntp2568
a(S'bool'
p2569
S'holdRecomputation'
p2570
S'hold_recomputation'
p2571
S'temporarily disables recomputation of avg and dev while adding values'
p2572
I0
I0
I01
Ntp2573
asg29
(dp2574
sbsS'TTreeSplitConstructor_Attribute'
p2575
(i__main__
ClassDefinition
p2576
(dp2577
g4
I1
sg5
I01
sg6
g2575
sg7
S'TTreeSplitConstructor_Measure'
p2578
sg9
I00
sg10
(lp2579
sg12
(lp2580
g1299
ag1304
ag776
asg29
(dp2581
sbsS'TRemoveRedundantByInduction'
p2582
(i__main__
ClassDefinition
p2583
(dp2584
g4
I1
sg5
I01
sg6
g2582
sg7
S'TRemoveRedundant'
p2585
sg9
I00
sg10
(lp2586
sg12
(lp2587
(S'TFeatureInducer'
p2588
S'featureReducer'
p2589
S'feature_reducer'
p2590
S'feature construction algorithm'
p2591
I0
I0
I00
Ntp2592
a(S'TMeasureAttribute'
p2593
S'measure'
p2594
g2594
S'measure for initial ordering of attributes'
p2595
I0
I0
I00
Ntp2596
a(S'TDiscretization'
p2597
S'discretization'
p2598
g2598
S'discretization method'
p2599
I0
I0
I00
Ntp2600
ag1345
asg29
(dp2601
sbsS'TFilter_conjunction'
p2602
(i__main__
ClassDefinition
p2603
(dp2604
g4
I1
sg5
I01
sg6
g2602
sg7
S'TFilter'
p2605
sg9
I00
sg10
(lp2606
sg12
(lp2607
(S'TFilterList'
p2608
S'filters'
p2609
g2609
S'a list of filters;'
p2610
I0
I0
I00
Ntp2611
ag684
ag688
asg29
(dp2612
sbsS'TExampleForMissing'
p2613
(i__main__
ClassDefinition
p2614
(dp2615
g4
I1
sg5
I01
sg6
g2613
sg7
S'TExample'
p2616
sg9
I00
sg10
(lp2617
sg12
(lp2618
(S'TEFMDataDescription'
p2619
S'dataDescription'
p2620
S'data_description'
p2621
S'data description'
p2622
I0
I0
I00
Ntp2623
a(S'TDomain'
p2624
S'domain'
p2625
g2625
S"Example's domain"
p2626
I01
I0
I00
Ntp2627
a(S'int'
p2628
S'id'
p2629
g2629
g593
I0
I0
I01
Ntp2630
asg29
(dp2631
sbsS'TRuleBeamFilter'
p2632
(i__main__
ClassDefinition
p2633
(dp2634
g4
I1
sg5
I01
sg6
g2632
sg7
S'TOrange'
p2635
sg9
I01
sg10
(lp2636
sg12
(lp2637
sg29
(dp2638
sbsS'TBayesClassifier'
p2639
(i__main__
ClassDefinition
p2640
(dp2641
g4
I1
sg5
I01
sg6
g2639
sg7
S'TClassifierFD'
p2642
sg9
I00
sg10
(lp2643
sg12
(lp2644
(S'TDistribution'
p2645
S'distribution'
p2646
g2646
S'class distributions (P(C))'
p2647
I0
I0
I00
Ntp2648
a(S'TDomainContingency'
p2649
S'conditionalDistributions'
p2650
S'conditional_distributions'
p2651
S'conditional distributions, P(C|A)'
p2652
I0
I0
I00
Ntp2653
a(S'TProbabilityEstimator'
p2654
S'estimator'
p2655
g2655
S'a probability estimator for P(C)'
p2656
I0
I0
I00
Ntp2657
a(S'TConditionalProbabilityEstimatorList'
p2658
S'conditionalEstimators'
p2659
S'conditional_estimators'
p2660
S'a probability estimator for P(C|A)'
p2661
I0
I0
I00
Ntp2662
a(S'bool'
p2663
S'normalizePredictions'
p2664
S'normalize_predictions'
p2665
S'if true, classifier will normalize predictions'
p2666
I0
I0
I01
Ntp2667
a(S'float'
p2668
S'threshold'
p2669
g2669
S'threshold probability for class 1 (for binary classes only)'
p2670
I0
I0
I01
Ntp2671
ag284
ag94
ag99
asg29
(dp2672
sbsS'TGraph'
p2673
(i__main__
ClassDefinition
p2674
(dp2675
g4
I1
sg5
I01
sg6
g2673
sg7
S'TOrange'
p2676
sg9
I01
sg10
(lp2677
sg12
(lp2678
g1483
ag1488
ag1492
asg29
(dp2679
sbsS'TPreprocessor_addClassWeight'
p2680
(i__main__
ClassDefinition
p2681
(dp2682
g4
I1
sg5
I01
sg6
g2680
sg7
S'TPreprocessor'
p2683
sg9
I00
sg10
(lp2684
sg12
(lp2685
(S'TFloatList'
p2686
S'classWeights'
p2687
S'class_weights'
p2688
S'weights of examples of particular classes'
p2689
I0
I0
I00
Ntp2690
a(S'bool'
p2691
S'equalize'
p2692
g2692
S'reweight examples to equalize class proportions'
p2693
I0
I0
I01
Ntp2694
a(S'TRandomGenerator'
p2695
S'randomGenerator'
p2696
S'random_generator'
p2697
S'random number generator'
p2698
I0
I0
I00
Ntp2699
asg29
(dp2700
sbsS'THierarchicalClusterList'
p2701
(ipyprops
ClassDefinition
p2702
(dp2703
g4
I0
sg5
I01
sg6
g2701
sg7
g136
sg9
I0
sg10
(lp2704
sg12
(lp2705
sg29
(dp2706
sbsS'TStopIMClusteringByAssessor'
p2707
(i__main__
ClassDefinition
p2708
(dp2709
g4
I1
sg5
I01
sg6
g2707
sg7
S'TOrange'
p2710
sg9
I01
sg10
(lp2711
sg12
(lp2712
sg29
(dp2713
sbsS'TValueFilter_continuous'
p2714
(i__main__
ClassDefinition
p2715
(dp2716
g4
I1
sg5
I01
sg6
g2714
sg7
S'TValueFilter'
p2717
sg9
I00
sg10
(lp2718
sg12
(lp2719
(S'float'
p2720
S'min'
p2721
(g2721
S'ref'
p2722
tp2723
S' reference value (lower bound for interval operators)'
p2724
I0
I0
I01
Ntp2725
a(S'float'
p2726
S'max'
p2727
g2727
S'upper bound for interval operators'
p2728
I0
I0
I01
Ntp2729
a(S'bool'
p2730
S'outside'
p2731
g2731
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2732
I0
I0
I01
Ntp2733
a(S'int'
p2734
S'oper'
p2735
g2735
S' operator'
p2736
I0
I0
I01
S'ValueFilter_Operator'
p2737
tp2738
ag1058
ag1063
asg29
(dp2739
sbsS'TAssociationRule'
p2740
(i__main__
ClassDefinition
p2741
(dp2742
g4
I1
sg5
I01
sg6
g2740
sg7
S'TOrange'
p2743
sg9
I00
sg10
(lp2744
sg12
(lp2745
(S'TExample'
p2746
S'left'
p2747
g2747
S'left side of the rule'
p2748
I01
I0
I00
Ntp2749
a(S'TExample'
p2750
S'right'
p2751
g2751
S'right side of the rule'
p2752
I01
I0
I00
Ntp2753
a(S'float'
p2754
S'support'
p2755
g2755
S'support for the rule'
p2756
I0
I0
I01
Ntp2757
a(S'float'
p2758
S'confidence'
p2759
g2759
S'confidence of the rule'
p2760
I0
I0
I01
Ntp2761
a(S'float'
p2762
S'coverage'
p2763
g2763
S"rule's coverage"
p2764
I0
I0
I01
Ntp2765
a(S'float'
p2766
S'strength'
p2767
g2767
S"rule's strength"
p2768
I0
I0
I01
Ntp2769
a(S'float'
p2770
S'lift'
p2771
g2771
S"rule's lift"
p2772
I0
I0
I01
Ntp2773
a(S'float'
p2774
S'leverage'
p2775
g2775
S"rule's leverage"
p2776
I0
I0
I01
Ntp2777
a(S'float'
p2778
S'nAppliesLeft'
p2779
S'n_applies_left'
p2780
S"number of examples covered by the rule's left side"
p2781
I0
I0
I01
Ntp2782
a(S'float'
p2783
S'nAppliesRight'
p2784
S'n_applies_right'
p2785
S"number of examples covered by the rule's right side"
p2786
I0
I0
I01
Ntp2787
a(S'float'
p2788
S'nAppliesBoth'
p2789
S'n_applies_both'
p2790
S'number of examples covered by the rule'
p2791
I0
I0
I01
Ntp2792
a(S'float'
p2793
S'nExamples'
p2794
S'n_examples'
p2795
S'number of learning examples'
p2796
I0
I0
I01
Ntp2797
a(S'int'
p2798
S'nLeft'
p2799
S'n_left'
p2800
S"number of items on the rule's left side"
p2801
I01
I0
I01
Ntp2802
a(S'int'
p2803
S'nRight'
p2804
S'n_right'
p2805
S"number of items on the rule's right side"
p2806
I01
I0
I01
Ntp2807
a(S'TExampleTable'
p2808
S'examples'
p2809
g2809
S'examples which the rule was built from'
p2810
I01
I0
I00
Ntp2811
a(S'TIntList'
p2812
S'matchLeft'
p2813
S'match_left'
p2814
S'indices of examples that match the left side of the rule'
p2815
I01
I0
I00
Ntp2816
a(S'TIntList'
p2817
S'matchBoth'
p2818
S'match_both'
p2819
S'indices to examples that match both sides of the rule'
p2820
I01
I0
I00
Ntp2821
asg29
(dp2822
sbsS'TValueFilter'
p2823
(i__main__
ClassDefinition
p2824
(dp2825
g4
I1
sg5
I01
sg6
g2823
sg7
S'TOrange'
p2826
sg9
I01
sg10
(lp2827
sg12
(lp2828
g1058
ag1063
asg29
(dp2829
S'Operator'
p2830
(lp2831
(S'None'
p2832
I0
tp2833
a(S'Equal'
p2834
I1
tp2835
a(S'NotEqual'
p2836
I2
tp2837
a(S'Less'
p2838
I3
tp2839
a(S'LessEqual'
p2840
I4
tp2841
a(S'Greater'
p2842
I5
tp2843
a(S'GreaterEqual'
p2844
I6
tp2845
a(S'Between'
p2846
I7
tp2847
a(S'Outside'
p2848
I8
tp2849
a(S'Contains'
p2850
I9
tp2851
a(S'NotContains'
p2852
I10
tp2853
a(S'BeginsWith'
p2854
I11
tp2855
a(S'EndsWith'
p2856
I12
tp2857
a(S'Listed'
p2858
I13
tp2859
assbsS'TClustersFromDistributions'
p2860
(i__main__
ClassDefinition
p2861
(dp2862
g4
I1
sg5
I01
sg6
g2860
sg7
S'TOrange'
p2863
sg9
I01
sg10
(lp2864
sg12
(lp2865
sg29
(dp2866
sbsS'TVariable'
p2867
(i__main__
ClassDefinition
p2868
(dp2869
g4
I1
sg5
I01
sg6
g2867
sg7
S'TOrange'
p2870
sg9
I01
sg10
(lp2871
sg12
(lp2872
g326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp2873
S'Type'
p2874
(lp2875
(S'None'
p2876
S'(int)TValue::NONE'
p2877
tp2878
a(S'Discrete'
p2879
S'(int)TValue::INTVAR'
p2880
tp2881
a(S'Continuous'
p2882
S'(int)TValue::FLOATVAR'
p2883
tp2884
a(S'Other'
p2885
S'(int)(TValue::FLOATVAR+1)'
p2886
tp2887
a(S'String'
p2888
S'(int)STRINGVAR'
p2889
tp2890
asS'MakeStatus'
p2891
(lp2892
(S'OK'
p2893
I0
tp2894
a(S'MissingValues'
p2895
I1
tp2896
a(S'NoRecognizedValues'
p2897
I2
tp2898
a(S'Incompatible'
p2899
I3
tp2900
a(S'NotFound'
p2901
I4
tp2902
assbsS'TNoiseValuesGenerator'
p2903
(i__main__
ClassDefinition
p2904
(dp2905
g4
I1
sg5
I01
sg6
g2903
sg7
S'TChangeExampleGenerator'
p2906
sg9
I00
sg10
(lp2907
sg12
(lp2908
(S'TIntFloatList'
p2909
S'replaceProbabilities'
p2910
S'replace_probabilities'
p2911
S"probabilities for replacing attributes' values"
p2912
I0
I0
I00
Ntp2913
a(S'TRandomGenerator'
p2914
S'randomGenerator'
p2915
S'random_generator'
p2916
S'random generator'
p2917
I0
I0
I00
Ntp2918
ag299
ag303
asg29
(dp2919
sbsS'TC45TreeNodeList'
p2920
(ipyprops
ClassDefinition
p2921
(dp2922
g4
I0
sg5
I01
sg6
g2920
sg7
g136
sg9
I0
sg10
(lp2923
sg12
(lp2924
sg29
(dp2925
sbsS'TFilter_sameValue'
p2926
(i__main__
ClassDefinition
p2927
(dp2928
g4
I1
sg5
I01
sg6
g2926
sg7
S'TFilter'
p2929
sg9
I00
sg10
(lp2930
sg12
(lp2931
(S'int'
p2932
S'position'
p2933
g2933
S'position of the observed attribute'
p2934
I0
I0
I01
Ntp2935
a(S'TValue'
p2936
S'value'
p2937
g2937
S'value that the selected examples should have'
p2938
I0
I0
I01
Ntp2939
ag684
ag688
asg29
(dp2940
sbsS'TEquiNDiscretization'
p2941
(i__main__
ClassDefinition
p2942
(dp2943
g4
I1
sg5
I01
sg6
g2941
sg7
S'TDiscretization'
p2944
sg9
I00
sg10
(lp2945
sg12
(lp2946
(S'int'
p2947
S'numberOfIntervals'
p2948
(g2948
g1015
tp2949
S' number of intervals'
p2950
I0
I0
I01
Ntp2951
a(S'bool'
p2952
S'recursiveDivision'
p2953
S'recursive_division'
p2954
S'find cut-off points by recursive division (default = true)'
p2955
I0
I0
I01
Ntp2956
asg29
(dp2957
sbsS'TImputerConstructor_average'
p2958
(i__main__
ClassDefinition
p2959
(dp2960
g4
I1
sg5
I01
sg6
g2958
sg7
S'TImputerConstructor'
p2961
sg9
I00
sg10
(lp2962
sg12
(lp2963
g157
asg29
(dp2964
sbsS'TGaussianDistribution'
p2965
(i__main__
ClassDefinition
p2966
(dp2967
g4
I1
sg5
I01
sg6
g2965
sg7
S'TDistribution'
p2968
sg9
I00
sg10
(lp2969
sg12
(lp2970
(S'float'
p2971
S'mean'
p2972
g2972
S'mu'
p2973
I0
I0
I01
Ntp2974
a(S'float'
p2975
S'sigma'
p2976
g2976
S'sigma'
p2977
I0
I0
I01
Ntp2978
ag1129
ag1133
ag1137
ag1141
ag1145
ag1150
ag1155
ag1160
asg29
(dp2979
sbsS'TDomainBasicAttrStat'
p2980
(ipyprops
ClassDefinition
p2981
(dp2982
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p2983
sg7
g136
sg9
I0
sg10
(lp2984
sg12
(lp2985
sg29
(dp2986
sbsS'TStopDistributionClustering'
p2987
(i__main__
ClassDefinition
p2988
(dp2989
g4
I1
sg5
I01
sg6
g2987
sg7
S'TOrange'
p2990
sg9
I01
sg10
(lp2991
sg12
(lp2992
sg29
(dp2993
sbsS'TImputerConstructor_maximal'
p2994
(i__main__
ClassDefinition
p2995
(dp2996
g4
I1
sg5
I01
sg6
g2994
sg7
S'TImputerConstructor'
p2997
sg9
I00
sg10
(lp2998
sg12
(lp2999
g157
asg29
(dp3000
sbsS'TImputerConstructor_random'
p3001
(i__main__
ClassDefinition
p3002
(dp3003
g4
I1
sg5
I01
sg6
g3001
sg7
S'TImputerConstructor'
p3004
sg9
I00
sg10
(lp3005
sg12
(lp3006
(S'bool'
p3007
S'deterministic'
p3008
g3008
S"tells whether to initialize random by example's CRC (default: false)"
p3009
I0
I0
I01
Ntp3010
ag157
asg29
(dp3011
sbsS'TCostWrapperClassifier'
p3012
(i__main__
ClassDefinition
p3013
(dp3014
g4
I1
sg5
I01
sg6
g3012
sg7
S'TClassifier'
p3015
sg9
I00
sg10
(lp3016
sg12
(lp3017
(S'TClassifier'
p3018
S'classifier'
p3019
g3019
S'basic classifier'
p3020
I0
I0
I00
Ntp3021
a(S'TCostMatrix'
p3022
S'costMatrix'
p3023
S'cost_matrix'
p3024
S'cost matrix'
p3025
I0
I0
I00
Ntp3026
ag94
ag99
asg29
(dp3027
sbsS'TPreprocessor_ignore'
p3028
(i__main__
ClassDefinition
p3029
(dp3030
g4
I1
sg5
I01
sg6
g3028
sg7
S'TPreprocessor'
p3031
sg9
I00
sg10
(lp3032
sg12
(lp3033
(S'TVarList'
p3034
S'attributes'
p3035
g3035
S'tells which attributes to remove'
p3036
I0
I0
I00
Ntp3037
asg29
(dp3038
sbsS'TExamplesDistance_Euclidean'
p3039
(i__main__
ClassDefinition
p3040
(dp3041
g4
I1
sg5
I01
sg6
g3039
sg7
S'TExamplesDistance_Normalized'
p3042
sg9
I00
sg10
(lp3043
sg12
(lp3044
(S'TDomainDistributions'
p3045
S'distributions'
p3046
g3046
S'distributions (of discrete attributes only)'
p3047
I0
I0
I00
Ntp3048
a(S'TAttributedFloatList'
p3049
S'bothSpecialDist'
p3050
S'both_special_dist'
p3051
S'distances between discrete attributes if both values are unknown'
p3052
I0
I0
I00
Ntp3053
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp3054
sbsS'TMeasureAttribute_Python'
p3055
(i__main__
ClassDefinition
p3056
(dp3057
g4
I1
sg5
I01
sg6
g3055
sg7
S'TMeasureAttribute'
p3058
sg9
I00
sg10
(lp3059
sg12
(lp3060
g923
ag928
ag933
ag938
asg29
(dp3061
sbsS'TPreprocessor_take'
p3062
(i__main__
ClassDefinition
p3063
(dp3064
g4
I1
sg5
I01
sg6
g3062
sg7
S'TPreprocessor'
p3065
sg9
I00
sg10
(lp3066
sg12
(lp3067
(S'TVariableFilterMap'
p3068
S'values'
p3069
g3069
S'variable-filter pairs'
p3070
I0
I0
I00
Ntp3071
a(S'bool'
p3072
S'conjunction'
p3073
g3073
S'decides whether to take conjunction or disjunction of values'
p3074
I0
I0
I01
Ntp3075
asg29
(dp3076
sbsS'TDistributionAssessor_m'
p3077
(i__main__
ClassDefinition
p3078
(dp3079
g4
I1
sg5
I01
sg6
g3077
sg7
S'TDistributionAssessor'
p3080
sg9
I00
sg10
(lp3081
sg12
(lp3082
(S'float'
p3083
g1209
g1209
S'm for m-estimate'
p3084
I0
I0
I01
Ntp3085
asg29
(dp3086
sbsS'TClassifierRandomGenerator'
p3087
(i__main__
ClassDefinition
p3088
(dp3089
g4
I1
sg5
I01
sg6
g3087
sg7
S'TExampleGenerator'
p3090
sg9
I00
sg10
(lp3091
sg12
(lp3092
(S'TClassifier'
p3093
S'classify'
p3094
g3094
S'classifier'
p3095
I0
I0
I00
Ntp3096
a(S'int'
p3097
S'noOfEx'
p3098
S'no_of_ex'
p3099
S'number of examples'
p3100
I0
I0
I01
Ntp3101
ag299
ag303
asg29
(dp3102
sbsS'TThresholdDiscretizer'
p3103
(i__main__
ClassDefinition
p3104
(dp3105
g4
I1
sg5
I01
sg6
g3103
sg7
S'TDiscretizer'
p3106
sg9
I00
sg10
(lp3107
sg12
(lp3108
(S'float'
p3109
S'threshold'
p3110
g3110
S'threshold'
p3111
I0
I0
I01
Ntp3112
ag798
asg29
(dp3113
sbsS'TExampleTable'
p3114
(i__main__
ClassDefinition
p3115
(dp3116
g4
I1
sg5
I01
sg6
g3114
sg7
S'TExampleGenerator'
p3117
sg9
I00
sg10
(lp3118
sg12
(lp3119
(S'TRandomGenerator'
p3120
S'randomGenerator'
p3121
S'random_generator'
p3122
S'random generator used by randomExample'
p3123
I0
I0
I00
Ntp3124
a(S'TExampleGenerator'
p3125
S'lock'
p3126
(g3126
S'owner'
p3127
tp3128
S' the real owner of examples'
p3129
I01
I0
I00
Ntp3130
a(S'bool'
p3131
S'ownsExamples'
p3132
(g3132
S'owns_instances'
p3133
tp3134
S' if false, examples in this table are references to examples in another table'
p3135
I01
I0
I01
Ntp3136
ag299
ag303
asg29
(dp3137
sbsS'TEVDistGetter'
p3138
(i__main__
ClassDefinition
p3139
(dp3140
g4
I1
sg5
I01
sg6
g3138
sg7
S'TOrange'
p3141
sg9
I01
sg10
(lp3142
sg12
(lp3143
sg29
(dp3144
sbsS'TTreeSplitConstructor_Threshold'
p3145
(i__main__
ClassDefinition
p3146
(dp3147
g4
I1
sg5
I01
sg6
g3145
sg7
S'TTreeSplitConstructor_Measure'
p3148
sg9
I00
sg10
(lp3149
sg12
(lp3150
g1299
ag1304
ag776
asg29
(dp3151
sbsS'TStopDistributionClustering_n'
p3152
(i__main__
ClassDefinition
p3153
(dp3154
g4
I1
sg5
I01
sg6
g3152
sg7
S'TStopDistributionClustering'
p3155
sg9
I00
sg10
(lp3156
sg12
(lp3157
(S'int'
p3158
g1015
g1015
S'number of clusters'
p3159
I0
I0
I01
Ntp3160
asg29
(dp3161
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3162
(i__main__
ClassDefinition
p3163
(dp3164
g4
I1
sg5
I01
sg6
g3162
sg7
S'TTreeExampleSplitter'
p3165
sg9
I00
sg10
(lp3166
sg12
(lp3167
sg29
(dp3168
sbsS'TClassifier_Python'
p3169
(i__main__
ClassDefinition
p3170
(dp3171
g4
I1
sg5
I01
sg6
g3169
sg7
S'TClassifier'
p3172
sg9
I00
sg10
(lp3173
sg12
(lp3174
g94
ag99
asg29
(dp3175
sbsS'TFilter_isDefined'
p3176
(i__main__
ClassDefinition
p3177
(dp3178
g4
I1
sg5
I01
sg6
g3176
sg7
S'TFilter'
p3179
sg9
I00
sg10
(lp3180
sg12
(lp3181
(S'TAttributedBoolList'
p3182
S'check'
p3183
g3183
S'tells which attributes to check; checks all if the list is empty'
p3184
I0
I0
I00
Ntp3185
ag684
ag688
asg29
(dp3186
sbsS'TRemoveRedundantByQuality'
p3187
(i__main__
ClassDefinition
p3188
(dp3189
g4
I1
sg5
I01
sg6
g3187
sg7
S'TRemoveRedundant'
p3190
sg9
I00
sg10
(lp3191
sg12
(lp3192
(S'bool'
p3193
S'remeasure'
p3194
g3194
S'reapply the measure after removal'
p3195
I0
I0
I01
Ntp3196
a(S'float'
p3197
S'minQuality'
p3198
S'min_quality'
p3199
S'minimal acceptable quality'
p3200
I0
I0
I01
Ntp3201
a(S'int'
p3202
S'removeBut'
p3203
S'remove_but'
p3204
S'the desired number of attributes'
p3205
I0
I0
I01
Ntp3206
a(S'TMeasureAttribute'
p3207
S'measure'
p3208
g3208
S'attribute quality measure'
p3209
I0
I0
I00
Ntp3210
ag1345
asg29
(dp3211
sbsS'TGraphAsList'
p3212
(i__main__
ClassDefinition
p3213
(dp3214
g4
I1
sg5
I01
sg6
g3212
sg7
S'TGraph'
p3215
sg9
I00
sg10
(lp3216
sg12
(lp3217
g1483
ag1488
ag1492
asg29
(dp3218
sbsS'TProbabilityEstimatorConstructor_m'
p3219
(i__main__
ClassDefinition
p3220
(dp3221
g4
I1
sg5
I01
sg6
g3219
sg7
S'TProbabilityEstimatorConstructor'
p3222
sg9
I00
sg10
(lp3223
sg12
(lp3224
(S'float'
p3225
g1209
g1209
S'parameter m for m-estimation'
p3226
I0
I0
I01
Ntp3227
a(S'bool'
p3228
S'renormalize'
p3229
g3229
S'computes the estimate on the original (not the normalized) distribution'
p3230
I0
I0
I01
Ntp3231
asg29
(dp3232
sbsS'TDistanceMap'
p3233
(i__main__
ClassDefinition
p3234
(dp3235
g4
I1
sg5
I01
sg6
g3233
sg7
S'TOrange'
p3236
sg9
I00
sg10
(lp3237
sg12
(lp3238
(S'int'
p3239
S'dim'
p3240
g3240
S'bitmap dimension (in cells)'
p3241
I01
I0
I01
Ntp3242
a(S'int'
p3243
S'matrixType'
p3244
S'matrix_type'
p3245
S'0 lower, 1 upper, 2 symmetric'
p3246
I0
I0
I01
Ntp3247
a(S'TIntList'
p3248
S'elementIndices'
p3249
S'element_indices'
p3250
S'indices to elements (one for row + one at the end)'
p3251
I01
I0
I00
Ntp3252
asg29
(dp3253
sbsS'TDistanceMapConstructor'
p3254
(i__main__
ClassDefinition
p3255
(dp3256
g4
I1
sg5
I01
sg6
g3254
sg7
S'TOrange'
p3257
sg9
I00
sg10
(lp3258
sg12
(lp3259
(S'TSymMatrix'
p3260
S'distanceMatrix'
p3261
S'distance_matrix'
p3262
S'distance matrix'
p3263
I0
I0
I00
Ntp3264
a(S'TIntList'
p3265
S'order'
p3266
g3266
S'order of elements'
p3267
I0
I0
I00
Ntp3268
asg29
(dp3269
sbsS'TTransformValue'
p3270
(i__main__
ClassDefinition
p3271
(dp3272
g4
I1
sg5
I01
sg6
g3270
sg7
S'TOrange'
p3273
sg9
I01
sg10
(lp3274
sg12
(lp3275
g798
asg29
(dp3276
sbsS'TComputeDomainContingency_DomainTransformation'
p3277
(i__main__
ClassDefinition
p3278
(dp3279
g4
I1
sg5
I01
sg6
g3277
sg7
S'TComputeDomainContingency'
p3280
sg9
I00
sg10
(lp3281
sg12
(lp3282
(S'TDomainTransformerConstructor'
p3283
S'domainTransformerConstructor'
p3284
S'domain_transformer_constructor'
p3285
S'constructs a domain in which each attribute corresponds one of originals'
p3286
I0
I0
I00
Ntp3287
a(S'bool'
p3288
S'resultInOriginalDomain'
p3289
S'result_in_original_domain'
p3290
S'tells whether the resulting DomainContingency should consist of original attributes'
p3291
I0
I0
I01
Ntp3292
ag28
asg29
(dp3293
sbsS'TStopDistributionClustering_noBigChange'
p3294
(i__main__
ClassDefinition
p3295
(dp3296
g4
I1
sg5
I01
sg6
g3294
sg7
S'TStopDistributionClustering'
p3297
sg9
I00
sg10
(lp3298
sg12
(lp3299
sg29
(dp3300
sbsS'TTreePruner'
p3301
(i__main__
ClassDefinition
p3302
(dp3303
g4
I1
sg5
I01
sg6
g3301
sg7
S'TOrange'
p3304
sg9
I01
sg10
(lp3305
sg12
(lp3306
sg29
(dp3307
sbsg1750
(ipyprops
ClassDefinition
p3308
(dp3309
g4
I0
sg5
I01
sg6
g1750
sg7
g136
sg9
I0
sg10
(lp3310
sg12
(lp3311
sg29
(dp3312
sbsS'TImputer_Python'
p3313
(i__main__
ClassDefinition
p3314
(dp3315
g4
I1
sg5
I01
sg6
g3313
sg7
S'TImputer'
p3316
sg9
I00
sg10
(lp3317
sg12
(lp3318
sg29
(dp3319
sbsS'TVarList'
p3320
(ipyprops
ClassDefinition
p3321
(dp3322
g4
I0
sg5
I01
sg6
g3320
sg7
g136
sg9
I0
sg10
(lp3323
sg12
(lp3324
sg29
(dp3325
sbsS'TRuleLearner'
p3326
(i__main__
ClassDefinition
p3327
(dp3328
g4
I1
sg5
I01
sg6
g3326
sg7
S'TLearner'
p3329
sg9
I00
sg10
(lp3330
sg12
(lp3331
(S'TRuleDataStoppingCriteria'
p3332
S'dataStopping'
p3333
S'data_stopping'
p3334
g593
I0
I0
I00
Ntp3335
a(S'TRuleStoppingCriteria'
p3336
S'ruleStopping'
p3337
S'rule_stopping'
p3338
g593
I0
I0
I00
Ntp3339
a(S'TRuleCovererAndRemover'
p3340
S'coverAndRemove'
p3341
S'cover_and_remove'
p3342
g593
I0
I0
I00
Ntp3343
a(S'TRuleFinder'
p3344
S'ruleFinder'
p3345
S'rule_finder'
p3346
g593
I0
I0
I00
Ntp3347
a(S'TRuleClassifierConstructor'
p3348
S'classifierConstructor'
p3349
S'classifier_constructor'
p3350
S'classifier'
p3351
I0
I0
I00
Ntp3352
a(S'TProgressCallback'
p3353
S'progressCallback'
p3354
S'progress_callback'
p3355
S'progress callback function'
p3356
I0
I0
I00
Ntp3357
a(S'bool'
p3358
S'storeExamples'
p3359
S'store_examples'
p3360
g593
I0
I0
I01
Ntp3361
a(S'int'
p3362
S'targetClass'
p3363
S'target_class'
p3364
g593
I0
I0
I01
Ntp3365
a(S'TRuleList'
p3366
S'baseRules'
p3367
S'base_rules'
p3368
g593
I0
I0
I00
Ntp3369
ag110
asg29
(dp3370
sbsS'TOrdinal2Continuous'
p3371
(i__main__
ClassDefinition
p3372
(dp3373
g4
I1
sg5
I01
sg6
g3371
sg7
S'TTransformValue'
p3374
sg9
I00
sg10
(lp3375
sg12
(lp3376
(S'float'
p3377
S'factor'
p3378
g3378
S'number of values'
p3379
I0
I0
I01
Ntp3380
ag798
asg29
(dp3381
sbsS'TLinearLearner'
p3382
(i__main__
ClassDefinition
p3383
(dp3384
g4
I1
sg5
I01
sg6
g3382
sg7
S'TLearner'
p3385
sg9
I00
sg10
(lp3386
sg12
(lp3387
(S'int'
p3388
S'solver_type'
p3389
g3389
S' Solver type (loss function1)'
p3390
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3391
tp3392
a(S'float'
p3393
S'eps'
p3394
g3394
S'Stopping criteria'
p3395
I0
I0
I01
Ntp3396
a(S'float'
p3397
S'C'
p3398
g3398
S'Regularization parameter'
p3399
I0
I0
I01
Ntp3400
ag110
asg29
(dp3401
S'LIBLINEAR_VERSION'
p3402
(lp3403
(S'VERSION'
p3404
S'180'
p3405
tp3406
asS'Lossfunction1'
p3407
(lp3408
(S'L2R_LR'
p3409
I0
tp3410
a(S'L2R_L2Loss_SVC_Dual'
p3411
I1
tp3412
a(S'L2R_L2Loss_SVC'
p3413
I2
tp3414
a(S'L2R_L1Loss_SVC_Dual'
p3415
I3
tp3416
a(S'MCSVM_CS'
p3417
I4
tp3418
a(S'L1R_L2Loss_SVC'
p3419
I5
tp3420
a(S'L1R_LR'
p3421
I6
tp3422
a(S'L2R_LR_Dual'
p3423
I7
tp3424
asS'Lossfunction1_old_'
p3425
(lp3426
(S'L2_LR'
p3427
I0
tp3428
a(S'L2Loss_SVM_Dual'
p3429
I1
tp3430
a(S'L2Loss_SVM'
p3431
I2
tp3432
a(S'L1Loss_SVM_Dual'
p3433
I3
tp3434
assbsS'TTreeSplitConstructor_Combined'
p3435
(i__main__
ClassDefinition
p3436
(dp3437
g4
I1
sg5
I01
sg6
g3435
sg7
S'TTreeSplitConstructor'
p3438
sg9
I00
sg10
(lp3439
sg12
(lp3440
(S'TTreeSplitConstructor'
p3441
S'discreteSplitConstructor'
p3442
S'discrete_split_constructor'
p3443
S'split constructor for discrete attributes'
p3444
I0
I0
I00
Ntp3445
a(S'TTreeSplitConstructor'
p3446
S'continuousSplitConstructor'
p3447
S'continuous_split_constructor'
p3448
S'split constructor for continuous attributes'
p3449
I0
I0
I00
Ntp3450
ag776
asg29
(dp3451
sbsS'TTransformValue_Python'
p3452
(i__main__
ClassDefinition
p3453
(dp3454
g4
I1
sg5
I01
sg6
g3452
sg7
S'TTransformValue'
p3455
sg9
I00
sg10
(lp3456
sg12
(lp3457
g798
asg29
(dp3458
sbsS'TStopIMClusteringByAssessor_noProfit'
p3459
(i__main__
ClassDefinition
p3460
(dp3461
g4
I1
sg5
I01
sg6
g3459
sg7
S'TStopIMClusteringByAssessor'
p3462
sg9
I00
sg10
(lp3463
sg12
(lp3464
(S'float'
p3465
S'minProfitProportion'
p3466
S'min_profit_proportion'
p3467
S'minimal allowable profit proportion'
p3468
I0
I0
I01
Ntp3469
asg29
(dp3470
sbsS'TRuleEvaluator_Python'
p3471
(i__main__
ClassDefinition
p3472
(dp3473
g4
I1
sg5
I01
sg6
g3471
sg7
S'TRuleEvaluator'
p3474
sg9
I00
sg10
(lp3475
sg12
(lp3476
sg29
(dp3477
sbsS'TIGBySorting'
p3478
(i__main__
ClassDefinition
p3479
(dp3480
g4
I1
sg5
I01
sg6
g3478
sg7
S'TIGConstructor'
p3481
sg9
I00
sg10
(lp3482
sg12
(lp3483
sg29
(dp3484
sbsS'TConditionalProbabilityEstimator_ByRows'
p3485
(i__main__
ClassDefinition
p3486
(dp3487
g4
I1
sg5
I01
sg6
g3485
sg7
S'TConditionalProbabilityEstimator'
p3488
sg9
I00
sg10
(lp3489
sg12
(lp3490
(S'TProbabilityEstimatorList'
p3491
S'estimatorList'
p3492
S'estimator_list'
p3493
S'A list of probability estimators'
p3494
I0
I0
I00
Ntp3495
ag126
ag131
asg29
(dp3496
sbsS'TFindNearest'
p3497
(i__main__
ClassDefinition
p3498
(dp3499
g4
I1
sg5
I01
sg6
g3497
sg7
S'TOrange'
p3500
sg9
I01
sg10
(lp3501
sg12
(lp3502
g1088
ag1093
asg29
(dp3503
sbsS'TProgressCallback'
p3504
(i__main__
ClassDefinition
p3505
(dp3506
g4
I1
sg5
I01
sg6
g3504
sg7
S'TOrange'
p3507
sg9
I01
sg10
(lp3508
sg12
(lp3509
sg29
(dp3510
sbsS'THierarchicalClustering'
p3511
(i__main__
ClassDefinition
p3512
(dp3513
g4
I1
sg5
I01
sg6
g3511
sg7
S'TOrange'
p3514
sg9
I00
sg10
(lp3515
sg12
(lp3516
(S'int'
p3517
S'linkage'
p3518
g3518
S' linkage'
p3519
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3520
tp3521
a(S'bool'
p3522
S'overwriteMatrix'
p3523
S'overwrite_matrix'
p3524
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3525
I0
I0
I01
Ntp3526
a(S'TProgressCallback'
p3527
S'progressCallback'
p3528
S'progress_callback'
p3529
S'progress callback function'
p3530
I0
I0
I00
Ntp3531
asg29
(dp3532
S'Linkage'
p3533
(lp3534
(S'Single'
p3535
I0
tp3536
a(S'Average'
p3537
I1
tp3538
a(S'Complete'
p3539
I2
tp3540
a(S'Ward'
p3541
I3
tp3542
assbsS'TLogRegFitter_Cholesky'
p3543
(i__main__
ClassDefinition
p3544
(dp3545
g4
I1
sg5
I01
sg6
g3543
sg7
S'TLogRegFitter'
p3546
sg9
I00
sg10
(lp3547
sg12
(lp3548
sg29
(dp3549
sbsS'TClassifierFromVar'
p3550
(i__main__
ClassDefinition
p3551
(dp3552
g4
I1
sg5
I01
sg6
g3550
sg7
S'TClassifier'
p3553
sg9
I00
sg10
(lp3554
sg12
(lp3555
(S'TVariable'
p3556
S'whichVar'
p3557
(g3557
S'variable'
p3558
tp3559
S' variable'
p3560
I0
I0
I00
Ntp3561
a(S'TTransformValue'
p3562
S'transformer'
p3563
g3563
S'transformer'
p3564
I0
I0
I00
Ntp3565
a(S'TDistribution'
p3566
S'distributionForUnknown'
p3567
S'distribution_for_unknown'
p3568
S'distribution for unknown value'
p3569
I0
I0
I00
Ntp3570
a(S'bool'
p3571
S'transformUnknowns'
p3572
S'transform_unknowns'
p3573
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3574
I0
I0
I01
Ntp3575
ag94
ag99
asg29
(dp3576
sbsg2257
(ipyprops
ClassDefinition
p3577
(dp3578
g4
I0
sg5
I01
sg6
g2257
sg7
g136
sg9
I0
sg10
(lp3579
sg12
(lp3580
sg29
(dp3581
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p3582
(i__main__
ClassDefinition
p3583
(dp3584
g4
I1
sg5
I01
sg6
g3582
sg7
S'TTreeExampleSplitter'
p3585
sg9
I00
sg10
(lp3586
sg12
(lp3587
sg29
(dp3588
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3589
(i__main__
ClassDefinition
p3590
(dp3591
g4
I1
sg5
I01
sg6
g3589
sg7
S'TTreeSplitConstructor_Measure'
p3592
sg9
I00
sg10
(lp3593
sg12
(lp3594
g1299
ag1304
ag776
asg29
(dp3595
sbsS'TClassifier'
p3596
(i__main__
ClassDefinition
p3597
(dp3598
g4
I1
sg5
I01
sg6
g3596
sg7
S'TOrange'
p3599
sg9
I00
sg10
(lp3600
sg12
(lp3601
g94
ag99
asg29
(dp3602
sbsS'TTreeSplitConstructor_Python'
p3603
(i__main__
ClassDefinition
p3604
(dp3605
g4
I1
sg5
I01
sg6
g3603
sg7
S'TTreeSplitConstructor'
p3606
sg9
I00
sg10
(lp3607
sg12
(lp3608
g776
asg29
(dp3609
sbsS'TIG'
p3610
(i__main__
ClassDefinition
p3611
(dp3612
g4
I1
sg5
I01
sg6
g3610
sg7
S'TOrange'
p3613
sg9
I00
sg10
(lp3614
sg12
(lp3615
sg29
(dp3616
sbsS'TTreeClassifier'
p3617
(i__main__
ClassDefinition
p3618
(dp3619
g4
I1
sg5
I01
sg6
g3617
sg7
S'TClassifierFD'
p3620
sg9
I00
sg10
(lp3621
sg12
(lp3622
(S'TTreeNode'
p3623
S'tree'
p3624
g3624
S'decision tree'
p3625
I0
I0
I00
Ntp3626
a(S'TTreeDescender'
p3627
S'descender'
p3628
g3628
S'object that descends down the tree'
p3629
I0
I0
I00
Ntp3630
ag284
ag94
ag99
asg29
(dp3631
sbsS'TEarthLearner'
p3632
(i__main__
ClassDefinition
p3633
(dp3634
g4
I1
sg5
I01
sg6
g3632
sg7
S'TLearner'
p3635
sg9
I00
sg10
(lp3636
sg12
(lp3637
(S'int'
p3638
S'max_terms'
p3639
g3639
S'Maximum number of terms.'
p3640
I0
I0
I01
Ntp3641
a(S'int'
p3642
S'max_degree'
p3643
g3643
S'Maximum degree of terms.'
p3644
I0
I0
I01
Ntp3645
a(S'float'
p3646
S'penalty'
p3647
g3647
S'Penalty.'
p3648
I0
I0
I01
Ntp3649
a(S'float'
p3650
S'threshold'
p3651
g3651
S'Forward step threshold.'
p3652
I0
I0
I01
Ntp3653
a(S'bool'
p3654
S'prune'
p3655
g3655
S'Prune terms (do backward pass).'
p3656
I0
I0
I01
Ntp3657
a(S'float'
p3658
S'fast_beta'
p3659
g3659
S'Fast beta (aging coefficient).'
p3660
I0
I0
I01
Ntp3661
a(S'float'
p3662
S'trace'
p3663
g3663
S'Execution trace (for debugging only).'
p3664
I0
I0
I01
Ntp3665
a(S'int'
p3666
S'min_span'
p3667
g3667
S'Min. span (training instances) between knots.'
p3668
I0
I0
I01
Ntp3669
a(S'int'
p3670
S'fast_k'
p3671
g3671
S'Fast K.'
p3672
I0
I0
I01
Ntp3673
a(S'bool'
p3674
S'new_var_penalty'
p3675
g3675
S'Penalty for adding a new variable.'
p3676
I0
I0
I01
Ntp3677
a(S'bool'
p3678
S'use_beta_cache'
p3679
g3679
S'Use caching for betas.'
p3680
I0
I0
I01
Ntp3681
ag110
asg29
(dp3682
sbsS'TMeasureAttribute_logOddsRatio'
p3683
(i__main__
ClassDefinition
p3684
(dp3685
g4
I1
sg5
I01
sg6
g3683
sg7
S'TMeasureAttributeFromProbabilities'
p3686
sg9
I00
sg10
(lp3687
sg12
(lp3688
g907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp3689
sbsS'TTreeExampleSplitter_Python'
p3690
(i__main__
ClassDefinition
p3691
(dp3692
g4
I1
sg5
I01
sg6
g3690
sg7
S'TTreeExampleSplitter'
p3693
sg9
I00
sg10
(lp3694
sg12
(lp3695
sg29
(dp3696
sbsS'TKernelFunc_Python'
p3697
(i__main__
ClassDefinition
p3698
(dp3699
g4
I1
sg5
I01
sg6
g3697
sg7
S'TKernelFunc'
p3700
sg9
I00
sg10
(lp3701
sg12
(lp3702
sg29
(dp3703
sbsS'TAdapterGenerator'
p3704
(i__main__
ClassDefinition
p3705
(dp3706
g4
I1
sg5
I01
sg6
g3704
sg7
S'TExampleGenerator'
p3707
sg9
I00
sg10
(lp3708
sg12
(lp3709
g299
ag303
asg29
(dp3710
sbsS'TIMFromExamples'
p3711
(i__main__
ClassDefinition
p3712
(dp3713
g4
I1
sg5
I01
sg6
g3711
sg7
S'TOrange'
p3714
sg9
I01
sg10
(lp3715
sg12
(lp3716
sg29
(dp3717
sbsS'TFilter_random'
p3718
(i__main__
ClassDefinition
p3719
(dp3720
g4
I1
sg5
I01
sg6
g3718
sg7
S'TFilter'
p3721
sg9
I00
sg10
(lp3722
sg12
(lp3723
(S'float'
p3724
S'prob'
p3725
g3725
S'probability of selecting an example'
p3726
I0
I0
I01
Ntp3727
a(S'TRandomGenerator'
p3728
S'randomGenerator'
p3729
S'random_generator'
p3730
S'random generator'
p3731
I0
I0
I00
Ntp3732
ag684
ag688
asg29
(dp3733
sbsS'TC45ExampleGenerator'
p3734
(i__main__
ClassDefinition
p3735
(dp3736
g4
I1
sg5
I01
sg6
g3734
sg7
S'TFileExampleGenerator'
p3737
sg9
I00
sg10
(lp3738
sg12
(lp3739
(S'TBoolList'
p3740
S'skip'
p3741
g3741
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3742
I0
I0
I00
Ntp3743
ag1575
ag1580
ag1585
ag299
ag303
asg29
(dp3744
sbsS'TProbabilityEstimatorConstructor_loess'
p3745
(i__main__
ClassDefinition
p3746
(dp3747
g4
I1
sg5
I01
sg6
g3745
sg7
S'TProbabilityEstimatorConstructor'
p3748
sg9
I00
sg10
(lp3749
sg12
(lp3750
(S'float'
p3751
S'windowProportion'
p3752
S'window_proportion'
p3753
S'The proportion of points in a window for LR'
p3754
I0
I0
I01
Ntp3755
a(S'int'
p3756
S'nPoints'
p3757
S'n_points'
p3758
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3759
I0
I0
I01
Ntp3760
a(S'int'
p3761
S'distributionMethod'
p3762
S'distribution_method'
p3763
S" Meaning of the 'nPoints'"
p3764
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3765
tp3766
asg29
(dp3767
S'DistributionMethod'
p3768
(lp3769
(S'Minimal'
p3770
S'DISTRIBUTE_MINIMAL'
p3771
tp3772
a(S'Factor'
p3773
S'DISTRIBUTE_FACTOR'
p3774
tp3775
a(S'Fixed'
p3776
S'DISTRIBUTE_FIXED'
p3777
tp3778
a(S'Uniform'
p3779
S'DISTRIBUTE_UNIFORM'
p3780
tp3781
a(S'Maximal'
p3782
S'DISTRIBUTE_MAXIMAL'
p3783
tp3784
assbsS'TExamplesDistance_Lp'
p3785
(i__main__
ClassDefinition
p3786
(dp3787
g4
I1
sg5
I01
sg6
g3785
sg7
S'TExamplesDistance_Normalized'
p3788
sg9
I00
sg10
(lp3789
sg12
(lp3790
(S'float'
p3791
g2201
g2201
g2201
I01
I0
I01
Ntp3792
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp3793
sbsS'TLogRegFitter'
p3794
(i__main__
ClassDefinition
p3795
(dp3796
g4
I1
sg5
I01
sg6
g3794
sg7
S'TOrange'
p3797
sg9
I01
sg10
(lp3798
sg12
(lp3799
sg29
(dp3800
S'ErrorCode'
p3801
(lp3802
(S'OK'
p3803
I0
tp3804
a(S'Infinity'
p3805
I1
tp3806
a(S'Divergence'
p3807
I2
tp3808
a(S'Constant'
p3809
I3
tp3810
a(S'Singularity'
p3811
I4
tp3812
assbsS'TMakeRandomIndicesCV'
p3813
(i__main__
ClassDefinition
p3814
(dp3815
g4
I1
sg5
I01
sg6
g3813
sg7
S'TMakeRandomIndices'
p3816
sg9
I00
sg10
(lp3817
sg12
(lp3818
(S'int'
p3819
S'folds'
p3820
g3820
S'number of folds'
p3821
I0
I0
I01
Ntp3822
ag707
ag711
ag716
asg29
(dp3823
sbsS'TClassifierList'
p3824
(ipyprops
ClassDefinition
p3825
(dp3826
g4
I0
sg5
I01
sg6
g3824
sg7
g136
sg9
I0
sg10
(lp3827
sg12
(lp3828
sg29
(dp3829
sbsS'TPreprocessor_removeDuplicates'
p3830
(i__main__
ClassDefinition
p3831
(dp3832
g4
I1
sg5
I01
sg6
g3830
sg7
S'TPreprocessor'
p3833
sg9
I00
sg10
(lp3834
sg12
(lp3835
sg29
(dp3836
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3837
(i__main__
ClassDefinition
p3838
(dp3839
g4
I1
sg5
I01
sg6
g3837
sg7
S'TTreeExampleSplitter'
p3840
sg9
I00
sg10
(lp3841
sg12
(lp3842
sg29
(dp3843
sbsS'TExamplesDistanceConstructor_Normalized'
p3844
(i__main__
ClassDefinition
p3845
(dp3846
g4
I1
sg5
I01
sg6
g3844
sg7
S'TExamplesDistanceConstructor'
p3847
sg9
I01
sg10
(lp3848
sg12
(lp3849
g2035
ag2040
ag1367
asg29
(dp3850
sbsS'TCostWrapperLearner'
p3851
(i__main__
ClassDefinition
p3852
(dp3853
g4
I1
sg5
I01
sg6
g3851
sg7
S'TLearner'
p3854
sg9
I00
sg10
(lp3855
sg12
(lp3856
(S'TLearner'
p3857
S'basicLearner'
p3858
S'basic_learner'
p3859
S'basic learner'
p3860
I0
I0
I00
Ntp3861
a(S'TCostMatrix'
p3862
S'costMatrix'
p3863
S'cost_matrix'
p3864
S'cost matrix'
p3865
I0
I0
I00
Ntp3866
ag110
asg29
(dp3867
sbsS'TRandomLearner'
p3868
(i__main__
ClassDefinition
p3869
(dp3870
g4
I1
sg5
I01
sg6
g3868
sg7
S'TLearner'
p3871
sg9
I00
sg10
(lp3872
sg12
(lp3873
(S'TDistribution'
p3874
S'probabilities'
p3875
g3875
S'probabilities of predictions'
p3876
I0
I0
I00
Ntp3877
ag110
asg29
(dp3878
sbsS'TImputer_asValue'
p3879
(i__main__
ClassDefinition
p3880
(dp3881
g4
I1
sg5
I01
sg6
g3879
sg7
S'TImputer'
p3882
sg9
I00
sg10
(lp3883
sg12
(lp3884
(S'TDomain'
p3885
S'domain'
p3886
g3886
S'domain to which the values are converted'
p3887
I0
I0
I00
Ntp3888
a(S'TExample'
p3889
S'defaults'
p3890
g3890
S'values to impute instead of missing ones - for continuous attributes only!'
p3891
I0
I0
I00
Ntp3892
asg29
(dp3893
sbsS'TPearsonCorrelation'
p3894
(i__main__
ClassDefinition
p3895
(dp3896
g4
I1
sg5
I01
sg6
g3894
sg7
S'TOrange'
p3897
sg9
I00
sg10
(lp3898
sg12
(lp3899
(S'float'
p3900
S'r'
p3901
g3901
S'correlation coefficient'
p3902
I0
I0
I01
Ntp3903
a(S'float'
p3904
g2230
g2230
S't-statics significance'
p3905
I0
I0
I01
Ntp3906
a(S'int'
p3907
S'df'
p3908
g3908
S'degrees of freedom'
p3909
I0
I0
I01
Ntp3910
a(S'float'
p3911
g2201
g2201
S'significance'
p3912
I0
I0
I01
Ntp3913
asg29
(dp3914
sbsS'TDistributionAssessor_Laplace'
p3915
(i__main__
ClassDefinition
p3916
(dp3917
g4
I1
sg5
I01
sg6
g3915
sg7
S'TDistributionAssessor'
p3918
sg9
I00
sg10
(lp3919
sg12
(lp3920
sg29
(dp3921
sbsS'TColumnAssessor_Relief'
p3922
(i__main__
ClassDefinition
p3923
(dp3924
g4
I1
sg5
I01
sg6
g3922
sg7
S'TColumnAssessor'
p3925
sg9
I00
sg10
(lp3926
sg12
(lp3927
sg29
(dp3928
sbsS'TClassifierByLookupTable'
p3929
(i__main__
ClassDefinition
p3930
(dp3931
g4
I1
sg5
I01
sg6
g3929
sg7
S'TClassifier'
p3932
sg9
I01
sg10
(lp3933
sg12
(lp3934
g85
ag89
ag94
ag99
asg29
(dp3935
sbsS'TRuleBeamFinder'
p3936
(i__main__
ClassDefinition
p3937
(dp3938
g4
I1
sg5
I01
sg6
g3936
sg7
S'TRuleFinder'
p3939
sg9
I00
sg10
(lp3940
sg12
(lp3941
(S'TRuleBeamInitializer'
p3942
S'initializer'
p3943
g3943
g593
I0
I0
I00
Ntp3944
a(S'TRuleBeamRefiner'
p3945
S'refiner'
p3946
g3946
g593
I0
I0
I00
Ntp3947
a(S'TRuleBeamCandidateSelector'
p3948
S'candidateSelector'
p3949
S'candidate_selector'
p3950
g593
I0
I0
I00
Ntp3951
a(S'TRuleBeamFilter'
p3952
S'ruleFilter'
p3953
S'rule_filter'
p3954
g593
I0
I0
I00
Ntp3955
a(S'TRuleValidator'
p3956
S'ruleStoppingValidator'
p3957
S'rule_stopping_validator'
p3958
g593
I0
I0
I00
Ntp3959
a(S'TRuleValidator'
p3960
S'validator'
p3961
g3961
g593
I0
I0
I00
Ntp3962
a(S'TRuleEvaluator'
p3963
S'evaluator'
p3964
g3964
g593
I0
I0
I00
Ntp3965
asg29
(dp3966
sbsS'TFilter'
p3967
(i__main__
ClassDefinition
p3968
(dp3969
g4
I1
sg5
I01
sg6
g3967
sg7
S'TOrange'
p3970
sg9
I01
sg10
(lp3971
sg12
(lp3972
g684
ag688
asg29
(dp3973
sbsS'TC45Classifier'
p3974
(i__main__
ClassDefinition
p3975
(dp3976
g4
I1
sg5
I01
sg6
g3974
sg7
S'TClassifierFD'
p3977
sg9
I00
sg10
(lp3978
sg12
(lp3979
(S'TC45TreeNode'
p3980
S'tree'
p3981
g3981
S'tree'
p3982
I0
I0
I00
Ntp3983
ag284
ag94
ag99
asg29
(dp3984
sbsS'TGeneralExampleClustering'
p3985
(i__main__
ClassDefinition
p3986
(dp3987
g4
I1
sg5
I01
sg6
g3985
sg7
S'TOrange'
p3988
sg9
I01
sg10
(lp3989
sg12
(lp3990
sg29
(dp3991
sbsS'TMeasureAttribute_cost'
p3992
(i__main__
ClassDefinition
p3993
(dp3994
g4
I1
sg5
I01
sg6
g3992
sg7
S'TMeasureAttributeFromProbabilities'
p3995
sg9
I00
sg10
(lp3996
sg12
(lp3997
(S'TCostMatrix'
p3998
S'cost'
p3999
g3999
S'cost matrix'
p4000
I0
I0
I00
Ntp4001
ag907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp4002
sbsS'TImputerConstructor_minimal'
p4003
(i__main__
ClassDefinition
p4004
(dp4005
g4
I1
sg5
I01
sg6
g4003
sg7
S'TImputerConstructor'
p4006
sg9
I00
sg10
(lp4007
sg12
(lp4008
g157
asg29
(dp4009
sbsS'TClustersFromIM'
p4010
(i__main__
ClassDefinition
p4011
(dp4012
g4
I1
sg5
I01
sg6
g4010
sg7
S'TOrange'
p4013
sg9
I01
sg10
(lp4014
sg12
(lp4015
sg29
(dp4016
sbsS'TFilter_values'
p4017
(i__main__
ClassDefinition
p4018
(dp4019
g4
I1
sg5
I01
sg6
g4017
sg7
S'TFilter'
p4020
sg9
I00
sg10
(lp4021
sg12
(lp4022
(S'TValueFilterList'
p4023
S'conditions'
p4024
g4024
S'a list of filters'
p4025
I0
I0
I00
Ntp4026
a(S'bool'
p4027
S'conjunction'
p4028
g4028
S'if true, filter computes conjunction, otherwise disjunction'
p4029
I0
I0
I01
Ntp4030
ag684
ag688
asg29
(dp4031
S'Operator'
p4032
(lp4033
(S'None'
p4034
I0
tp4035
a(S'Equal'
p4036
I1
tp4037
a(S'NotEqual'
p4038
I2
tp4039
a(S'Less'
p4040
I3
tp4041
a(S'LessEqual'
p4042
I4
tp4043
a(S'Greater'
p4044
I5
tp4045
a(S'GreaterEqual'
p4046
I6
tp4047
a(S'Between'
p4048
I7
tp4049
a(S'Outside'
p4050
I8
tp4051
a(S'Contains'
p4052
I9
tp4053
a(S'NotContains'
p4054
I10
tp4055
a(S'BeginsWith'
p4056
I11
tp4057
a(S'EndsWith'
p4058
I12
tp4059
a(S'Listed'
p4060
I13
tp4061
assbsS'TRuleClassifier'
p4062
(i__main__
ClassDefinition
p4063
(dp4064
g4
I1
sg5
I01
sg6
g4062
sg7
S'TClassifier'
p4065
sg9
I01
sg10
(lp4066
sg12
(lp4067
g594
ag597
ag601
ag94
ag99
asg29
(dp4068
sbsS'TAssociationRules'
p4069
(ipyprops
ClassDefinition
p4070
(dp4071
g4
I0
sg5
I01
sg6
g4069
sg7
g136
sg9
I0
sg10
(lp4072
sg12
(lp4073
sg29
(dp4074
sbsS'TMajorityLearner'
p4075
(i__main__
ClassDefinition
p4076
(dp4077
g4
I1
sg5
I01
sg6
g4075
sg7
S'TLearner'
p4078
sg9
I00
sg10
(lp4079
sg12
(lp4080
(S'TProbabilityEstimatorConstructor'
p4081
S'estimatorConstructor'
p4082
S'estimator_constructor'
p4083
S'constructs probability estimator'
p4084
I0
I0
I00
Ntp4085
a(S'TDistribution'
p4086
S'aprioriDistribution'
p4087
S'apriori_distribution'
p4088
S'apriori class distribution'
p4089
I0
I0
I00
Ntp4090
ag110
asg29
(dp4091
sbsS'TSVMLearner'
p4092
(i__main__
ClassDefinition
p4093
(dp4094
g4
I1
sg5
I01
sg6
g4092
sg7
S'TLearner'
p4095
sg9
I00
sg10
(lp4096
sg12
(lp4097
(S'int'
p4098
S'svm_type'
p4099
g4099
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4100
I0
I0
I01
S'SVMLearner_SVMType'
p4101
tp4102
a(S'int'
p4103
S'kernel_type'
p4104
g4104
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4105
I0
I0
I01
S'SVMLearner_Kernel'
p4106
tp4107
a(S'float'
p4108
S'degree'
p4109
g4109
S'polynomial kernel degree'
p4110
I0
I0
I01
Ntp4111
a(S'float'
p4112
S'gamma'
p4113
g4113
S'poly/rbf/sigm parameter'
p4114
I0
I0
I01
Ntp4115
a(S'float'
p4116
S'coef0'
p4117
g4117
S'poly/sigm parameter'
p4118
I0
I0
I01
Ntp4119
a(S'float'
p4120
S'cache_size'
p4121
g4121
S'cache size in MB'
p4122
I0
I0
I01
Ntp4123
a(S'float'
p4124
S'eps'
p4125
g4125
S'stopping criteria'
p4126
I0
I0
I01
Ntp4127
a(S'float'
p4128
g3398
g3398
S'for C_SVC and C_SVR'
p4129
I0
I0
I01
Ntp4130
a(S'float'
p4131
S'nu'
p4132
g4132
S'for NU_SVC and ONE_CLASS'
p4133
I0
I0
I01
Ntp4134
a(S'float'
p4135
g2201
g2201
S'for C_SVR'
p4136
I0
I0
I01
Ntp4137
a(S'int'
p4138
S'shrinking'
p4139
g4139
S'shrinking'
p4140
I0
I0
I01
Ntp4141
a(S'int'
p4142
S'probability'
p4143
g4143
S'probability'
p4144
I0
I0
I01
Ntp4145
a(S'bool'
p4146
S'verbose'
p4147
g4147
S'verbose'
p4148
I0
I0
I01
Ntp4149
a(S'TKernelFunc'
p4150
S'kernelFunc'
p4151
S'kernel_func'
p4152
S'custom kernel function'
p4153
I0
I0
I00
Ntp4154
ag110
asg29
(dp4155
S'Kernel'
p4156
(lp4157
(S'Linear'
p4158
S'LINEAR'
p4159
tp4160
a(S'Polynomial'
p4161
S'POLY'
p4162
tp4163
a(S'RBF'
p4164
S'RBF'
p4165
tp4166
a(S'Sigmoid'
p4167
S'SIGMOID'
p4168
tp4169
a(S'Custom'
p4170
S'PRECOMPUTED'
p4171
tp4172
asS'LIBSVM_VERSION'
p4173
(lp4174
(S'VERSION'
p4175
S'LIBSVM_VERSION'
p4176
tp4177
asS'SVMType'
p4178
(lp4179
(S'C_SVC'
p4180
S'C_SVC'
p4181
tp4182
a(S'Nu_SVC'
p4183
S'NU_SVC'
p4184
tp4185
a(S'OneClass'
p4186
S'ONE_CLASS'
p4187
tp4188
a(S'Epsilon_SVR'
p4189
S'EPSILON_SVR'
p4190
tp4191
a(S'Nu_SVR'
p4192
S'NU_SVR'
p4193
tp4194
assbsS'TPNN'
p4195
(i__main__
ClassDefinition
p4196
(dp4197
g4
I1
sg5
I01
sg6
g4195
sg7
S'TClassifierFD'
p4198
sg9
I00
sg10
(lp4199
sg12
(lp4200
g738
ag742
ag746
ag750
ag755
ag760
ag764
ag284
ag94
ag99
asg29
(dp4201
sbsS'TImputerConstructor_defaults'
p4202
(i__main__
ClassDefinition
p4203
(dp4204
g4
I1
sg5
I01
sg6
g4202
sg7
S'TImputerConstructor'
p4205
sg9
I00
sg10
(lp4206
sg12
(lp4207
(S'TExample'
p4208
S'defaults'
p4209
g4209
S'default values to be imputed instead missing ones'
p4210
I0
I0
I00
Ntp4211
ag157
asg29
(dp4212
sbsS'TConditionalProbabilityEstimatorConstructor'
p4213
(i__main__
ClassDefinition
p4214
(dp4215
g4
I1
sg5
I01
sg6
g4213
sg7
S'TOrange'
p4216
sg9
I01
sg10
(lp4217
sg12
(lp4218
sg29
(dp4219
sbsS'TPreprocessor_takeMissingClasses'
p4220
(i__main__
ClassDefinition
p4221
(dp4222
g4
I1
sg5
I01
sg6
g4220
sg7
S'TPreprocessor'
p4223
sg9
I00
sg10
(lp4224
sg12
(lp4225
sg29
(dp4226
sbsS'TClustersFromIMByAssessor'
p4227
(i__main__
ClassDefinition
p4228
(dp4229
g4
I1
sg5
I01
sg6
g4227
sg7
S'TClustersFromIM'
p4230
sg9
I00
sg10
(lp4231
sg12
(lp4232
(S'TColumnAssessor'
p4233
S'columnAssessor'
p4234
S'column_assessor'
p4235
S'column quality assessor'
p4236
I0
I0
I00
Ntp4237
a(S'TStopIMClusteringByAssessor'
p4238
S'stopCriterion'
p4239
S'stop_criterion'
p4240
S'stop criterion'
p4241
I0
I0
I00
Ntp4242
asg29
(dp4243
sbsS'TRuleValidator_LRS'
p4244
(i__main__
ClassDefinition
p4245
(dp4246
g4
I1
sg5
I01
sg6
g4244
sg7
S'TRuleValidator'
p4247
sg9
I00
sg10
(lp4248
sg12
(lp4249
(S'float'
p4250
S'alpha'
p4251
g4251
g593
I0
I0
I01
Ntp4252
a(S'float'
p4253
S'min_coverage'
p4254
g4254
g593
I0
I0
I01
Ntp4255
a(S'int'
p4256
S'max_rule_complexity'
p4257
g4257
g593
I0
I0
I01
Ntp4258
a(S'float'
p4259
S'min_quality'
p4260
g4260
g593
I0
I0
I01
Ntp4261
asg29
(dp4262
sbsS'TLogRegFitter_Python'
p4263
(i__main__
ClassDefinition
p4264
(dp4265
g4
I1
sg5
I01
sg6
g4263
sg7
S'TLogRegFitter'
p4266
sg9
I00
sg10
(lp4267
sg12
(lp4268
sg29
(dp4269
sbsS'TMakeRandomIndices2'
p4270
(i__main__
ClassDefinition
p4271
(dp4272
g4
I1
sg5
I01
sg6
g4270
sg7
S'TMakeRandomIndices'
p4273
sg9
I00
sg10
(lp4274
sg12
(lp4275
(S'float'
p4276
S'p0'
p4277
g4277
S"a proportion or a number of 0's"
p4278
I0
I0
I01
Ntp4279
ag707
ag711
ag716
asg29
(dp4280
sbsS'TValueList'
p4281
(ipyprops
ClassDefinition
p4282
(dp4283
g4
I0
sg5
I01
sg6
S'TValueList'
p4284
sg7
g136
sg9
I0
sg10
(lp4285
sg12
(lp4286
sg29
(dp4287
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4288
(i__main__
ClassDefinition
p4289
(dp4290
g4
I1
sg5
I01
sg6
g4288
sg7
S'TTreeExampleSplitter'
p4291
sg9
I00
sg10
(lp4292
sg12
(lp4293
sg29
(dp4294
sbsS'TContDistribution'
p4295
(i__main__
ClassDefinition
p4296
(dp4297
g4
I1
sg5
I01
sg6
g4295
sg7
S'TDistribution'
p4298
sg9
I00
sg10
(lp4299
sg12
(lp4300
(S'TFloatList'
p4301
S'variances'
p4302
g4302
S'variances'
p4303
I0
I0
I00
Ntp4304
a(S'float'
p4305
S'sum'
p4306
g4306
S'weighted sum of elements (i.e. N*average)'
p4307
I01
I0
I01
Ntp4308
a(S'float'
p4309
S'sum2'
p4310
g4310
S'weighted sum of squares of elements'
p4311
I01
I0
I01
Ntp4312
ag1129
ag1133
ag1137
ag1141
ag1145
ag1150
ag1155
ag1160
asg29
(dp4313
sbsS'TContingencyAttrClass'
p4314
(i__main__
ClassDefinition
p4315
(dp4316
g4
I1
sg5
I01
sg6
g4314
sg7
S'TContingencyClass'
p4317
sg9
I00
sg10
(lp4318
sg12
(lp4319
g1604
ag1609
ag1615
ag1620
ag1625
ag1630
asg29
(dp4320
sbsS'TDomainTransformerConstructor'
p4321
(i__main__
ClassDefinition
p4322
(dp4323
g4
I1
sg5
I01
sg6
g4321
sg7
S'TOrange'
p4324
sg9
I01
sg10
(lp4325
sg12
(lp4326
(S'bool'
p4327
S'preservesOrder'
p4328
S'preserves_order'
p4329
S'a flag telling that original attributes have corresponding attribute in the same order'
p4330
I01
I0
I01
Ntp4331
a(S'bool'
p4332
S'preservesAttributes'
p4333
S'preserves_attributes'
p4334
S'a flag telling whether each original has a corresponding new attribute'
p4335
I01
I0
I01
Ntp4336
asg29
(dp4337
sbsS'TPythonValueSpecial'
p4338
(i__main__
ClassDefinition
p4339
(dp4340
g4
I1
sg5
I01
sg6
g4338
sg7
S'TOrange'
p4341
sg9
I00
sg10
(lp4342
sg12
(lp4343
(S'int'
p4344
S'valueType'
p4345
S'value_type'
p4346
S'value type'
p4347
I0
I0
I01
Ntp4348
asg29
(dp4349
sbsS'TIGConstructor'
p4350
(i__main__
ClassDefinition
p4351
(dp4352
g4
I1
sg5
I01
sg6
g4350
sg7
S'TOrange'
p4353
sg9
I01
sg10
(lp4354
sg12
(lp4355
sg29
(dp4356
sbsS'TProbabilityEstimatorConstructor'
p4357
(i__main__
ClassDefinition
p4358
(dp4359
g4
I1
sg5
I01
sg6
g4357
sg7
S'TOrange'
p4360
sg9
I01
sg10
(lp4361
sg12
(lp4362
sg29
(dp4363
sbsS'TTreeNodeList'
p4364
(ipyprops
ClassDefinition
p4365
(dp4366
g4
I0
sg5
I01
sg6
g4364
sg7
g136
sg9
I0
sg10
(lp4367
sg12
(lp4368
sg29
(dp4369
sbsS'TFloatVariable'
p4370
(i__main__
ClassDefinition
p4371
(dp4372
g4
I1
sg5
I01
sg6
g4370
sg7
S'TVariable'
p4373
sg9
I00
sg10
(lp4374
sg12
(lp4375
(S'float'
p4376
S'startValue'
p4377
S'start_value'
p4378
S'lowest value'
p4379
I0
I0
I01
Ntp4380
a(S'float'
p4381
S'endValue'
p4382
S'end_value'
p4383
S'highest value'
p4384
I0
I0
I01
Ntp4385
a(S'float'
p4386
S'stepValue'
p4387
S'step_value'
p4388
S'step'
p4389
I0
I0
I01
Ntp4390
a(S'int'
p4391
S'numberOfDecimals'
p4392
S'number_of_decimals'
p4393
S'number of digits after decimal point'
p4394
I0
I0
I01
Ntp4395
a(S'bool'
p4396
S'scientificFormat'
p4397
S'scientific_format'
p4398
S'use scientific format in output'
p4399
I0
I0
I01
Ntp4400
a(S'int'
p4401
S'adjustDecimals'
p4402
S'adjust_decimals'
p4403
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4404
I0
I0
I01
Ntp4405
ag326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp4406
sbsS'TImputer_random'
p4407
(i__main__
ClassDefinition
p4408
(dp4409
g4
I1
sg5
I01
sg6
g4407
sg7
S'TImputer'
p4410
sg9
I00
sg10
(lp4411
sg12
(lp4412
(S'bool'
p4413
S'imputeClass'
p4414
S'impute_class'
p4415
S'Tells whether to impute the class values, too (default: true)'
p4416
I0
I0
I01
Ntp4417
a(S'bool'
p4418
S'deterministic'
p4419
g4419
S"tells whether to initialize random by example's CRC (default: false)"
p4420
I0
I0
I01
Ntp4421
a(S'TDistributionList'
p4422
S'distributions'
p4423
g4423
S'probability functions'
p4424
I0
I0
I00
Ntp4425
asg29
(dp4426
sbsS'TFilter_hasMeta'
p4427
(i__main__
ClassDefinition
p4428
(dp4429
g4
I1
sg5
I01
sg6
g4427
sg7
S'TFilter'
p4430
sg9
I00
sg10
(lp4431
sg12
(lp4432
(S'int'
p4433
S'id'
p4434
g4434
S'meta attribute id'
p4435
I0
I0
I01
Ntp4436
ag684
ag688
asg29
(dp4437
sbsS'TProbabilityEstimatorConstructor_kernel'
p4438
(i__main__
ClassDefinition
p4439
(dp4440
g4
I1
sg5
I01
sg6
g4438
sg7
S'TProbabilityEstimatorConstructor'
p4441
sg9
I00
sg10
(lp4442
sg12
(lp4443
(S'float'
p4444
S'minImpact'
p4445
S'min_impact'
p4446
S'Minimal impact the point must have to be counted'
p4447
I0
I0
I01
Ntp4448
a(S'float'
p4449
S'smoothing'
p4450
g4450
S'Smoothing factor'
p4451
I0
I0
I01
Ntp4452
a(S'int'
p4453
S'nPoints'
p4454
S'n_points'
p4455
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4456
I0
I0
I01
Ntp4457
asg29
(dp4458
sbsS'TRuleCovererAndRemover_Default'
p4459
(i__main__
ClassDefinition
p4460
(dp4461
g4
I1
sg5
I01
sg6
g4459
sg7
S'TRuleCovererAndRemover'
p4462
sg9
I00
sg10
(lp4463
sg12
(lp4464
sg29
(dp4465
sbsS'TMakeRandomIndices'
p4466
(i__main__
ClassDefinition
p4467
(dp4468
g4
I1
sg5
I01
sg6
g4466
sg7
S'TOrange'
p4469
sg9
I00
sg10
(lp4470
sg12
(lp4471
g707
ag711
ag716
asg29
(dp4472
S'Stratification'
p4473
(lp4474
(S'StratifiedIfPossible'
p4475
S'-1'
p4476
tp4477
a(S'NotStratified'
p4478
I0
tp4479
a(S'Stratified'
p4480
I1
tp4481
assbsS'TFilter_Python'
p4482
(i__main__
ClassDefinition
p4483
(dp4484
g4
I1
sg5
I01
sg6
g4482
sg7
S'TFilter'
p4485
sg9
I00
sg10
(lp4486
sg12
(lp4487
g684
ag688
asg29
(dp4488
sbsS'TRuleBeamInitializer_Default'
p4489
(i__main__
ClassDefinition
p4490
(dp4491
g4
I1
sg5
I01
sg6
g4489
sg7
S'TRuleBeamInitializer'
p4492
sg9
I00
sg10
(lp4493
sg12
(lp4494
sg29
(dp4495
sbsS'TExamplesDistanceConstructor_Python'
p4496
(i__main__
ClassDefinition
p4497
(dp4498
g4
I1
sg5
I01
sg6
g4496
sg7
S'TExamplesDistanceConstructor'
p4499
sg9
I00
sg10
(lp4500
sg12
(lp4501
g1367
asg29
(dp4502
sbsS'TTreeDescender_Python'
p4503
(i__main__
ClassDefinition
p4504
(dp4505
g4
I1
sg5
I01
sg6
g4503
sg7
S'TTreeDescender'
p4506
sg9
I00
sg10
(lp4507
sg12
(lp4508
sg29
(dp4509
sbsS'THeatmap'
p4510
(i__main__
ClassDefinition
p4511
(dp4512
g4
I1
sg5
I0
sg6
g4510
sg7
S'TOrange'
p4513
sg9
I00
sg10
(lp4514
sg12
(lp4515
(S'int'
p4516
S'height'
p4517
g4517
S'bitmap height (in cells)'
p4518
I0
I0
I01
Ntp4519
a(S'int'
p4520
S'width'
p4521
g4521
S'bitmap width (in cells)'
p4522
I0
I0
I01
Ntp4523
a(S'TExampleTable'
p4524
S'examples'
p4525
g4525
S'examples from the whole bitmap'
p4526
I01
I0
I00
Ntp4527
a(S'TIntList'
p4528
S'exampleIndices'
p4529
S'example_indices'
p4530
S"indices to 'examples' (one for row + one at the end)"
p4531
I01
I0
I00
Ntp4532
asg29
(dp4533
sbsS'TSubsetsGenerator_constant'
p4534
(i__main__
ClassDefinition
p4535
(dp4536
g4
I1
sg5
I01
sg6
g4534
sg7
S'TSubsetsGenerator'
p4537
sg9
I00
sg10
(lp4538
sg12
(lp4539
(S'TVarList'
p4540
S'constant'
p4541
g4541
S'a subset that is returned (once!)'
p4542
I0
I0
I00
Ntp4543
ag200
asg29
(dp4544
sbsS'TGaussianNoiseGenerator'
p4545
(i__main__
ClassDefinition
p4546
(dp4547
g4
I1
sg5
I01
sg6
g4545
sg7
S'TChangeExampleGenerator'
p4548
sg9
I00
sg10
(lp4549
sg12
(lp4550
(S'TIntFloatList'
p4551
S'deviations'
p4552
g4552
S"deviations for attributes' values"
p4553
I0
I0
I00
Ntp4554
a(S'TRandomGenerator'
p4555
S'randomGenerator'
p4556
S'random_generator'
p4557
S'random generator'
p4558
I0
I0
I00
Ntp4559
ag299
ag303
asg29
(dp4560
sbsS'TClustersFromDistributionsByAssessor'
p4561
(i__main__
ClassDefinition
p4562
(dp4563
g4
I1
sg5
I01
sg6
g4561
sg7
S'TClustersFromDistributions'
p4564
sg9
I00
sg10
(lp4565
sg12
(lp4566
(S'TDistributionAssessor'
p4567
S'distributionAssessor'
p4568
S'distribution_assessor'
p4569
S'column quality assessor'
p4570
I0
I0
I00
Ntp4571
a(S'TStopDistributionClustering'
p4572
S'stopCriterion'
p4573
S'stop_criterion'
p4574
S'stop criterion'
p4575
I0
I0
I00
Ntp4576
a(S'float'
p4577
S'minProfitProportion'
p4578
S'min_profit_proportion'
p4579
S'minimal merge profit'
p4580
I0
I0
I01
Ntp4581
asg29
(dp4582
sbsS'TExamplesDistance_Hamming'
p4583
(i__main__
ClassDefinition
p4584
(dp4585
g4
I1
sg5
I01
sg6
g4583
sg7
S'TExamplesDistance'
p4586
sg9
I00
sg10
(lp4587
sg12
(lp4588
(S'bool'
p4589
S'ignoreClass'
p4590
S'ignore_class'
p4591
S'if true (default), class value is ignored when computing distances'
p4592
I0
I0
I01
Ntp4593
a(S'bool'
p4594
S'ignoreUnknowns'
p4595
S'ignore_unknowns'
p4596
S'if true (default: false) unknown values are ignored in computation'
p4597
I0
I0
I01
Ntp4598
asg29
(dp4599
sbsS'TDefaultClassifier'
p4600
(i__main__
ClassDefinition
p4601
(dp4602
g4
I1
sg5
I01
sg6
g4600
sg7
S'TClassifier'
p4603
sg9
I00
sg10
(lp4604
sg12
(lp4605
(S'TValue'
p4606
S'defaultVal'
p4607
S'default_val'
p4608
S'default prediction'
p4609
I0
I0
I01
Ntp4610
a(S'TDistribution'
p4611
S'defaultDistribution'
p4612
S'default_distribution'
p4613
S'default distribution'
p4614
I0
I0
I00
Ntp4615
ag94
ag99
asg29
(dp4616
sbsS'TColumnAssessor_Kramer'
p4617
(i__main__
ClassDefinition
p4618
(dp4619
g4
I1
sg5
I01
sg6
g4617
sg7
S'TColumnAssessor'
p4620
sg9
I00
sg10
(lp4621
sg12
(lp4622
sg29
(dp4623
sbsS'TEVDistGetter_Python'
p4624
(i__main__
ClassDefinition
p4625
(dp4626
g4
I1
sg5
I01
sg6
g4624
sg7
S'TEVDistGetter'
p4627
sg9
I00
sg10
(lp4628
sg12
(lp4629
sg29
(dp4630
sbsS'TDiscretization'
p4631
(i__main__
ClassDefinition
p4632
(dp4633
g4
I1
sg5
I01
sg6
g4631
sg7
S'TOrange'
p4634
sg9
I01
sg10
(lp4635
sg12
(lp4636
sg29
(dp4637
sbsS'TTreeSplitConstructor_Measure'
p4638
(i__main__
ClassDefinition
p4639
(dp4640
g4
I1
sg5
I01
sg6
g4638
sg7
S'TTreeSplitConstructor'
p4641
sg9
I01
sg10
(lp4642
sg12
(lp4643
g1299
ag1304
ag776
asg29
(dp4644
sbsS'TTreeNode'
p4645
(i__main__
ClassDefinition
p4646
(dp4647
g4
I1
sg5
I01
sg6
g4645
sg7
S'TOrange'
p4648
sg9
I00
sg10
(lp4649
sg12
(lp4650
(S'TClassifier'
p4651
S'nodeClassifier'
p4652
S'node_classifier'
p4653
S'classifies an example'
p4654
I0
I0
I00
Ntp4655
a(S'TDistribution'
p4656
S'distribution'
p4657
g4657
S'distribution of classes in the node'
p4658
I0
I0
I00
Ntp4659
a(S'TDomainContingency'
p4660
S'contingency'
p4661
g4661
S'domain contingency for examples in the node'
p4662
I0
I0
I00
Ntp4663
a(S'TExampleGenerator'
p4664
S'examples'
p4665
g4665
S'learning examples (if stored)'
p4666
I0
I0
I00
Ntp4667
a(S'int'
p4668
S'weightID'
p4669
S'weight_ID'
p4670
S'weightID used to construct this node'
p4671
I0
I0
I01
Ntp4672
a(S'TClassifier'
p4673
S'branchSelector'
p4674
S'branch_selector'
p4675
S'classifier that select a branch for an example'
p4676
I0
I0
I00
Ntp4677
a(S'TTreeNodeList'
p4678
S'branches'
p4679
g4679
S'classifiers presenting the branches'
p4680
I0
I0
I00
Ntp4681
a(S'TStringList'
p4682
S'branchDescriptions'
p4683
S'branch_descriptions'
p4684
S'descriptions of branches'
p4685
I0
I0
I00
Ntp4686
a(S'TDiscDistribution'
p4687
S'branchSizes'
p4688
S'branch_sizes'
p4689
S'numbers of examples in branches'
p4690
I0
I0
I00
Ntp4691
asg29
(dp4692
sbsS'TTransformValue_IsDefined'
p4693
(i__main__
ClassDefinition
p4694
(dp4695
g4
I1
sg5
I01
sg6
g4693
sg7
S'TTransformValue'
p4696
sg9
I00
sg10
(lp4697
sg12
(lp4698
g798
asg29
(dp4699
sbsS'TFilter_hasClassValue'
p4700
(i__main__
ClassDefinition
p4701
(dp4702
g4
I1
sg5
I01
sg6
g4700
sg7
S'TFilter'
p4703
sg9
I00
sg10
(lp4704
sg12
(lp4705
g684
ag688
asg29
(dp4706
sbsS'TStopDistributionClustering_binary'
p4707
(i__main__
ClassDefinition
p4708
(dp4709
g4
I1
sg5
I01
sg6
g4707
sg7
S'TStopDistributionClustering'
p4710
sg9
I00
sg10
(lp4711
sg12
(lp4712
sg29
(dp4713
sbsS'TIMByRows'
p4714
(i__main__
ClassDefinition
p4715
(dp4716
g4
I1
sg5
I01
sg6
g4714
sg7
S'TOrange'
p4717
sg9
I00
sg10
(lp4718
sg12
(lp4719
(S'int'
p4720
S'varType'
p4721
S'var_type'
p4722
S' class variable type'
p4723
I0
I0
I01
S'Variable_Type'
p4724
tp4725
asg29
(dp4726
sbsS'TRuleFinder'
p4727
(i__main__
ClassDefinition
p4728
(dp4729
g4
I1
sg5
I01
sg6
g4727
sg7
S'TOrange'
p4730
sg9
I01
sg10
(lp4731
sg12
(lp4732
g3962
ag3965
asg29
(dp4733
sbsS'TClassifierByExampleTable'
p4734
(i__main__
ClassDefinition
p4735
(dp4736
g4
I1
sg5
I01
sg6
g4734
sg7
S'TClassifierFD'
p4737
sg9
I00
sg10
(lp4738
sg12
(lp4739
(S'TExampleTable'
p4740
S'sortedExamples'
p4741
S'sorted_examples'
p4742
S'a table of examples'
p4743
I0
I0
I00
Ntp4744
a(S'bool'
p4745
S'containsUnknowns'
p4746
S'contains_unknowns'
p4747
S'if true, the table contains unknown values'
p4748
I0
I0
I01
Ntp4749
a(S'TClassifier'
p4750
S'classifierForUnknown'
p4751
S'classifier_for_unknown'
p4752
S'a classifier for unknown cases'
p4753
I0
I0
I00
Ntp4754
a(S'TEFMDataDescription'
p4755
S'dataDescription'
p4756
S'data_description'
p4757
S'data description'
p4758
I0
I0
I00
Ntp4759
ag284
ag94
ag99
asg29
(dp4760
sbsS'TKernelFunc'
p4761
(i__main__
ClassDefinition
p4762
(dp4763
g4
I1
sg5
I01
sg6
g4761
sg7
S'TOrange'
p4764
sg9
I01
sg10
(lp4765
sg12
(lp4766
sg29
(dp4767
sbsS'TMeasureAttribute_gini'
p4768
(i__main__
ClassDefinition
p4769
(dp4770
g4
I1
sg5
I01
sg6
g4768
sg7
S'TMeasureAttributeFromProbabilities'
p4771
sg9
I00
sg10
(lp4772
sg12
(lp4773
g907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp4774
sbsS'TRule'
p4775
(i__main__
ClassDefinition
p4776
(dp4777
g4
I1
sg5
I01
sg6
g4775
sg7
S'TOrange'
p4778
sg9
I00
sg10
(lp4779
sg12
(lp4780
(S'TFilter'
p4781
S'filter'
p4782
g4782
S'stored filter for this rule'
p4783
I0
I0
I00
Ntp4784
a(S'TFilter'
p4785
S'valuesFilter'
p4786
S'values_filter'
p4787
S'Filter_values representation of main filter (sometimes needed)'
p4788
I0
I0
I00
Ntp4789
a(S'TClassifier'
p4790
S'classifier'
p4791
g4791
S'classifies an example'
p4792
I0
I0
I00
Ntp4793
a(S'TLearner'
p4794
S'learner'
p4795
g4795
S'learns a classifier from data'
p4796
I0
I0
I00
Ntp4797
a(S'TRule'
p4798
S'parentRule'
p4799
S'parent_rule'
p4800
g593
I0
I0
I00
Ntp4801
a(S'TDistribution'
p4802
S'baseDist'
p4803
S'base_dist'
p4804
S'initial distribution'
p4805
I0
I0
I00
Ntp4806
a(S'TDistribution'
p4807
S'classDistribution'
p4808
S'class_distribution'
p4809
S'distribution of classes covered by the rule'
p4810
I0
I0
I00
Ntp4811
a(S'TExampleTable'
p4812
S'examples'
p4813
g4813
S'covered examples'
p4814
I0
I0
I00
Ntp4815
a(S'int'
p4816
S'weightID'
p4817
S'weight_ID'
p4818
S'weight for the stored examples'
p4819
I0
I0
I01
Ntp4820
a(S'float'
p4821
S'quality'
p4822
g4822
S'some measure of rule quality'
p4823
I0
I0
I01
Ntp4824
a(S'int'
p4825
S'complexity'
p4826
g4826
g593
I0
I0
I01
Ntp4827
a(S'float'
p4828
S'chi'
p4829
g4829
g593
I0
I0
I01
Ntp4830
a(S'int'
p4831
S'requiredConditions'
p4832
S'required_conditions'
p4833
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4834
I0
I0
I01
Ntp4835
asg29
(dp4836
sbsS'TClassifierByLookupTable2'
p4837
(i__main__
ClassDefinition
p4838
(dp4839
g4
I1
sg5
I01
sg6
g4837
sg7
S'TClassifierByLookupTable'
p4840
sg9
I00
sg10
(lp4841
sg12
(lp4842
(S'TVariable'
p4843
S'variable1'
p4844
g4844
S'the first attribute used for classification'
p4845
I01
I0
I00
Ntp4846
a(S'TVariable'
p4847
S'variable2'
p4848
g4848
S'the second attribute used for classification'
p4849
I01
I0
I00
Ntp4850
a(S'int'
p4851
S'noOfValues1'
p4852
S'no_of_values1'
p4853
S'number of values of the first attribute'
p4854
I01
I0
I01
Ntp4855
a(S'int'
p4856
S'noOfValues2'
p4857
S'no_of_values2'
p4858
S'number of values of the second attribute'
p4859
I01
I0
I01
Ntp4860
a(S'TEFMDataDescription'
p4861
S'dataDescription'
p4862
S'data_description'
p4863
S'data description'
p4864
I0
I0
I00
Ntp4865
ag85
ag89
ag94
ag99
asg29
(dp4866
sbsS'TPreprocessor_addClassNoise'
p4867
(i__main__
ClassDefinition
p4868
(dp4869
g4
I1
sg5
I01
sg6
g4867
sg7
S'TPreprocessor'
p4870
sg9
I00
sg10
(lp4871
sg12
(lp4872
(S'float'
p4873
S'proportion'
p4874
g4874
S'proportion of changed class values'
p4875
I0
I0
I01
Ntp4876
a(S'TRandomGenerator'
p4877
S'randomGenerator'
p4878
S'random_generator'
p4879
S'random number generator'
p4880
I0
I0
I00
Ntp4881
asg29
(dp4882
sbsS'TExampleGenerator'
p4883
(i__main__
ClassDefinition
p4884
(dp4885
g4
I1
sg5
I01
sg6
g4883
sg7
S'TOrange'
p4886
sg9
I01
sg10
(lp4887
sg12
(lp4888
g299
ag303
asg29
(dp4889
sbsS'TClassifierByLookupTable1'
p4890
(i__main__
ClassDefinition
p4891
(dp4892
g4
I1
sg5
I01
sg6
g4890
sg7
S'TClassifierByLookupTable'
p4893
sg9
I00
sg10
(lp4894
sg12
(lp4895
(S'TVariable'
p4896
S'variable1'
p4897
(g4897
S'variable'
p4898
tp4899
S' attribute used for classification'
p4900
I01
I0
I00
Ntp4901
ag85
ag89
ag94
ag99
asg29
(dp4902
sbsS'TRuleClassifierConstructor_Python'
p4903
(i__main__
ClassDefinition
p4904
(dp4905
g4
I1
sg5
I01
sg6
g4903
sg7
S'TRuleClassifierConstructor'
p4906
sg9
I00
sg10
(lp4907
sg12
(lp4908
sg29
(dp4909
sbsS'TRemoveRedundantOneValue'
p4910
(i__main__
ClassDefinition
p4911
(dp4912
g4
I1
sg5
I01
sg6
g4910
sg7
S'TRemoveRedundant'
p4913
sg9
I00
sg10
(lp4914
sg12
(lp4915
(S'bool'
p4916
S'onData'
p4917
S'on_data'
p4918
S'observe the actual number of value on the data (not on attribute definitions)'
p4919
I0
I0
I01
Ntp4920
ag1345
asg29
(dp4921
sbsS'TDistributionAssessor_Relief'
p4922
(i__main__
ClassDefinition
p4923
(dp4924
g4
I1
sg5
I01
sg6
g4922
sg7
S'TDistributionAssessor'
p4925
sg9
I00
sg10
(lp4926
sg12
(lp4927
sg29
(dp4928
sbsS'TEnumVariable'
p4929
(i__main__
ClassDefinition
p4930
(dp4931
g4
I1
sg5
I01
sg6
g4929
sg7
S'TVariable'
p4932
sg9
I00
sg10
(lp4933
sg12
(lp4934
(S'TStringList'
p4935
S'values'
p4936
g4936
S"attribute's values"
p4937
I0
I0
I00
Ntp4938
a(S'int'
p4939
S'baseValue'
p4940
S'base_value'
p4941
S'the index of the base value'
p4942
I0
I0
I01
Ntp4943
ag326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp4944
sbsS'THeatmapConstructor'
p4945
(i__main__
ClassDefinition
p4946
(dp4947
g4
I1
sg5
I0
sg6
g4945
sg7
S'TOrange'
p4948
sg9
I00
sg10
(lp4949
sg12
(lp4950
(S'TExampleTable'
p4951
S'sortedExamples'
p4952
S'sorted_examples'
p4953
S'sortedExamples'
p4954
I01
I0
I00
Ntp4955
a(S'int'
p4956
S'nColumns'
p4957
S'n_columns'
p4958
S'number of columns'
p4959
I01
I0
I01
Ntp4960
a(S'int'
p4961
S'nRows'
p4962
S'n_rows'
p4963
S'number of rows'
p4964
I01
I0
I01
Ntp4965
a(S'int'
p4966
S'nClasses'
p4967
S'n_classes'
p4968
S'number of classes (0 if the data is not classified)'
p4969
I01
I0
I01
Ntp4970
asg29
(dp4971
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p4972
(i__main__
ClassDefinition
p4973
(dp4974
g4
I1
sg5
I01
sg6
g4972
sg7
S'TConditionalProbabilityEstimatorConstructor'
p4975
sg9
I00
sg10
(lp4976
sg12
(lp4977
(S'float'
p4978
S'windowProportion'
p4979
S'window_proportion'
p4980
S'The proportion of points in a window for LR'
p4981
I0
I0
I01
Ntp4982
a(S'int'
p4983
S'nPoints'
p4984
S'n_points'
p4985
S'The number of points on curve'
p4986
I0
I0
I01
Ntp4987
a(S'int'
p4988
S'distributionMethod'
p4989
S'distribution_method'
p4990
S" Meaning of the 'nPoints'"
p4991
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p4992
tp4993
asg29
(dp4994
S'DistributionMethod'
p4995
(lp4996
(S'Minimal'
p4997
S'DISTRIBUTE_MINIMAL'
p4998
tp4999
a(S'Factor'
p5000
S'DISTRIBUTE_FACTOR'
p5001
tp5002
a(S'Fixed'
p5003
S'DISTRIBUTE_FIXED'
p5004
tp5005
a(S'Uniform'
p5006
S'DISTRIBUTE_UNIFORM'
p5007
tp5008
a(S'Maximal'
p5009
S'DISTRIBUTE_MAXIMAL'
p5010
tp5011
assbsS'TPreprocessor_addMissing'
p5012
(i__main__
ClassDefinition
p5013
(dp5014
g4
I1
sg5
I01
sg6
g5012
sg7
S'TPreprocessor'
p5015
sg9
I00
sg10
(lp5016
sg12
(lp5017
(S'TVariableFloatMap'
p5018
S'proportions'
p5019
g5019
S'proportion of removed values for individual values'
p5020
I0
I0
I00
Ntp5021
a(S'float'
p5022
S'defaultProportion'
p5023
S'default_proportion'
p5024
S'default proportion of removed values (for attributes not specified above)'
p5025
I0
I0
I01
Ntp5026
a(S'int'
p5027
S'specialType'
p5028
S'special_type'
p5029
S'special value type (1=DC, 2=DK)'
p5030
I0
I0
I01
Ntp5031
a(S'TRandomGenerator'
p5032
S'randomGenerator'
p5033
S'random_generator'
p5034
S'random number generator'
p5035
I0
I0
I00
Ntp5036
asg29
(dp5037
sbsS'TRuleBeamCandidateSelector'
p5038
(i__main__
ClassDefinition
p5039
(dp5040
g4
I1
sg5
I01
sg6
g5038
sg7
S'TOrange'
p5041
sg9
I01
sg10
(lp5042
sg12
(lp5043
sg29
(dp5044
sbsS'TSubsetsGenerator_minMaxSize'
p5045
(i__main__
ClassDefinition
p5046
(dp5047
g4
I1
sg5
I01
sg6
g5045
sg7
S'TSubsetsGenerator'
p5048
sg9
I00
sg10
(lp5049
sg12
(lp5050
(S'int'
p5051
S'min'
p5052
g5052
S'minimal subset size'
p5053
I0
I0
I01
Ntp5054
a(S'int'
p5055
S'max'
p5056
g5056
S'maximal subset size'
p5057
I0
I0
I01
Ntp5058
ag200
asg29
(dp5059
sbsS'TMakeRandomIndicesN'
p5060
(i__main__
ClassDefinition
p5061
(dp5062
g4
I1
sg5
I01
sg6
g5060
sg7
S'TMakeRandomIndices'
p5063
sg9
I00
sg10
(lp5064
sg12
(lp5065
(S'TFloatList'
p5066
g2201
g2201
S'probabilities of indices (last is 1-sum(p))'
p5067
I0
I0
I00
Ntp5068
ag707
ag711
ag716
asg29
(dp5069
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5070
(i__main__
ClassDefinition
p5071
(dp5072
g4
I1
sg5
I01
sg6
g5070
sg7
S'TTreeExampleSplitter'
p5073
sg9
I00
sg10
(lp5074
sg12
(lp5075
sg29
(dp5076
sbsS'TValueFilter_stringList'
p5077
(i__main__
ClassDefinition
p5078
(dp5079
g4
I1
sg5
I01
sg6
g5077
sg7
S'TValueFilter'
p5080
sg9
I00
sg10
(lp5081
sg12
(lp5082
(S'TStringList'
p5083
S'values'
p5084
g5084
S'accepted values'
p5085
I0
I0
I00
Ntp5086
a(S'bool'
p5087
S'caseSensitive'
p5088
S'case_sensitive'
p5089
S'if true (default), the comparison is case sensitive'
p5090
I0
I0
I01
Ntp5091
ag1058
ag1063
asg29
(dp5092
sbsS'TContingencyClass'
p5093
(i__main__
ClassDefinition
p5094
(dp5095
g4
I1
sg5
I01
sg6
g5093
sg7
S'TContingency'
p5096
sg9
I01
sg10
(lp5097
sg12
(lp5098
g1604
ag1609
ag1615
ag1620
ag1625
ag1630
asg29
(dp5099
sbsS'TAssociationClassifier'
p5100
(i__main__
ClassDefinition
p5101
(dp5102
g4
I1
sg5
I01
sg6
g5100
sg7
S'TClassifierFD'
p5103
sg9
I00
sg10
(lp5104
sg12
(lp5105
(S'TAssociationRules'
p5106
S'rules'
p5107
g5107
S'association rules'
p5108
I0
I0
I00
Ntp5109
a(S'int'
p5110
S'voteWeight'
p5111
S'vote_weight'
p5112
S'vote weight (s=support, c=confidence, p=product)'
p5113
I0
I0
I01
Ntp5114
ag284
ag94
ag99
asg29
(dp5115
sbsS'TDomainDistributions'
p5116
(ipyprops
ClassDefinition
p5117
(dp5118
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p5119
sg7
g136
sg9
I0
sg10
(lp5120
sg12
(lp5121
sg29
(dp5122
sbsS'TSVMLearnerSparse'
p5123
(i__main__
ClassDefinition
p5124
(dp5125
g4
I1
sg5
I01
sg6
g5123
sg7
S'TSVMLearner'
p5126
sg9
I00
sg10
(lp5127
sg12
(lp5128
(S'bool'
p5129
S'useNonMeta'
p5130
S'use_non_meta'
p5131
S'include non meta attributes in the learning process'
p5132
I0
I0
I01
Ntp5133
ag4102
ag4107
ag4111
ag4115
ag4119
ag4123
ag4127
ag4130
ag4134
ag4137
ag4141
ag4145
ag4149
ag4154
ag110
asg29
(dp5134
sbsS'TDomain'
p5135
(i__main__
ClassDefinition
p5136
(dp5137
g4
I1
sg5
I01
sg6
g5135
sg7
S'TOrange'
p5138
sg9
I00
sg10
(lp5139
sg12
(lp5140
(S'TVariable'
p5141
S'classVar'
p5142
S'class_var'
p5143
S'class variable'
p5144
I01
I0
I00
Ntp5145
a(S'TVarList'
p5146
S'attributes'
p5147
(g5147
S'features'
p5148
tp5149
S' list of attributes, excluding the class'
p5150
I01
I0
I00
Ntp5151
a(S'TVarList'
p5152
S'variables'
p5153
g5153
S'list of attributes, including the class at the end of the list'
p5154
I01
I0
I00
Ntp5155
a(S'TVarList'
p5156
S'classVars'
p5157
S'class_vars'
p5158
S'list of class variables, if multiple; else None'
p5159
I01
I0
I00
Ntp5160
a(S'int'
p5161
S'version'
p5162
g5162
S"unique version identifier; it's changed each time a domain is changed"
p5163
I01
I0
I01
Ntp5164
asg29
(dp5165
sbsS'TTreePruner_SameMajority'
p5166
(i__main__
ClassDefinition
p5167
(dp5168
g4
I1
sg5
I01
sg6
g5166
sg7
S'TTreePruner'
p5169
sg9
I00
sg10
(lp5170
sg12
(lp5171
sg29
(dp5172
sbsS'TSubsetsGenerator_constant_iterator'
p5173
(i__main__
ClassDefinition
p5174
(dp5175
g4
I1
sg5
I01
sg6
g5173
sg7
S'TSubsetsGenerator_iterator'
p5176
sg9
I00
sg10
(lp5177
sg12
(lp5178
(S'TVarList'
p5179
S'constant'
p5180
g5180
S'a subset that is returned (once!)'
p5181
I0
I0
I00
Ntp5182
a(S'bool'
p5183
S'moreToCome'
p5184
S'more_to_come'
p5185
g593
I0
I0
I01
Ntp5186
ag503
asg29
(dp5187
sbsS'TExampleDistConstructor'
p5188
(i__main__
ClassDefinition
p5189
(dp5190
g4
I1
sg5
I01
sg6
g5188
sg7
S'TOrange'
p5191
sg9
I01
sg10
(lp5192
sg12
(lp5193
sg29
(dp5194
sbsS'TIMByIMByRows'
p5195
(i__main__
ClassDefinition
p5196
(dp5197
g4
I1
sg5
I01
sg6
g5195
sg7
S'TIMConstructor'
p5198
sg9
I00
sg10
(lp5199
sg12
(lp5200
g1246
asg29
(dp5201
sbsS'TAlignmentList'
p5202
(ipyprops
ClassDefinition
p5203
(dp5204
g4
I0
sg5
I01
sg6
g5202
sg7
g136
sg9
I0
sg10
(lp5205
sg12
(lp5206
sg29
(dp5207
sbsS'TDiscrete2Continuous'
p5208
(i__main__
ClassDefinition
p5209
(dp5210
g4
I1
sg5
I01
sg6
g5208
sg7
S'TTransformValue'
p5211
sg9
I00
sg10
(lp5212
sg12
(lp5213
(S'int'
p5214
S'value'
p5215
g5215
S'target value'
p5216
I0
I0
I01
Ntp5217
a(S'bool'
p5218
S'invert'
p5219
g5219
S'give 1.0 to values not equal to the target'
p5220
I0
I0
I01
Ntp5221
a(S'bool'
p5222
S'zeroBased'
p5223
S'zero_based'
p5224
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5225
I0
I0
I01
Ntp5226
ag798
asg29
(dp5227
sbsS'TDomainDiscretization'
p5228
(i__main__
ClassDefinition
p5229
(dp5230
g4
I1
sg5
I01
sg6
g5228
sg7
S'TOrange'
p5231
sg9
I00
sg10
(lp5232
sg12
(lp5233
(S'TDiscretization'
p5234
S'discretization'
p5235
g5235
S'discretization'
p5236
I0
I0
I00
Ntp5237
asg29
(dp5238
sbsS'TColumnAssessor_m'
p5239
(i__main__
ClassDefinition
p5240
(dp5241
g4
I1
sg5
I01
sg6
g5239
sg7
S'TColumnAssessor'
p5242
sg9
I00
sg10
(lp5243
sg12
(lp5244
(S'float'
p5245
g1209
g1209
S'm for m-estimate'
p5246
I0
I0
I01
Ntp5247
asg29
(dp5248
sbsS'TImputer_defaults'
p5249
(i__main__
ClassDefinition
p5250
(dp5251
g4
I1
sg5
I01
sg6
g5249
sg7
S'TImputer'
p5252
sg9
I00
sg10
(lp5253
sg12
(lp5254
(S'TExample'
p5255
S'defaults'
p5256
g5256
S'values that are to be inserted instead of missing ones'
p5257
I0
I0
I00
Ntp5258
asg29
(dp5259
sbsS'TContingency'
p5260
(i__main__
ClassDefinition
p5261
(dp5262
g4
I1
sg5
I01
sg6
g5260
sg7
S'TOrange'
p5263
sg9
I00
sg10
(lp5264
sg12
(lp5265
g1604
ag1609
ag1615
ag1620
ag1625
ag1630
asg29
(dp5266
sbsS'TStringValue'
p5267
(i__main__
ClassDefinition
p5268
(dp5269
g4
I1
sg5
I01
sg6
g5267
sg7
S'TSomeValue'
p5270
sg9
I00
sg10
(lp5271
sg12
(lp5272
sg29
(dp5273
sbsS'TClassifierGenerator'
p5274
(i__main__
ClassDefinition
p5275
(dp5276
g4
I1
sg5
I01
sg6
g5274
sg7
S'TExampleGenerator'
p5277
sg9
I00
sg10
(lp5278
sg12
(lp5279
(S'TClassifier'
p5280
S'classify'
p5281
g5281
S'classifier'
p5282
I0
I0
I00
Ntp5283
ag299
ag303
asg29
(dp5284
sbsS'TRuleDataStoppingCriteria_Python'
p5285
(i__main__
ClassDefinition
p5286
(dp5287
g4
I1
sg5
I01
sg6
g5285
sg7
S'TRuleDataStoppingCriteria'
p5288
sg9
I00
sg10
(lp5289
sg12
(lp5290
sg29
(dp5291
sbsS'TTreeDescender_UnknownToCommonSelector'
p5292
(i__main__
ClassDefinition
p5293
(dp5294
g4
I1
sg5
I01
sg6
g5292
sg7
g1537
sg9
I0
sg10
(lp5295
sg12
(lp5296
sg29
(dp5297
sbsS'THierarchicalCluster'
p5298
(i__main__
ClassDefinition
p5299
(dp5300
g4
I1
sg5
I01
sg6
g5298
sg7
S'TOrange'
p5301
sg9
I00
sg10
(lp5302
sg12
(lp5303
(S'THierarchicalClusterList'
p5304
S'branches'
p5305
g5305
S'subclusters'
p5306
I0
I0
I00
Ntp5307
a(S'float'
p5308
S'height'
p5309
g5309
S'height'
p5310
I0
I0
I01
Ntp5311
a(S'TIntList'
p5312
S'mapping'
p5313
g5313
S'indices to the list of all elements in the clustering'
p5314
I0
I0
I00
Ntp5315
a(S'int'
p5316
S'first'
p5317
g5317
S"the index into 'elements' to the first element of the cluster"
p5318
I0
I0
I01
Ntp5319
a(S'int'
p5320
S'last'
p5321
g5321
S"the index into 'elements' to the one after the last element of the cluster"
p5322
I0
I0
I01
Ntp5323
asg29
(dp5324
sbsS'TPreprocessIM'
p5325
(i__main__
ClassDefinition
p5326
(dp5327
g4
I1
sg5
I01
sg6
g5325
sg7
S'TOrange'
p5328
sg9
I01
sg10
(lp5329
sg12
(lp5330
sg29
(dp5331
sbsS'TLongList'
p5332
(ipyprops
ClassDefinition
p5333
(dp5334
g4
I0
sg5
I01
sg6
g5332
sg7
g136
sg9
I0
sg10
(lp5335
sg12
(lp5336
sg29
(dp5337
sbsS'TBasketFeeder'
p5338
(i__main__
ClassDefinition
p5339
(dp5340
g4
I1
sg5
I01
sg6
g5338
sg7
S'TOrange'
p5341
sg9
I00
sg10
(lp5342
sg12
(lp5343
(S'bool'
p5344
S'dontStore'
p5345
S'dont_store'
p5346
S'disables items storing'
p5347
I0
I0
I01
Ntp5348
a(S'bool'
p5349
S'dontCheckStored'
p5350
S'dont_check_stored'
p5351
S'disables items lookup in the global cache'
p5352
I0
I0
I01
Ntp5353
a(S'TDomain'
p5354
S'domain'
p5355
g5355
S'domain where the meta attributes are stored'
p5356
I0
I0
I00
Ntp5357
a(S'TDomain'
p5358
S'sourceDomain'
p5359
S'source_domain'
p5360
S'domain with items that can be reused'
p5361
I0
I0
I00
Ntp5362
asg29
(dp5363
sbsS'TRuleEvaluator_Laplace'
p5364
(i__main__
ClassDefinition
p5365
(dp5366
g4
I1
sg5
I01
sg6
g5364
sg7
S'TRuleEvaluator'
p5367
sg9
I00
sg10
(lp5368
sg12
(lp5369
sg29
(dp5370
sbsS'TColumnAssessor_N'
p5371
(i__main__
ClassDefinition
p5372
(dp5373
g4
I1
sg5
I01
sg6
g5371
sg7
S'TColumnAssessor'
p5374
sg9
I00
sg10
(lp5375
sg12
(lp5376
sg29
(dp5377
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5378
(i__main__
ClassDefinition
p5379
(dp5380
g4
I1
sg5
I01
sg6
g5378
sg7
S'TSubsetsGenerator_iterator'
p5381
sg9
I00
sg10
(lp5382
sg12
(lp5383
(S'int'
p5384
g2521
g2521
g593
I01
I0
I01
Ntp5385
a(S'int'
p5386
S'max'
p5387
g5387
S'maximal subset size'
p5388
I0
I0
I01
Ntp5389
a(S'bool'
p5390
S'moreToCome'
p5391
S'more_to_come'
p5392
g593
I01
I0
I01
Ntp5393
ag503
asg29
(dp5394
sbsS'TExamplesDistanceConstructor_Lp'
p5395
(i__main__
ClassDefinition
p5396
(dp5397
g4
I1
sg5
I01
sg6
g5395
sg7
S'TExamplesDistanceConstructor_Normalized'
p5398
sg9
I00
sg10
(lp5399
sg12
(lp5400
(S'float'
p5401
g2201
g2201
g2201
I0
I0
I01
Ntp5402
ag2035
ag2040
ag1367
asg29
(dp5403
sbsS'TRuleEvaluator_mEVC'
p5404
(i__main__
ClassDefinition
p5405
(dp5406
g4
I1
sg5
I01
sg6
g5404
sg7
S'TRuleEvaluator'
p5407
sg9
I00
sg10
(lp5408
sg12
(lp5409
(S'float'
p5410
g1209
g1209
S'Parameter m for m-estimate after EVC correction'
p5411
I0
I0
I01
Ntp5412
a(S'TEVDistGetter'
p5413
S'evDistGetter'
p5414
S'ev_dist_getter'
p5415
S'get EVC distribution for chi correction'
p5416
I0
I0
I00
Ntp5417
a(S'TVariable'
p5418
S'probVar'
p5419
S'prob_var'
p5420
S'probability coverage variable (meta usually)'
p5421
I0
I0
I00
Ntp5422
a(S'TRuleValidator'
p5423
S'validator'
p5424
g5424
S'rule validator for best rule'
p5425
I0
I0
I00
Ntp5426
a(S'int'
p5427
S'min_improved'
p5428
g5428
S'minimal number of improved examples'
p5429
I0
I0
I01
Ntp5430
a(S'float'
p5431
S'min_improved_perc'
p5432
g5432
S'minimal percentage of improved examples'
p5433
I0
I0
I01
Ntp5434
a(S'TRule'
p5435
S'bestRule'
p5436
S'best_rule'
p5437
S'best rule found and evaluated given conditions (min_improved, validator)'
p5438
I0
I0
I00
Ntp5439
a(S'float'
p5440
S'ruleAlpha'
p5441
S'rule_alpha'
p5442
S"minimal 'true' rule significance"
p5443
I0
I0
I01
Ntp5444
a(S'float'
p5445
S'attributeAlpha'
p5446
S'attribute_alpha'
p5447
S'minimal attribute significance'
p5448
I0
I0
I01
Ntp5449
a(S'bool'
p5450
S'returnExpectedProb'
p5451
S'return_expected_prob'
p5452
S'if true, evaluator returns expected class probability, if false, current class probability'
p5453
I0
I0
I01
Ntp5454
a(S'int'
p5455
S'optimismReduction'
p5456
S'optimism_reduction'
p5457
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5458
I0
I0
I01
Ntp5459
asg29
(dp5460
sbsS'TExample'
p5461
(i__main__
ClassDefinition
p5462
(dp5463
g4
I1
sg5
I01
sg6
g5461
sg7
S'TOrange'
p5464
sg9
I00
sg10
(lp5465
sg12
(lp5466
g2627
ag2630
asg29
(dp5467
sbsS'TFixedDiscretization'
p5468
(i__main__
ClassDefinition
p5469
(dp5470
g4
I1
sg5
I01
sg6
g5468
sg7
S'TDiscretization'
p5471
sg9
I00
sg10
(lp5472
sg12
(lp5473
(S'TFloatList'
p5474
S'points'
p5475
g5475
S'cut-off points'
p5476
I0
I0
I00
Ntp5477
asg29
(dp5478
sbsS'TDomainContingency'
p5479
(ipyprops
ClassDefinition
p5480
(dp5481
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5482
sg7
g136
sg9
I0
sg10
(lp5483
sg12
(lp5484
sg29
(dp5485
sbsS'TPreprocessor_addGaussianClassNoise'
p5486
(i__main__
ClassDefinition
p5487
(dp5488
g4
I1
sg5
I01
sg6
g5486
sg7
S'TPreprocessor'
p5489
sg9
I00
sg10
(lp5490
sg12
(lp5491
(S'float'
p5492
S'deviation'
p5493
g5493
S'class deviation'
p5494
I0
I0
I01
Ntp5495
a(S'TRandomGenerator'
p5496
S'randomGenerator'
p5497
S'random_generator'
p5498
S'random number generator'
p5499
I0
I0
I00
Ntp5500
asg29
(dp5501
sbsS'TRuleDataStoppingCriteria'
p5502
(i__main__
ClassDefinition
p5503
(dp5504
g4
I1
sg5
I01
sg6
g5502
sg7
S'TOrange'
p5505
sg9
I01
sg10
(lp5506
sg12
(lp5507
sg29
(dp5508
sbsS'TPreprocessor_filter'
p5509
(i__main__
ClassDefinition
p5510
(dp5511
g4
I1
sg5
I01
sg6
g5509
sg7
S'TPreprocessor'
p5512
sg9
I00
sg10
(lp5513
sg12
(lp5514
(S'TFilter'
p5515
S'filter'
p5516
g5516
S'filter'
p5517
I0
I0
I00
Ntp5518
asg29
(dp5519
sbsS'TSOMNodeList'
p5520
(ipyprops
ClassDefinition
p5521
(dp5522
g4
I0
sg5
I01
sg6
g5520
sg7
g136
sg9
I0
sg10
(lp5523
sg12
(lp5524
sg29
(dp5525
sbsS'TExampleDistBySorting'
p5526
(i__main__
ClassDefinition
p5527
(dp5528
g4
I1
sg5
I01
sg6
g5526
sg7
S'TExampleDistConstructor'
p5529
sg9
I00
sg10
(lp5530
sg12
(lp5531
sg29
(dp5532
sbsS'TGraphAsMatrix'
p5533
(i__main__
ClassDefinition
p5534
(dp5535
g4
I1
sg5
I01
sg6
g5533
sg7
S'TGraph'
p5536
sg9
I00
sg10
(lp5537
sg12
(lp5538
g1483
ag1488
ag1492
asg29
(dp5539
sbsS'TValueFilter_discrete'
p5540
(i__main__
ClassDefinition
p5541
(dp5542
g4
I1
sg5
I01
sg6
g5540
sg7
S'TValueFilter'
p5543
sg9
I00
sg10
(lp5544
sg12
(lp5545
(S'TValueList'
p5546
S'values'
p5547
g5547
S'accepted values'
p5548
I0
I0
I00
Ntp5549
a(S'bool'
p5550
S'negate'
p5551
g5551
S'negate'
p5552
I0
I0
I01
Ntp5553
ag1058
ag1063
asg29
(dp5554
sbsS'TComputeDomainContingency'
p5555
(i__main__
ClassDefinition
p5556
(dp5557
g4
I1
sg5
I01
sg6
g5555
sg7
S'TOrange'
p5558
sg9
I00
sg10
(lp5559
sg12
(lp5560
g28
asg29
(dp5561
sbsS'TAssociationRulesInducer'
p5562
(i__main__
ClassDefinition
p5563
(dp5564
g4
I1
sg5
I01
sg6
g5562
sg7
S'TOrange'
p5565
sg9
I00
sg10
(lp5566
sg12
(lp5567
(S'int'
p5568
S'maxItemSets'
p5569
S'max_item_sets'
p5570
S'maximal number of itemsets (increase if you want)'
p5571
I0
I0
I01
Ntp5572
a(S'float'
p5573
S'confidence'
p5574
g5574
S'required confidence'
p5575
I0
I0
I01
Ntp5576
a(S'float'
p5577
S'support'
p5578
g5578
S'required support'
p5579
I0
I0
I01
Ntp5580
a(S'bool'
p5581
S'classificationRules'
p5582
S'classification_rules'
p5583
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5584
I0
I0
I01
Ntp5585
a(S'bool'
p5586
S'storeExamples'
p5587
S'store_examples'
p5588
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5589
I0
I0
I01
Ntp5590
asg29
(dp5591
sbsS'TEarthClassifier'
p5592
(i__main__
ClassDefinition
p5593
(dp5594
g4
I1
sg5
I01
sg6
g5592
sg7
S'TClassifierFD'
p5595
sg9
I00
sg10
(lp5596
sg12
(lp5597
(S'int'
p5598
S'num_preds'
p5599
g5599
S'Number of predictor variables'
p5600
I0
I0
I01
Ntp5601
a(S'int'
p5602
S'num_terms'
p5603
g5603
S'Number of used terms'
p5604
I0
I0
I01
Ntp5605
a(S'int'
p5606
S'max_terms'
p5607
g5607
S'Maximum number of terms'
p5608
I0
I0
I01
Ntp5609
a(S'int'
p5610
S'num_responses'
p5611
g5611
S'Number of response variables'
p5612
I0
I0
I01
Ntp5613
a(S'TBoolList'
p5614
S'best_set'
p5615
g5615
S'Used terms.'
p5616
I0
I0
I00
Ntp5617
a(S'TFloatListList'
p5618
S'dirs'
p5619
g5619
S'max_preds x num_preds matrix'
p5620
I0
I0
I00
Ntp5621
a(S'TFloatListList'
p5622
S'cuts'
p5623
g5623
S'max_preds x num_preds matrix of cuts'
p5624
I0
I0
I00
Ntp5625
a(S'TFloatList'
p5626
S'betas'
p5627
g5627
S'Term coefficients;'
p5628
I0
I0
I00
Ntp5629
ag284
ag94
ag99
asg29
(dp5630
sbsS'TTreeStopCriteria'
p5631
(i__main__
ClassDefinition
p5632
(dp5633
g4
I1
sg5
I01
sg6
g5631
sg7
S'TOrange'
p5634
sg9
I00
sg10
(lp5635
sg12
(lp5636
sg29
(dp5637
sbsS'TPreprocessor_addMissingClasses'
p5638
(i__main__
ClassDefinition
p5639
(dp5640
g4
I1
sg5
I01
sg6
g5638
sg7
S'TPreprocessor'
p5641
sg9
I00
sg10
(lp5642
sg12
(lp5643
(S'float'
p5644
S'proportion'
p5645
g5645
S'proportion of removed class values'
p5646
I0
I0
I01
Ntp5647
a(S'int'
p5648
S'specialType'
p5649
S'special_type'
p5650
S'special value type (1=DC, 2=DK)'
p5651
I0
I0
I01
Ntp5652
a(S'TRandomGenerator'
p5653
S'randomGenerator'
p5654
S'random_generator'
p5655
S'random number generator'
p5656
I0
I0
I00
Ntp5657
asg29
(dp5658
sbsS'TIMClustering'
p5659
(i__main__
ClassDefinition
p5660
(dp5661
g4
I1
sg5
I01
sg6
g5659
sg7
S'TOrange'
p5662
sg9
I00
sg10
(lp5663
sg12
(lp5664
(S'TIM'
p5665
S'im'
p5666
g5666
S'incompatibilty matrix'
p5667
I0
I0
I00
Ntp5668
a(S'TIntList'
p5669
S'clusters'
p5670
g5670
S'cluster index for each matrix column'
p5671
I0
I0
I00
Ntp5672
a(S'int'
p5673
S'maxCluster'
p5674
S'max_cluster'
p5675
S'the highest cluster index'
p5676
I0
I0
I01
Ntp5677
a(S'float'
p5678
S'quality'
p5679
g5679
S'cluster quality'
p5680
I0
I0
I01
Ntp5681
asg29
(dp5682
sbsS'TBasketExampleGenerator'
p5683
(i__main__
ClassDefinition
p5684
(dp5685
g4
I1
sg5
I01
sg6
g5683
sg7
S'TFileExampleGenerator'
p5686
sg9
I00
sg10
(lp5687
sg12
(lp5688
g1575
ag1580
ag1585
ag299
ag303
asg29
(dp5689
sbsS'TRuleEvaluator_Entropy'
p5690
(i__main__
ClassDefinition
p5691
(dp5692
g4
I1
sg5
I01
sg6
g5690
sg7
S'TRuleEvaluator'
p5693
sg9
I00
sg10
(lp5694
sg12
(lp5695
sg29
(dp5696
sbsS'TMeasureAttribute_chiSquare'
p5697
(i__main__
ClassDefinition
p5698
(dp5699
g4
I1
sg5
I01
sg6
g5697
sg7
S'TMeasureAttributeFromProbabilities'
p5700
sg9
I00
sg10
(lp5701
sg12
(lp5702
(S'bool'
p5703
S'computeProbabilities'
p5704
S'compute_probabilities'
p5705
g593
I0
I0
I01
Ntp5706
ag907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp5707
sbsS'TDistribution'
p5708
(i__main__
ClassDefinition
p5709
(dp5710
g4
I1
sg5
I01
sg6
g5708
sg7
S'TSomeValue'
p5711
sg9
I01
sg10
(lp5712
sg12
(lp5713
g1129
ag1133
ag1137
ag1141
ag1145
ag1150
ag1155
ag1160
asg29
(dp5714
sbsS'TExamplesDistance_DTW'
p5715
(i__main__
ClassDefinition
p5716
(dp5717
g4
I1
sg5
I01
sg6
g5715
sg7
S'TExamplesDistance_Normalized'
p5718
sg9
I00
sg10
(lp5719
sg12
(lp5720
(S'int'
p5721
S'dtwDistance'
p5722
S'dtw_distance'
p5723
S' distance measure between individual attributes (default: square of difference)'
p5724
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5725
tp5726
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp5727
S'DistanceType'
p5728
(lp5729
(S'Euclidean'
p5730
I0
tp5731
a(S'Derivative'
p5732
I1
tp5733
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5734
(i__main__
ClassDefinition
p5735
(dp5736
g4
I1
sg5
I01
sg6
g5734
sg7
S'TTreeExampleSplitter'
p5737
sg9
I00
sg10
(lp5738
sg12
(lp5739
sg29
(dp5740
sbsS'TTreePruner_m'
p5741
(i__main__
ClassDefinition
p5742
(dp5743
g4
I1
sg5
I01
sg6
g5741
sg7
S'TTreePruner'
p5744
sg9
I00
sg10
(lp5745
sg12
(lp5746
(S'float'
p5747
g1209
g1209
S'm for m-estimate'
p5748
I0
I0
I01
Ntp5749
asg29
(dp5750
sbsS'TImputer'
p5751
(i__main__
ClassDefinition
p5752
(dp5753
g4
I1
sg5
I01
sg6
g5751
sg7
S'TOrange'
p5754
sg9
I01
sg10
(lp5755
sg12
(lp5756
sg29
(dp5757
sbsS'TExamplesDistanceConstructor_DTW'
p5758
(i__main__
ClassDefinition
p5759
(dp5760
g4
I1
sg5
I01
sg6
g5758
sg7
S'TExamplesDistanceConstructor_Normalized'
p5761
sg9
I00
sg10
(lp5762
sg12
(lp5763
(S'int'
p5764
S'dtwDistance'
p5765
S'dtw_distance'
p5766
S'distance measure between individual attributes (default: square of difference)'
p5767
I0
I0
I01
Ntp5768
ag2035
ag2040
ag1367
asg29
(dp5769
sbsS'TStopIMClusteringByAssessor_n'
p5770
(i__main__
ClassDefinition
p5771
(dp5772
g4
I1
sg5
I01
sg6
g5770
sg7
S'TStopIMClusteringByAssessor'
p5773
sg9
I00
sg10
(lp5774
sg12
(lp5775
(S'int'
p5776
g1015
g1015
S'number of clusters'
p5777
I0
I0
I01
Ntp5778
asg29
(dp5779
sbsS'TVarListList'
p5780
(ipyprops
ClassDefinition
p5781
(dp5782
g4
I0
sg5
I01
sg6
g5780
sg7
g136
sg9
I0
sg10
(lp5783
sg12
(lp5784
sg29
(dp5785
sbsS'TRandomGenerator'
p5786
(i__main__
ClassDefinition
p5787
(dp5788
g4
I1
sg5
I01
sg6
g5786
sg7
S'TOrange'
p5789
sg9
I00
sg10
(lp5790
sg12
(lp5791
(S'int'
p5792
S'initseed'
p5793
g5793
S'initial random seed'
p5794
I0
I0
I01
Ntp5795
a(S'int'
p5796
S'uses'
p5797
g5797
S'#times a number was returned'
p5798
I0
I0
I01
Ntp5799
asg29
(dp5800
sbsS'TFloatListList'
p5801
(ipyprops
ClassDefinition
p5802
(dp5803
g4
I0
sg5
I01
sg6
g5801
sg7
g136
sg9
I0
sg10
(lp5804
sg12
(lp5805
sg29
(dp5806
sbsS'TPreprocessor_imputeByLearner'
p5807
(i__main__
ClassDefinition
p5808
(dp5809
g4
I1
sg5
I01
sg6
g5807
sg7
S'TPreprocessor'
p5810
sg9
I00
sg10
(lp5811
sg12
(lp5812
(S'TLearner'
p5813
S'learner'
p5814
g5814
S'learner used for inducing a model for imputation'
p5815
I0
I0
I00
Ntp5816
asg29
(dp5817
sbsS'TRuleBeamRefiner_Python'
p5818
(i__main__
ClassDefinition
p5819
(dp5820
g4
I1
sg5
I01
sg6
g5818
sg7
S'TRuleBeamRefiner'
p5821
sg9
I00
sg10
(lp5822
sg12
(lp5823
sg29
(dp5824
sbsS'TClassifierFromVarFD'
p5825
(i__main__
ClassDefinition
p5826
(dp5827
g4
I1
sg5
I01
sg6
g5825
sg7
S'TClassifierFD'
p5828
sg9
I00
sg10
(lp5829
sg12
(lp5830
(S'int'
p5831
S'position'
p5832
g5832
S'position of the attribute in domain'
p5833
I0
I0
I01
Ntp5834
a(S'TTransformValue'
p5835
S'transformer'
p5836
g5836
S'transformer'
p5837
I0
I0
I00
Ntp5838
a(S'TDistribution'
p5839
S'distributionForUnknown'
p5840
S'distribution_for_unknown'
p5841
S'distribution for unknown value'
p5842
I0
I0
I00
Ntp5843
a(S'bool'
p5844
S'transformUnknowns'
p5845
S'transform_unknowns'
p5846
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p5847
I0
I0
I01
Ntp5848
ag284
ag94
ag99
asg29
(dp5849
sbsS'TSimpleTreeLearner'
p5850
(i__main__
ClassDefinition
p5851
(dp5852
g4
I1
sg5
I01
sg6
g5850
sg7
S'TLearner'
p5853
sg9
I00
sg10
(lp5854
sg12
(lp5855
(S'float'
p5856
S'maxMajority'
p5857
S'max_majority'
p5858
g593
I0
I0
I01
Ntp5859
a(S'int'
p5860
S'minInstances'
p5861
S'min_instances'
p5862
g593
I0
I0
I01
Ntp5863
a(S'int'
p5864
S'maxDepth'
p5865
S'max_depth'
p5866
g593
I0
I0
I01
Ntp5867
a(S'float'
p5868
S'skipProb'
p5869
S'skip_prob'
p5870
g593
I0
I0
I01
Ntp5871
a(S'TRandomGenerator'
p5872
S'randomGenerator'
p5873
S'random_generator'
p5874
g593
I0
I0
I00
Ntp5875
ag110
asg29
(dp5876
sbsS'TImputer_model'
p5877
(i__main__
ClassDefinition
p5878
(dp5879
g4
I1
sg5
I01
sg6
g5877
sg7
S'TImputer'
p5880
sg9
I00
sg10
(lp5881
sg12
(lp5882
(S'TClassifierList'
p5883
S'models'
p5884
g5884
S'classifiers'
p5885
I0
I0
I00
Ntp5886
asg29
(dp5887
sbsS'TLogRegLearner'
p5888
(i__main__
ClassDefinition
p5889
(dp5890
g4
I1
sg5
I01
sg6
g5888
sg7
S'TLearner'
p5891
sg9
I00
sg10
(lp5892
sg12
(lp5893
(S'TLogRegFitter'
p5894
S'fitter'
p5895
g5895
S'fits beta coefficients and calculates beta errors.'
p5896
I0
I0
I00
Ntp5897
a(S'TImputerConstructor'
p5898
S'imputerConstructor'
p5899
S'imputer_constructor'
p5900
S'if present, it constructs an imputer for unknown values'
p5901
I0
I0
I00
Ntp5902
a(S'TDomainContinuizer'
p5903
S'domainContinuizer'
p5904
S'domain_continuizer'
p5905
S'if present, it constructs continuous domain if needed; if absent, default is used'
p5906
I0
I0
I00
Ntp5907
ag110
asg29
(dp5908
sbsS'TPreprocessor_takeMissing'
p5909
(i__main__
ClassDefinition
p5910
(dp5911
g4
I1
sg5
I01
sg6
g5909
sg7
S'TPreprocessor'
p5912
sg9
I00
sg10
(lp5913
sg12
(lp5914
sg29
(dp5915
sbsS'TMeasureAttribute_IM'
p5916
(i__main__
ClassDefinition
p5917
(dp5918
g4
I1
sg5
I01
sg6
g5916
sg7
S'TMeasureAttribute'
p5919
sg9
I00
sg10
(lp5920
sg12
(lp5921
(S'TIMConstructor'
p5922
S'IMconstructor'
p5923
g5923
S'incompatibility matrix constructor'
p5924
I0
I0
I00
Ntp5925
a(S'TColumnAssessor'
p5926
S'columnAssessor'
p5927
S'column_assessor'
p5928
S'column quality assessor'
p5929
I0
I0
I00
Ntp5930
ag923
ag928
ag933
ag938
asg29
(dp5931
sbsS'TFeatureByDistributions'
p5932
(i__main__
ClassDefinition
p5933
(dp5934
g4
I1
sg5
I01
sg6
g5932
sg7
S'TFeatureInducer'
p5935
sg9
I00
sg10
(lp5936
sg12
(lp5937
(S'TClustersFromDistributions'
p5938
S'clustersFromDistributions'
p5939
S'clusters_from_distributions'
p5940
S'clustering algorithm'
p5941
I0
I0
I00
Ntp5942
a(S'int'
p5943
S'completion'
p5944
g5944
S' decides how to determine the class for points not covered by any cluster'
p5945
I0
I0
I01
S'FeatureByDistributions_Completion'
p5946
tp5947
asg29
(dp5948
S'Completion'
p5949
(lp5950
(S'NoCompletion'
p5951
S'completion_no'
p5952
tp5953
a(S'CompletionByDefault'
p5954
S'completion_default'
p5955
tp5956
a(S'CompletionByBayes'
p5957
S'completion_bayes'
p5958
tp5959
assbsS'TExamplesDistanceConstructor_Relief'
p5960
(i__main__
ClassDefinition
p5961
(dp5962
g4
I1
sg5
I01
sg6
g5960
sg7
S'TExamplesDistanceConstructor'
p5963
sg9
I00
sg10
(lp5964
sg12
(lp5965
g1367
asg29
(dp5966
sbsS'TRuleStoppingCriteria_Python'
p5967
(i__main__
ClassDefinition
p5968
(dp5969
g4
I1
sg5
I01
sg6
g5967
sg7
S'TRuleStoppingCriteria'
p5970
sg9
I00
sg10
(lp5971
sg12
(lp5972
sg29
(dp5973
sbsS'TRemoveUnusedValues'
p5974
(i__main__
ClassDefinition
p5975
(dp5976
g4
I1
sg5
I01
sg6
g5974
sg7
S'TOrange'
p5977
sg9
I00
sg10
(lp5978
sg12
(lp5979
(S'bool'
p5980
S'removeOneValued'
p5981
S'remove_one_valued'
p5982
S'if true (default is false), one valued attributes are also removed'
p5983
I0
I0
I01
Ntp5984
asg29
(dp5985
sbsS'TExamplesDistance_Normalized'
p5986
(i__main__
ClassDefinition
p5987
(dp5988
g4
I1
sg5
I01
sg6
g5986
sg7
S'TExamplesDistance'
p5989
sg9
I01
sg10
(lp5990
sg12
(lp5991
g447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp5992
sbsS'TC45TreeNode'
p5993
(i__main__
ClassDefinition
p5994
(dp5995
g4
I1
sg5
I01
sg6
g5993
sg7
S'TOrange'
p5996
sg9
I00
sg10
(lp5997
sg12
(lp5998
(S'int'
p5999
S'nodeType'
p6000
S'node_type'
p6001
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p6002
I0
I0
I01
S'C45TreeNode_NodeType'
p6003
tp6004
a(S'TValue'
p6005
S'leaf'
p6006
g6006
S'most frequent class at this node'
p6007
I0
I0
I01
Ntp6008
a(S'float'
p6009
S'items'
p6010
g6010
S'no of items at this node'
p6011
I0
I0
I01
Ntp6012
a(S'TDiscDistribution'
p6013
S'classDist'
p6014
S'class_dist'
p6015
S'class distribution of items'
p6016
I0
I0
I00
Ntp6017
a(S'TVariable'
p6018
S'tested'
p6019
g6019
S'attribute referenced in test'
p6020
I0
I0
I00
Ntp6021
a(S'float'
p6022
S'cut'
p6023
g6023
S'threshold for continuous attribute'
p6024
I0
I0
I01
Ntp6025
a(S'float'
p6026
S'lower'
p6027
g6027
S'lower limit of soft threshold'
p6028
I0
I0
I01
Ntp6029
a(S'float'
p6030
S'upper'
p6031
g6031
S'upper limit of soft threshold'
p6032
I0
I0
I01
Ntp6033
a(S'TIntList'
p6034
S'mapping'
p6035
g6035
S'mapping for discrete value'
p6036
I0
I0
I00
Ntp6037
a(S'TC45TreeNodeList'
p6038
S'branch'
p6039
g6039
S'branch[x] = (sub)tree for outcome x */'
p6040
I0
I0
I00
Ntp6041
asg29
(dp6042
S'NodeType'
p6043
(lp6044
(S'Leaf'
p6045
S'0'
p6046
tp6047
a(S'Branch'
p6048
I1
tp6049
a(S'Cut'
p6050
I2
tp6051
a(S'Subset'
p6052
I3
tp6053
assbsS'TDistributionAssessor_Measure'
p6054
(i__main__
ClassDefinition
p6055
(dp6056
g4
I1
sg5
I01
sg6
g6054
sg7
S'TDistributionAssessor'
p6057
sg9
I00
sg10
(lp6058
sg12
(lp6059
(S'TMeasureAttribute'
p6060
S'measure'
p6061
g6061
S'attribute quality measure'
p6062
I0
I0
I00
Ntp6063
asg29
(dp6064
sbsS'TIMConstructor'
p6065
(i__main__
ClassDefinition
p6066
(dp6067
g4
I1
sg5
I01
sg6
g6065
sg7
S'TOrange'
p6068
sg9
I01
sg10
(lp6069
sg12
(lp6070
g1246
asg29
(dp6071
sbsS'TRuleFinder_Python'
p6072
(i__main__
ClassDefinition
p6073
(dp6074
g4
I1
sg5
I01
sg6
g6072
sg7
S'TRuleFinder'
p6075
sg9
I00
sg10
(lp6076
sg12
(lp6077
g3962
ag3965
asg29
(dp6078
sbsS'TTabDelimExampleGenerator'
p6079
(i__main__
ClassDefinition
p6080
(dp6081
g4
I1
sg5
I01
sg6
g6079
sg7
S'TFileExampleGenerator'
p6082
sg9
I00
sg10
(lp6083
sg12
(lp6084
(S'TIntList'
p6085
S'attributeTypes'
p6086
S'attribute_types'
p6087
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6088
I0
I0
I00
Ntp6089
a(S'int'
p6090
S'classPos'
p6091
S'class_pos'
p6092
S'position of the class attribute'
p6093
I0
I0
I01
Ntp6094
a(S'TIntList'
p6095
S'classPoses'
p6096
S'class_poses'
p6097
S'positions of class attributes if there are multiple; otherwise None'
p6098
I0
I0
I00
Ntp6099
a(S'int'
p6100
S'basketPos'
p6101
S'basket_pos'
p6102
S'position of the (virtual) basket attribute'
p6103
I0
I0
I01
Ntp6104
a(S'int'
p6105
S'headerLines'
p6106
S'header_lines'
p6107
S'number of header lines (3 for .tab, 1 for .txt)'
p6108
I0
I0
I01
Ntp6109
a(S'bool'
p6110
S'csv'
p6111
g6111
S"also allow ',' as a separator"
p6112
I0
I0
I01
Ntp6113
a(S'TBasketFeeder'
p6114
S'basketFeeder'
p6115
S'basket_feeder'
p6116
S'takes care of inserting the meta attributes from the basket if need be'
p6117
I0
I0
I00
Ntp6118
ag1575
ag1580
ag1585
ag299
ag303
asg29
(dp6119
sbsS'TRandomClassifier'
p6120
(i__main__
ClassDefinition
p6121
(dp6122
g4
I1
sg5
I01
sg6
g6120
sg7
S'TClassifier'
p6123
sg9
I00
sg10
(lp6124
sg12
(lp6125
(S'TDistribution'
p6126
S'probabilities'
p6127
g6127
S'probabilities of predictions'
p6128
I0
I0
I00
Ntp6129
ag94
ag99
asg29
(dp6130
sbsS'TkNNLearner'
p6131
(i__main__
ClassDefinition
p6132
(dp6133
g4
I1
sg5
I01
sg6
g6131
sg7
S'TLearner'
p6134
sg9
I00
sg10
(lp6135
sg12
(lp6136
(S'float'
p6137
g1205
g1205
S'number of neighbours (0 for sqrt of #examples)'
p6138
I0
I0
I01
Ntp6139
a(S'bool'
p6140
S'rankWeight'
p6141
S'rank_weight'
p6142
S'enable weighting by ranks'
p6143
I0
I0
I01
Ntp6144
a(S'TExamplesDistanceConstructor'
p6145
S'distanceConstructor'
p6146
S'distance_constructor'
p6147
S'metrics'
p6148
I0
I0
I00
Ntp6149
ag110
asg29
(dp6150
sbsS'TTreeDescender_UnknownToNode'
p6151
(i__main__
ClassDefinition
p6152
(dp6153
g4
I1
sg5
I01
sg6
g6151
sg7
g1537
sg9
I0
sg10
(lp6154
sg12
(lp6155
sg29
(dp6156
sbsS'TIntFloatList'
p6157
(ipyprops
ClassDefinition
p6158
(dp6159
g4
I0
sg5
I01
sg6
g6157
sg7
g136
sg9
I0
sg10
(lp6160
sg12
(lp6161
sg29
(dp6162
sbsS'TDistributionAssessor_mf'
p6163
(i__main__
ClassDefinition
p6164
(dp6165
g4
I1
sg5
I01
sg6
g6163
sg7
S'TDistributionAssessor'
p6166
sg9
I00
sg10
(lp6167
sg12
(lp6168
(S'float'
p6169
g1209
g1209
S'm for m-estimate'
p6170
I0
I0
I01
Ntp6171
asg29
(dp6172
sbsS'TExampleClusters'
p6173
(i__main__
ClassDefinition
p6174
(dp6175
g4
I1
sg5
I01
sg6
g6173
sg7
S'TGeneralExampleClustering'
p6176
sg9
I00
sg10
(lp6177
sg12
(lp6178
(S'TExampleCluster'
p6179
S'root'
p6180
g6180
S'root of cluster hierarchy'
p6181
I0
I0
I00
Ntp6182
a(S'float'
p6183
S'quality'
p6184
g6184
S"'quality' of clustering"
p6185
I0
I0
I01
Ntp6186
asg29
(dp6187
sbsS'TExamplesDistance_Python'
p6188
(i__main__
ClassDefinition
p6189
(dp6190
g4
I1
sg5
I01
sg6
g6188
sg7
S'TExamplesDistance'
p6191
sg9
I00
sg10
(lp6192
sg12
(lp6193
sg29
(dp6194
sbsS'TCostLearner'
p6195
(i__main__
ClassDefinition
p6196
(dp6197
g4
I1
sg5
I01
sg6
g6195
sg7
S'TMajorityLearner'
p6198
sg9
I00
sg10
(lp6199
sg12
(lp6200
(S'TCostMatrix'
p6201
S'cost'
p6202
g6202
S'cost matrix'
p6203
I0
I0
I00
Ntp6204
ag4085
ag4090
ag110
asg29
(dp6205
sbsS'TEFMDataDescription'
p6206
(i__main__
ClassDefinition
p6207
(dp6208
g4
I1
sg5
I01
sg6
g6206
sg7
S'TOrange'
p6209
sg9
I00
sg10
(lp6210
S'domainDistributions'
p6211
asg12
(lp6212
(S'TDomain'
p6213
S'domain'
p6214
g6214
S'domain'
p6215
I01
I0
I00
Ntp6216
asg29
(dp6217
sbsS'TClassifierFD'
p6218
(i__main__
ClassDefinition
p6219
(dp6220
g4
I1
sg5
I01
sg6
g6218
sg7
S'TClassifier'
p6221
sg9
I00
sg10
(lp6222
sg12
(lp6223
g284
ag94
ag99
asg29
(dp6224
sbsS'TPreprocessor_drop'
p6225
(i__main__
ClassDefinition
p6226
(dp6227
g4
I1
sg5
I01
sg6
g6225
sg7
S'TPreprocessor'
p6228
sg9
I00
sg10
(lp6229
sg12
(lp6230
(S'TVariableFilterMap'
p6231
S'values'
p6232
g6232
S'variable-filter pairs'
p6233
I0
I0
I00
Ntp6234
a(S'bool'
p6235
S'conjunction'
p6236
g6236
S'decides whether to take conjunction or disjunction of values'
p6237
I0
I0
I01
Ntp6238
asg29
(dp6239
sbsS'TTreeDescender_UnknownToCommonBranch'
p6240
(i__main__
ClassDefinition
p6241
(dp6242
g4
I1
sg5
I01
sg6
g6240
sg7
g1537
sg9
I0
sg10
(lp6243
sg12
(lp6244
sg29
(dp6245
sbsS'TPreprocessor_addNoise'
p6246
(i__main__
ClassDefinition
p6247
(dp6248
g4
I1
sg5
I01
sg6
g6246
sg7
S'TPreprocessor'
p6249
sg9
I00
sg10
(lp6250
sg12
(lp6251
(S'TVariableFloatMap'
p6252
S'proportions'
p6253
g6253
S'proportion of changed values for individual attributes'
p6254
I0
I0
I00
Ntp6255
a(S'float'
p6256
S'defaultProportion'
p6257
S'default_proportion'
p6258
S'default proportion of changed values (for attributes not specified above)'
p6259
I0
I0
I01
Ntp6260
a(S'TRandomGenerator'
p6261
S'randomGenerator'
p6262
S'random_generator'
p6263
S'random number generator'
p6264
I0
I0
I00
Ntp6265
asg29
(dp6266
sbsS'TStopIMClusteringByAssessor_binary'
p6267
(i__main__
ClassDefinition
p6268
(dp6269
g4
I1
sg5
I01
sg6
g6267
sg7
S'TStopIMClusteringByAssessor'
p6270
sg9
I00
sg10
(lp6271
sg12
(lp6272
sg29
(dp6273
sbsS'TColumnAssessor_mf'
p6274
(i__main__
ClassDefinition
p6275
(dp6276
g4
I1
sg5
I01
sg6
g6274
sg7
S'TColumnAssessor'
p6277
sg9
I00
sg10
(lp6278
sg12
(lp6279
(S'float'
p6280
g1209
g1209
S'm for m-estimate'
p6281
I0
I0
I01
Ntp6282
asg29
(dp6283
sbsS'TExamplesDistanceConstructor'
p6284
(i__main__
ClassDefinition
p6285
(dp6286
g4
I1
sg5
I01
sg6
g6284
sg7
S'TOrange'
p6287
sg9
I01
sg10
(lp6288
sg12
(lp6289
g1367
asg29
(dp6290
sbsS'TSubsetsGenerator'
p6291
(i__main__
ClassDefinition
p6292
(dp6293
g4
I1
sg5
I01
sg6
g6291
sg7
S'TOrange'
p6294
sg9
I01
sg10
(lp6295
sg12
(lp6296
g200
asg29
(dp6297
sbsS'TPreprocessor_addCensorWeight'
p6298
(i__main__
ClassDefinition
p6299
(dp6300
g4
I1
sg5
I01
sg6
g6298
sg7
S'TPreprocessor'
p6301
sg9
I00
sg10
(lp6302
sg12
(lp6303
(S'TVariable'
p6304
S'outcomeVar'
p6305
S'outcome_var'
p6306
S'outcome variable'
p6307
I0
I0
I00
Ntp6308
a(S'TVariable'
p6309
S'timeVar'
p6310
S'time_var'
p6311
S'time variable'
p6312
I0
I0
I00
Ntp6313
a(S'TValue'
p6314
S'eventValue'
p6315
S'event_value'
p6316
S'event (fail) value'
p6317
I0
I0
I01
Ntp6318
a(S'int'
p6319
S'method'
p6320
g6320
S' weighting method'
p6321
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6322
tp6323
a(S'float'
p6324
S'maxTime'
p6325
S'max_time'
p6326
S'maximal time'
p6327
I0
I0
I01
Ntp6328
a(S'bool'
p6329
S'addComplementary'
p6330
S'add_complementary'
p6331
S'if true (default is false), complementary examples are added for censored examples'
p6332
I0
I0
I01
Ntp6333
asg29
(dp6334
S'Method'
p6335
(lp6336
(S'Linear'
p6337
S'TPreprocessor_addCensorWeight::linear'
p6338
tp6339
a(S'KM'
p6340
S'TPreprocessor_addCensorWeight::km'
p6341
tp6342
a(S'Bayes'
p6343
S'TPreprocessor_addCensorWeight::bayes'
p6344
tp6345
assbsS'TRuleBeamCandidateSelector_Python'
p6346
(i__main__
ClassDefinition
p6347
(dp6348
g4
I1
sg5
I01
sg6
g6346
sg7
S'TRuleBeamCandidateSelector'
p6349
sg9
I00
sg10
(lp6350
sg12
(lp6351
sg29
(dp6352
sbsS'TIntList'
p6353
(ipyprops
ClassDefinition
p6354
(dp6355
g4
I0
sg5
I01
sg6
g6353
sg7
g136
sg9
I0
sg10
(lp6356
sg12
(lp6357
sg29
(dp6358
sbsS'TEntropyDiscretization'
p6359
(i__main__
ClassDefinition
p6360
(dp6361
g4
I1
sg5
I01
sg6
g6359
sg7
S'TDiscretization'
p6362
sg9
I00
sg10
(lp6363
sg12
(lp6364
(S'int'
p6365
S'maxNumberOfIntervals'
p6366
(g6366
g1015
tp6367
S' maximal number of intervals; default = 0 (no limits)'
p6368
I0
I0
I01
Ntp6369
a(S'bool'
p6370
S'forceAttribute'
p6371
(g6371
S'forced'
p6372
tp6373
S' minimal number of intervals; default = 0 (no limits)'
p6374
I0
I0
I01
Ntp6375
asg29
(dp6376
sbsS'TIMBySorting'
p6377
(i__main__
ClassDefinition
p6378
(dp6379
g4
I1
sg5
I01
sg6
g6377
sg7
S'TIMConstructor'
p6380
sg9
I00
sg10
(lp6381
sg12
(lp6382
g1246
asg29
(dp6383
sbsS'TImputerConstructor_asValue'
p6384
(i__main__
ClassDefinition
p6385
(dp6386
g4
I1
sg5
I01
sg6
g6384
sg7
S'TImputerConstructor'
p6387
sg9
I00
sg10
(lp6388
sg12
(lp6389
g157
asg29
(dp6390
sbsS'TTreeDescender_UnknownMergeAsSelector'
p6391
(i__main__
ClassDefinition
p6392
(dp6393
g4
I1
sg5
I01
sg6
g6391
sg7
g1537
sg9
I0
sg10
(lp6394
sg12
(lp6395
sg29
(dp6396
sbsS'TExampleDistVector'
p6397
(i__main__
ClassDefinition
p6398
(dp6399
g4
I1
sg5
I01
sg6
g6397
sg7
S'TOrange'
p6400
sg9
I00
sg10
(lp6401
sg12
(lp6402
sg29
(dp6403
sbsS'TConditionalProbabilityEstimatorList'
p6404
(ipyprops
ClassDefinition
p6405
(dp6406
g4
I0
sg5
I01
sg6
g6404
sg7
g136
sg9
I0
sg10
(lp6407
sg12
(lp6408
sg29
(dp6409
sbsS'TRuleBeamFilter_Width'
p6410
(i__main__
ClassDefinition
p6411
(dp6412
g4
I1
sg5
I01
sg6
g6410
sg7
S'TRuleBeamFilter'
p6413
sg9
I00
sg10
(lp6414
sg12
(lp6415
(S'int'
p6416
S'width'
p6417
g6417
g593
I0
I0
I01
Ntp6418
asg29
(dp6419
sbsS'TProbabilityEstimator'
p6420
(i__main__
ClassDefinition
p6421
(dp6422
g4
I1
sg5
I01
sg6
g6420
sg7
S'TOrange'
p6423
sg9
I01
sg10
(lp6424
sg12
(lp6425
g1515
ag1520
asg29
(dp6426
sbsS'TMeasureAttribute_info'
p6427
(i__main__
ClassDefinition
p6428
(dp6429
g4
I1
sg5
I01
sg6
g6427
sg7
S'TMeasureAttributeFromProbabilities'
p6430
sg9
I00
sg10
(lp6431
sg12
(lp6432
g907
ag912
ag918
ag923
ag928
ag933
ag938
asg29
(dp6433
sbsS'TRuleStoppingCriteria'
p6434
(i__main__
ClassDefinition
p6435
(dp6436
g4
I1
sg5
I01
sg6
g6434
sg7
S'TOrange'
p6437
sg9
I01
sg10
(lp6438
sg12
(lp6439
sg29
(dp6440
sbsS'TImputerConstructor_model'
p6441
(i__main__
ClassDefinition
p6442
(dp6443
g4
I1
sg5
I01
sg6
g6441
sg7
S'TImputerConstructor'
p6444
sg9
I00
sg10
(lp6445
sg12
(lp6446
(S'TLearner'
p6447
S'learnerDiscrete'
p6448
S'learner_discrete'
p6449
S'learner for discrete attributes'
p6450
I0
I0
I00
Ntp6451
a(S'TLearner'
p6452
S'learnerContinuous'
p6453
S'learner_continuous'
p6454
S'learner for continuous attributes'
p6455
I0
I0
I00
Ntp6456
a(S'bool'
p6457
S'useClass'
p6458
S'use_class'
p6459
S'tells whether to use class value in imputation (default: false)'
p6460
I0
I0
I01
Ntp6461
ag157
asg29
(dp6462
sbsS'TFindNearestConstructor_BruteForce'
p6463
(i__main__
ClassDefinition
p6464
(dp6465
g4
I1
sg5
I01
sg6
g6463
sg7
S'TFindNearestConstructor'
p6466
sg9
I00
sg10
(lp6467
sg12
(lp6468
g1807
ag1812
asg29
(dp6469
sbsS'TImputerConstructor'
p6470
(i__main__
ClassDefinition
p6471
(dp6472
g4
I1
sg5
I01
sg6
g6470
sg7
S'TOrange'
p6473
sg9
I01
sg10
(lp6474
sg12
(lp6475
g157
asg29
(dp6476
sbsS'TPreprocessor'
p6477
(i__main__
ClassDefinition
p6478
(dp6479
g4
I1
sg5
I01
sg6
g6477
sg7
S'TOrange'
p6480
sg9
I01
sg10
(lp6481
sg12
(lp6482
sg29
(dp6483
sbsS'TDiscretizer'
p6484
(i__main__
ClassDefinition
p6485
(dp6486
g4
I1
sg5
I01
sg6
g6484
sg7
S'TTransformValue'
p6487
sg9
I01
sg10
(lp6488
sg12
(lp6489
g798
asg29
(dp6490
sbsS'TIMByRowsPreprocessor'
p6491
(i__main__
ClassDefinition
p6492
(dp6493
g4
I1
sg5
I01
sg6
g6491
sg7
S'TOrange'
p6494
sg9
I01
sg10
(lp6495
sg12
(lp6496
sg29
(dp6497
sbsS'TTreeStopCriteria_common'
p6498
(i__main__
ClassDefinition
p6499
(dp6500
g4
I1
sg5
I01
sg6
g6498
sg7
S'TTreeStopCriteria'
p6501
sg9
I00
sg10
(lp6502
sg12
(lp6503
(S'float'
p6504
S'maxMajority'
p6505
S'max_majority'
p6506
S'a maximal proportion of majority class for division to continue'
p6507
I0
I0
I01
Ntp6508
a(S'float'
p6509
S'minExamples'
p6510
S'min_examples'
p6511
S'a minimal number of examples for division to continue'
p6512
I0
I0
I01
Ntp6513
asg29
(dp6514
sbsS'TTreeStopCriteria_Python'
p6515
(i__main__
ClassDefinition
p6516
(dp6517
g4
I1
sg5
I01
sg6
g6515
sg7
S'TTreeStopCriteria'
p6518
sg9
I00
sg10
(lp6519
sg12
(lp6520
sg29
(dp6521
sbsS'TExamplesDistanceConstructor_Maximal'
p6522
(i__main__
ClassDefinition
p6523
(dp6524
g4
I1
sg5
I01
sg6
g6522
sg7
S'TExamplesDistanceConstructor_Normalized'
p6525
sg9
I00
sg10
(lp6526
sg12
(lp6527
g2035
ag2040
ag1367
asg29
(dp6528
sbsS'TIGByIM'
p6529
(i__main__
ClassDefinition
p6530
(dp6531
g4
I1
sg5
I01
sg6
g6529
sg7
S'TIGConstructor'
p6532
sg9
I00
sg10
(lp6533
sg12
(lp6534
(S'TIMConstructor'
p6535
S'IMconstructor'
p6536
g6536
S'IM constructor'
p6537
I0
I0
I00
Ntp6538
asg29
(dp6539
sbsS'TRuleEvaluator_LRS'
p6540
(i__main__
ClassDefinition
p6541
(dp6542
g4
I1
sg5
I01
sg6
g6540
sg7
S'TRuleEvaluator'
p6543
sg9
I00
sg10
(lp6544
sg12
(lp6545
(S'TRuleList'
p6546
S'rules'
p6547
g6547
g593
I0
I0
I00
Ntp6548
a(S'bool'
p6549
S'storeRules'
p6550
S'store_rules'
p6551
g593
I0
I0
I01
Ntp6552
asg29
(dp6553
sbs.