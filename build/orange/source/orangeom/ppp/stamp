(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TSammonStress'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I0
sg6
g112
sg7
S'TStressFunc'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
sg29
(dp118
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p119
(i__main__
ClassDefinition
p120
(dp121
g4
I1
sg5
I01
sg6
g119
sg7
S'TConditionalProbabilityEstimator'
p122
sg9
I00
sg10
(lp123
sg12
(lp124
(S'TContingency'
p125
S'probabilities'
p126
g126
S'Contingency that stores conditional probabilities'
p127
I0
I0
I00
Ntp128
a(S'bool'
p129
S'supportsDiscrete'
p130
S'supports_discrete'
p131
S'can estimate probabilities of discrete attributes'
p132
I01
I0
I01
Ntp133
a(S'bool'
p134
S'supportsContinuous'
p135
S'supports_continuous'
p136
S'can estimate probabilities of continuous attributes'
p137
I01
I0
I01
Ntp138
asg29
(dp139
sbsS'THeatmapList'
p140
(ipyprops
ClassDefinition
p141
(dp142
g4
I0
sg5
I01
sg6
g140
sg7
S'TOrange'
p143
sg9
I0
sg10
(lp144
sg12
(lp145
sg29
(dp146
sbsS'TFeatureInducer'
p147
(i__main__
ClassDefinition
p148
(dp149
g4
I1
sg5
I01
sg6
g147
sg7
S'TOrange'
p150
sg9
I01
sg10
(lp151
sg12
(lp152
sg29
(dp153
sbsS'TImputerConstruct_Python'
p154
(i__main__
ClassDefinition
p155
(dp156
g4
I1
sg5
I01
sg6
g154
sg7
S'TImputerConstructor'
p157
sg9
I00
sg10
(lp158
sg12
(lp159
(S'bool'
p160
S'imputeClass'
p161
S'impute_class'
p162
S'tells whether to impute the class value (default: true)'
p163
I0
I0
I01
Ntp164
asg29
(dp165
sbsS'TExampleGeneratorList'
p166
(ipyprops
ClassDefinition
p167
(dp168
g4
I0
sg5
I01
sg6
g166
sg7
g143
sg9
I0
sg10
(lp169
sg12
(lp170
sg29
(dp171
sbsS'TIMByRowsConstructor'
p172
(i__main__
ClassDefinition
p173
(dp174
g4
I1
sg5
I01
sg6
g172
sg7
S'TOrange'
p175
sg9
I01
sg10
(lp176
sg12
(lp177
sg29
(dp178
sbsS'TSubsetsGenerator_withRestrictions'
p179
(i__main__
ClassDefinition
p180
(dp181
g4
I1
sg5
I01
sg6
g179
sg7
S'TSubsetsGenerator'
p182
sg9
I00
sg10
(lp183
sg12
(lp184
(S'TSubsetsGenerator'
p185
S'subGenerator'
p186
S'sub_generator'
p187
S'subset generator'
p188
I0
I0
I00
Ntp189
a(S'TVarList'
p190
S'required'
p191
g191
S'set of required attributes'
p192
I0
I0
I00
Ntp193
a(S'TVarList'
p194
S'forbidden'
p195
g195
S'set of forbidden attributes'
p196
I0
I0
I00
Ntp197
a(S'TVarListList'
p198
S'forbiddenSubSubsets'
p199
S'forbidden_sub_subsets'
p200
S'set of forbidden subsets (attributes that must not occur together)'
p201
I0
I0
I00
Ntp202
a(S'TVarList'
p203
S'varList'
p204
S'var_list'
p205
S'a set of attributes from which subsets are generated'
p206
I0
I0
I00
Ntp207
asg29
(dp208
sbsS'TEVDistList'
p209
(ipyprops
ClassDefinition
p210
(dp211
g4
I0
sg5
I01
sg6
g209
sg7
g143
sg9
I0
sg10
(lp212
sg12
(lp213
sg29
(dp214
sbsS'TValueFilterList'
p215
(ipyprops
ClassDefinition
p216
(dp217
g4
I0
sg5
I01
sg6
g215
sg7
g143
sg9
I0
sg10
(lp218
sg12
(lp219
sg29
(dp220
sbsS'TRuleBeamFilter_Python'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TRuleBeamFilter'
p224
sg9
I00
sg10
(lp225
sg12
(lp226
sg29
(dp227
sbsS'TTreeExampleSplitter'
p228
(i__main__
ClassDefinition
p229
(dp230
g4
I1
sg5
I01
sg6
g228
sg7
S'TOrange'
p231
sg9
I01
sg10
(lp232
sg12
(lp233
sg29
(dp234
sbsS'TSVMClassifier'
p235
(i__main__
ClassDefinition
p236
(dp237
g4
I1
sg5
I01
sg6
g235
sg7
S'TClassifierFD'
p238
sg9
I00
sg10
(lp239
sg12
(lp240
(S'TIntList'
p241
S'nSV'
p242
S'n_SV'
p243
S'nSV'
p244
I0
I0
I00
Ntp245
a(S'TFloatList'
p246
S'rho'
p247
g247
S'rho'
p248
I0
I0
I00
Ntp249
a(S'TFloatListList'
p250
S'coef'
p251
g251
S'coef'
p252
I0
I0
I00
Ntp253
a(S'TFloatList'
p254
S'probA'
p255
S'prob_a'
p256
S'probA - pairwise probability information'
p257
I0
I0
I00
Ntp258
a(S'TFloatList'
p259
S'probB'
p260
S'prob_b'
p261
S'probB - pairwise probability information'
p262
I0
I0
I00
Ntp263
a(S'TExampleTable'
p264
S'supportVectors'
p265
S'support_vectors'
p266
S'support vectors'
p267
I0
I0
I00
Ntp268
a(S'TExampleTable'
p269
S'examples'
p270
g270
S'examples used to train the classifier'
p271
I0
I0
I00
Ntp272
a(S'TKernelFunc'
p273
S'kernelFunc'
p274
S'kernel_func'
p275
S'custom kernel function'
p276
I0
I0
I00
Ntp277
a(S'int'
p278
S'svm_type'
p279
g279
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p280
I0
I0
I01
S'SVMLearner_SVMType'
p281
tp282
a(S'int'
p283
S'kernel_type'
p284
g284
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p285
I0
I0
I01
S'SVMLearner_Kernel'
p286
tp287
a(S'TDomain'
p288
S'domain'
p289
g289
S'domain'
p290
I0
I0
I00
Ntp291
ag94
ag99
asg29
(dp292
sbsS'TFilteredGenerator'
p293
(i__main__
ClassDefinition
p294
(dp295
g4
I1
sg5
I01
sg6
g293
sg7
S'TAdapterGenerator'
p296
sg9
I00
sg10
(lp297
sg12
(lp298
(S'TFilter'
p299
S'filter'
p300
g300
S'decides which examples are skipped'
p301
I0
I0
I00
Ntp302
a(S'TDomain'
p303
S'domain'
p304
g304
S'domain'
p305
I0
I0
I00
Ntp306
a(S'int'
p307
S'version'
p308
g308
S'unique version identifier'
p309
I01
I0
I01
Ntp310
asg29
(dp311
sbsS'TPythonVariable'
p312
(i__main__
ClassDefinition
p313
(dp314
g4
I1
sg5
I01
sg6
g312
sg7
S'TVariable'
p315
sg9
I00
sg10
(lp316
sg12
(lp317
(S'bool'
p318
S'usePickle'
p319
S'use_pickle'
p320
S'tells whether to use pickle for saving to/loading from files'
p321
I0
I0
I01
Ntp322
a(S'bool'
p323
S'useSomeValue'
p324
S'use_some_value'
p325
S'tells whether the Variable will operate on Value or SomeValue (default)'
p326
I0
I0
I01
Ntp327
a(S'int'
p328
S'varType'
p329
S'var_type'
p330
S' variable type'
p331
I0
I0
I01
S'Variable_Type'
p332
tp333
a(S'bool'
p334
S'ordered'
p335
g335
S'variable values are ordered'
p336
I0
I0
I01
Ntp337
a(S'bool'
p338
S'distributed'
p339
g339
S'variable values are distributions'
p340
I0
I0
I01
Ntp341
a(S'int'
p342
S'defaultMetaId'
p343
S'default_meta_id'
p344
S'default (proposed, suggested...) meta id for this variable'
p345
I0
I0
I01
Ntp346
a(S'TRandomGenerator'
p347
S'randomGenerator'
p348
S'random_generator'
p349
S'random generator for random values (initialized when first needed)'
p350
I0
I0
I00
Ntp351
a(S'TVariable'
p352
S'sourceVariable'
p353
S'source_variable'
p354
S'The attribute that this attribute is computed from (when applicable)'
p355
I0
I0
I00
Ntp356
a(S'TClassifier'
p357
S'getValueFrom'
p358
S'get_value_from'
p359
S'Function to compute the value from values of other variables'
p360
I0
I0
I00
Ntp361
asg29
(dp362
sbsS'TTreeLearner'
p363
(i__main__
ClassDefinition
p364
(dp365
g4
I1
sg5
I01
sg6
g363
sg7
S'TLearner'
p366
sg9
I00
sg10
(lp367
sg12
(lp368
(S'TTreeSplitConstructor'
p369
S'split'
p370
g370
S'split criterion'
p371
I0
I0
I00
Ntp372
a(S'TTreeStopCriteria'
p373
S'stop'
p374
g374
S'stop criterion'
p375
I0
I0
I00
Ntp376
a(S'TComputeDomainContingency'
p377
S'contingencyComputer'
p378
S'contingency_computer'
p379
S'computes contingency matrix'
p380
I0
I0
I00
Ntp381
a(S'TLearner'
p382
S'nodeLearner'
p383
S'node_learner'
p384
S'node learner'
p385
I0
I0
I00
Ntp386
a(S'TTreeExampleSplitter'
p387
S'exampleSplitter'
p388
S'example_splitter'
p389
S'splits examples to branches'
p390
I0
I0
I00
Ntp391
a(S'int'
p392
S'maxDepth'
p393
S'max_depth'
p394
S'maximal tree depth (0 = root only, -1 = no limit)'
p395
I0
I0
I01
Ntp396
a(S'bool'
p397
S'storeExamples'
p398
S'store_examples'
p399
S'if true (default: false), learning examples in nodes are stored'
p400
I0
I0
I01
Ntp401
a(S'bool'
p402
S'storeDistributions'
p403
S'store_distributions'
p404
S'if true (default), class distributions of learning examples in nodes are stored'
p405
I0
I0
I01
Ntp406
a(S'bool'
p407
S'storeContingencies'
p408
S'store_contingencies'
p409
S'if true (default), contingency matrices for examples are stored'
p410
I0
I0
I01
Ntp411
a(S'bool'
p412
S'storeNodeClassifier'
p413
S'store_node_classifier'
p414
S'if true (default), the internal nodes have classifiers; needed for pruning'
p415
I0
I0
I01
Ntp416
a(S'TTreeDescender'
p417
S'descender'
p418
g418
S'descends down the tree'
p419
I0
I0
I00
Ntp420
ag110
asg29
(dp421
sbsS'TPreprocessor_shuffle'
p422
(i__main__
ClassDefinition
p423
(dp424
g4
I1
sg5
I01
sg6
g422
sg7
S'TPreprocessor'
p425
sg9
I00
sg10
(lp426
sg12
(lp427
(S'TVarList'
p428
S'attributes'
p429
g429
S'tells which attributes to shuffle'
p430
I0
I0
I00
Ntp431
a(S'TRandomGenerator'
p432
S'randomGenerator'
p433
S'random_generator'
p434
S'random number generator'
p435
I0
I0
I00
Ntp436
asg29
(dp437
sbsS'TLearner'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TOrange'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
g110
asg29
(dp444
sbsS'TExamplesDistance_Maximal'
p445
(i__main__
ClassDefinition
p446
(dp447
g4
I1
sg5
I01
sg6
g445
sg7
S'TExamplesDistance_Normalized'
p448
sg9
I00
sg10
(lp449
sg12
(lp450
(S'TAttributedFloatList'
p451
S'normalizers'
p452
g452
S'normalizing factors for attributes'
p453
I0
I0
I00
Ntp454
a(S'TAttributedFloatList'
p455
S'bases'
p456
g456
S'lowest values for attributes'
p457
I0
I0
I00
Ntp458
a(S'TAttributedFloatList'
p459
S'averages'
p460
g460
S'average values for continuous attribute values'
p461
I0
I0
I00
Ntp462
a(S'TAttributedFloatList'
p463
S'variances'
p464
g464
S'variations for continuous attribute values'
p465
I0
I0
I00
Ntp466
a(S'int'
p467
S'domainVersion'
p468
S'domain_version'
p469
S'version of domain on which the ranges were computed'
p470
I0
I0
I01
Ntp471
a(S'bool'
p472
S'normalize'
p473
g473
S'tells whether to normalize distances between attributes'
p474
I0
I0
I01
Ntp475
a(S'bool'
p476
S'ignoreUnknowns'
p477
S'ignore_unknowns'
p478
S'if true (default: false) unknown values are ignored in computation'
p479
I0
I0
I01
Ntp480
asg29
(dp481
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p482
(i__main__
ClassDefinition
p483
(dp484
g4
I1
sg5
I01
sg6
g482
sg7
S'TSubsetsGenerator_iterator'
p485
sg9
I00
sg10
(lp486
sg12
(lp487
(S'TSubsetsGenerator_iterator'
p488
S'subGenerator_iterator'
p489
S'sub_generator_iterator'
p490
S'subset generator'
p491
I0
I0
I00
Ntp492
a(S'TVarList'
p493
S'required'
p494
g494
S'set of required attributes'
p495
I0
I0
I00
Ntp496
a(S'TVarList'
p497
S'forbidden'
p498
g498
S'set of forbidden attributes'
p499
I0
I0
I00
Ntp500
a(S'TVarListList'
p501
S'forbiddenSubSubsets'
p502
S'forbidden_sub_subsets'
p503
S'set of forbidden subsets (attributes that must not occur together)'
p504
I0
I0
I00
Ntp505
a(S'TVarList'
p506
S'varList'
p507
S'var_list'
p508
S'a set of attributes from which subsets are generated'
p509
I0
I0
I00
Ntp510
asg29
(dp511
sbsS'TPreprocessor_discretize'
p512
(i__main__
ClassDefinition
p513
(dp514
g4
I1
sg5
I01
sg6
g512
sg7
S'TPreprocessor'
p515
sg9
I00
sg10
(lp516
sg12
(lp517
(S'TVarList'
p518
S'attributes'
p519
g519
S'attributes to be discretized (all, if not defined or empty)'
p520
I0
I0
I00
Ntp521
a(S'bool'
p522
S'discretizeClass'
p523
S'discretize_class'
p524
S'also discretize the class attribute (default: false)'
p525
I0
I0
I01
Ntp526
a(S'TDiscretization'
p527
S'method'
p528
g528
S'discretization method'
p529
I0
I0
I00
Ntp530
asg29
(dp531
sbsS'TLookupLearner'
p532
(i__main__
ClassDefinition
p533
(dp534
g4
I1
sg5
I01
sg6
g532
sg7
S'TLearner'
p535
sg9
I00
sg10
(lp536
sg12
(lp537
(S'TLearner'
p538
S'learnerForUnknown'
p539
S'learner_for_unknown'
p540
S'a learner for classifying cases not found in the table'
p541
I0
I0
I00
Ntp542
a(S'bool'
p543
S'allowFastLookups'
p544
S'allow_fast_lookups'
p545
S'if true, it constructs LookupClassifiers for <=3 attributes'
p546
I0
I0
I01
Ntp547
a(S'int'
p548
S'unknownsHandling'
p549
S'unknowns_handling'
p550
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p551
I0
I0
I01
Ntp552
ag110
asg29
(dp553
sbsS'TRuleClassifier_logit'
p554
(i__main__
ClassDefinition
p555
(dp556
g4
I1
sg5
I01
sg6
g554
sg7
S'TRuleClassifier'
p557
sg9
I00
sg10
(lp558
sg12
(lp559
(S'TDistribution'
p560
S'prior'
p561
g561
S'prior distribution'
p562
I0
I0
I00
Ntp563
a(S'TDomain'
p564
S'domain'
p565
g565
S'Domain'
p566
I0
I0
I00
Ntp567
a(S'TFloatList'
p568
S'ruleBetas'
p569
S'rule_betas'
p570
S'Rule betas'
p571
I0
I0
I00
Ntp572
a(S'float'
p573
S'minStep'
p574
S'min_step'
p575
S'minimal step value'
p576
I0
I0
I01
Ntp577
a(S'float'
p578
S'minSignificance'
p579
S'min_significance'
p580
S'minimum requested significance for betas. '
p581
I0
I0
I01
Ntp582
a(S'float'
p583
S'minBeta'
p584
S'min_beta'
p585
S'minimum beta by rule to be included in the model. '
p586
I0
I0
I01
Ntp587
a(S'TClassifier'
p588
S'priorClassifier'
p589
S'prior_classifier'
p590
S'prior classifier used if provided'
p591
I0
I0
I00
Ntp592
a(S'TRuleList'
p593
S'prefixRules'
p594
S'prefix_rules'
p595
S'rules that trigger before logit sum.'
p596
I0
I0
I00
Ntp597
a(S'TRuleList'
p598
S'rules'
p599
g599
S''
p600
I0
I0
I00
Ntp601
a(S'TExampleTable'
p602
S'examples'
p603
g603
g600
I0
I0
I00
Ntp604
a(S'int'
p605
S'weightID'
p606
S'weight_ID'
p607
g600
I0
I0
I01
Ntp608
ag94
ag99
asg29
(dp609
sbsS'TProgressCallback_Python'
p610
(i__main__
ClassDefinition
p611
(dp612
g4
I1
sg5
I01
sg6
g610
sg7
S'TProgressCallback'
p613
sg9
I00
sg10
(lp614
sg12
(lp615
sg29
(dp616
sbsS'TImputeClassifier'
p617
(i__main__
ClassDefinition
p618
(dp619
g4
I1
sg5
I01
sg6
g617
sg7
S'TClassifier'
p620
sg9
I00
sg10
(lp621
sg12
(lp622
(S'TClassifierFromVar'
p623
S'classifierFromVar'
p624
S'classifier_from_var'
p625
S'ClassifierFromVar that is used to retrieve defined values'
p626
I0
I0
I00
Ntp627
a(S'TClassifier'
p628
S'imputer'
p629
g629
S'classifier that is used to determine the missing values '
p630
I0
I0
I00
Ntp631
ag94
ag99
asg29
(dp632
sbsS'TRuleCovererAndRemover'
p633
(i__main__
ClassDefinition
p634
(dp635
g4
I1
sg5
I01
sg6
g633
sg7
S'TOrange'
p636
sg9
I01
sg10
(lp637
sg12
(lp638
sg29
(dp639
sbsS'TFilterList'
p640
(ipyprops
ClassDefinition
p641
(dp642
g4
I0
sg5
I01
sg6
g640
sg7
g143
sg9
I0
sg10
(lp643
sg12
(lp644
sg29
(dp645
sbsS'TPythonValue'
p646
(i__main__
ClassDefinition
p647
(dp648
g4
I1
sg5
I01
sg6
g646
sg7
S'TSomeValue'
p649
sg9
I00
sg10
(lp650
sg12
(lp651
sg29
(dp652
sbsS'TAssociationRulesSparseInducer'
p653
(i__main__
ClassDefinition
p654
(dp655
g4
I1
sg5
I01
sg6
g653
sg7
S'TOrange'
p656
sg9
I00
sg10
(lp657
sg12
(lp658
(S'int'
p659
S'maxItemSets'
p660
S'max_item_sets'
p661
S'maximal number of itemsets (increase if you want)'
p662
I0
I0
I01
Ntp663
a(S'float'
p664
S'confidence'
p665
g665
S'required confidence'
p666
I0
I0
I01
Ntp667
a(S'float'
p668
S'support'
p669
g669
S'required support'
p670
I0
I0
I01
Ntp671
a(S'bool'
p672
S'storeExamples'
p673
S'store_examples'
p674
S'stores examples corresponding to rules'
p675
I0
I0
I01
Ntp676
asg29
(dp677
sbsS'TFilter_sameExample'
p678
(i__main__
ClassDefinition
p679
(dp680
g4
I1
sg5
I01
sg6
g678
sg7
S'TFilter'
p681
sg9
I00
sg10
(lp682
sg12
(lp683
(S'TExample'
p684
S'example'
p685
g685
S'example with which examples are compared'
p686
I0
I0
I00
Ntp687
a(S'bool'
p688
S'negate'
p689
g689
S'if true, filter output should be negated.'
p690
I0
I0
I01
Ntp691
a(S'TDomain'
p692
S'domain'
p693
g693
S'domain to which the examples are converted (if needed)'
p694
I0
I0
I00
Ntp695
asg29
(dp696
sbsS'TRuleClassifierConstructor'
p697
(i__main__
ClassDefinition
p698
(dp699
g4
I1
sg5
I01
sg6
g697
sg7
S'TOrange'
p700
sg9
I01
sg10
(lp701
sg12
(lp702
sg29
(dp703
sbsS'TMakeRandomIndicesMultiple'
p704
(i__main__
ClassDefinition
p705
(dp706
g4
I1
sg5
I01
sg6
g704
sg7
S'TMakeRandomIndices'
p707
sg9
I00
sg10
(lp708
sg12
(lp709
(S'int'
p710
S'stratified'
p711
g711
S' requests stratified distributions'
p712
I0
I0
I01
S'MakeRandomIndices_Stratification'
p713
tp714
a(S'int'
p715
S'randseed'
p716
g716
S'a seed for random generator'
p717
I0
I0
I01
Ntp718
a(S'TRandomGenerator'
p719
S'randomGenerator'
p720
S'random_generator'
p721
S'a random generator'
p722
I0
I0
I00
Ntp723
asg29
(dp724
sbsS'TLearnerFD'
p725
(i__main__
ClassDefinition
p726
(dp727
g4
I1
sg5
I01
sg6
g725
sg7
S'TLearner'
p728
sg9
I00
sg10
(lp729
sg12
(lp730
(S'TDomain'
p731
S'domain'
p732
g732
S'domain'
p733
I0
I0
I00
Ntp734
ag110
asg29
(dp735
sbsS'TP2NN'
p736
(i__main__
ClassDefinition
p737
(dp738
g4
I1
sg5
I01
sg6
g736
sg7
S'TPNN'
p739
sg9
I00
sg10
(lp740
sg12
(lp741
(S'int'
p742
S'dimensions'
p743
g743
S'the number of dimensions'
p744
I01
I0
I01
Ntp745
a(S'TFloatList'
p746
S'offsets'
p747
g747
S'offsets to subtract from the attribute values'
p748
I0
I0
I00
Ntp749
a(S'TFloatList'
p750
S'normalizers'
p751
g751
S'number to divide the values by'
p752
I0
I0
I00
Ntp753
a(S'TFloatList'
p754
S'averages'
p755
g755
S'numbers to use instead of the missing'
p756
I0
I0
I00
Ntp757
a(S'bool'
p758
S'normalizeExamples'
p759
S'normalize_examples'
p760
S'if true, attribute values are divided to sum up to 1'
p761
I0
I0
I01
Ntp762
a(S'int'
p763
S'nExamples'
p764
S'n_examples'
p765
S'the number of examples'
p766
I01
I0
I01
Ntp767
a(S'int'
p768
S'law'
p769
g769
S'law'
p770
I0
I0
I01
Ntp771
ag291
ag94
ag99
asg29
(dp772
sbsS'TTreeSplitConstructor'
p773
(i__main__
ClassDefinition
p774
(dp775
g4
I1
sg5
I01
sg6
g773
sg7
S'TOrange'
p776
sg9
I01
sg10
(lp777
sg12
(lp778
(S'float'
p779
S'minSubset'
p780
S'min_subset'
p781
S'minimal number of examples in a subset'
p782
I0
I0
I01
Ntp783
asg29
(dp784
sbsS'TProbabilityEstimatorList'
p785
(ipyprops
ClassDefinition
p786
(dp787
g4
I0
sg5
I01
sg6
g785
sg7
g143
sg9
I0
sg10
(lp788
sg12
(lp789
sg29
(dp790
sbsNNsS'TMapIntValue'
p791
(i__main__
ClassDefinition
p792
(dp793
g4
I1
sg5
I01
sg6
g791
sg7
S'TTransformValue'
p794
sg9
I00
sg10
(lp795
sg12
(lp796
(S'TIntList'
p797
S'mapping'
p798
g798
S'a lookup table'
p799
I0
I0
I00
Ntp800
a(S'TTransformValue'
p801
S'subTransform'
p802
S'sub_transform'
p803
S'transformation executed prior to this'
p804
I0
I0
I00
Ntp805
asg29
(dp806
sbsS'TDistributionAssessor_Kramer'
p807
(i__main__
ClassDefinition
p808
(dp809
g4
I1
sg5
I01
sg6
g807
sg7
S'TDistributionAssessor'
p810
sg9
I00
sg10
(lp811
sg12
(lp812
sg29
(dp813
sbsS'TIM'
p814
(i__main__
ClassDefinition
p815
(dp816
g4
I1
sg5
I01
sg6
g814
sg7
S'TOrange'
p817
sg9
I00
sg10
(lp818
sg12
(lp819
(S'int'
p820
S'varType'
p821
S'var_type'
p822
S' class variable type'
p823
I0
I0
I01
S'Variable_Type'
p824
tp825
a(S'TExampleTable'
p826
S'rowExamples'
p827
S'row_examples'
p828
S'examples with free attributes for each row'
p829
I0
I0
I00
Ntp830
asg29
(dp831
sbsS'TSymMatrix'
p832
(i__main__
ClassDefinition
p833
(dp834
g4
I1
sg5
I01
sg6
g832
sg7
S'TOrange'
p835
sg9
I00
sg10
(lp836
sg12
(lp837
(S'int'
p838
S'dim'
p839
g839
S'matrix dimension'
p840
I01
I0
I01
Ntp841
a(S'int'
p842
S'matrixType'
p843
S'matrix_type'
p844
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p845
I0
I0
I01
S'SymMatrix_Shape'
p846
tp847
asg29
(dp848
S'Shape'
p849
(lp850
(S'Lower'
p851
I0
tp852
a(S'Upper'
p853
I1
tp854
a(S'Symmetric'
p855
I2
tp856
a(S'LowerFilled'
p857
I3
tp858
a(S'UpperFilled'
p859
I4
tp860
assbsS'TEVDistGetter_Standard'
p861
(i__main__
ClassDefinition
p862
(dp863
g4
I1
sg5
I01
sg6
g861
sg7
S'TEVDistGetter'
p864
sg9
I00
sg10
(lp865
sg12
(lp866
(S'TEVDistList'
p867
S'dists'
p868
g868
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p869
I0
I0
I00
Ntp870
asg29
(dp871
sbsS'TFeatureByIM'
p872
(i__main__
ClassDefinition
p873
(dp874
g4
I1
sg5
I01
sg6
g872
sg7
S'TFeatureInducer'
p875
sg9
I00
sg10
(lp876
sg12
(lp877
(S'TIMConstructor'
p878
S'IMconstructor'
p879
g879
S'incompatibility matrix constructor'
p880
I0
I0
I00
Ntp881
a(S'TClustersFromIM'
p882
S'clustersFromIM'
p883
S'clusters_from_IM'
p884
S'clustering algorithm'
p885
I0
I0
I00
Ntp886
a(S'int'
p887
S'completion'
p888
g888
S' decides how to determine the class for points not covered by any cluster'
p889
I0
I0
I01
S'FeatureByIM_Completion'
p890
tp891
asg29
(dp892
S'Completion'
p893
(lp894
(S'NoCompletion'
p895
S'completion_no'
p896
tp897
a(S'CompletionByDefault'
p898
S'completion_default'
p899
tp900
a(S'CompletionByBayes'
p901
S'completion_bayes'
p902
tp903
assbsS'TMeasureAttributeFromProbabilities'
p904
(i__main__
ClassDefinition
p905
(dp906
g4
I1
sg5
I01
sg6
g904
sg7
S'TMeasureAttribute'
p907
sg9
I01
sg10
(lp908
sg12
(lp909
(S'TProbabilityEstimatorConstructor'
p910
S'estimatorConstructor'
p911
S'estimator_constructor'
p912
S'probability estimator (none by default)'
p913
I0
I0
I00
Ntp914
a(S'TConditionalProbabilityEstimatorConstructor'
p915
S'conditionalEstimatorConstructor'
p916
S'conditional_estimator_constructor'
p917
S'conditional probability estimator (none by default)'
p918
I0
I0
I00
Ntp919
a(S'int'
p920
S'unknownsTreatment'
p921
S'unknowns_treatment'
p922
S' treatment of unknown values'
p923
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p924
tp925
a(S'int'
p926
S'needs'
p927
g927
S' describes what kind of data is needed for computation'
p928
I0
I0
I01
S'MeasureAttribute_Needs'
p929
tp930
a(S'bool'
p931
S'handlesDiscrete'
p932
S'handles_discrete'
p933
S'tells whether the measure can handle discrete attributes'
p934
I0
I0
I01
Ntp935
a(S'bool'
p936
S'handlesContinuous'
p937
S'handles_continuous'
p938
S'tells whether the measure can handle continuous attributes'
p939
I0
I0
I01
Ntp940
a(S'bool'
p941
S'computesThresholds'
p942
S'computes_thresholds'
p943
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p944
I0
I0
I01
Ntp945
asg29
(dp946
sbsS'TProbabilityEstimatorConstructor_relative'
p947
(i__main__
ClassDefinition
p948
(dp949
g4
I1
sg5
I01
sg6
g947
sg7
S'TProbabilityEstimatorConstructor'
p950
sg9
I00
sg10
(lp951
sg12
(lp952
sg29
(dp953
sbsS'TClassifierByLookupTable3'
p954
(i__main__
ClassDefinition
p955
(dp956
g4
I1
sg5
I01
sg6
g954
sg7
S'TClassifierByLookupTable'
p957
sg9
I00
sg10
(lp958
sg12
(lp959
(S'TVariable'
p960
S'variable1'
p961
g961
S'the first attribute used for classification'
p962
I01
I0
I00
Ntp963
a(S'TVariable'
p964
S'variable2'
p965
g965
S'the second attribute used for classification'
p966
I01
I0
I00
Ntp967
a(S'TVariable'
p968
S'variable3'
p969
g969
S'the third attribute used for classification'
p970
I01
I0
I00
Ntp971
a(S'int'
p972
S'noOfValues1'
p973
S'no_of_values1'
p974
S'number of values of the first attribute'
p975
I01
I0
I01
Ntp976
a(S'int'
p977
S'noOfValues2'
p978
S'no_of_values2'
p979
S'number of values of the second attribute'
p980
I01
I0
I01
Ntp981
a(S'int'
p982
S'noOfValues3'
p983
S'no_of_values3'
p984
S'number of values of the third attribute'
p985
I01
I0
I01
Ntp986
a(S'TEFMDataDescription'
p987
S'dataDescription'
p988
S'data_description'
p989
S'data description'
p990
I0
I0
I00
Ntp991
ag85
ag89
ag94
ag99
asg29
(dp992
sbsS'TThresholdCA'
p993
(i__main__
ClassDefinition
p994
(dp995
g4
I1
sg5
I01
sg6
g993
sg7
S'TOrange'
p996
sg9
I00
sg10
(lp997
sg12
(lp998
sg29
(dp999
sbsS'TRuleBeamRefiner'
p1000
(i__main__
ClassDefinition
p1001
(dp1002
g4
I1
sg5
I01
sg6
g1000
sg7
S'TOrange'
p1003
sg9
I01
sg10
(lp1004
sg12
(lp1005
sg29
(dp1006
sbsS'TSubsetsGenerator_iterator'
p1007
(i__main__
ClassDefinition
p1008
(dp1009
g4
I1
sg5
I01
sg6
g1007
sg7
S'TOrange'
p1010
sg9
I01
sg10
(lp1011
sg12
(lp1012
g510
asg29
(dp1013
sbsS'TEquiDistDiscretizer'
p1014
(i__main__
ClassDefinition
p1015
(dp1016
g4
I1
sg5
I01
sg6
g1014
sg7
S'TDiscretizer'
p1017
sg9
I00
sg10
(lp1018
sg12
(lp1019
(S'int'
p1020
S'numberOfIntervals'
p1021
(g1021
S'n'
p1022
tp1023
S' number of intervals'
p1024
I0
I0
I01
Ntp1025
a(S'float'
p1026
S'firstCut'
p1027
S'first_cut'
p1028
S'the first cut-off point'
p1029
I0
I0
I01
Ntp1030
a(S'float'
p1031
S'step'
p1032
g1032
S'step (width of interval)'
p1033
I0
I0
I01
Ntp1034
ag805
asg29
(dp1035
sbsS'TValueFilter_string'
p1036
(i__main__
ClassDefinition
p1037
(dp1038
g4
I1
sg5
I01
sg6
g1036
sg7
S'TValueFilter'
p1039
sg9
I00
sg10
(lp1040
sg12
(lp1041
(S'string'
p1042
S'min'
p1043
(g1043
S'ref'
p1044
tp1045
S' reference value (lower bound for interval operators)'
p1046
I0
I0
I01
Ntp1047
a(S'string'
p1048
S'max'
p1049
g1049
S'upper bound for interval operators'
p1050
I0
I0
I01
Ntp1051
a(S'int'
p1052
S'oper'
p1053
g1053
S' operator'
p1054
I0
I0
I01
S'ValueFilter_Operator'
p1055
tp1056
a(S'bool'
p1057
S'caseSensitive'
p1058
S'case_sensitive'
p1059
S'if true (default), the operator is case sensitive'
p1060
I0
I0
I01
Ntp1061
a(S'int'
p1062
S'position'
p1063
g1063
S"attribute's position in domain"
p1064
I0
I0
I01
Ntp1065
a(S'int'
p1066
S'acceptSpecial'
p1067
S'accept_special'
p1068
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1069
I0
I0
I01
Ntp1070
asg29
(dp1071
sbsS'TFindNearest_BruteForce'
p1072
(i__main__
ClassDefinition
p1073
(dp1074
g4
I1
sg5
I01
sg6
g1072
sg7
S'TFindNearest'
p1075
sg9
I00
sg10
(lp1076
sg12
(lp1077
(S'TExamplesDistance'
p1078
S'distance'
p1079
g1079
S'metrics'
p1080
I0
I0
I00
Ntp1081
a(S'TExampleGenerator'
p1082
S'examples'
p1083
g1083
S'a list of stored examples'
p1084
I0
I0
I00
Ntp1085
a(S'int'
p1086
S'weightID'
p1087
S'weight_ID'
p1088
S'weight to use when counting examples'
p1089
I0
I0
I01
Ntp1090
a(S'int'
p1091
S'distanceID'
p1092
S'distance_ID'
p1093
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1094
I0
I0
I01
Ntp1095
a(S'bool'
p1096
S'includeSame'
p1097
S'include_same'
p1098
S'tells whether to include examples that are same as the reference example'
p1099
I0
I0
I01
Ntp1100
asg29
(dp1101
sbsS'TRuleBeamInitializer'
p1102
(i__main__
ClassDefinition
p1103
(dp1104
g4
I1
sg5
I01
sg6
g1102
sg7
S'TOrange'
p1105
sg9
I01
sg10
(lp1106
sg12
(lp1107
sg29
(dp1108
sbsS'TMeasureAttribute_relevance'
p1109
(i__main__
ClassDefinition
p1110
(dp1111
g4
I1
sg5
I01
sg6
g1109
sg7
S'TMeasureAttributeFromProbabilities'
p1112
sg9
I00
sg10
(lp1113
sg12
(lp1114
g914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp1115
sbsS'TFilter_hasSpecial'
p1116
(i__main__
ClassDefinition
p1117
(dp1118
g4
I1
sg5
I01
sg6
g1116
sg7
S'TFilter'
p1119
sg9
I00
sg10
(lp1120
sg12
(lp1121
g691
ag695
asg29
(dp1122
sbsS'TDiscDistribution'
p1123
(i__main__
ClassDefinition
p1124
(dp1125
g4
I1
sg5
I01
sg6
g1123
sg7
S'TDistribution'
p1126
sg9
I00
sg10
(lp1127
sg12
(lp1128
(S'TFloatList'
p1129
S'variances'
p1130
g1130
S'variances'
p1131
I0
I0
I00
Ntp1132
a(S'TVariable'
p1133
S'variable'
p1134
g1134
S'attribute descriptor (optional)'
p1135
I0
I0
I00
Ntp1136
a(S'float'
p1137
S'unknowns'
p1138
g1138
S'number of unknown values'
p1139
I0
I0
I01
Ntp1140
a(S'float'
p1141
S'abs'
p1142
g1142
S'sum of frequencies (not including unknown values!)'
p1143
I0
I0
I01
Ntp1144
a(S'float'
p1145
S'cases'
p1146
g1146
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1147
I0
I0
I01
Ntp1148
a(S'bool'
p1149
S'normalized'
p1150
g1150
S'distribution is normalized'
p1151
I0
I0
I01
Ntp1152
a(S'bool'
p1153
S'supportsDiscrete'
p1154
S'supports_discrete'
p1155
S'distribution supports discrete interface'
p1156
I01
I0
I01
Ntp1157
a(S'bool'
p1158
S'supportsContinuous'
p1159
S'supports_continuous'
p1160
S'distribution supports continuous interface'
p1161
I01
I0
I01
Ntp1162
a(S'TRandomGenerator'
p1163
S'randomGenerator'
p1164
S'random_generator'
p1165
S'random generator; initialized when needed, if not given earlier'
p1166
I0
I0
I00
Ntp1167
asg29
(dp1168
sbsS'TBayesLearner'
p1169
(i__main__
ClassDefinition
p1170
(dp1171
g4
I1
sg5
I01
sg6
g1169
sg7
S'TLearner'
p1172
sg9
I00
sg10
(lp1173
sg12
(lp1174
(S'TProbabilityEstimatorConstructor'
p1175
S'estimatorConstructor'
p1176
S'estimator_constructor'
p1177
S'constructs a probability estimator for P(C)'
p1178
I0
I0
I00
Ntp1179
a(S'TConditionalProbabilityEstimatorConstructor'
p1180
S'conditionalEstimatorConstructor'
p1181
S'conditional_estimator_constructor'
p1182
S'constructs a probability estimator for P(C|A) '
p1183
I0
I0
I00
Ntp1184
a(S'TConditionalProbabilityEstimatorConstructor'
p1185
S'conditionalEstimatorConstructorContinuous'
p1186
S'conditional_estimator_constructor_continuous'
p1187
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1188
I0
I0
I00
Ntp1189
a(S'bool'
p1190
S'normalizePredictions'
p1191
S'normalize_predictions'
p1192
S'instructs learner to construct a classifier that normalizes probabilities'
p1193
I0
I0
I01
Ntp1194
a(S'bool'
p1195
S'adjustThreshold'
p1196
S'adjust_threshold'
p1197
S'adjust probability thresholds (for binary classes only)'
p1198
I0
I0
I01
Ntp1199
ag110
asg29
(dp1200
sbsS'TIMByRelief'
p1201
(i__main__
ClassDefinition
p1202
(dp1203
g4
I1
sg5
I01
sg6
g1201
sg7
S'TIMConstructor'
p1204
sg9
I00
sg10
(lp1205
sg12
(lp1206
(S'TExamplesDistance_Relief'
p1207
S'distance'
p1208
g1208
S'distance measure'
p1209
I0
I0
I00
Ntp1210
a(S'float'
p1211
S'k'
p1212
g1212
S'number of neighbours'
p1213
I0
I0
I01
Ntp1214
a(S'float'
p1215
S'm'
p1216
g1216
S'number of reference examples'
p1217
I0
I0
I01
Ntp1218
a(S'float'
p1219
S'kFromColumns'
p1220
S'k_from_columns'
p1221
S'if positive, number of neighbours is #columns*kFromColumns'
p1222
I0
I0
I01
Ntp1223
a(S'bool'
p1224
S'ignoreSameExample'
p1225
S'ignore_same_example'
p1226
S'does not put reference example into M'
p1227
I0
I0
I01
Ntp1228
a(S'bool'
p1229
S'convertToBinary'
p1230
S'convert_to_binary'
p1231
S'convert to binary class (hit-miss)'
p1232
I0
I0
I01
Ntp1233
a(S'bool'
p1234
S'correctClassFirst'
p1235
S'correct_class_first'
p1236
S'puts the correct class proportion to the first place'
p1237
I0
I0
I01
Ntp1238
a(S'bool'
p1239
S'allExamples'
p1240
S'all_examples'
p1241
S'uses all examples for reference examples'
p1242
I0
I0
I01
Ntp1243
a(S'bool'
p1244
S'allSameNeighbours'
p1245
S'all_same_neighbours'
p1246
S'uses all the examples same to the reference as neighbours'
p1247
I0
I0
I01
Ntp1248
a(S'bool'
p1249
S'recordRowExamples'
p1250
S'record_row_examples'
p1251
S'enables creation of rowExample list'
p1252
I0
I0
I01
Ntp1253
asg29
(dp1254
sbsS'TConditionalProbabilityEstimator'
p1255
(i__main__
ClassDefinition
p1256
(dp1257
g4
I1
sg5
I01
sg6
g1255
sg7
S'TOrange'
p1258
sg9
I01
sg10
(lp1259
sg12
(lp1260
g133
ag138
asg29
(dp1261
sbsS'TColumnAssessor_Laplace'
p1262
(i__main__
ClassDefinition
p1263
(dp1264
g4
I1
sg5
I01
sg6
g1262
sg7
S'TColumnAssessor'
p1265
sg9
I00
sg10
(lp1266
sg12
(lp1267
sg29
(dp1268
sbsS'TPreprocessor_addGaussianNoise'
p1269
(i__main__
ClassDefinition
p1270
(dp1271
g4
I1
sg5
I01
sg6
g1269
sg7
S'TPreprocessor'
p1272
sg9
I00
sg10
(lp1273
sg12
(lp1274
(S'TVariableFloatMap'
p1275
S'deviations'
p1276
g1276
S'deviations individual attribute values'
p1277
I0
I0
I00
Ntp1278
a(S'float'
p1279
S'defaultDeviation'
p1280
S'default_deviation'
p1281
S'default deviation'
p1282
I0
I0
I01
Ntp1283
a(S'TRandomGenerator'
p1284
S'randomGenerator'
p1285
S'random_generator'
p1286
S'random number generator'
p1287
I0
I0
I00
Ntp1288
asg29
(dp1289
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1290
(i__main__
ClassDefinition
p1291
(dp1292
g4
I1
sg5
I01
sg6
g1290
sg7
S'TRuleStoppingCriteria'
p1293
sg9
I00
sg10
(lp1294
sg12
(lp1295
sg29
(dp1296
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1297
(i__main__
ClassDefinition
p1298
(dp1299
g4
I1
sg5
I01
sg6
g1297
sg7
S'TTreeSplitConstructor_Measure'
p1300
sg9
I00
sg10
(lp1301
sg12
(lp1302
(S'TMeasureAttribute'
p1303
S'measure'
p1304
g1304
S'attribute quality measure'
p1305
I0
I0
I00
Ntp1306
a(S'float'
p1307
S'worstAcceptable'
p1308
S'worst_acceptable'
p1309
S'the worst acceptable quality of the attribute'
p1310
I0
I0
I01
Ntp1311
ag783
asg29
(dp1312
sbsS'TMeasureAttribute_relief'
p1313
(i__main__
ClassDefinition
p1314
(dp1315
g4
I1
sg5
I01
sg6
g1313
sg7
S'TMeasureAttribute'
p1316
sg9
I00
sg10
(lp1317
sg12
(lp1318
(S'float'
p1319
g1212
g1212
S'number of neighbours'
p1320
I0
I0
I01
Ntp1321
a(S'float'
p1322
g1216
g1216
S'number of reference examples'
p1323
I0
I0
I01
Ntp1324
a(S'bool'
p1325
S'checkCachedData'
p1326
S'check_cached_data'
p1327
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p1328
I0
I0
I01
Ntp1329
ag930
ag935
ag940
ag945
asg29
(dp1330
sbsS'TFilter_compatibleExample'
p1331
(i__main__
ClassDefinition
p1332
(dp1333
g4
I1
sg5
I01
sg6
g1331
sg7
S'TFilter'
p1334
sg9
I00
sg10
(lp1335
sg12
(lp1336
(S'TExample'
p1337
S'example'
p1338
g1338
S'example with which examples are compared'
p1339
I0
I0
I00
Ntp1340
ag691
ag695
asg29
(dp1341
sbsS'TRemoveRedundant'
p1342
(i__main__
ClassDefinition
p1343
(dp1344
g4
I1
sg5
I01
sg6
g1342
sg7
S'TOrange'
p1345
sg9
I01
sg10
(lp1346
sg12
(lp1347
(S'bool'
p1348
S'keepValues'
p1349
S'keep_values'
p1350
S'keep an attribute if number values is only smaller, not one'
p1351
I0
I0
I01
Ntp1352
asg29
(dp1353
sbsS'TExamplesDistanceConstructor_Hamming'
p1354
(i__main__
ClassDefinition
p1355
(dp1356
g4
I1
sg5
I01
sg6
g1354
sg7
S'TExamplesDistanceConstructor'
p1357
sg9
I00
sg10
(lp1358
sg12
(lp1359
(S'bool'
p1360
S'ignoreClass'
p1361
S'ignore_class'
p1362
S'if true (default), class value is ignored when computing distances'
p1363
I0
I0
I01
Ntp1364
a(S'bool'
p1365
S'ignoreUnknowns'
p1366
S'ignore_unknowns'
p1367
S'if true (default: false) unknown values are ignored in computation'
p1368
I0
I0
I01
Ntp1369
a(S'bool'
p1370
S'ignoreClass'
p1371
S'ignore_class'
p1372
S'if true (default), class value is ignored when computing distances'
p1373
I0
I0
I01
Ntp1374
asg29
(dp1375
sbsS'TSomeValue'
p1376
(i__main__
ClassDefinition
p1377
(dp1378
g4
I1
sg5
I01
sg6
g1376
sg7
S'TOrange'
p1379
sg9
I01
sg10
(lp1380
sg12
(lp1381
sg29
(dp1382
sbsS'TRuleClassifierConstructor_firstRule'
p1383
(i__main__
ClassDefinition
p1384
(dp1385
g4
I1
sg5
I01
sg6
g1383
sg7
S'TRuleClassifierConstructor'
p1386
sg9
I00
sg10
(lp1387
sg12
(lp1388
sg29
(dp1389
sbsS'TStressFunc'
p1390
(i__main__
ClassDefinition
p1391
(dp1392
g4
I1
sg5
I0
sg6
g1390
sg7
S'TOrange'
p1393
sg9
I01
sg10
(lp1394
sg12
(lp1395
sg29
(dp1396
sbsS'TStopDistributionClustering_noProfit'
p1397
(i__main__
ClassDefinition
p1398
(dp1399
g4
I1
sg5
I01
sg6
g1397
sg7
S'TStopDistributionClustering'
p1400
sg9
I00
sg10
(lp1401
sg12
(lp1402
(S'float'
p1403
S'minProfitProportion'
p1404
S'min_profit_proportion'
p1405
S'minimal allowable profit proportion'
p1406
I0
I0
I01
Ntp1407
asg29
(dp1408
sbsS'TBiModalDiscretization'
p1409
(i__main__
ClassDefinition
p1410
(dp1411
g4
I1
sg5
I01
sg6
g1409
sg7
S'TDiscretization'
p1412
sg9
I00
sg10
(lp1413
sg12
(lp1414
(S'bool'
p1415
S'splitInTwo'
p1416
S'split_in_two'
p1417
S'if true (default), flanks are merged into a single interval'
p1418
I0
I0
I01
Ntp1419
asg29
(dp1420
sbsS'TColoredIG'
p1421
(i__main__
ClassDefinition
p1422
(dp1423
g4
I1
sg5
I01
sg6
g1421
sg7
S'TGeneralExampleClustering'
p1424
sg9
I00
sg10
(lp1425
sg12
(lp1426
(S'TIG'
p1427
S'ig'
p1428
g1428
S'incompatibility graph'
p1429
I0
I0
I00
Ntp1430
a(S'TIntList'
p1431
S'colors'
p1432
g1432
S'colors (one element corresponding to each ig node)'
p1433
I0
I0
I00
Ntp1434
asg29
(dp1435
sbsS'TMeasureAttribute'
p1436
(i__main__
ClassDefinition
p1437
(dp1438
g4
I1
sg5
I01
sg6
g1436
sg7
S'TOrange'
p1439
sg9
I00
sg10
(lp1440
sg12
(lp1441
g930
ag935
ag940
ag945
asg29
(dp1442
S'Needs'
p1443
(lp1444
(S'Contingency_Class'
p1445
I0
tp1446
a(S'DomainContingency'
p1447
I1
tp1448
a(S'Generator'
p1449
I2
tp1450
asS'UnknownsTreatment'
p1451
(lp1452
(S'IgnoreUnknowns'
p1453
I0
tp1454
a(S'ReduceByUnknowns'
p1455
I1
tp1456
a(S'UnknownsToCommon'
p1457
I2
tp1458
a(S'UnknownsAsValue'
p1459
I3
tp1460
assbsS'TRuleEvaluator'
p1461
(i__main__
ClassDefinition
p1462
(dp1463
g4
I1
sg5
I01
sg6
g1461
sg7
S'TOrange'
p1464
sg9
I01
sg10
(lp1465
sg12
(lp1466
sg29
(dp1467
sbsS'TStringVariable'
p1468
(i__main__
ClassDefinition
p1469
(dp1470
g4
I1
sg5
I01
sg6
g1468
sg7
S'TVariable'
p1471
sg9
I00
sg10
(lp1472
sg12
(lp1473
g333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp1474
sbsS'TAssessIMQuality'
p1475
(i__main__
ClassDefinition
p1476
(dp1477
g4
I1
sg5
I01
sg6
g1475
sg7
S'TOrange'
p1478
sg9
I00
sg10
(lp1479
sg12
(lp1480
(S'TColumnAssessor'
p1481
S'columnAssessor'
p1482
S'column_assessor'
p1483
S'column quality assessor'
p1484
I0
I0
I00
Ntp1485
asg29
(dp1486
sbsS'TGraphAsTree'
p1487
(i__main__
ClassDefinition
p1488
(dp1489
g4
I1
sg5
I01
sg6
g1487
sg7
S'TGraph'
p1490
sg9
I00
sg10
(lp1491
sg12
(lp1492
(S'int'
p1493
S'nVertices'
p1494
S'n_vertices'
p1495
S'the number of vertices'
p1496
I01
I0
I01
Ntp1497
a(S'int'
p1498
S'nEdgeTypes'
p1499
S'n_edge_types'
p1500
S'the number of edge types'
p1501
I01
I0
I01
Ntp1502
a(S'bool'
p1503
S'directed'
p1504
g1504
S'directed'
p1505
I01
I0
I01
Ntp1506
asg29
(dp1507
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1508
(i__main__
ClassDefinition
p1509
(dp1510
g4
I1
sg5
I01
sg6
g1508
sg7
S'TTreeExampleSplitter'
p1511
sg9
I00
sg10
(lp1512
sg12
(lp1513
sg29
(dp1514
sbsS'TProbabilityEstimator_FromDistribution'
p1515
(i__main__
ClassDefinition
p1516
(dp1517
g4
I1
sg5
I01
sg6
g1515
sg7
S'TProbabilityEstimator'
p1518
sg9
I00
sg10
(lp1519
sg12
(lp1520
(S'TDistribution'
p1521
S'probabilities'
p1522
g1522
S'probabilities'
p1523
I0
I0
I00
Ntp1524
a(S'bool'
p1525
S'supportsDiscrete'
p1526
S'supports_discrete'
p1527
S'can estimate probabilities of discrete attributes'
p1528
I01
I0
I01
Ntp1529
a(S'bool'
p1530
S'supportsContinuous'
p1531
S'supports_continuous'
p1532
S'can estimate probabilities of continuous attributes'
p1533
I01
I0
I01
Ntp1534
asg29
(dp1535
sbsS'TFilter_index'
p1536
(ipyprops
ClassDefinition
p1537
(dp1538
g4
I0
sg5
I01
sg6
g1536
sg7
g143
sg9
I0
sg10
(lp1539
sg12
(lp1540
sg29
(dp1541
sbsS'TDistributionList'
p1542
(ipyprops
ClassDefinition
p1543
(dp1544
g4
I0
sg5
I01
sg6
g1542
sg7
g143
sg9
I0
sg10
(lp1545
sg12
(lp1546
sg29
(dp1547
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1548
(i__main__
ClassDefinition
p1549
(dp1550
g4
I1
sg5
I01
sg6
g1548
sg7
S'TTreeDescender'
p1551
sg9
I0
sg10
(lp1552
sg12
(lp1553
sg29
(dp1554
sbsS'THierarchicalClusterOrdering'
p1555
(i__main__
ClassDefinition
p1556
(dp1557
g4
I1
sg5
I01
sg6
g1555
sg7
S'TOrange'
p1558
sg9
I00
sg10
(lp1559
sg12
(lp1560
(S'TProgressCallback'
p1561
S'progress_callback'
p1562
g1562
S'progress callback function'
p1563
I0
I0
I00
Ntp1564
asg29
(dp1565
sbsS'TLogitClassifierState'
p1566
(i__main__
ClassDefinition
p1567
(dp1568
g4
I1
sg5
I01
sg6
g1566
sg7
S'TOrange'
p1569
sg9
I00
sg10
(lp1570
sg12
(lp1571
sg29
(dp1572
sbsS'TExamplesDistance'
p1573
(i__main__
ClassDefinition
p1574
(dp1575
g4
I1
sg5
I01
sg6
g1573
sg7
S'TOrange'
p1576
sg9
I01
sg10
(lp1577
sg12
(lp1578
sg29
(dp1579
sbsS'TFileExampleGenerator'
p1580
(i__main__
ClassDefinition
p1581
(dp1582
g4
I1
sg5
I01
sg6
g1580
sg7
S'TExampleGenerator'
p1583
sg9
I01
sg10
(lp1584
sg12
(lp1585
(S'string'
p1586
S'filename'
p1587
g1587
S'filename'
p1588
I0
I0
I01
Ntp1589
a(S'int'
p1590
S'startDataPos'
p1591
S'start_data_pos'
p1592
S'starting position of the data in file'
p1593
I0
I0
I01
Ntp1594
a(S'int'
p1595
S'startDataLine'
p1596
S'start_data_line'
p1597
S'line in the file where the data starts'
p1598
I0
I0
I01
Ntp1599
ag306
ag310
asg29
(dp1600
sbsS'TMeasureAttribute_gainRatio'
p1601
(i__main__
ClassDefinition
p1602
(dp1603
g4
I1
sg5
I01
sg6
g1601
sg7
S'TMeasureAttributeFromProbabilities'
p1604
sg9
I00
sg10
(lp1605
sg12
(lp1606
g914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp1607
sbsS'TContingencyClassAttr'
p1608
(i__main__
ClassDefinition
p1609
(dp1610
g4
I1
sg5
I01
sg6
g1608
sg7
S'TContingencyClass'
p1611
sg9
I00
sg10
(lp1612
sg12
(lp1613
(S'TVariable'
p1614
S'outerVariable'
p1615
S'outer_variable'
p1616
S'outer attribute'
p1617
I0
I0
I00
Ntp1618
a(S'TVariable'
p1619
S'innerVariable'
p1620
S'inner_variable'
p1621
S'inner attribute'
p1622
I0
I0
I00
Ntp1623
a(S'int'
p1624
S'varType'
p1625
S'var_type'
p1626
S' outer attribute type'
p1627
I0
I0
I01
S'Variable_Type'
p1628
tp1629
a(S'TDistribution'
p1630
S'outerDistribution'
p1631
S'outer_distribution'
p1632
S'distribution of values of outer attributes'
p1633
I0
I0
I00
Ntp1634
a(S'TDistribution'
p1635
S'innerDistribution'
p1636
S'inner_distribution'
p1637
S'distribution of values of inner attributes'
p1638
I0
I0
I00
Ntp1639
a(S'TDistribution'
p1640
S'innerDistributionUnknown'
p1641
S'inner_distribution_unknown'
p1642
S'distribution of inner variable for examples where the outer value was unknown'
p1643
I0
I0
I00
Ntp1644
asg29
(dp1645
sbsS'TMissValuesGenerator'
p1646
(i__main__
ClassDefinition
p1647
(dp1648
g4
I1
sg5
I01
sg6
g1646
sg7
S'TChangeExampleGenerator'
p1649
sg9
I00
sg10
(lp1650
sg12
(lp1651
(S'TIntFloatList'
p1652
S'replaceProbabilities'
p1653
S'replace_probabilities'
p1654
S"probabilities for replacing attributes' values"
p1655
I0
I0
I00
Ntp1656
a(S'TRandomGenerator'
p1657
S'randomGenerator'
p1658
S'random_generator'
p1659
S'random generator'
p1660
I0
I0
I00
Ntp1661
ag306
ag310
asg29
(dp1662
sbsS'TLogRegClassifier'
p1663
(i__main__
ClassDefinition
p1664
(dp1665
g4
I1
sg5
I01
sg6
g1663
sg7
S'TClassifierFD'
p1666
sg9
I00
sg10
(lp1667
sg12
(lp1668
(S'TDomain'
p1669
S'continuizedDomain'
p1670
S'continuized_domain'
p1671
S'if absent, there is no continuous attributes in original domain'
p1672
I0
I0
I00
Ntp1673
a(S'TEFMDataDescription'
p1674
S'dataDescription'
p1675
S'data_description'
p1676
S'Data needed for classification in presence of undefined values'
p1677
I0
I0
I00
Ntp1678
a(S'TAttributedFloatList'
p1679
S'beta'
p1680
g1680
S'estimated beta coefficients for logistic regression'
p1681
I0
I0
I00
Ntp1682
a(S'TAttributedFloatList'
p1683
S'beta_se'
p1684
g1684
S'estimated standard errors for beta coefficients'
p1685
I0
I0
I00
Ntp1686
a(S'TAttributedFloatList'
p1687
S'wald_Z'
p1688
g1688
S'Wald Z statstic for beta coefficients'
p1689
I0
I0
I00
Ntp1690
a(S'TAttributedFloatList'
p1691
S'P'
p1692
g1692
S'estimated significances for beta coefficients'
p1693
I0
I0
I00
Ntp1694
a(S'float'
p1695
S'likelihood'
p1696
g1696
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1697
I0
I0
I01
Ntp1698
a(S'int'
p1699
S'fit_status'
p1700
g1700
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1701
I0
I0
I01
Ntp1702
a(S'TImputer'
p1703
S'imputer'
p1704
g1704
S'if present, it imputes unknown values'
p1705
I0
I0
I00
Ntp1706
ag291
ag94
ag99
asg29
(dp1707
sbsS'TEquiDistDiscretization'
p1708
(i__main__
ClassDefinition
p1709
(dp1710
g4
I1
sg5
I01
sg6
g1708
sg7
S'TDiscretization'
p1711
sg9
I00
sg10
(lp1712
sg12
(lp1713
(S'int'
p1714
S'numberOfIntervals'
p1715
(g1715
g1022
tp1716
S' number of intervals'
p1717
I0
I0
I01
Ntp1718
asg29
(dp1719
sbsS'TPreprocessor_select'
p1720
(i__main__
ClassDefinition
p1721
(dp1722
g4
I1
sg5
I01
sg6
g1720
sg7
S'TPreprocessor'
p1723
sg9
I00
sg10
(lp1724
sg12
(lp1725
(S'TVarList'
p1726
S'attributes'
p1727
g1727
S'tells which attributes to select'
p1728
I0
I0
I00
Ntp1729
asg29
(dp1730
sbsS'TSVMClassifierSparse'
p1731
(i__main__
ClassDefinition
p1732
(dp1733
g4
I1
sg5
I01
sg6
g1731
sg7
S'TSVMClassifier'
p1734
sg9
I00
sg10
(lp1735
sg12
(lp1736
(S'bool'
p1737
S'useNonMeta'
p1738
S'use_non_meta'
p1739
S'include non meta attributes'
p1740
I0
I0
I01
Ntp1741
ag245
ag249
ag253
ag258
ag263
ag268
ag272
ag277
ag282
ag287
ag291
ag94
ag99
asg29
(dp1742
sbsS'TFilter_disjunction'
p1743
(i__main__
ClassDefinition
p1744
(dp1745
g4
I1
sg5
I01
sg6
g1743
sg7
S'TFilter'
p1746
sg9
I00
sg10
(lp1747
sg12
(lp1748
(S'TFilterList'
p1749
S'filters'
p1750
g1750
S'a list of filters;'
p1751
I0
I0
I00
Ntp1752
ag691
ag695
asg29
(dp1753
sbsS'TChangeExampleGenerator'
p1754
(i__main__
ClassDefinition
p1755
(dp1756
g4
I1
sg5
I01
sg6
g1754
sg7
S'TAdapterGenerator'
p1757
sg9
I01
sg10
(lp1758
sg12
(lp1759
g306
ag310
asg29
(dp1760
sbsS'TAttributedFloatList'
p1761
(ipyprops
ClassDefinition
p1762
(dp1763
g4
I0
sg5
I01
sg6
g1761
sg7
S'TFloatList'
p1764
sg9
I0
sg10
(lp1765
sg12
(lp1766
sg29
(dp1767
sbsS'TIMByRowsByRelief'
p1768
(i__main__
ClassDefinition
p1769
(dp1770
g4
I1
sg5
I01
sg6
g1768
sg7
S'TIMByRowsConstructor'
p1771
sg9
I00
sg10
(lp1772
sg12
(lp1773
(S'float'
p1774
g1212
g1212
S'number of neighbours'
p1775
I0
I0
I01
Ntp1776
a(S'float'
p1777
g1216
g1216
S'number of reference examples'
p1778
I0
I0
I01
Ntp1779
a(S'float'
p1780
S'kFromColumns'
p1781
S'k_from_columns'
p1782
S'if positive, number of neighbours is #columns*kFromColumns'
p1783
I0
I0
I01
Ntp1784
a(S'bool'
p1785
S'ignoreSameExample'
p1786
S'ignore_same_example'
p1787
S'does not put reference example into M'
p1788
I0
I0
I01
Ntp1789
a(S'bool'
p1790
S'convertToBinary'
p1791
S'convert_to_binary'
p1792
S'convert to binary class (hit-miss)'
p1793
I0
I0
I01
Ntp1794
a(S'bool'
p1795
S'correctClassFirst'
p1796
S'correct_class_first'
p1797
S'puts the correct class proportion to the first place'
p1798
I0
I0
I01
Ntp1799
a(S'bool'
p1800
S'allExamples'
p1801
S'all_examples'
p1802
S'uses all examples for reference examples'
p1803
I0
I0
I01
Ntp1804
a(S'bool'
p1805
S'allSameNeighbours'
p1806
S'all_same_neighbours'
p1807
S'uses all the examples same to the reference as neighbours'
p1808
I0
I0
I01
Ntp1809
asg29
(dp1810
sbsS'TFindNearestConstructor'
p1811
(i__main__
ClassDefinition
p1812
(dp1813
g4
I1
sg5
I01
sg6
g1811
sg7
S'TOrange'
p1814
sg9
I01
sg10
(lp1815
sg12
(lp1816
(S'TExamplesDistanceConstructor'
p1817
S'distanceConstructor'
p1818
S'distance_constructor'
p1819
S'metrics'
p1820
I0
I0
I00
Ntp1821
a(S'bool'
p1822
S'includeSame'
p1823
S'include_same'
p1824
S'tells whether to include examples that are same as the reference example'
p1825
I0
I0
I01
Ntp1826
asg29
(dp1827
sbsS'TRuleClassifier_firstRule'
p1828
(i__main__
ClassDefinition
p1829
(dp1830
g4
I1
sg5
I01
sg6
g1828
sg7
S'TRuleClassifier'
p1831
sg9
I00
sg10
(lp1832
sg12
(lp1833
(S'TDistribution'
p1834
S'prior'
p1835
g1835
S'prior distribution'
p1836
I0
I0
I00
Ntp1837
ag601
ag604
ag608
ag94
ag99
asg29
(dp1838
sbsS'TColumnAssessor'
p1839
(i__main__
ClassDefinition
p1840
(dp1841
g4
I1
sg5
I01
sg6
g1839
sg7
S'TOrange'
p1842
sg9
I01
sg10
(lp1843
sg12
(lp1844
sg29
(dp1845
sbsS'TTableAverager'
p1846
(i__main__
ClassDefinition
p1847
(dp1848
g4
I1
sg5
I01
sg6
g1846
sg7
S'TOrange'
p1849
sg9
I00
sg10
(lp1850
sg12
(lp1851
sg29
(dp1852
sbsS'TComputeDomainContingency_Preprocessor'
p1853
(i__main__
ClassDefinition
p1854
(dp1855
g4
I1
sg5
I01
sg6
g1853
sg7
S'TComputeDomainContingency'
p1856
sg9
I00
sg10
(lp1857
sg12
(lp1858
(S'TPreprocessor'
p1859
S'preprocessor'
p1860
g1860
S'preprocesses the exmaples (see the manual for restrictions!)'
p1861
I0
I0
I00
Ntp1862
a(S'bool'
p1863
S'resultInOriginalDomain'
p1864
S'result_in_original_domain'
p1865
S'tells whether the resulting DomainContingency should consist of original attributes'
p1866
I0
I0
I01
Ntp1867
ag28
asg29
(dp1868
sbsS'TFloatFloatList'
p1869
(ipyprops
ClassDefinition
p1870
(dp1871
g4
I0
sg5
I01
sg6
g1869
sg7
g143
sg9
I0
sg10
(lp1872
sg12
(lp1873
sg29
(dp1874
sbsS'TMeasureAttribute_MSE'
p1875
(i__main__
ClassDefinition
p1876
(dp1877
g4
I1
sg5
I01
sg6
g1875
sg7
S'TMeasureAttribute'
p1878
sg9
I00
sg10
(lp1879
sg12
(lp1880
(S'float'
p1881
g1216
g1216
S'm for m-estimate'
p1882
I0
I0
I01
Ntp1883
a(S'int'
p1884
S'unknownsTreatment'
p1885
S'unknowns_treatment'
p1886
S' treatment of unknown values'
p1887
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1888
tp1889
ag930
ag935
ag940
ag945
asg29
(dp1890
sbsS'TRuleList'
p1891
(ipyprops
ClassDefinition
p1892
(dp1893
g4
I0
sg5
I01
sg6
g1891
sg7
g143
sg9
I0
sg10
(lp1894
sg12
(lp1895
sg29
(dp1896
sbsS'TIntervalDiscretizer'
p1897
(i__main__
ClassDefinition
p1898
(dp1899
g4
I1
sg5
I01
sg6
g1897
sg7
S'TDiscretizer'
p1900
sg9
I00
sg10
(lp1901
sg12
(lp1902
(S'TFloatList'
p1903
S'points'
p1904
g1904
S'cut-off points'
p1905
I0
I0
I00
Ntp1906
ag805
asg29
(dp1907
sbsS'TItemsetsSparseInducer'
p1908
(i__main__
ClassDefinition
p1909
(dp1910
g4
I1
sg5
I01
sg6
g1908
sg7
S'TOrange'
p1911
sg9
I00
sg10
(lp1912
sg12
(lp1913
(S'int'
p1914
S'maxItemSets'
p1915
S'max_item_sets'
p1916
S'maximal number of itemsets (increase if you want)'
p1917
I0
I0
I01
Ntp1918
a(S'float'
p1919
S'support'
p1920
g1920
S'required support'
p1921
I0
I0
I01
Ntp1922
a(S'bool'
p1923
S'storeExamples'
p1924
S'store_examples'
p1925
S'stores examples corresponding to itemsets'
p1926
I0
I0
I01
Ntp1927
asg29
(dp1928
sbsS'TPreprocessor_dropMissing'
p1929
(i__main__
ClassDefinition
p1930
(dp1931
g4
I1
sg5
I01
sg6
g1929
sg7
S'TPreprocessor'
p1932
sg9
I00
sg10
(lp1933
sg12
(lp1934
sg29
(dp1935
sbsS'TDomainContinuizer'
p1936
(i__main__
ClassDefinition
p1937
(dp1938
g4
I1
sg5
I01
sg6
g1936
sg7
S'TOrange'
p1939
sg9
I00
sg10
(lp1940
sg12
(lp1941
(S'bool'
p1942
S'zeroBased'
p1943
S'zero_based'
p1944
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p1945
I0
I0
I01
Ntp1946
a(S'int'
p1947
S'continuousTreatment'
p1948
S'continuous_treatment'
p1949
S' 0-leave as they are, 1-divide by span, 1-normalize'
p1950
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p1951
tp1952
a(S'int'
p1953
S'multinomialTreatment'
p1954
S'multinomial_treatment'
p1955
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p1956
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p1957
tp1958
a(S'int'
p1959
S'classTreatment'
p1960
S'class_treatment'
p1961
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p1962
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p1963
tp1964
asg29
(dp1965
S'MultinomialTreatment'
p1966
(lp1967
(S'LowestIsBase'
p1968
I0
tp1969
a(S'FrequentIsBase'
p1970
I1
tp1971
a(S'NValues'
p1972
I2
tp1973
a(S'Ignore'
p1974
I3
tp1975
a(S'IgnoreAllDiscrete'
p1976
I4
tp1977
a(S'ReportError'
p1978
I5
tp1979
a(S'AsOrdinal'
p1980
I6
tp1981
a(S'AsNormalizedOrdinal'
p1982
I7
tp1983
asS'ClassTreatment'
p1984
(lp1985
(S'LeaveUnlessTarget'
p1986
S'3'
p1987
tp1988
a(S'ErrorIfCannotHandle'
p1989
S'5'
p1990
tp1991
a(S'AsOrdinal'
p1992
S'6'
p1993
tp1994
asS'ContinuousTreatment'
p1995
(lp1996
(S'Leave'
p1997
I0
tp1998
a(S'NormalizeBySpan'
p1999
I1
tp2000
a(S'NormalizeByVariance'
p2001
I2
tp2002
assbsS'TNormalizeContinuous'
p2003
(i__main__
ClassDefinition
p2004
(dp2005
g4
I1
sg5
I01
sg6
g2003
sg7
S'TTransformValue'
p2006
sg9
I00
sg10
(lp2007
sg12
(lp2008
(S'float'
p2009
S'average'
p2010
g2010
S'the average value'
p2011
I0
I0
I01
Ntp2012
a(S'float'
p2013
S'span'
p2014
g2014
S'the value span'
p2015
I0
I0
I01
Ntp2016
ag805
asg29
(dp2017
sbsS'TSimpleTreeClassifier'
p2018
(i__main__
ClassDefinition
p2019
(dp2020
g4
I1
sg5
I01
sg6
g2018
sg7
S'TClassifier'
p2021
sg9
I00
sg10
(lp2022
sg12
(lp2023
g94
ag99
asg29
(dp2024
sbsS'TStressFunc_Python'
p2025
(i__main__
ClassDefinition
p2026
(dp2027
g4
I1
sg5
I0
sg6
g2025
sg7
S'TStressFunc'
p2028
sg9
I00
sg10
(lp2029
sg12
(lp2030
sg29
(dp2031
sbsS'TBiModalDiscretizer'
p2032
(i__main__
ClassDefinition
p2033
(dp2034
g4
I1
sg5
I01
sg6
g2032
sg7
S'TDiscretizer'
p2035
sg9
I00
sg10
(lp2036
sg12
(lp2037
(S'float'
p2038
S'low'
p2039
g2039
S'low threshold'
p2040
I0
I0
I01
Ntp2041
a(S'float'
p2042
S'high'
p2043
g2043
S'high threshold'
p2044
I0
I0
I01
Ntp2045
ag805
asg29
(dp2046
sbsS'TExamplesDistanceConstructor_Euclidean'
p2047
(i__main__
ClassDefinition
p2048
(dp2049
g4
I1
sg5
I01
sg6
g2047
sg7
S'TExamplesDistanceConstructor_Normalized'
p2050
sg9
I00
sg10
(lp2051
sg12
(lp2052
(S'bool'
p2053
S'normalize'
p2054
g2054
S'tells whether to normalize distances between attributes'
p2055
I0
I0
I01
Ntp2056
a(S'bool'
p2057
S'ignoreUnknowns'
p2058
S'ignore_unknowns'
p2059
S'if true (default: false) unknown values are ignored in computation'
p2060
I0
I0
I01
Ntp2061
ag1374
asg29
(dp2062
sbsS'TContingencyAttrAttr'
p2063
(i__main__
ClassDefinition
p2064
(dp2065
g4
I1
sg5
I01
sg6
g2063
sg7
S'TContingency'
p2066
sg9
I00
sg10
(lp2067
sg12
(lp2068
g1618
ag1623
ag1629
ag1634
ag1639
ag1644
asg29
(dp2069
sbsS'TRuleBeamRefiner_Selector'
p2070
(i__main__
ClassDefinition
p2071
(dp2072
g4
I1
sg5
I01
sg6
g2070
sg7
S'TRuleBeamRefiner'
p2073
sg9
I00
sg10
(lp2074
sg12
(lp2075
(S'TDiscretization'
p2076
S'discretization'
p2077
g2077
S'discretization for continuous attributes'
p2078
I0
I0
I00
Ntp2079
asg29
(dp2080
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2081
(i__main__
ClassDefinition
p2082
(dp2083
g4
I1
sg5
I01
sg6
g2081
sg7
S'TProbabilityEstimatorConstructor'
p2084
sg9
I00
sg10
(lp2085
sg12
(lp2086
(S'float'
p2087
S'l'
p2088
g2088
S'number of examples added to each class (default: 1)'
p2089
I0
I0
I01
Ntp2090
a(S'bool'
p2091
S'renormalize'
p2092
g2092
S'computes the estimate on the original (not the normalized) distribution'
p2093
I0
I0
I01
Ntp2094
asg29
(dp2095
sbsS'TExamplesDistance_Relief'
p2096
(i__main__
ClassDefinition
p2097
(dp2098
g4
I1
sg5
I01
sg6
g2096
sg7
S'TExamplesDistance'
p2099
sg9
I00
sg10
(lp2100
sg12
(lp2101
(S'TDomainDistributions'
p2102
S'distributions'
p2103
g2103
S"distributions of attributes' values"
p2104
I0
I0
I00
Ntp2105
a(S'TAttributedFloatList'
p2106
S'averages'
p2107
g2107
S'average values of attributes'
p2108
I0
I0
I00
Ntp2109
a(S'TAttributedFloatList'
p2110
S'normalizations'
p2111
g2111
S"ranges of attributes' values"
p2112
I0
I0
I00
Ntp2113
a(S'TAttributedFloatList'
p2114
S'bothSpecial'
p2115
S'both_special'
p2116
S'distance if both values of both attributes are undefined'
p2117
I0
I0
I00
Ntp2118
asg29
(dp2119
sbsS'TExamplesDistance_Manhattan'
p2120
(i__main__
ClassDefinition
p2121
(dp2122
g4
I1
sg5
I01
sg6
g2120
sg7
S'TExamplesDistance_Normalized'
p2123
sg9
I00
sg10
(lp2124
sg12
(lp2125
g454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp2126
sbsS'TExamplesDistanceConstructor_Manhattan'
p2127
(i__main__
ClassDefinition
p2128
(dp2129
g4
I1
sg5
I01
sg6
g2127
sg7
S'TExamplesDistanceConstructor_Normalized'
p2130
sg9
I00
sg10
(lp2131
sg12
(lp2132
g2056
ag2061
ag1374
asg29
(dp2133
sbsS'TStringList'
p2134
(ipyprops
ClassDefinition
p2135
(dp2136
g4
I0
sg5
I01
sg6
g2134
sg7
g143
sg9
I0
sg10
(lp2137
sg12
(lp2138
sg29
(dp2139
sbsS'TTreeDescender'
p2140
(i__main__
ClassDefinition
p2141
(dp2142
g4
I1
sg5
I01
sg6
g2140
sg7
S'TOrange'
p2143
sg9
I01
sg10
(lp2144
sg12
(lp2145
sg29
(dp2146
sbsS'TColumnAssessor_Measure'
p2147
(i__main__
ClassDefinition
p2148
(dp2149
g4
I1
sg5
I01
sg6
g2147
sg7
S'TColumnAssessor'
p2150
sg9
I00
sg10
(lp2151
sg12
(lp2152
(S'TMeasureAttribute'
p2153
S'measure'
p2154
g2154
S'attribute quality measure'
p2155
I0
I0
I00
Ntp2156
asg29
(dp2157
sbsS'TIMBlurer'
p2158
(i__main__
ClassDefinition
p2159
(dp2160
g4
I1
sg5
I01
sg6
g2158
sg7
S'TIMByRowsPreprocessor'
p2161
sg9
I00
sg10
(lp2162
sg12
(lp2163
(S'float'
p2164
S'weight'
p2165
g2165
S'weight of neighbours'
p2166
I0
I0
I01
Ntp2167
a(S'float'
p2168
S'origWeight'
p2169
S'orig_weight'
p2170
S'weight of original row'
p2171
I0
I0
I01
Ntp2172
a(S'TFloatList'
p2173
S'attrWeights'
p2174
S'attr_weights'
p2175
S'weights by individual (different) attributes'
p2176
I0
I0
I00
Ntp2177
a(S'bool'
p2178
S'adjustOrigWeight'
p2179
S'adjust_orig_weight'
p2180
S'uses 1-weight(s) for weight of original row'
p2181
I0
I0
I01
Ntp2182
a(S'bool'
p2183
S'onlyEmpty'
p2184
S'only_empty'
p2185
S'blurs only empty cells'
p2186
I0
I0
I01
Ntp2187
asg29
(dp2188
sbsS'TStopIMClusteringByAssessor_noBigChange'
p2189
(i__main__
ClassDefinition
p2190
(dp2191
g4
I1
sg5
I01
sg6
g2189
sg7
S'TStopIMClusteringByAssessor'
p2192
sg9
I00
sg10
(lp2193
sg12
(lp2194
sg29
(dp2195
sbsS'TC45Learner'
p2196
(i__main__
ClassDefinition
p2197
(dp2198
g4
I1
sg5
I01
sg6
g2196
sg7
S'TLearner'
p2199
sg9
I00
sg10
(lp2200
sg12
(lp2201
(S'bool'
p2202
S'gainRatio'
p2203
(g2203
S'g'
p2204
tp2205
S' use gain ratio (instead of information gain)'
p2206
I0
I0
I01
Ntp2207
a(S'bool'
p2208
S'subset'
p2209
(g2209
S's'
p2210
tp2211
S' use subsetting'
p2212
I0
I0
I01
Ntp2213
a(S'bool'
p2214
S'batch'
p2215
(g2215
S'b'
p2216
tp2217
S' batch'
p2218
I0
I0
I01
Ntp2219
a(S'bool'
p2220
S'probThresh'
p2221
(g2221
S'p'
p2222
tp2223
S' probability threshold'
p2224
I0
I0
I01
Ntp2225
a(S'int'
p2226
S'minObjs'
p2227
(g2227
g1216
tp2228
S' minimal number of objects (examples) in leaves'
p2229
I0
I0
I01
Ntp2230
a(S'int'
p2231
S'window'
p2232
(g2232
S'w'
p2233
tp2234
S' window'
p2235
I0
I0
I01
Ntp2236
a(S'int'
p2237
S'increment'
p2238
(g2238
S'i'
p2239
tp2240
S' increment'
p2241
I0
I0
I01
Ntp2242
a(S'float'
p2243
S'cf'
p2244
(g2244
S'c'
p2245
tp2246
S' cf'
p2247
I0
I0
I01
Ntp2248
a(S'int'
p2249
S'trials'
p2250
(g2250
S't'
p2251
tp2252
S' trials'
p2253
I0
I0
I01
Ntp2254
a(S'bool'
p2255
S'prune'
p2256
g2256
S'return pruned tree'
p2257
I0
I0
I01
Ntp2258
a(S'bool'
p2259
S'convertToOrange'
p2260
S'convert_to_orange'
p2261
S'return TreeClassifier instead of C45TreeClassifier'
p2262
I0
I0
I01
Ntp2263
a(S'bool'
p2264
S'storeExamples'
p2265
S'store_examples'
p2266
S'stores examples when (if) converting to TreeClassifier'
p2267
I0
I0
I01
Ntp2268
a(S'bool'
p2269
S'storeContingencies'
p2270
S'store_contingencies'
p2271
S'stores contingencies when (if) converting to TreeClassifier'
p2272
I0
I0
I01
Ntp2273
ag110
asg29
(dp2274
sbsS'TAttributedBoolList'
p2275
(ipyprops
ClassDefinition
p2276
(dp2277
g4
I0
sg5
I01
sg6
g2275
sg7
S'TBoolList'
p2278
sg9
I0
sg10
(lp2279
sg12
(lp2280
sg29
(dp2281
sbsS'TFeatureByMinComplexity'
p2282
(i__main__
ClassDefinition
p2283
(dp2284
g4
I1
sg5
I01
sg6
g2282
sg7
S'TFeatureInducer'
p2285
sg9
I00
sg10
(lp2286
sg12
(lp2287
(S'TColorIG'
p2288
S'colorIG'
p2289
S'color_IG'
p2290
S'graph coloring algorithm'
p2291
I0
I0
I00
Ntp2292
a(S'int'
p2293
S'completion'
p2294
g2294
S' decides how to determine the class for points not covered by any cluster'
p2295
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2296
tp2297
asg29
(dp2298
S'Completion'
p2299
(lp2300
(S'NoCompletion'
p2301
S'completion_no'
p2302
tp2303
a(S'CompletionByDefault'
p2304
S'completion_default'
p2305
tp2306
a(S'CompletionByBayes'
p2307
S'completion_bayes'
p2308
tp2309
assbsS'TPreprocessor_dropMissingClasses'
p2310
(i__main__
ClassDefinition
p2311
(dp2312
g4
I1
sg5
I01
sg6
g2310
sg7
S'TPreprocessor'
p2313
sg9
I00
sg10
(lp2314
sg12
(lp2315
sg29
(dp2316
sbsS'TkNNClassifier'
p2317
(i__main__
ClassDefinition
p2318
(dp2319
g4
I1
sg5
I01
sg6
g2317
sg7
S'TClassifierFD'
p2320
sg9
I00
sg10
(lp2321
sg12
(lp2322
(S'TFindNearest'
p2323
S'findNearest'
p2324
S'find_nearest'
p2325
g600
I0
I0
I00
Ntp2326
a(S'float'
p2327
g1212
g1212
S'number of neighbours (0 for sqrt of #examples)'
p2328
I0
I0
I01
Ntp2329
a(S'bool'
p2330
S'rankWeight'
p2331
S'rank_weight'
p2332
S'enable weighting by ranks'
p2333
I0
I0
I01
Ntp2334
a(S'int'
p2335
S'weightID'
p2336
S'weight_ID'
p2337
S'id of meta-attribute with weight'
p2338
I0
I0
I01
Ntp2339
a(S'int'
p2340
S'nExamples'
p2341
S'n_examples'
p2342
S'the number of learning examples '
p2343
I0
I0
I01
Ntp2344
ag291
ag94
ag99
asg29
(dp2345
sbsS'TSgnSammonStress'
p2346
(i__main__
ClassDefinition
p2347
(dp2348
g4
I1
sg5
I0
sg6
g2346
sg7
S'TStressFunc'
p2349
sg9
I00
sg10
(lp2350
sg12
(lp2351
sg29
(dp2352
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2353
(i__main__
ClassDefinition
p2354
(dp2355
g4
I1
sg5
I01
sg6
g2353
sg7
S'TRuleBeamCandidateSelector'
p2356
sg9
I00
sg10
(lp2357
sg12
(lp2358
sg29
(dp2359
sbsS'TCostMatrix'
p2360
(i__main__
ClassDefinition
p2361
(dp2362
g4
I1
sg5
I01
sg6
g2360
sg7
S'TOrange'
p2363
sg9
I00
sg10
(lp2364
sg12
(lp2365
(S'TVariable'
p2366
S'classVar'
p2367
S'class_var'
p2368
S'attribute to which the matrix applies'
p2369
I0
I0
I00
Ntp2370
a(S'int'
p2371
S'dimension'
p2372
g2372
S'dimension (should equal classVar.noOfValues())'
p2373
I01
I0
I01
Ntp2374
asg29
(dp2375
sbsS'TOrange'
p2376
(i__main__
ClassDefinition
p2377
(dp2378
g4
I1
sg5
I01
sg6
g2376
sg7
Nsg9
I00
sg10
(lp2379
sg12
(lp2380
sg29
(dp2381
sbsS'TRuleValidator'
p2382
(i__main__
ClassDefinition
p2383
(dp2384
g4
I1
sg5
I01
sg6
g2382
sg7
S'TOrange'
p2385
sg9
I01
sg10
(lp2386
sg12
(lp2387
sg29
(dp2388
sbsS'TColorIG'
p2389
(i__main__
ClassDefinition
p2390
(dp2391
g4
I1
sg5
I01
sg6
g2389
sg7
S'TOrange'
p2392
sg9
I01
sg10
(lp2393
sg12
(lp2394
sg29
(dp2395
sbsS'TRuleValidator_Python'
p2396
(i__main__
ClassDefinition
p2397
(dp2398
g4
I1
sg5
I01
sg6
g2396
sg7
S'TRuleValidator'
p2399
sg9
I00
sg10
(lp2400
sg12
(lp2401
sg29
(dp2402
sbsS'TSubsetsGenerator_constSize_iterator'
p2403
(i__main__
ClassDefinition
p2404
(dp2405
g4
I1
sg5
I01
sg6
g2403
sg7
S'TSubsetsGenerator_iterator'
p2406
sg9
I00
sg10
(lp2407
sg12
(lp2408
(S'bool'
p2409
S'moreToCome'
p2410
S'more_to_come'
p2411
g600
I01
I0
I01
Ntp2412
ag510
asg29
(dp2413
sbsS'TIMByRowsBySorting'
p2414
(i__main__
ClassDefinition
p2415
(dp2416
g4
I1
sg5
I01
sg6
g2414
sg7
S'TIMByRowsConstructor'
p2417
sg9
I00
sg10
(lp2418
sg12
(lp2419
sg29
(dp2420
sbsS'TEVDist'
p2421
(i__main__
ClassDefinition
p2422
(dp2423
g4
I1
sg5
I01
sg6
g2421
sg7
S'TOrange'
p2424
sg9
I00
sg10
(lp2425
sg12
(lp2426
(S'float'
p2427
S'mu'
p2428
g2428
S'mu of Fisher-Tippett distribution'
p2429
I0
I0
I01
Ntp2430
a(S'float'
p2431
S'beta'
p2432
g2432
S'beta of Fisher-Tippett distribution'
p2433
I0
I0
I01
Ntp2434
a(S'TFloatList'
p2435
S'percentiles'
p2436
g2436
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p2437
I0
I0
I00
Ntp2438
a(S'float'
p2439
S'maxPercentile'
p2440
S'max_percentile'
p2441
S'maxPercentile Value, default 0.95'
p2442
I0
I0
I01
Ntp2443
a(S'float'
p2444
S'step'
p2445
g2445
S'step of percentiles, default 0.1'
p2446
I0
I0
I01
Ntp2447
asg29
(dp2448
sbsS'TAssociationLearner'
p2449
(i__main__
ClassDefinition
p2450
(dp2451
g4
I1
sg5
I01
sg6
g2449
sg7
S'TLearner'
p2452
sg9
I00
sg10
(lp2453
sg12
(lp2454
(S'float'
p2455
S'confidence'
p2456
g2456
S'required confidence'
p2457
I0
I0
I01
Ntp2458
a(S'float'
p2459
S'support'
p2460
g2460
S'required support'
p2461
I0
I0
I01
Ntp2462
a(S'int'
p2463
S'voteWeight'
p2464
S'vote_weight'
p2465
S'vote weight (s=support, c=confidence, p=product)'
p2466
I0
I0
I01
Ntp2467
a(S'int'
p2468
S'maxItemSets'
p2469
S'max_item_sets'
p2470
S'maximal number of itemsets (increase if you want)'
p2471
I0
I0
I01
Ntp2472
ag110
asg29
(dp2473
sbsS'TRuleBeamInitializer_Python'
p2474
(i__main__
ClassDefinition
p2475
(dp2476
g4
I1
sg5
I01
sg6
g2474
sg7
S'TRuleBeamInitializer'
p2477
sg9
I00
sg10
(lp2478
sg12
(lp2479
sg29
(dp2480
sbsS'TDistributionAssessor'
p2481
(i__main__
ClassDefinition
p2482
(dp2483
g4
I1
sg5
I01
sg6
g2481
sg7
S'TOrange'
p2484
sg9
I01
sg10
(lp2485
sg12
(lp2486
sg29
(dp2487
sbsS'TRuleCovererAndRemover_Python'
p2488
(i__main__
ClassDefinition
p2489
(dp2490
g4
I1
sg5
I01
sg6
g2488
sg7
S'TRuleCovererAndRemover'
p2491
sg9
I00
sg10
(lp2492
sg12
(lp2493
sg29
(dp2494
sbsS'TMeasureAttribute_gainRatioA'
p2495
(i__main__
ClassDefinition
p2496
(dp2497
g4
I1
sg5
I01
sg6
g2495
sg7
S'TMeasureAttribute_gainRatio'
p2498
sg9
I00
sg10
(lp2499
sg12
(lp2500
g914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp2501
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2502
(i__main__
ClassDefinition
p2503
(dp2504
g4
I1
sg5
I01
sg6
g2502
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2505
sg9
I00
sg10
(lp2506
sg12
(lp2507
(S'TProbabilityEstimatorConstructor'
p2508
S'estimatorConstructor'
p2509
S'estimator_constructor'
p2510
S'ProbabilityEstimator to be used '
p2511
I0
I0
I00
Ntp2512
asg29
(dp2513
sbsS'TCartesianClassifier'
p2514
(i__main__
ClassDefinition
p2515
(dp2516
g4
I1
sg5
I01
sg6
g2514
sg7
S'TClassifierFD'
p2517
sg9
I00
sg10
(lp2518
sg12
(lp2519
g291
ag94
ag99
asg29
(dp2520
sbsS'TGraphLayout'
p2521
(i__main__
ClassDefinition
p2522
(dp2523
g4
I1
sg5
I0
sg6
g2521
sg7
S'TOrange'
p2524
sg9
I00
sg10
(lp2525
sg12
(lp2526
sg29
(dp2527
sbsS'TLinearClassifier'
p2528
(i__main__
ClassDefinition
p2529
(dp2530
g4
I1
sg5
I01
sg6
g2528
sg7
S'TClassifierFD'
p2531
sg9
I00
sg10
(lp2532
sg12
(lp2533
(S'TFloatListList'
p2534
S'weights'
p2535
g2535
S'Computed feature weights'
p2536
I0
I0
I00
Ntp2537
a(S'TExampleTable'
p2538
S'examples'
p2539
g2539
S'Examples used to train the classifier'
p2540
I0
I0
I00
Ntp2541
ag291
ag94
ag99
asg29
(dp2542
sbsS'TTreeDescender_UnknownToBranch'
p2543
(i__main__
ClassDefinition
p2544
(dp2545
g4
I1
sg5
I01
sg6
g2543
sg7
g1551
sg9
I0
sg10
(lp2546
sg12
(lp2547
sg29
(dp2548
sbsS'TSubsetsGenerator_constSize'
p2549
(i__main__
ClassDefinition
p2550
(dp2551
g4
I1
sg5
I01
sg6
g2549
sg7
S'TSubsetsGenerator'
p2552
sg9
I00
sg10
(lp2553
sg12
(lp2554
(S'int'
p2555
S'B'
p2556
g2556
S'subset size'
p2557
I0
I0
I01
Ntp2558
ag207
asg29
(dp2559
sbsS'TColorIG_MCF'
p2560
(i__main__
ClassDefinition
p2561
(dp2562
g4
I1
sg5
I01
sg6
g2560
sg7
S'TColorIG'
p2563
sg9
I00
sg10
(lp2564
sg12
(lp2565
sg29
(dp2566
sbsS'TBasicAttrStat'
p2567
(i__main__
ClassDefinition
p2568
(dp2569
g4
I1
sg5
I01
sg6
g2567
sg7
S'TOrange'
p2570
sg9
I00
sg10
(lp2571
sg12
(lp2572
(S'float'
p2573
S'sum'
p2574
g2574
S'sum of values'
p2575
I0
I0
I01
Ntp2576
a(S'float'
p2577
S'sum2'
p2578
g2578
S'sum of squares of values'
p2579
I0
I0
I01
Ntp2580
a(S'float'
p2581
g1022
g1022
S'number of examples for which the attribute is defined'
p2582
I0
I0
I01
Ntp2583
a(S'float'
p2584
S'min'
p2585
g2585
S'the lowest value of the attribute'
p2586
I0
I0
I01
Ntp2587
a(S'float'
p2588
S'max'
p2589
g2589
S'the highest value of the attribute'
p2590
I0
I0
I01
Ntp2591
a(S'float'
p2592
S'avg'
p2593
g2593
S'the average value of the attribute'
p2594
I0
I0
I01
Ntp2595
a(S'float'
p2596
S'dev'
p2597
g2597
S'the deviation of the value of the attribute'
p2598
I0
I0
I01
Ntp2599
a(S'TVariable'
p2600
S'variable'
p2601
g2601
S'the attribute to which the data applies'
p2602
I0
I0
I00
Ntp2603
a(S'bool'
p2604
S'holdRecomputation'
p2605
S'hold_recomputation'
p2606
S'temporarily disables recomputation of avg and dev while adding values'
p2607
I0
I0
I01
Ntp2608
asg29
(dp2609
sbsS'TTreeSplitConstructor_Attribute'
p2610
(i__main__
ClassDefinition
p2611
(dp2612
g4
I1
sg5
I01
sg6
g2610
sg7
S'TTreeSplitConstructor_Measure'
p2613
sg9
I00
sg10
(lp2614
sg12
(lp2615
g1306
ag1311
ag783
asg29
(dp2616
sbsS'TRemoveRedundantByInduction'
p2617
(i__main__
ClassDefinition
p2618
(dp2619
g4
I1
sg5
I01
sg6
g2617
sg7
S'TRemoveRedundant'
p2620
sg9
I00
sg10
(lp2621
sg12
(lp2622
(S'TFeatureInducer'
p2623
S'featureReducer'
p2624
S'feature_reducer'
p2625
S'feature construction algorithm'
p2626
I0
I0
I00
Ntp2627
a(S'TMeasureAttribute'
p2628
S'measure'
p2629
g2629
S'measure for initial ordering of attributes'
p2630
I0
I0
I00
Ntp2631
a(S'TDiscretization'
p2632
S'discretization'
p2633
g2633
S'discretization method'
p2634
I0
I0
I00
Ntp2635
ag1352
asg29
(dp2636
sbsS'TFilter_conjunction'
p2637
(i__main__
ClassDefinition
p2638
(dp2639
g4
I1
sg5
I01
sg6
g2637
sg7
S'TFilter'
p2640
sg9
I00
sg10
(lp2641
sg12
(lp2642
(S'TFilterList'
p2643
S'filters'
p2644
g2644
S'a list of filters;'
p2645
I0
I0
I00
Ntp2646
ag691
ag695
asg29
(dp2647
sbsS'TExampleForMissing'
p2648
(i__main__
ClassDefinition
p2649
(dp2650
g4
I1
sg5
I01
sg6
g2648
sg7
S'TExample'
p2651
sg9
I00
sg10
(lp2652
sg12
(lp2653
(S'TEFMDataDescription'
p2654
S'dataDescription'
p2655
S'data_description'
p2656
S'data description'
p2657
I0
I0
I00
Ntp2658
a(S'TDomain'
p2659
S'domain'
p2660
g2660
S"Example's domain"
p2661
I01
I0
I00
Ntp2662
a(S'int'
p2663
S'id'
p2664
g2664
g600
I0
I0
I01
Ntp2665
asg29
(dp2666
sbsS'TRuleBeamFilter'
p2667
(i__main__
ClassDefinition
p2668
(dp2669
g4
I1
sg5
I01
sg6
g2667
sg7
S'TOrange'
p2670
sg9
I01
sg10
(lp2671
sg12
(lp2672
sg29
(dp2673
sbsS'TBayesClassifier'
p2674
(i__main__
ClassDefinition
p2675
(dp2676
g4
I1
sg5
I01
sg6
g2674
sg7
S'TClassifierFD'
p2677
sg9
I00
sg10
(lp2678
sg12
(lp2679
(S'TDistribution'
p2680
S'distribution'
p2681
g2681
S'class distributions (P(C))'
p2682
I0
I0
I00
Ntp2683
a(S'TDomainContingency'
p2684
S'conditionalDistributions'
p2685
S'conditional_distributions'
p2686
S'conditional distributions, P(C|A)'
p2687
I0
I0
I00
Ntp2688
a(S'TProbabilityEstimator'
p2689
S'estimator'
p2690
g2690
S'a probability estimator for P(C)'
p2691
I0
I0
I00
Ntp2692
a(S'TConditionalProbabilityEstimatorList'
p2693
S'conditionalEstimators'
p2694
S'conditional_estimators'
p2695
S'a probability estimator for P(C|A)'
p2696
I0
I0
I00
Ntp2697
a(S'bool'
p2698
S'normalizePredictions'
p2699
S'normalize_predictions'
p2700
S'if true, classifier will normalize predictions'
p2701
I0
I0
I01
Ntp2702
a(S'float'
p2703
S'threshold'
p2704
g2704
S'threshold probability for class 1 (for binary classes only)'
p2705
I0
I0
I01
Ntp2706
ag291
ag94
ag99
asg29
(dp2707
sbsS'TGraph'
p2708
(i__main__
ClassDefinition
p2709
(dp2710
g4
I1
sg5
I01
sg6
g2708
sg7
S'TOrange'
p2711
sg9
I01
sg10
(lp2712
sg12
(lp2713
g1497
ag1502
ag1506
asg29
(dp2714
sbsS'TPreprocessor_addClassWeight'
p2715
(i__main__
ClassDefinition
p2716
(dp2717
g4
I1
sg5
I01
sg6
g2715
sg7
S'TPreprocessor'
p2718
sg9
I00
sg10
(lp2719
sg12
(lp2720
(S'TFloatList'
p2721
S'classWeights'
p2722
S'class_weights'
p2723
S'weights of examples of particular classes'
p2724
I0
I0
I00
Ntp2725
a(S'bool'
p2726
S'equalize'
p2727
g2727
S'reweight examples to equalize class proportions'
p2728
I0
I0
I01
Ntp2729
a(S'TRandomGenerator'
p2730
S'randomGenerator'
p2731
S'random_generator'
p2732
S'random number generator'
p2733
I0
I0
I00
Ntp2734
asg29
(dp2735
sbsS'THierarchicalClusterList'
p2736
(ipyprops
ClassDefinition
p2737
(dp2738
g4
I0
sg5
I01
sg6
g2736
sg7
g143
sg9
I0
sg10
(lp2739
sg12
(lp2740
sg29
(dp2741
sbsS'TStopIMClusteringByAssessor'
p2742
(i__main__
ClassDefinition
p2743
(dp2744
g4
I1
sg5
I01
sg6
g2742
sg7
S'TOrange'
p2745
sg9
I01
sg10
(lp2746
sg12
(lp2747
sg29
(dp2748
sbsS'TValueFilter_continuous'
p2749
(i__main__
ClassDefinition
p2750
(dp2751
g4
I1
sg5
I01
sg6
g2749
sg7
S'TValueFilter'
p2752
sg9
I00
sg10
(lp2753
sg12
(lp2754
(S'float'
p2755
S'min'
p2756
(g2756
S'ref'
p2757
tp2758
S' reference value (lower bound for interval operators)'
p2759
I0
I0
I01
Ntp2760
a(S'float'
p2761
S'max'
p2762
g2762
S'upper bound for interval operators'
p2763
I0
I0
I01
Ntp2764
a(S'bool'
p2765
S'outside'
p2766
g2766
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2767
I0
I0
I01
Ntp2768
a(S'int'
p2769
S'oper'
p2770
g2770
S' operator'
p2771
I0
I0
I01
S'ValueFilter_Operator'
p2772
tp2773
ag1065
ag1070
asg29
(dp2774
sbsS'TAssociationRule'
p2775
(i__main__
ClassDefinition
p2776
(dp2777
g4
I1
sg5
I01
sg6
g2775
sg7
S'TOrange'
p2778
sg9
I00
sg10
(lp2779
sg12
(lp2780
(S'TExample'
p2781
S'left'
p2782
g2782
S'left side of the rule'
p2783
I01
I0
I00
Ntp2784
a(S'TExample'
p2785
S'right'
p2786
g2786
S'right side of the rule'
p2787
I01
I0
I00
Ntp2788
a(S'float'
p2789
S'support'
p2790
g2790
S'support for the rule'
p2791
I0
I0
I01
Ntp2792
a(S'float'
p2793
S'confidence'
p2794
g2794
S'confidence of the rule'
p2795
I0
I0
I01
Ntp2796
a(S'float'
p2797
S'coverage'
p2798
g2798
S"rule's coverage"
p2799
I0
I0
I01
Ntp2800
a(S'float'
p2801
S'strength'
p2802
g2802
S"rule's strength"
p2803
I0
I0
I01
Ntp2804
a(S'float'
p2805
S'lift'
p2806
g2806
S"rule's lift"
p2807
I0
I0
I01
Ntp2808
a(S'float'
p2809
S'leverage'
p2810
g2810
S"rule's leverage"
p2811
I0
I0
I01
Ntp2812
a(S'float'
p2813
S'nAppliesLeft'
p2814
S'n_applies_left'
p2815
S"number of examples covered by the rule's left side"
p2816
I0
I0
I01
Ntp2817
a(S'float'
p2818
S'nAppliesRight'
p2819
S'n_applies_right'
p2820
S"number of examples covered by the rule's right side"
p2821
I0
I0
I01
Ntp2822
a(S'float'
p2823
S'nAppliesBoth'
p2824
S'n_applies_both'
p2825
S'number of examples covered by the rule'
p2826
I0
I0
I01
Ntp2827
a(S'float'
p2828
S'nExamples'
p2829
S'n_examples'
p2830
S'number of learning examples'
p2831
I0
I0
I01
Ntp2832
a(S'int'
p2833
S'nLeft'
p2834
S'n_left'
p2835
S"number of items on the rule's left side"
p2836
I01
I0
I01
Ntp2837
a(S'int'
p2838
S'nRight'
p2839
S'n_right'
p2840
S"number of items on the rule's right side"
p2841
I01
I0
I01
Ntp2842
a(S'TExampleTable'
p2843
S'examples'
p2844
g2844
S'examples which the rule was built from'
p2845
I01
I0
I00
Ntp2846
a(S'TIntList'
p2847
S'matchLeft'
p2848
S'match_left'
p2849
S'indices of examples that match the left side of the rule'
p2850
I01
I0
I00
Ntp2851
a(S'TIntList'
p2852
S'matchBoth'
p2853
S'match_both'
p2854
S'indices to examples that match both sides of the rule'
p2855
I01
I0
I00
Ntp2856
asg29
(dp2857
sbsS'TValueFilter'
p2858
(i__main__
ClassDefinition
p2859
(dp2860
g4
I1
sg5
I01
sg6
g2858
sg7
S'TOrange'
p2861
sg9
I01
sg10
(lp2862
sg12
(lp2863
g1065
ag1070
asg29
(dp2864
S'Operator'
p2865
(lp2866
(S'None'
p2867
I0
tp2868
a(S'Equal'
p2869
I1
tp2870
a(S'NotEqual'
p2871
I2
tp2872
a(S'Less'
p2873
I3
tp2874
a(S'LessEqual'
p2875
I4
tp2876
a(S'Greater'
p2877
I5
tp2878
a(S'GreaterEqual'
p2879
I6
tp2880
a(S'Between'
p2881
I7
tp2882
a(S'Outside'
p2883
I8
tp2884
a(S'Contains'
p2885
I9
tp2886
a(S'NotContains'
p2887
I10
tp2888
a(S'BeginsWith'
p2889
I11
tp2890
a(S'EndsWith'
p2891
I12
tp2892
a(S'Listed'
p2893
I13
tp2894
assbsS'TClustersFromDistributions'
p2895
(i__main__
ClassDefinition
p2896
(dp2897
g4
I1
sg5
I01
sg6
g2895
sg7
S'TOrange'
p2898
sg9
I01
sg10
(lp2899
sg12
(lp2900
sg29
(dp2901
sbsS'TVariable'
p2902
(i__main__
ClassDefinition
p2903
(dp2904
g4
I1
sg5
I01
sg6
g2902
sg7
S'TOrange'
p2905
sg9
I01
sg10
(lp2906
sg12
(lp2907
g333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp2908
S'Type'
p2909
(lp2910
(S'None'
p2911
S'(int)TValue::NONE'
p2912
tp2913
a(S'Discrete'
p2914
S'(int)TValue::INTVAR'
p2915
tp2916
a(S'Continuous'
p2917
S'(int)TValue::FLOATVAR'
p2918
tp2919
a(S'Other'
p2920
S'(int)(TValue::FLOATVAR+1)'
p2921
tp2922
a(S'String'
p2923
S'(int)STRINGVAR'
p2924
tp2925
asS'MakeStatus'
p2926
(lp2927
(S'OK'
p2928
I0
tp2929
a(S'MissingValues'
p2930
I1
tp2931
a(S'NoRecognizedValues'
p2932
I2
tp2933
a(S'Incompatible'
p2934
I3
tp2935
a(S'NotFound'
p2936
I4
tp2937
assbsS'TNoiseValuesGenerator'
p2938
(i__main__
ClassDefinition
p2939
(dp2940
g4
I1
sg5
I01
sg6
g2938
sg7
S'TChangeExampleGenerator'
p2941
sg9
I00
sg10
(lp2942
sg12
(lp2943
(S'TIntFloatList'
p2944
S'replaceProbabilities'
p2945
S'replace_probabilities'
p2946
S"probabilities for replacing attributes' values"
p2947
I0
I0
I00
Ntp2948
a(S'TRandomGenerator'
p2949
S'randomGenerator'
p2950
S'random_generator'
p2951
S'random generator'
p2952
I0
I0
I00
Ntp2953
ag306
ag310
asg29
(dp2954
sbsS'TC45TreeNodeList'
p2955
(ipyprops
ClassDefinition
p2956
(dp2957
g4
I0
sg5
I01
sg6
g2955
sg7
g143
sg9
I0
sg10
(lp2958
sg12
(lp2959
sg29
(dp2960
sbsS'TFilter_sameValue'
p2961
(i__main__
ClassDefinition
p2962
(dp2963
g4
I1
sg5
I01
sg6
g2961
sg7
S'TFilter'
p2964
sg9
I00
sg10
(lp2965
sg12
(lp2966
(S'int'
p2967
S'position'
p2968
g2968
S'position of the observed attribute'
p2969
I0
I0
I01
Ntp2970
a(S'TValue'
p2971
S'value'
p2972
g2972
S'value that the selected examples should have'
p2973
I0
I0
I01
Ntp2974
ag691
ag695
asg29
(dp2975
sbsS'TEquiNDiscretization'
p2976
(i__main__
ClassDefinition
p2977
(dp2978
g4
I1
sg5
I01
sg6
g2976
sg7
S'TDiscretization'
p2979
sg9
I00
sg10
(lp2980
sg12
(lp2981
(S'int'
p2982
S'numberOfIntervals'
p2983
(g2983
g1022
tp2984
S' number of intervals'
p2985
I0
I0
I01
Ntp2986
a(S'bool'
p2987
S'recursiveDivision'
p2988
S'recursive_division'
p2989
S'find cut-off points by recursive division (default = true)'
p2990
I0
I0
I01
Ntp2991
asg29
(dp2992
sbsS'TImputerConstructor_average'
p2993
(i__main__
ClassDefinition
p2994
(dp2995
g4
I1
sg5
I01
sg6
g2993
sg7
S'TImputerConstructor'
p2996
sg9
I00
sg10
(lp2997
sg12
(lp2998
g164
asg29
(dp2999
sbsS'TGaussianDistribution'
p3000
(i__main__
ClassDefinition
p3001
(dp3002
g4
I1
sg5
I01
sg6
g3000
sg7
S'TDistribution'
p3003
sg9
I00
sg10
(lp3004
sg12
(lp3005
(S'float'
p3006
S'mean'
p3007
g3007
S'mu'
p3008
I0
I0
I01
Ntp3009
a(S'float'
p3010
S'sigma'
p3011
g3011
S'sigma'
p3012
I0
I0
I01
Ntp3013
ag1136
ag1140
ag1144
ag1148
ag1152
ag1157
ag1162
ag1167
asg29
(dp3014
sbsS'TDomainBasicAttrStat'
p3015
(ipyprops
ClassDefinition
p3016
(dp3017
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p3018
sg7
g143
sg9
I0
sg10
(lp3019
sg12
(lp3020
sg29
(dp3021
sbsS'TStopDistributionClustering'
p3022
(i__main__
ClassDefinition
p3023
(dp3024
g4
I1
sg5
I01
sg6
g3022
sg7
S'TOrange'
p3025
sg9
I01
sg10
(lp3026
sg12
(lp3027
sg29
(dp3028
sbsS'TImputerConstructor_maximal'
p3029
(i__main__
ClassDefinition
p3030
(dp3031
g4
I1
sg5
I01
sg6
g3029
sg7
S'TImputerConstructor'
p3032
sg9
I00
sg10
(lp3033
sg12
(lp3034
g164
asg29
(dp3035
sbsS'TImputerConstructor_random'
p3036
(i__main__
ClassDefinition
p3037
(dp3038
g4
I1
sg5
I01
sg6
g3036
sg7
S'TImputerConstructor'
p3039
sg9
I00
sg10
(lp3040
sg12
(lp3041
(S'bool'
p3042
S'deterministic'
p3043
g3043
S"tells whether to initialize random by example's CRC (default: false)"
p3044
I0
I0
I01
Ntp3045
ag164
asg29
(dp3046
sbsS'TCostWrapperClassifier'
p3047
(i__main__
ClassDefinition
p3048
(dp3049
g4
I1
sg5
I01
sg6
g3047
sg7
S'TClassifier'
p3050
sg9
I00
sg10
(lp3051
sg12
(lp3052
(S'TClassifier'
p3053
S'classifier'
p3054
g3054
S'basic classifier'
p3055
I0
I0
I00
Ntp3056
a(S'TCostMatrix'
p3057
S'costMatrix'
p3058
S'cost_matrix'
p3059
S'cost matrix'
p3060
I0
I0
I00
Ntp3061
ag94
ag99
asg29
(dp3062
sbsS'TPreprocessor_ignore'
p3063
(i__main__
ClassDefinition
p3064
(dp3065
g4
I1
sg5
I01
sg6
g3063
sg7
S'TPreprocessor'
p3066
sg9
I00
sg10
(lp3067
sg12
(lp3068
(S'TVarList'
p3069
S'attributes'
p3070
g3070
S'tells which attributes to remove'
p3071
I0
I0
I00
Ntp3072
asg29
(dp3073
sbsS'TExamplesDistance_Euclidean'
p3074
(i__main__
ClassDefinition
p3075
(dp3076
g4
I1
sg5
I01
sg6
g3074
sg7
S'TExamplesDistance_Normalized'
p3077
sg9
I00
sg10
(lp3078
sg12
(lp3079
(S'TDomainDistributions'
p3080
S'distributions'
p3081
g3081
S'distributions (of discrete attributes only)'
p3082
I0
I0
I00
Ntp3083
a(S'TAttributedFloatList'
p3084
S'bothSpecialDist'
p3085
S'both_special_dist'
p3086
S'distances between discrete attributes if both values are unknown'
p3087
I0
I0
I00
Ntp3088
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp3089
sbsS'TMeasureAttribute_Python'
p3090
(i__main__
ClassDefinition
p3091
(dp3092
g4
I1
sg5
I01
sg6
g3090
sg7
S'TMeasureAttribute'
p3093
sg9
I00
sg10
(lp3094
sg12
(lp3095
g930
ag935
ag940
ag945
asg29
(dp3096
sbsS'TPreprocessor_take'
p3097
(i__main__
ClassDefinition
p3098
(dp3099
g4
I1
sg5
I01
sg6
g3097
sg7
S'TPreprocessor'
p3100
sg9
I00
sg10
(lp3101
sg12
(lp3102
(S'TVariableFilterMap'
p3103
S'values'
p3104
g3104
S'variable-filter pairs'
p3105
I0
I0
I00
Ntp3106
a(S'bool'
p3107
S'conjunction'
p3108
g3108
S'decides whether to take conjunction or disjunction of values'
p3109
I0
I0
I01
Ntp3110
asg29
(dp3111
sbsS'TDistributionAssessor_m'
p3112
(i__main__
ClassDefinition
p3113
(dp3114
g4
I1
sg5
I01
sg6
g3112
sg7
S'TDistributionAssessor'
p3115
sg9
I00
sg10
(lp3116
sg12
(lp3117
(S'float'
p3118
g1216
g1216
S'm for m-estimate'
p3119
I0
I0
I01
Ntp3120
asg29
(dp3121
sbsS'TClassifierRandomGenerator'
p3122
(i__main__
ClassDefinition
p3123
(dp3124
g4
I1
sg5
I01
sg6
g3122
sg7
S'TExampleGenerator'
p3125
sg9
I00
sg10
(lp3126
sg12
(lp3127
(S'TClassifier'
p3128
S'classify'
p3129
g3129
S'classifier'
p3130
I0
I0
I00
Ntp3131
a(S'int'
p3132
S'noOfEx'
p3133
S'no_of_ex'
p3134
S'number of examples'
p3135
I0
I0
I01
Ntp3136
ag306
ag310
asg29
(dp3137
sbsS'TThresholdDiscretizer'
p3138
(i__main__
ClassDefinition
p3139
(dp3140
g4
I1
sg5
I01
sg6
g3138
sg7
S'TDiscretizer'
p3141
sg9
I00
sg10
(lp3142
sg12
(lp3143
(S'float'
p3144
S'threshold'
p3145
g3145
S'threshold'
p3146
I0
I0
I01
Ntp3147
ag805
asg29
(dp3148
sbsS'TPathfinder'
p3149
(i__main__
ClassDefinition
p3150
(dp3151
g4
I1
sg5
I0
sg6
g3149
sg7
S'TOrange'
p3152
sg9
I00
sg10
(lp3153
sg12
(lp3154
sg29
(dp3155
sbsS'TExampleTable'
p3156
(i__main__
ClassDefinition
p3157
(dp3158
g4
I1
sg5
I01
sg6
g3156
sg7
S'TExampleGenerator'
p3159
sg9
I00
sg10
(lp3160
sg12
(lp3161
(S'TRandomGenerator'
p3162
S'randomGenerator'
p3163
S'random_generator'
p3164
S'random generator used by randomExample'
p3165
I0
I0
I00
Ntp3166
a(S'TExampleGenerator'
p3167
S'lock'
p3168
(g3168
S'owner'
p3169
tp3170
S' the real owner of examples'
p3171
I01
I0
I00
Ntp3172
a(S'bool'
p3173
S'ownsExamples'
p3174
(g3174
S'owns_instances'
p3175
tp3176
S' if false, examples in this table are references to examples in another table'
p3177
I01
I0
I01
Ntp3178
ag306
ag310
asg29
(dp3179
sbsS'TEVDistGetter'
p3180
(i__main__
ClassDefinition
p3181
(dp3182
g4
I1
sg5
I01
sg6
g3180
sg7
S'TOrange'
p3183
sg9
I01
sg10
(lp3184
sg12
(lp3185
sg29
(dp3186
sbsS'TTreeSplitConstructor_Threshold'
p3187
(i__main__
ClassDefinition
p3188
(dp3189
g4
I1
sg5
I01
sg6
g3187
sg7
S'TTreeSplitConstructor_Measure'
p3190
sg9
I00
sg10
(lp3191
sg12
(lp3192
g1306
ag1311
ag783
asg29
(dp3193
sbsS'TStopDistributionClustering_n'
p3194
(i__main__
ClassDefinition
p3195
(dp3196
g4
I1
sg5
I01
sg6
g3194
sg7
S'TStopDistributionClustering'
p3197
sg9
I00
sg10
(lp3198
sg12
(lp3199
(S'int'
p3200
g1022
g1022
S'number of clusters'
p3201
I0
I0
I01
Ntp3202
asg29
(dp3203
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3204
(i__main__
ClassDefinition
p3205
(dp3206
g4
I1
sg5
I01
sg6
g3204
sg7
S'TTreeExampleSplitter'
p3207
sg9
I00
sg10
(lp3208
sg12
(lp3209
sg29
(dp3210
sbsS'TClassifier_Python'
p3211
(i__main__
ClassDefinition
p3212
(dp3213
g4
I1
sg5
I01
sg6
g3211
sg7
S'TClassifier'
p3214
sg9
I00
sg10
(lp3215
sg12
(lp3216
g94
ag99
asg29
(dp3217
sbsS'TSgnRelStress'
p3218
(i__main__
ClassDefinition
p3219
(dp3220
g4
I1
sg5
I0
sg6
g3218
sg7
S'TStressFunc'
p3221
sg9
I00
sg10
(lp3222
sg12
(lp3223
sg29
(dp3224
sbsS'TFilter_isDefined'
p3225
(i__main__
ClassDefinition
p3226
(dp3227
g4
I1
sg5
I01
sg6
g3225
sg7
S'TFilter'
p3228
sg9
I00
sg10
(lp3229
sg12
(lp3230
(S'TAttributedBoolList'
p3231
S'check'
p3232
g3232
S'tells which attributes to check; checks all if the list is empty'
p3233
I0
I0
I00
Ntp3234
ag691
ag695
asg29
(dp3235
sbsS'TRemoveRedundantByQuality'
p3236
(i__main__
ClassDefinition
p3237
(dp3238
g4
I1
sg5
I01
sg6
g3236
sg7
S'TRemoveRedundant'
p3239
sg9
I00
sg10
(lp3240
sg12
(lp3241
(S'bool'
p3242
S'remeasure'
p3243
g3243
S'reapply the measure after removal'
p3244
I0
I0
I01
Ntp3245
a(S'float'
p3246
S'minQuality'
p3247
S'min_quality'
p3248
S'minimal acceptable quality'
p3249
I0
I0
I01
Ntp3250
a(S'int'
p3251
S'removeBut'
p3252
S'remove_but'
p3253
S'the desired number of attributes'
p3254
I0
I0
I01
Ntp3255
a(S'TMeasureAttribute'
p3256
S'measure'
p3257
g3257
S'attribute quality measure'
p3258
I0
I0
I00
Ntp3259
ag1352
asg29
(dp3260
sbsS'TGraphAsList'
p3261
(i__main__
ClassDefinition
p3262
(dp3263
g4
I1
sg5
I01
sg6
g3261
sg7
S'TGraph'
p3264
sg9
I00
sg10
(lp3265
sg12
(lp3266
g1497
ag1502
ag1506
asg29
(dp3267
sbsS'TProbabilityEstimatorConstructor_m'
p3268
(i__main__
ClassDefinition
p3269
(dp3270
g4
I1
sg5
I01
sg6
g3268
sg7
S'TProbabilityEstimatorConstructor'
p3271
sg9
I00
sg10
(lp3272
sg12
(lp3273
(S'float'
p3274
g1216
g1216
S'parameter m for m-estimation'
p3275
I0
I0
I01
Ntp3276
a(S'bool'
p3277
S'renormalize'
p3278
g3278
S'computes the estimate on the original (not the normalized) distribution'
p3279
I0
I0
I01
Ntp3280
asg29
(dp3281
sbsS'TDistanceMap'
p3282
(i__main__
ClassDefinition
p3283
(dp3284
g4
I1
sg5
I01
sg6
g3282
sg7
S'TOrange'
p3285
sg9
I00
sg10
(lp3286
sg12
(lp3287
(S'int'
p3288
S'dim'
p3289
g3289
S'bitmap dimension (in cells)'
p3290
I01
I0
I01
Ntp3291
a(S'int'
p3292
S'matrixType'
p3293
S'matrix_type'
p3294
S'0 lower, 1 upper, 2 symmetric'
p3295
I0
I0
I01
Ntp3296
a(S'TIntList'
p3297
S'elementIndices'
p3298
S'element_indices'
p3299
S'indices to elements (one for row + one at the end)'
p3300
I01
I0
I00
Ntp3301
asg29
(dp3302
sbsS'TDistanceMapConstructor'
p3303
(i__main__
ClassDefinition
p3304
(dp3305
g4
I1
sg5
I01
sg6
g3303
sg7
S'TOrange'
p3306
sg9
I00
sg10
(lp3307
sg12
(lp3308
(S'TSymMatrix'
p3309
S'distanceMatrix'
p3310
S'distance_matrix'
p3311
S'distance matrix'
p3312
I0
I0
I00
Ntp3313
a(S'TIntList'
p3314
S'order'
p3315
g3315
S'order of elements'
p3316
I0
I0
I00
Ntp3317
asg29
(dp3318
sbsS'TTransformValue'
p3319
(i__main__
ClassDefinition
p3320
(dp3321
g4
I1
sg5
I01
sg6
g3319
sg7
S'TOrange'
p3322
sg9
I01
sg10
(lp3323
sg12
(lp3324
g805
asg29
(dp3325
sbsS'TComputeDomainContingency_DomainTransformation'
p3326
(i__main__
ClassDefinition
p3327
(dp3328
g4
I1
sg5
I01
sg6
g3326
sg7
S'TComputeDomainContingency'
p3329
sg9
I00
sg10
(lp3330
sg12
(lp3331
(S'TDomainTransformerConstructor'
p3332
S'domainTransformerConstructor'
p3333
S'domain_transformer_constructor'
p3334
S'constructs a domain in which each attribute corresponds one of originals'
p3335
I0
I0
I00
Ntp3336
a(S'bool'
p3337
S'resultInOriginalDomain'
p3338
S'result_in_original_domain'
p3339
S'tells whether the resulting DomainContingency should consist of original attributes'
p3340
I0
I0
I01
Ntp3341
ag28
asg29
(dp3342
sbsS'TStopDistributionClustering_noBigChange'
p3343
(i__main__
ClassDefinition
p3344
(dp3345
g4
I1
sg5
I01
sg6
g3343
sg7
S'TStopDistributionClustering'
p3346
sg9
I00
sg10
(lp3347
sg12
(lp3348
sg29
(dp3349
sbsS'TTreePruner'
p3350
(i__main__
ClassDefinition
p3351
(dp3352
g4
I1
sg5
I01
sg6
g3350
sg7
S'TOrange'
p3353
sg9
I01
sg10
(lp3354
sg12
(lp3355
sg29
(dp3356
sbsg1764
(ipyprops
ClassDefinition
p3357
(dp3358
g4
I0
sg5
I01
sg6
g1764
sg7
g143
sg9
I0
sg10
(lp3359
sg12
(lp3360
sg29
(dp3361
sbsS'TImputer_Python'
p3362
(i__main__
ClassDefinition
p3363
(dp3364
g4
I1
sg5
I01
sg6
g3362
sg7
S'TImputer'
p3365
sg9
I00
sg10
(lp3366
sg12
(lp3367
sg29
(dp3368
sbsS'TVarList'
p3369
(ipyprops
ClassDefinition
p3370
(dp3371
g4
I0
sg5
I01
sg6
g3369
sg7
g143
sg9
I0
sg10
(lp3372
sg12
(lp3373
sg29
(dp3374
sbsS'TRuleLearner'
p3375
(i__main__
ClassDefinition
p3376
(dp3377
g4
I1
sg5
I01
sg6
g3375
sg7
S'TLearner'
p3378
sg9
I00
sg10
(lp3379
sg12
(lp3380
(S'TRuleDataStoppingCriteria'
p3381
S'dataStopping'
p3382
S'data_stopping'
p3383
g600
I0
I0
I00
Ntp3384
a(S'TRuleStoppingCriteria'
p3385
S'ruleStopping'
p3386
S'rule_stopping'
p3387
g600
I0
I0
I00
Ntp3388
a(S'TRuleCovererAndRemover'
p3389
S'coverAndRemove'
p3390
S'cover_and_remove'
p3391
g600
I0
I0
I00
Ntp3392
a(S'TRuleFinder'
p3393
S'ruleFinder'
p3394
S'rule_finder'
p3395
g600
I0
I0
I00
Ntp3396
a(S'TRuleClassifierConstructor'
p3397
S'classifierConstructor'
p3398
S'classifier_constructor'
p3399
S'classifier'
p3400
I0
I0
I00
Ntp3401
a(S'TProgressCallback'
p3402
S'progressCallback'
p3403
S'progress_callback'
p3404
S'progress callback function'
p3405
I0
I0
I00
Ntp3406
a(S'bool'
p3407
S'storeExamples'
p3408
S'store_examples'
p3409
g600
I0
I0
I01
Ntp3410
a(S'int'
p3411
S'targetClass'
p3412
S'target_class'
p3413
g600
I0
I0
I01
Ntp3414
a(S'TRuleList'
p3415
S'baseRules'
p3416
S'base_rules'
p3417
g600
I0
I0
I00
Ntp3418
ag110
asg29
(dp3419
sbsS'TOrdinal2Continuous'
p3420
(i__main__
ClassDefinition
p3421
(dp3422
g4
I1
sg5
I01
sg6
g3420
sg7
S'TTransformValue'
p3423
sg9
I00
sg10
(lp3424
sg12
(lp3425
(S'float'
p3426
S'factor'
p3427
g3427
S'number of values'
p3428
I0
I0
I01
Ntp3429
ag805
asg29
(dp3430
sbsS'TLinearLearner'
p3431
(i__main__
ClassDefinition
p3432
(dp3433
g4
I1
sg5
I01
sg6
g3431
sg7
S'TLearner'
p3434
sg9
I00
sg10
(lp3435
sg12
(lp3436
(S'int'
p3437
S'solver_type'
p3438
g3438
S' Solver type (loss function1)'
p3439
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3440
tp3441
a(S'float'
p3442
S'eps'
p3443
g3443
S'Stopping criteria'
p3444
I0
I0
I01
Ntp3445
a(S'float'
p3446
S'C'
p3447
g3447
S'Regularization parameter'
p3448
I0
I0
I01
Ntp3449
ag110
asg29
(dp3450
S'LIBLINEAR_VERSION'
p3451
(lp3452
(S'VERSION'
p3453
S'180'
p3454
tp3455
asS'Lossfunction1'
p3456
(lp3457
(S'L2R_LR'
p3458
I0
tp3459
a(S'L2R_L2Loss_SVC_Dual'
p3460
I1
tp3461
a(S'L2R_L2Loss_SVC'
p3462
I2
tp3463
a(S'L2R_L1Loss_SVC_Dual'
p3464
I3
tp3465
a(S'MCSVM_CS'
p3466
I4
tp3467
a(S'L1R_L2Loss_SVC'
p3468
I5
tp3469
a(S'L1R_LR'
p3470
I6
tp3471
a(S'L2R_LR_Dual'
p3472
I7
tp3473
asS'Lossfunction1_old_'
p3474
(lp3475
(S'L2_LR'
p3476
I0
tp3477
a(S'L2Loss_SVM_Dual'
p3478
I1
tp3479
a(S'L2Loss_SVM'
p3480
I2
tp3481
a(S'L1Loss_SVM_Dual'
p3482
I3
tp3483
assbsS'TTreeSplitConstructor_Combined'
p3484
(i__main__
ClassDefinition
p3485
(dp3486
g4
I1
sg5
I01
sg6
g3484
sg7
S'TTreeSplitConstructor'
p3487
sg9
I00
sg10
(lp3488
sg12
(lp3489
(S'TTreeSplitConstructor'
p3490
S'discreteSplitConstructor'
p3491
S'discrete_split_constructor'
p3492
S'split constructor for discrete attributes'
p3493
I0
I0
I00
Ntp3494
a(S'TTreeSplitConstructor'
p3495
S'continuousSplitConstructor'
p3496
S'continuous_split_constructor'
p3497
S'split constructor for continuous attributes'
p3498
I0
I0
I00
Ntp3499
ag783
asg29
(dp3500
sbsS'TTransformValue_Python'
p3501
(i__main__
ClassDefinition
p3502
(dp3503
g4
I1
sg5
I01
sg6
g3501
sg7
S'TTransformValue'
p3504
sg9
I00
sg10
(lp3505
sg12
(lp3506
g805
asg29
(dp3507
sbsS'TStopIMClusteringByAssessor_noProfit'
p3508
(i__main__
ClassDefinition
p3509
(dp3510
g4
I1
sg5
I01
sg6
g3508
sg7
S'TStopIMClusteringByAssessor'
p3511
sg9
I00
sg10
(lp3512
sg12
(lp3513
(S'float'
p3514
S'minProfitProportion'
p3515
S'min_profit_proportion'
p3516
S'minimal allowable profit proportion'
p3517
I0
I0
I01
Ntp3518
asg29
(dp3519
sbsS'TRuleEvaluator_Python'
p3520
(i__main__
ClassDefinition
p3521
(dp3522
g4
I1
sg5
I01
sg6
g3520
sg7
S'TRuleEvaluator'
p3523
sg9
I00
sg10
(lp3524
sg12
(lp3525
sg29
(dp3526
sbsS'TIGBySorting'
p3527
(i__main__
ClassDefinition
p3528
(dp3529
g4
I1
sg5
I01
sg6
g3527
sg7
S'TIGConstructor'
p3530
sg9
I00
sg10
(lp3531
sg12
(lp3532
sg29
(dp3533
sbsS'TConditionalProbabilityEstimator_ByRows'
p3534
(i__main__
ClassDefinition
p3535
(dp3536
g4
I1
sg5
I01
sg6
g3534
sg7
S'TConditionalProbabilityEstimator'
p3537
sg9
I00
sg10
(lp3538
sg12
(lp3539
(S'TProbabilityEstimatorList'
p3540
S'estimatorList'
p3541
S'estimator_list'
p3542
S'A list of probability estimators'
p3543
I0
I0
I00
Ntp3544
ag133
ag138
asg29
(dp3545
sbsS'TFindNearest'
p3546
(i__main__
ClassDefinition
p3547
(dp3548
g4
I1
sg5
I01
sg6
g3546
sg7
S'TOrange'
p3549
sg9
I01
sg10
(lp3550
sg12
(lp3551
g1095
ag1100
asg29
(dp3552
sbsS'TProgressCallback'
p3553
(i__main__
ClassDefinition
p3554
(dp3555
g4
I1
sg5
I01
sg6
g3553
sg7
S'TOrange'
p3556
sg9
I01
sg10
(lp3557
sg12
(lp3558
sg29
(dp3559
sbsS'THierarchicalClustering'
p3560
(i__main__
ClassDefinition
p3561
(dp3562
g4
I1
sg5
I01
sg6
g3560
sg7
S'TOrange'
p3563
sg9
I00
sg10
(lp3564
sg12
(lp3565
(S'int'
p3566
S'linkage'
p3567
g3567
S' linkage'
p3568
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3569
tp3570
a(S'bool'
p3571
S'overwriteMatrix'
p3572
S'overwrite_matrix'
p3573
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3574
I0
I0
I01
Ntp3575
a(S'TProgressCallback'
p3576
S'progressCallback'
p3577
S'progress_callback'
p3578
S'progress callback function'
p3579
I0
I0
I00
Ntp3580
asg29
(dp3581
S'Linkage'
p3582
(lp3583
(S'Single'
p3584
I0
tp3585
a(S'Average'
p3586
I1
tp3587
a(S'Complete'
p3588
I2
tp3589
a(S'Ward'
p3590
I3
tp3591
assbsS'TLogRegFitter_Cholesky'
p3592
(i__main__
ClassDefinition
p3593
(dp3594
g4
I1
sg5
I01
sg6
g3592
sg7
S'TLogRegFitter'
p3595
sg9
I00
sg10
(lp3596
sg12
(lp3597
sg29
(dp3598
sbsS'TClassifierFromVar'
p3599
(i__main__
ClassDefinition
p3600
(dp3601
g4
I1
sg5
I01
sg6
g3599
sg7
S'TClassifier'
p3602
sg9
I00
sg10
(lp3603
sg12
(lp3604
(S'TVariable'
p3605
S'whichVar'
p3606
(g3606
S'variable'
p3607
tp3608
S' variable'
p3609
I0
I0
I00
Ntp3610
a(S'TTransformValue'
p3611
S'transformer'
p3612
g3612
S'transformer'
p3613
I0
I0
I00
Ntp3614
a(S'TDistribution'
p3615
S'distributionForUnknown'
p3616
S'distribution_for_unknown'
p3617
S'distribution for unknown value'
p3618
I0
I0
I00
Ntp3619
a(S'bool'
p3620
S'transformUnknowns'
p3621
S'transform_unknowns'
p3622
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3623
I0
I0
I01
Ntp3624
ag94
ag99
asg29
(dp3625
sbsg2278
(ipyprops
ClassDefinition
p3626
(dp3627
g4
I0
sg5
I01
sg6
g2278
sg7
g143
sg9
I0
sg10
(lp3628
sg12
(lp3629
sg29
(dp3630
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p3631
(i__main__
ClassDefinition
p3632
(dp3633
g4
I1
sg5
I01
sg6
g3631
sg7
S'TTreeExampleSplitter'
p3634
sg9
I00
sg10
(lp3635
sg12
(lp3636
sg29
(dp3637
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3638
(i__main__
ClassDefinition
p3639
(dp3640
g4
I1
sg5
I01
sg6
g3638
sg7
S'TTreeSplitConstructor_Measure'
p3641
sg9
I00
sg10
(lp3642
sg12
(lp3643
g1306
ag1311
ag783
asg29
(dp3644
sbsS'TClassifier'
p3645
(i__main__
ClassDefinition
p3646
(dp3647
g4
I1
sg5
I01
sg6
g3645
sg7
S'TOrange'
p3648
sg9
I00
sg10
(lp3649
sg12
(lp3650
g94
ag99
asg29
(dp3651
sbsS'TTreeSplitConstructor_Python'
p3652
(i__main__
ClassDefinition
p3653
(dp3654
g4
I1
sg5
I01
sg6
g3652
sg7
S'TTreeSplitConstructor'
p3655
sg9
I00
sg10
(lp3656
sg12
(lp3657
g783
asg29
(dp3658
sbsS'TIG'
p3659
(i__main__
ClassDefinition
p3660
(dp3661
g4
I1
sg5
I01
sg6
g3659
sg7
S'TOrange'
p3662
sg9
I00
sg10
(lp3663
sg12
(lp3664
sg29
(dp3665
sbsS'TTreeClassifier'
p3666
(i__main__
ClassDefinition
p3667
(dp3668
g4
I1
sg5
I01
sg6
g3666
sg7
S'TClassifierFD'
p3669
sg9
I00
sg10
(lp3670
sg12
(lp3671
(S'TTreeNode'
p3672
S'tree'
p3673
g3673
S'decision tree'
p3674
I0
I0
I00
Ntp3675
a(S'TTreeDescender'
p3676
S'descender'
p3677
g3677
S'object that descends down the tree'
p3678
I0
I0
I00
Ntp3679
ag291
ag94
ag99
asg29
(dp3680
sbsS'TEarthLearner'
p3681
(i__main__
ClassDefinition
p3682
(dp3683
g4
I1
sg5
I01
sg6
g3681
sg7
S'TLearner'
p3684
sg9
I00
sg10
(lp3685
sg12
(lp3686
(S'int'
p3687
S'max_terms'
p3688
g3688
S'Maximum number of terms.'
p3689
I0
I0
I01
Ntp3690
a(S'int'
p3691
S'max_degree'
p3692
g3692
S'Maximum degree of terms.'
p3693
I0
I0
I01
Ntp3694
a(S'float'
p3695
S'penalty'
p3696
g3696
S'Penalty.'
p3697
I0
I0
I01
Ntp3698
a(S'float'
p3699
S'threshold'
p3700
g3700
S'Forward step threshold.'
p3701
I0
I0
I01
Ntp3702
a(S'bool'
p3703
S'prune'
p3704
g3704
S'Prune terms (do backward pass).'
p3705
I0
I0
I01
Ntp3706
a(S'float'
p3707
S'fast_beta'
p3708
g3708
S'Fast beta (aging coefficient).'
p3709
I0
I0
I01
Ntp3710
a(S'float'
p3711
S'trace'
p3712
g3712
S'Execution trace (for debugging only).'
p3713
I0
I0
I01
Ntp3714
a(S'int'
p3715
S'min_span'
p3716
g3716
S'Min. span (training instances) between knots.'
p3717
I0
I0
I01
Ntp3718
a(S'int'
p3719
S'fast_k'
p3720
g3720
S'Fast K.'
p3721
I0
I0
I01
Ntp3722
a(S'bool'
p3723
S'new_var_penalty'
p3724
g3724
S'Penalty for adding a new variable.'
p3725
I0
I0
I01
Ntp3726
a(S'bool'
p3727
S'use_beta_cache'
p3728
g3728
S'Use caching for betas.'
p3729
I0
I0
I01
Ntp3730
ag110
asg29
(dp3731
sbsS'TMeasureAttribute_logOddsRatio'
p3732
(i__main__
ClassDefinition
p3733
(dp3734
g4
I1
sg5
I01
sg6
g3732
sg7
S'TMeasureAttributeFromProbabilities'
p3735
sg9
I00
sg10
(lp3736
sg12
(lp3737
g914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp3738
sbsS'TTreeExampleSplitter_Python'
p3739
(i__main__
ClassDefinition
p3740
(dp3741
g4
I1
sg5
I01
sg6
g3739
sg7
S'TTreeExampleSplitter'
p3742
sg9
I00
sg10
(lp3743
sg12
(lp3744
sg29
(dp3745
sbsS'TKernelFunc_Python'
p3746
(i__main__
ClassDefinition
p3747
(dp3748
g4
I1
sg5
I01
sg6
g3746
sg7
S'TKernelFunc'
p3749
sg9
I00
sg10
(lp3750
sg12
(lp3751
sg29
(dp3752
sbsS'TAdapterGenerator'
p3753
(i__main__
ClassDefinition
p3754
(dp3755
g4
I1
sg5
I01
sg6
g3753
sg7
S'TExampleGenerator'
p3756
sg9
I00
sg10
(lp3757
sg12
(lp3758
g306
ag310
asg29
(dp3759
sbsS'TIMFromExamples'
p3760
(i__main__
ClassDefinition
p3761
(dp3762
g4
I1
sg5
I01
sg6
g3760
sg7
S'TOrange'
p3763
sg9
I01
sg10
(lp3764
sg12
(lp3765
sg29
(dp3766
sbsS'TFilter_random'
p3767
(i__main__
ClassDefinition
p3768
(dp3769
g4
I1
sg5
I01
sg6
g3767
sg7
S'TFilter'
p3770
sg9
I00
sg10
(lp3771
sg12
(lp3772
(S'float'
p3773
S'prob'
p3774
g3774
S'probability of selecting an example'
p3775
I0
I0
I01
Ntp3776
a(S'TRandomGenerator'
p3777
S'randomGenerator'
p3778
S'random_generator'
p3779
S'random generator'
p3780
I0
I0
I00
Ntp3781
ag691
ag695
asg29
(dp3782
sbsS'TC45ExampleGenerator'
p3783
(i__main__
ClassDefinition
p3784
(dp3785
g4
I1
sg5
I01
sg6
g3783
sg7
S'TFileExampleGenerator'
p3786
sg9
I00
sg10
(lp3787
sg12
(lp3788
(S'TBoolList'
p3789
S'skip'
p3790
g3790
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3791
I0
I0
I00
Ntp3792
ag1589
ag1594
ag1599
ag306
ag310
asg29
(dp3793
sbsS'TProbabilityEstimatorConstructor_loess'
p3794
(i__main__
ClassDefinition
p3795
(dp3796
g4
I1
sg5
I01
sg6
g3794
sg7
S'TProbabilityEstimatorConstructor'
p3797
sg9
I00
sg10
(lp3798
sg12
(lp3799
(S'float'
p3800
S'windowProportion'
p3801
S'window_proportion'
p3802
S'The proportion of points in a window for LR'
p3803
I0
I0
I01
Ntp3804
a(S'int'
p3805
S'nPoints'
p3806
S'n_points'
p3807
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3808
I0
I0
I01
Ntp3809
a(S'int'
p3810
S'distributionMethod'
p3811
S'distribution_method'
p3812
S" Meaning of the 'nPoints'"
p3813
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3814
tp3815
asg29
(dp3816
S'DistributionMethod'
p3817
(lp3818
(S'Minimal'
p3819
S'DISTRIBUTE_MINIMAL'
p3820
tp3821
a(S'Factor'
p3822
S'DISTRIBUTE_FACTOR'
p3823
tp3824
a(S'Fixed'
p3825
S'DISTRIBUTE_FIXED'
p3826
tp3827
a(S'Uniform'
p3828
S'DISTRIBUTE_UNIFORM'
p3829
tp3830
a(S'Maximal'
p3831
S'DISTRIBUTE_MAXIMAL'
p3832
tp3833
assbsS'TExamplesDistance_Lp'
p3834
(i__main__
ClassDefinition
p3835
(dp3836
g4
I1
sg5
I01
sg6
g3834
sg7
S'TExamplesDistance_Normalized'
p3837
sg9
I00
sg10
(lp3838
sg12
(lp3839
(S'float'
p3840
g2222
g2222
g2222
I01
I0
I01
Ntp3841
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp3842
sbsS'TLogRegFitter'
p3843
(i__main__
ClassDefinition
p3844
(dp3845
g4
I1
sg5
I01
sg6
g3843
sg7
S'TOrange'
p3846
sg9
I01
sg10
(lp3847
sg12
(lp3848
sg29
(dp3849
S'ErrorCode'
p3850
(lp3851
(S'OK'
p3852
I0
tp3853
a(S'Infinity'
p3854
I1
tp3855
a(S'Divergence'
p3856
I2
tp3857
a(S'Constant'
p3858
I3
tp3859
a(S'Singularity'
p3860
I4
tp3861
assbsS'TMakeRandomIndicesCV'
p3862
(i__main__
ClassDefinition
p3863
(dp3864
g4
I1
sg5
I01
sg6
g3862
sg7
S'TMakeRandomIndices'
p3865
sg9
I00
sg10
(lp3866
sg12
(lp3867
(S'int'
p3868
S'folds'
p3869
g3869
S'number of folds'
p3870
I0
I0
I01
Ntp3871
ag714
ag718
ag723
asg29
(dp3872
sbsS'TClassifierList'
p3873
(ipyprops
ClassDefinition
p3874
(dp3875
g4
I0
sg5
I01
sg6
g3873
sg7
g143
sg9
I0
sg10
(lp3876
sg12
(lp3877
sg29
(dp3878
sbsS'TPreprocessor_removeDuplicates'
p3879
(i__main__
ClassDefinition
p3880
(dp3881
g4
I1
sg5
I01
sg6
g3879
sg7
S'TPreprocessor'
p3882
sg9
I00
sg10
(lp3883
sg12
(lp3884
sg29
(dp3885
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3886
(i__main__
ClassDefinition
p3887
(dp3888
g4
I1
sg5
I01
sg6
g3886
sg7
S'TTreeExampleSplitter'
p3889
sg9
I00
sg10
(lp3890
sg12
(lp3891
sg29
(dp3892
sbsS'TExamplesDistanceConstructor_Normalized'
p3893
(i__main__
ClassDefinition
p3894
(dp3895
g4
I1
sg5
I01
sg6
g3893
sg7
S'TExamplesDistanceConstructor'
p3896
sg9
I01
sg10
(lp3897
sg12
(lp3898
g2056
ag2061
ag1374
asg29
(dp3899
sbsS'TCostWrapperLearner'
p3900
(i__main__
ClassDefinition
p3901
(dp3902
g4
I1
sg5
I01
sg6
g3900
sg7
S'TLearner'
p3903
sg9
I00
sg10
(lp3904
sg12
(lp3905
(S'TLearner'
p3906
S'basicLearner'
p3907
S'basic_learner'
p3908
S'basic learner'
p3909
I0
I0
I00
Ntp3910
a(S'TCostMatrix'
p3911
S'costMatrix'
p3912
S'cost_matrix'
p3913
S'cost matrix'
p3914
I0
I0
I00
Ntp3915
ag110
asg29
(dp3916
sbsS'TRandomLearner'
p3917
(i__main__
ClassDefinition
p3918
(dp3919
g4
I1
sg5
I01
sg6
g3917
sg7
S'TLearner'
p3920
sg9
I00
sg10
(lp3921
sg12
(lp3922
(S'TDistribution'
p3923
S'probabilities'
p3924
g3924
S'probabilities of predictions'
p3925
I0
I0
I00
Ntp3926
ag110
asg29
(dp3927
sbsS'TImputer_asValue'
p3928
(i__main__
ClassDefinition
p3929
(dp3930
g4
I1
sg5
I01
sg6
g3928
sg7
S'TImputer'
p3931
sg9
I00
sg10
(lp3932
sg12
(lp3933
(S'TDomain'
p3934
S'domain'
p3935
g3935
S'domain to which the values are converted'
p3936
I0
I0
I00
Ntp3937
a(S'TExample'
p3938
S'defaults'
p3939
g3939
S'values to impute instead of missing ones - for continuous attributes only!'
p3940
I0
I0
I00
Ntp3941
asg29
(dp3942
sbsS'TPearsonCorrelation'
p3943
(i__main__
ClassDefinition
p3944
(dp3945
g4
I1
sg5
I01
sg6
g3943
sg7
S'TOrange'
p3946
sg9
I00
sg10
(lp3947
sg12
(lp3948
(S'float'
p3949
S'r'
p3950
g3950
S'correlation coefficient'
p3951
I0
I0
I01
Ntp3952
a(S'float'
p3953
g2251
g2251
S't-statics significance'
p3954
I0
I0
I01
Ntp3955
a(S'int'
p3956
S'df'
p3957
g3957
S'degrees of freedom'
p3958
I0
I0
I01
Ntp3959
a(S'float'
p3960
g2222
g2222
S'significance'
p3961
I0
I0
I01
Ntp3962
asg29
(dp3963
sbsS'TDistributionAssessor_Laplace'
p3964
(i__main__
ClassDefinition
p3965
(dp3966
g4
I1
sg5
I01
sg6
g3964
sg7
S'TDistributionAssessor'
p3967
sg9
I00
sg10
(lp3968
sg12
(lp3969
sg29
(dp3970
sbsS'TColumnAssessor_Relief'
p3971
(i__main__
ClassDefinition
p3972
(dp3973
g4
I1
sg5
I01
sg6
g3971
sg7
S'TColumnAssessor'
p3974
sg9
I00
sg10
(lp3975
sg12
(lp3976
sg29
(dp3977
sbsS'TClassifierByLookupTable'
p3978
(i__main__
ClassDefinition
p3979
(dp3980
g4
I1
sg5
I01
sg6
g3978
sg7
S'TClassifier'
p3981
sg9
I01
sg10
(lp3982
sg12
(lp3983
g85
ag89
ag94
ag99
asg29
(dp3984
sbsS'TRuleBeamFinder'
p3985
(i__main__
ClassDefinition
p3986
(dp3987
g4
I1
sg5
I01
sg6
g3985
sg7
S'TRuleFinder'
p3988
sg9
I00
sg10
(lp3989
sg12
(lp3990
(S'TRuleBeamInitializer'
p3991
S'initializer'
p3992
g3992
g600
I0
I0
I00
Ntp3993
a(S'TRuleBeamRefiner'
p3994
S'refiner'
p3995
g3995
g600
I0
I0
I00
Ntp3996
a(S'TRuleBeamCandidateSelector'
p3997
S'candidateSelector'
p3998
S'candidate_selector'
p3999
g600
I0
I0
I00
Ntp4000
a(S'TRuleBeamFilter'
p4001
S'ruleFilter'
p4002
S'rule_filter'
p4003
g600
I0
I0
I00
Ntp4004
a(S'TRuleValidator'
p4005
S'ruleStoppingValidator'
p4006
S'rule_stopping_validator'
p4007
g600
I0
I0
I00
Ntp4008
a(S'TRuleValidator'
p4009
S'validator'
p4010
g4010
g600
I0
I0
I00
Ntp4011
a(S'TRuleEvaluator'
p4012
S'evaluator'
p4013
g4013
g600
I0
I0
I00
Ntp4014
asg29
(dp4015
sbsS'TFilter'
p4016
(i__main__
ClassDefinition
p4017
(dp4018
g4
I1
sg5
I01
sg6
g4016
sg7
S'TOrange'
p4019
sg9
I01
sg10
(lp4020
sg12
(lp4021
g691
ag695
asg29
(dp4022
sbsS'TC45Classifier'
p4023
(i__main__
ClassDefinition
p4024
(dp4025
g4
I1
sg5
I01
sg6
g4023
sg7
S'TClassifierFD'
p4026
sg9
I00
sg10
(lp4027
sg12
(lp4028
(S'TC45TreeNode'
p4029
S'tree'
p4030
g4030
S'tree'
p4031
I0
I0
I00
Ntp4032
ag291
ag94
ag99
asg29
(dp4033
sbsS'TGeneralExampleClustering'
p4034
(i__main__
ClassDefinition
p4035
(dp4036
g4
I1
sg5
I01
sg6
g4034
sg7
S'TOrange'
p4037
sg9
I01
sg10
(lp4038
sg12
(lp4039
sg29
(dp4040
sbsS'TMeasureAttribute_cost'
p4041
(i__main__
ClassDefinition
p4042
(dp4043
g4
I1
sg5
I01
sg6
g4041
sg7
S'TMeasureAttributeFromProbabilities'
p4044
sg9
I00
sg10
(lp4045
sg12
(lp4046
(S'TCostMatrix'
p4047
S'cost'
p4048
g4048
S'cost matrix'
p4049
I0
I0
I00
Ntp4050
ag914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp4051
sbsS'TImputerConstructor_minimal'
p4052
(i__main__
ClassDefinition
p4053
(dp4054
g4
I1
sg5
I01
sg6
g4052
sg7
S'TImputerConstructor'
p4055
sg9
I00
sg10
(lp4056
sg12
(lp4057
g164
asg29
(dp4058
sbsS'TClustersFromIM'
p4059
(i__main__
ClassDefinition
p4060
(dp4061
g4
I1
sg5
I01
sg6
g4059
sg7
S'TOrange'
p4062
sg9
I01
sg10
(lp4063
sg12
(lp4064
sg29
(dp4065
sbsS'TFilter_values'
p4066
(i__main__
ClassDefinition
p4067
(dp4068
g4
I1
sg5
I01
sg6
g4066
sg7
S'TFilter'
p4069
sg9
I00
sg10
(lp4070
sg12
(lp4071
(S'TValueFilterList'
p4072
S'conditions'
p4073
g4073
S'a list of filters'
p4074
I0
I0
I00
Ntp4075
a(S'bool'
p4076
S'conjunction'
p4077
g4077
S'if true, filter computes conjunction, otherwise disjunction'
p4078
I0
I0
I01
Ntp4079
ag691
ag695
asg29
(dp4080
S'Operator'
p4081
(lp4082
(S'None'
p4083
I0
tp4084
a(S'Equal'
p4085
I1
tp4086
a(S'NotEqual'
p4087
I2
tp4088
a(S'Less'
p4089
I3
tp4090
a(S'LessEqual'
p4091
I4
tp4092
a(S'Greater'
p4093
I5
tp4094
a(S'GreaterEqual'
p4095
I6
tp4096
a(S'Between'
p4097
I7
tp4098
a(S'Outside'
p4099
I8
tp4100
a(S'Contains'
p4101
I9
tp4102
a(S'NotContains'
p4103
I10
tp4104
a(S'BeginsWith'
p4105
I11
tp4106
a(S'EndsWith'
p4107
I12
tp4108
a(S'Listed'
p4109
I13
tp4110
assbsS'TRuleClassifier'
p4111
(i__main__
ClassDefinition
p4112
(dp4113
g4
I1
sg5
I01
sg6
g4111
sg7
S'TClassifier'
p4114
sg9
I01
sg10
(lp4115
sg12
(lp4116
g601
ag604
ag608
ag94
ag99
asg29
(dp4117
sbsS'TAssociationRules'
p4118
(ipyprops
ClassDefinition
p4119
(dp4120
g4
I0
sg5
I01
sg6
g4118
sg7
g143
sg9
I0
sg10
(lp4121
sg12
(lp4122
sg29
(dp4123
sbsS'TMajorityLearner'
p4124
(i__main__
ClassDefinition
p4125
(dp4126
g4
I1
sg5
I01
sg6
g4124
sg7
S'TLearner'
p4127
sg9
I00
sg10
(lp4128
sg12
(lp4129
(S'TProbabilityEstimatorConstructor'
p4130
S'estimatorConstructor'
p4131
S'estimator_constructor'
p4132
S'constructs probability estimator'
p4133
I0
I0
I00
Ntp4134
a(S'TDistribution'
p4135
S'aprioriDistribution'
p4136
S'apriori_distribution'
p4137
S'apriori class distribution'
p4138
I0
I0
I00
Ntp4139
ag110
asg29
(dp4140
sbsS'TSVMLearner'
p4141
(i__main__
ClassDefinition
p4142
(dp4143
g4
I1
sg5
I01
sg6
g4141
sg7
S'TLearner'
p4144
sg9
I00
sg10
(lp4145
sg12
(lp4146
(S'int'
p4147
S'svm_type'
p4148
g4148
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4149
I0
I0
I01
S'SVMLearner_SVMType'
p4150
tp4151
a(S'int'
p4152
S'kernel_type'
p4153
g4153
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4154
I0
I0
I01
S'SVMLearner_Kernel'
p4155
tp4156
a(S'float'
p4157
S'degree'
p4158
g4158
S'polynomial kernel degree'
p4159
I0
I0
I01
Ntp4160
a(S'float'
p4161
S'gamma'
p4162
g4162
S'poly/rbf/sigm parameter'
p4163
I0
I0
I01
Ntp4164
a(S'float'
p4165
S'coef0'
p4166
g4166
S'poly/sigm parameter'
p4167
I0
I0
I01
Ntp4168
a(S'float'
p4169
S'cache_size'
p4170
g4170
S'cache size in MB'
p4171
I0
I0
I01
Ntp4172
a(S'float'
p4173
S'eps'
p4174
g4174
S'stopping criteria'
p4175
I0
I0
I01
Ntp4176
a(S'float'
p4177
g3447
g3447
S'for C_SVC and C_SVR'
p4178
I0
I0
I01
Ntp4179
a(S'float'
p4180
S'nu'
p4181
g4181
S'for NU_SVC and ONE_CLASS'
p4182
I0
I0
I01
Ntp4183
a(S'float'
p4184
g2222
g2222
S'for C_SVR'
p4185
I0
I0
I01
Ntp4186
a(S'int'
p4187
S'shrinking'
p4188
g4188
S'shrinking'
p4189
I0
I0
I01
Ntp4190
a(S'int'
p4191
S'probability'
p4192
g4192
S'probability'
p4193
I0
I0
I01
Ntp4194
a(S'bool'
p4195
S'verbose'
p4196
g4196
S'verbose'
p4197
I0
I0
I01
Ntp4198
a(S'TKernelFunc'
p4199
S'kernelFunc'
p4200
S'kernel_func'
p4201
S'custom kernel function'
p4202
I0
I0
I00
Ntp4203
ag110
asg29
(dp4204
S'Kernel'
p4205
(lp4206
(S'Linear'
p4207
S'LINEAR'
p4208
tp4209
a(S'Polynomial'
p4210
S'POLY'
p4211
tp4212
a(S'RBF'
p4213
S'RBF'
p4214
tp4215
a(S'Sigmoid'
p4216
S'SIGMOID'
p4217
tp4218
a(S'Custom'
p4219
S'PRECOMPUTED'
p4220
tp4221
asS'LIBSVM_VERSION'
p4222
(lp4223
(S'VERSION'
p4224
S'LIBSVM_VERSION'
p4225
tp4226
asS'SVMType'
p4227
(lp4228
(S'C_SVC'
p4229
S'C_SVC'
p4230
tp4231
a(S'Nu_SVC'
p4232
S'NU_SVC'
p4233
tp4234
a(S'OneClass'
p4235
S'ONE_CLASS'
p4236
tp4237
a(S'Epsilon_SVR'
p4238
S'EPSILON_SVR'
p4239
tp4240
a(S'Nu_SVR'
p4241
S'NU_SVR'
p4242
tp4243
assbsS'TPNN'
p4244
(i__main__
ClassDefinition
p4245
(dp4246
g4
I1
sg5
I01
sg6
g4244
sg7
S'TClassifierFD'
p4247
sg9
I00
sg10
(lp4248
sg12
(lp4249
g745
ag749
ag753
ag757
ag762
ag767
ag771
ag291
ag94
ag99
asg29
(dp4250
sbsS'TImputerConstructor_defaults'
p4251
(i__main__
ClassDefinition
p4252
(dp4253
g4
I1
sg5
I01
sg6
g4251
sg7
S'TImputerConstructor'
p4254
sg9
I00
sg10
(lp4255
sg12
(lp4256
(S'TExample'
p4257
S'defaults'
p4258
g4258
S'default values to be imputed instead missing ones'
p4259
I0
I0
I00
Ntp4260
ag164
asg29
(dp4261
sbsS'TConditionalProbabilityEstimatorConstructor'
p4262
(i__main__
ClassDefinition
p4263
(dp4264
g4
I1
sg5
I01
sg6
g4262
sg7
S'TOrange'
p4265
sg9
I01
sg10
(lp4266
sg12
(lp4267
sg29
(dp4268
sbsS'TPreprocessor_takeMissingClasses'
p4269
(i__main__
ClassDefinition
p4270
(dp4271
g4
I1
sg5
I01
sg6
g4269
sg7
S'TPreprocessor'
p4272
sg9
I00
sg10
(lp4273
sg12
(lp4274
sg29
(dp4275
sbsS'TClustersFromIMByAssessor'
p4276
(i__main__
ClassDefinition
p4277
(dp4278
g4
I1
sg5
I01
sg6
g4276
sg7
S'TClustersFromIM'
p4279
sg9
I00
sg10
(lp4280
sg12
(lp4281
(S'TColumnAssessor'
p4282
S'columnAssessor'
p4283
S'column_assessor'
p4284
S'column quality assessor'
p4285
I0
I0
I00
Ntp4286
a(S'TStopIMClusteringByAssessor'
p4287
S'stopCriterion'
p4288
S'stop_criterion'
p4289
S'stop criterion'
p4290
I0
I0
I00
Ntp4291
asg29
(dp4292
sbsS'TRuleValidator_LRS'
p4293
(i__main__
ClassDefinition
p4294
(dp4295
g4
I1
sg5
I01
sg6
g4293
sg7
S'TRuleValidator'
p4296
sg9
I00
sg10
(lp4297
sg12
(lp4298
(S'float'
p4299
S'alpha'
p4300
g4300
g600
I0
I0
I01
Ntp4301
a(S'float'
p4302
S'min_coverage'
p4303
g4303
g600
I0
I0
I01
Ntp4304
a(S'int'
p4305
S'max_rule_complexity'
p4306
g4306
g600
I0
I0
I01
Ntp4307
a(S'float'
p4308
S'min_quality'
p4309
g4309
g600
I0
I0
I01
Ntp4310
asg29
(dp4311
sbsS'TLogRegFitter_Python'
p4312
(i__main__
ClassDefinition
p4313
(dp4314
g4
I1
sg5
I01
sg6
g4312
sg7
S'TLogRegFitter'
p4315
sg9
I00
sg10
(lp4316
sg12
(lp4317
sg29
(dp4318
sbsS'TNetwork'
p4319
(i__main__
ClassDefinition
p4320
(dp4321
g4
I1
sg5
I0
sg6
g4319
sg7
S'TGraphAsList'
p4322
sg9
I00
sg10
(lp4323
sg12
(lp4324
(S'TExampleTable'
p4325
S'items'
p4326
g4326
S'ExampleTable of vertices data'
p4327
I0
I0
I00
Ntp4328
a(S'TExampleTable'
p4329
S'links'
p4330
g4330
S'ExampleTable of edges data'
p4331
I0
I0
I00
Ntp4332
ag1497
ag1502
ag1506
asg29
(dp4333
sbsS'TMakeRandomIndices2'
p4334
(i__main__
ClassDefinition
p4335
(dp4336
g4
I1
sg5
I01
sg6
g4334
sg7
S'TMakeRandomIndices'
p4337
sg9
I00
sg10
(lp4338
sg12
(lp4339
(S'float'
p4340
S'p0'
p4341
g4341
S"a proportion or a number of 0's"
p4342
I0
I0
I01
Ntp4343
ag714
ag718
ag723
asg29
(dp4344
sbsS'TValueList'
p4345
(ipyprops
ClassDefinition
p4346
(dp4347
g4
I0
sg5
I01
sg6
S'TValueList'
p4348
sg7
g143
sg9
I0
sg10
(lp4349
sg12
(lp4350
sg29
(dp4351
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4352
(i__main__
ClassDefinition
p4353
(dp4354
g4
I1
sg5
I01
sg6
g4352
sg7
S'TTreeExampleSplitter'
p4355
sg9
I00
sg10
(lp4356
sg12
(lp4357
sg29
(dp4358
sbsS'TContDistribution'
p4359
(i__main__
ClassDefinition
p4360
(dp4361
g4
I1
sg5
I01
sg6
g4359
sg7
S'TDistribution'
p4362
sg9
I00
sg10
(lp4363
sg12
(lp4364
(S'TFloatList'
p4365
S'variances'
p4366
g4366
S'variances'
p4367
I0
I0
I00
Ntp4368
a(S'float'
p4369
S'sum'
p4370
g4370
S'weighted sum of elements (i.e. N*average)'
p4371
I01
I0
I01
Ntp4372
a(S'float'
p4373
S'sum2'
p4374
g4374
S'weighted sum of squares of elements'
p4375
I01
I0
I01
Ntp4376
ag1136
ag1140
ag1144
ag1148
ag1152
ag1157
ag1162
ag1167
asg29
(dp4377
sbsS'TContingencyAttrClass'
p4378
(i__main__
ClassDefinition
p4379
(dp4380
g4
I1
sg5
I01
sg6
g4378
sg7
S'TContingencyClass'
p4381
sg9
I00
sg10
(lp4382
sg12
(lp4383
g1618
ag1623
ag1629
ag1634
ag1639
ag1644
asg29
(dp4384
sbsS'TDomainTransformerConstructor'
p4385
(i__main__
ClassDefinition
p4386
(dp4387
g4
I1
sg5
I01
sg6
g4385
sg7
S'TOrange'
p4388
sg9
I01
sg10
(lp4389
sg12
(lp4390
(S'bool'
p4391
S'preservesOrder'
p4392
S'preserves_order'
p4393
S'a flag telling that original attributes have corresponding attribute in the same order'
p4394
I01
I0
I01
Ntp4395
a(S'bool'
p4396
S'preservesAttributes'
p4397
S'preserves_attributes'
p4398
S'a flag telling whether each original has a corresponding new attribute'
p4399
I01
I0
I01
Ntp4400
asg29
(dp4401
sbsS'TPythonValueSpecial'
p4402
(i__main__
ClassDefinition
p4403
(dp4404
g4
I1
sg5
I01
sg6
g4402
sg7
S'TOrange'
p4405
sg9
I00
sg10
(lp4406
sg12
(lp4407
(S'int'
p4408
S'valueType'
p4409
S'value_type'
p4410
S'value type'
p4411
I0
I0
I01
Ntp4412
asg29
(dp4413
sbsS'TIGConstructor'
p4414
(i__main__
ClassDefinition
p4415
(dp4416
g4
I1
sg5
I01
sg6
g4414
sg7
S'TOrange'
p4417
sg9
I01
sg10
(lp4418
sg12
(lp4419
sg29
(dp4420
sbsS'TProbabilityEstimatorConstructor'
p4421
(i__main__
ClassDefinition
p4422
(dp4423
g4
I1
sg5
I01
sg6
g4421
sg7
S'TOrange'
p4424
sg9
I01
sg10
(lp4425
sg12
(lp4426
sg29
(dp4427
sbsS'TTreeNodeList'
p4428
(ipyprops
ClassDefinition
p4429
(dp4430
g4
I0
sg5
I01
sg6
g4428
sg7
g143
sg9
I0
sg10
(lp4431
sg12
(lp4432
sg29
(dp4433
sbsS'TFloatVariable'
p4434
(i__main__
ClassDefinition
p4435
(dp4436
g4
I1
sg5
I01
sg6
g4434
sg7
S'TVariable'
p4437
sg9
I00
sg10
(lp4438
sg12
(lp4439
(S'float'
p4440
S'startValue'
p4441
S'start_value'
p4442
S'lowest value'
p4443
I0
I0
I01
Ntp4444
a(S'float'
p4445
S'endValue'
p4446
S'end_value'
p4447
S'highest value'
p4448
I0
I0
I01
Ntp4449
a(S'float'
p4450
S'stepValue'
p4451
S'step_value'
p4452
S'step'
p4453
I0
I0
I01
Ntp4454
a(S'int'
p4455
S'numberOfDecimals'
p4456
S'number_of_decimals'
p4457
S'number of digits after decimal point'
p4458
I0
I0
I01
Ntp4459
a(S'bool'
p4460
S'scientificFormat'
p4461
S'scientific_format'
p4462
S'use scientific format in output'
p4463
I0
I0
I01
Ntp4464
a(S'int'
p4465
S'adjustDecimals'
p4466
S'adjust_decimals'
p4467
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4468
I0
I0
I01
Ntp4469
ag333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp4470
sbsS'TImputer_random'
p4471
(i__main__
ClassDefinition
p4472
(dp4473
g4
I1
sg5
I01
sg6
g4471
sg7
S'TImputer'
p4474
sg9
I00
sg10
(lp4475
sg12
(lp4476
(S'bool'
p4477
S'imputeClass'
p4478
S'impute_class'
p4479
S'Tells whether to impute the class values, too (default: true)'
p4480
I0
I0
I01
Ntp4481
a(S'bool'
p4482
S'deterministic'
p4483
g4483
S"tells whether to initialize random by example's CRC (default: false)"
p4484
I0
I0
I01
Ntp4485
a(S'TDistributionList'
p4486
S'distributions'
p4487
g4487
S'probability functions'
p4488
I0
I0
I00
Ntp4489
asg29
(dp4490
sbsS'TFilter_hasMeta'
p4491
(i__main__
ClassDefinition
p4492
(dp4493
g4
I1
sg5
I01
sg6
g4491
sg7
S'TFilter'
p4494
sg9
I00
sg10
(lp4495
sg12
(lp4496
(S'int'
p4497
S'id'
p4498
g4498
S'meta attribute id'
p4499
I0
I0
I01
Ntp4500
ag691
ag695
asg29
(dp4501
sbsS'TProbabilityEstimatorConstructor_kernel'
p4502
(i__main__
ClassDefinition
p4503
(dp4504
g4
I1
sg5
I01
sg6
g4502
sg7
S'TProbabilityEstimatorConstructor'
p4505
sg9
I00
sg10
(lp4506
sg12
(lp4507
(S'float'
p4508
S'minImpact'
p4509
S'min_impact'
p4510
S'Minimal impact the point must have to be counted'
p4511
I0
I0
I01
Ntp4512
a(S'float'
p4513
S'smoothing'
p4514
g4514
S'Smoothing factor'
p4515
I0
I0
I01
Ntp4516
a(S'int'
p4517
S'nPoints'
p4518
S'n_points'
p4519
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4520
I0
I0
I01
Ntp4521
asg29
(dp4522
sbsS'TRuleCovererAndRemover_Default'
p4523
(i__main__
ClassDefinition
p4524
(dp4525
g4
I1
sg5
I01
sg6
g4523
sg7
S'TRuleCovererAndRemover'
p4526
sg9
I00
sg10
(lp4527
sg12
(lp4528
sg29
(dp4529
sbsS'TMakeRandomIndices'
p4530
(i__main__
ClassDefinition
p4531
(dp4532
g4
I1
sg5
I01
sg6
g4530
sg7
S'TOrange'
p4533
sg9
I00
sg10
(lp4534
sg12
(lp4535
g714
ag718
ag723
asg29
(dp4536
S'Stratification'
p4537
(lp4538
(S'StratifiedIfPossible'
p4539
S'-1'
p4540
tp4541
a(S'NotStratified'
p4542
I0
tp4543
a(S'Stratified'
p4544
I1
tp4545
assbsS'TFilter_Python'
p4546
(i__main__
ClassDefinition
p4547
(dp4548
g4
I1
sg5
I01
sg6
g4546
sg7
S'TFilter'
p4549
sg9
I00
sg10
(lp4550
sg12
(lp4551
g691
ag695
asg29
(dp4552
sbsS'TRuleBeamInitializer_Default'
p4553
(i__main__
ClassDefinition
p4554
(dp4555
g4
I1
sg5
I01
sg6
g4553
sg7
S'TRuleBeamInitializer'
p4556
sg9
I00
sg10
(lp4557
sg12
(lp4558
sg29
(dp4559
sbsS'TExamplesDistanceConstructor_Python'
p4560
(i__main__
ClassDefinition
p4561
(dp4562
g4
I1
sg5
I01
sg6
g4560
sg7
S'TExamplesDistanceConstructor'
p4563
sg9
I00
sg10
(lp4564
sg12
(lp4565
g1374
asg29
(dp4566
sbsS'TTreeDescender_Python'
p4567
(i__main__
ClassDefinition
p4568
(dp4569
g4
I1
sg5
I01
sg6
g4567
sg7
S'TTreeDescender'
p4570
sg9
I00
sg10
(lp4571
sg12
(lp4572
sg29
(dp4573
sbsS'TSubsetsGenerator_constant'
p4574
(i__main__
ClassDefinition
p4575
(dp4576
g4
I1
sg5
I01
sg6
g4574
sg7
S'TSubsetsGenerator'
p4577
sg9
I00
sg10
(lp4578
sg12
(lp4579
(S'TVarList'
p4580
S'constant'
p4581
g4581
S'a subset that is returned (once!)'
p4582
I0
I0
I00
Ntp4583
ag207
asg29
(dp4584
sbsS'TGaussianNoiseGenerator'
p4585
(i__main__
ClassDefinition
p4586
(dp4587
g4
I1
sg5
I01
sg6
g4585
sg7
S'TChangeExampleGenerator'
p4588
sg9
I00
sg10
(lp4589
sg12
(lp4590
(S'TIntFloatList'
p4591
S'deviations'
p4592
g4592
S"deviations for attributes' values"
p4593
I0
I0
I00
Ntp4594
a(S'TRandomGenerator'
p4595
S'randomGenerator'
p4596
S'random_generator'
p4597
S'random generator'
p4598
I0
I0
I00
Ntp4599
ag306
ag310
asg29
(dp4600
sbsS'TClustersFromDistributionsByAssessor'
p4601
(i__main__
ClassDefinition
p4602
(dp4603
g4
I1
sg5
I01
sg6
g4601
sg7
S'TClustersFromDistributions'
p4604
sg9
I00
sg10
(lp4605
sg12
(lp4606
(S'TDistributionAssessor'
p4607
S'distributionAssessor'
p4608
S'distribution_assessor'
p4609
S'column quality assessor'
p4610
I0
I0
I00
Ntp4611
a(S'TStopDistributionClustering'
p4612
S'stopCriterion'
p4613
S'stop_criterion'
p4614
S'stop criterion'
p4615
I0
I0
I00
Ntp4616
a(S'float'
p4617
S'minProfitProportion'
p4618
S'min_profit_proportion'
p4619
S'minimal merge profit'
p4620
I0
I0
I01
Ntp4621
asg29
(dp4622
sbsS'TExamplesDistance_Hamming'
p4623
(i__main__
ClassDefinition
p4624
(dp4625
g4
I1
sg5
I01
sg6
g4623
sg7
S'TExamplesDistance'
p4626
sg9
I00
sg10
(lp4627
sg12
(lp4628
(S'bool'
p4629
S'ignoreClass'
p4630
S'ignore_class'
p4631
S'if true (default), class value is ignored when computing distances'
p4632
I0
I0
I01
Ntp4633
a(S'bool'
p4634
S'ignoreUnknowns'
p4635
S'ignore_unknowns'
p4636
S'if true (default: false) unknown values are ignored in computation'
p4637
I0
I0
I01
Ntp4638
asg29
(dp4639
sbsS'TDefaultClassifier'
p4640
(i__main__
ClassDefinition
p4641
(dp4642
g4
I1
sg5
I01
sg6
g4640
sg7
S'TClassifier'
p4643
sg9
I00
sg10
(lp4644
sg12
(lp4645
(S'TValue'
p4646
S'defaultVal'
p4647
S'default_val'
p4648
S'default prediction'
p4649
I0
I0
I01
Ntp4650
a(S'TDistribution'
p4651
S'defaultDistribution'
p4652
S'default_distribution'
p4653
S'default distribution'
p4654
I0
I0
I00
Ntp4655
ag94
ag99
asg29
(dp4656
sbsS'TColumnAssessor_Kramer'
p4657
(i__main__
ClassDefinition
p4658
(dp4659
g4
I1
sg5
I01
sg6
g4657
sg7
S'TColumnAssessor'
p4660
sg9
I00
sg10
(lp4661
sg12
(lp4662
sg29
(dp4663
sbsS'TEVDistGetter_Python'
p4664
(i__main__
ClassDefinition
p4665
(dp4666
g4
I1
sg5
I01
sg6
g4664
sg7
S'TEVDistGetter'
p4667
sg9
I00
sg10
(lp4668
sg12
(lp4669
sg29
(dp4670
sbsS'TDiscretization'
p4671
(i__main__
ClassDefinition
p4672
(dp4673
g4
I1
sg5
I01
sg6
g4671
sg7
S'TOrange'
p4674
sg9
I01
sg10
(lp4675
sg12
(lp4676
sg29
(dp4677
sbsS'TTreeSplitConstructor_Measure'
p4678
(i__main__
ClassDefinition
p4679
(dp4680
g4
I1
sg5
I01
sg6
g4678
sg7
S'TTreeSplitConstructor'
p4681
sg9
I01
sg10
(lp4682
sg12
(lp4683
g1306
ag1311
ag783
asg29
(dp4684
sbsS'TTreeNode'
p4685
(i__main__
ClassDefinition
p4686
(dp4687
g4
I1
sg5
I01
sg6
g4685
sg7
S'TOrange'
p4688
sg9
I00
sg10
(lp4689
sg12
(lp4690
(S'TClassifier'
p4691
S'nodeClassifier'
p4692
S'node_classifier'
p4693
S'classifies an example'
p4694
I0
I0
I00
Ntp4695
a(S'TDistribution'
p4696
S'distribution'
p4697
g4697
S'distribution of classes in the node'
p4698
I0
I0
I00
Ntp4699
a(S'TDomainContingency'
p4700
S'contingency'
p4701
g4701
S'domain contingency for examples in the node'
p4702
I0
I0
I00
Ntp4703
a(S'TExampleGenerator'
p4704
S'examples'
p4705
g4705
S'learning examples (if stored)'
p4706
I0
I0
I00
Ntp4707
a(S'int'
p4708
S'weightID'
p4709
S'weight_ID'
p4710
S'weightID used to construct this node'
p4711
I0
I0
I01
Ntp4712
a(S'TClassifier'
p4713
S'branchSelector'
p4714
S'branch_selector'
p4715
S'classifier that select a branch for an example'
p4716
I0
I0
I00
Ntp4717
a(S'TTreeNodeList'
p4718
S'branches'
p4719
g4719
S'classifiers presenting the branches'
p4720
I0
I0
I00
Ntp4721
a(S'TStringList'
p4722
S'branchDescriptions'
p4723
S'branch_descriptions'
p4724
S'descriptions of branches'
p4725
I0
I0
I00
Ntp4726
a(S'TDiscDistribution'
p4727
S'branchSizes'
p4728
S'branch_sizes'
p4729
S'numbers of examples in branches'
p4730
I0
I0
I00
Ntp4731
asg29
(dp4732
sbsS'TTransformValue_IsDefined'
p4733
(i__main__
ClassDefinition
p4734
(dp4735
g4
I1
sg5
I01
sg6
g4733
sg7
S'TTransformValue'
p4736
sg9
I00
sg10
(lp4737
sg12
(lp4738
g805
asg29
(dp4739
sbsS'TFilter_hasClassValue'
p4740
(i__main__
ClassDefinition
p4741
(dp4742
g4
I1
sg5
I01
sg6
g4740
sg7
S'TFilter'
p4743
sg9
I00
sg10
(lp4744
sg12
(lp4745
g691
ag695
asg29
(dp4746
sbsS'TStopDistributionClustering_binary'
p4747
(i__main__
ClassDefinition
p4748
(dp4749
g4
I1
sg5
I01
sg6
g4747
sg7
S'TStopDistributionClustering'
p4750
sg9
I00
sg10
(lp4751
sg12
(lp4752
sg29
(dp4753
sbsS'TIMByRows'
p4754
(i__main__
ClassDefinition
p4755
(dp4756
g4
I1
sg5
I01
sg6
g4754
sg7
S'TOrange'
p4757
sg9
I00
sg10
(lp4758
sg12
(lp4759
(S'int'
p4760
S'varType'
p4761
S'var_type'
p4762
S' class variable type'
p4763
I0
I0
I01
S'Variable_Type'
p4764
tp4765
asg29
(dp4766
sbsS'TRuleFinder'
p4767
(i__main__
ClassDefinition
p4768
(dp4769
g4
I1
sg5
I01
sg6
g4767
sg7
S'TOrange'
p4770
sg9
I01
sg10
(lp4771
sg12
(lp4772
g4011
ag4014
asg29
(dp4773
sbsS'TClassifierByExampleTable'
p4774
(i__main__
ClassDefinition
p4775
(dp4776
g4
I1
sg5
I01
sg6
g4774
sg7
S'TClassifierFD'
p4777
sg9
I00
sg10
(lp4778
sg12
(lp4779
(S'TExampleTable'
p4780
S'sortedExamples'
p4781
S'sorted_examples'
p4782
S'a table of examples'
p4783
I0
I0
I00
Ntp4784
a(S'bool'
p4785
S'containsUnknowns'
p4786
S'contains_unknowns'
p4787
S'if true, the table contains unknown values'
p4788
I0
I0
I01
Ntp4789
a(S'TClassifier'
p4790
S'classifierForUnknown'
p4791
S'classifier_for_unknown'
p4792
S'a classifier for unknown cases'
p4793
I0
I0
I00
Ntp4794
a(S'TEFMDataDescription'
p4795
S'dataDescription'
p4796
S'data_description'
p4797
S'data description'
p4798
I0
I0
I00
Ntp4799
ag291
ag94
ag99
asg29
(dp4800
sbsS'TNetworkOptimization'
p4801
(i__main__
ClassDefinition
p4802
(dp4803
g4
I1
sg5
I0
sg6
g4801
sg7
S'TOrange'
p4804
sg9
I00
sg10
(lp4805
sg12
(lp4806
(S'TNetwork'
p4807
S'network'
p4808
g4808
S'Network'
p4809
I0
I0
I00
Ntp4810
asg29
(dp4811
sbsS'TKernelFunc'
p4812
(i__main__
ClassDefinition
p4813
(dp4814
g4
I1
sg5
I01
sg6
g4812
sg7
S'TOrange'
p4815
sg9
I01
sg10
(lp4816
sg12
(lp4817
sg29
(dp4818
sbsS'TMeasureAttribute_gini'
p4819
(i__main__
ClassDefinition
p4820
(dp4821
g4
I1
sg5
I01
sg6
g4819
sg7
S'TMeasureAttributeFromProbabilities'
p4822
sg9
I00
sg10
(lp4823
sg12
(lp4824
g914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp4825
sbsS'TRule'
p4826
(i__main__
ClassDefinition
p4827
(dp4828
g4
I1
sg5
I01
sg6
g4826
sg7
S'TOrange'
p4829
sg9
I00
sg10
(lp4830
sg12
(lp4831
(S'TFilter'
p4832
S'filter'
p4833
g4833
S'stored filter for this rule'
p4834
I0
I0
I00
Ntp4835
a(S'TFilter'
p4836
S'valuesFilter'
p4837
S'values_filter'
p4838
S'Filter_values representation of main filter (sometimes needed)'
p4839
I0
I0
I00
Ntp4840
a(S'TClassifier'
p4841
S'classifier'
p4842
g4842
S'classifies an example'
p4843
I0
I0
I00
Ntp4844
a(S'TLearner'
p4845
S'learner'
p4846
g4846
S'learns a classifier from data'
p4847
I0
I0
I00
Ntp4848
a(S'TRule'
p4849
S'parentRule'
p4850
S'parent_rule'
p4851
g600
I0
I0
I00
Ntp4852
a(S'TDistribution'
p4853
S'baseDist'
p4854
S'base_dist'
p4855
S'initial distribution'
p4856
I0
I0
I00
Ntp4857
a(S'TDistribution'
p4858
S'classDistribution'
p4859
S'class_distribution'
p4860
S'distribution of classes covered by the rule'
p4861
I0
I0
I00
Ntp4862
a(S'TExampleTable'
p4863
S'examples'
p4864
g4864
S'covered examples'
p4865
I0
I0
I00
Ntp4866
a(S'int'
p4867
S'weightID'
p4868
S'weight_ID'
p4869
S'weight for the stored examples'
p4870
I0
I0
I01
Ntp4871
a(S'float'
p4872
S'quality'
p4873
g4873
S'some measure of rule quality'
p4874
I0
I0
I01
Ntp4875
a(S'int'
p4876
S'complexity'
p4877
g4877
g600
I0
I0
I01
Ntp4878
a(S'float'
p4879
S'chi'
p4880
g4880
g600
I0
I0
I01
Ntp4881
a(S'int'
p4882
S'requiredConditions'
p4883
S'required_conditions'
p4884
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4885
I0
I0
I01
Ntp4886
asg29
(dp4887
sbsS'TClassifierByLookupTable2'
p4888
(i__main__
ClassDefinition
p4889
(dp4890
g4
I1
sg5
I01
sg6
g4888
sg7
S'TClassifierByLookupTable'
p4891
sg9
I00
sg10
(lp4892
sg12
(lp4893
(S'TVariable'
p4894
S'variable1'
p4895
g4895
S'the first attribute used for classification'
p4896
I01
I0
I00
Ntp4897
a(S'TVariable'
p4898
S'variable2'
p4899
g4899
S'the second attribute used for classification'
p4900
I01
I0
I00
Ntp4901
a(S'int'
p4902
S'noOfValues1'
p4903
S'no_of_values1'
p4904
S'number of values of the first attribute'
p4905
I01
I0
I01
Ntp4906
a(S'int'
p4907
S'noOfValues2'
p4908
S'no_of_values2'
p4909
S'number of values of the second attribute'
p4910
I01
I0
I01
Ntp4911
a(S'TEFMDataDescription'
p4912
S'dataDescription'
p4913
S'data_description'
p4914
S'data description'
p4915
I0
I0
I00
Ntp4916
ag85
ag89
ag94
ag99
asg29
(dp4917
sbsS'TPreprocessor_addClassNoise'
p4918
(i__main__
ClassDefinition
p4919
(dp4920
g4
I1
sg5
I01
sg6
g4918
sg7
S'TPreprocessor'
p4921
sg9
I00
sg10
(lp4922
sg12
(lp4923
(S'float'
p4924
S'proportion'
p4925
g4925
S'proportion of changed class values'
p4926
I0
I0
I01
Ntp4927
a(S'TRandomGenerator'
p4928
S'randomGenerator'
p4929
S'random_generator'
p4930
S'random number generator'
p4931
I0
I0
I00
Ntp4932
asg29
(dp4933
sbsS'TExampleGenerator'
p4934
(i__main__
ClassDefinition
p4935
(dp4936
g4
I1
sg5
I01
sg6
g4934
sg7
S'TOrange'
p4937
sg9
I01
sg10
(lp4938
sg12
(lp4939
g306
ag310
asg29
(dp4940
sbsS'TClassifierByLookupTable1'
p4941
(i__main__
ClassDefinition
p4942
(dp4943
g4
I1
sg5
I01
sg6
g4941
sg7
S'TClassifierByLookupTable'
p4944
sg9
I00
sg10
(lp4945
sg12
(lp4946
(S'TVariable'
p4947
S'variable1'
p4948
(g4948
S'variable'
p4949
tp4950
S' attribute used for classification'
p4951
I01
I0
I00
Ntp4952
ag85
ag89
ag94
ag99
asg29
(dp4953
sbsS'TRuleClassifierConstructor_Python'
p4954
(i__main__
ClassDefinition
p4955
(dp4956
g4
I1
sg5
I01
sg6
g4954
sg7
S'TRuleClassifierConstructor'
p4957
sg9
I00
sg10
(lp4958
sg12
(lp4959
sg29
(dp4960
sbsS'TRemoveRedundantOneValue'
p4961
(i__main__
ClassDefinition
p4962
(dp4963
g4
I1
sg5
I01
sg6
g4961
sg7
S'TRemoveRedundant'
p4964
sg9
I00
sg10
(lp4965
sg12
(lp4966
(S'bool'
p4967
S'onData'
p4968
S'on_data'
p4969
S'observe the actual number of value on the data (not on attribute definitions)'
p4970
I0
I0
I01
Ntp4971
ag1352
asg29
(dp4972
sbsS'TDistributionAssessor_Relief'
p4973
(i__main__
ClassDefinition
p4974
(dp4975
g4
I1
sg5
I01
sg6
g4973
sg7
S'TDistributionAssessor'
p4976
sg9
I00
sg10
(lp4977
sg12
(lp4978
sg29
(dp4979
sbsS'TEnumVariable'
p4980
(i__main__
ClassDefinition
p4981
(dp4982
g4
I1
sg5
I01
sg6
g4980
sg7
S'TVariable'
p4983
sg9
I00
sg10
(lp4984
sg12
(lp4985
(S'TStringList'
p4986
S'values'
p4987
g4987
S"attribute's values"
p4988
I0
I0
I00
Ntp4989
a(S'int'
p4990
S'baseValue'
p4991
S'base_value'
p4992
S'the index of the base value'
p4993
I0
I0
I01
Ntp4994
ag333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp4995
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p4996
(i__main__
ClassDefinition
p4997
(dp4998
g4
I1
sg5
I01
sg6
g4996
sg7
S'TConditionalProbabilityEstimatorConstructor'
p4999
sg9
I00
sg10
(lp5000
sg12
(lp5001
(S'float'
p5002
S'windowProportion'
p5003
S'window_proportion'
p5004
S'The proportion of points in a window for LR'
p5005
I0
I0
I01
Ntp5006
a(S'int'
p5007
S'nPoints'
p5008
S'n_points'
p5009
S'The number of points on curve'
p5010
I0
I0
I01
Ntp5011
a(S'int'
p5012
S'distributionMethod'
p5013
S'distribution_method'
p5014
S" Meaning of the 'nPoints'"
p5015
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5016
tp5017
asg29
(dp5018
S'DistributionMethod'
p5019
(lp5020
(S'Minimal'
p5021
S'DISTRIBUTE_MINIMAL'
p5022
tp5023
a(S'Factor'
p5024
S'DISTRIBUTE_FACTOR'
p5025
tp5026
a(S'Fixed'
p5027
S'DISTRIBUTE_FIXED'
p5028
tp5029
a(S'Uniform'
p5030
S'DISTRIBUTE_UNIFORM'
p5031
tp5032
a(S'Maximal'
p5033
S'DISTRIBUTE_MAXIMAL'
p5034
tp5035
assbsS'TPreprocessor_addMissing'
p5036
(i__main__
ClassDefinition
p5037
(dp5038
g4
I1
sg5
I01
sg6
g5036
sg7
S'TPreprocessor'
p5039
sg9
I00
sg10
(lp5040
sg12
(lp5041
(S'TVariableFloatMap'
p5042
S'proportions'
p5043
g5043
S'proportion of removed values for individual values'
p5044
I0
I0
I00
Ntp5045
a(S'float'
p5046
S'defaultProportion'
p5047
S'default_proportion'
p5048
S'default proportion of removed values (for attributes not specified above)'
p5049
I0
I0
I01
Ntp5050
a(S'int'
p5051
S'specialType'
p5052
S'special_type'
p5053
S'special value type (1=DC, 2=DK)'
p5054
I0
I0
I01
Ntp5055
a(S'TRandomGenerator'
p5056
S'randomGenerator'
p5057
S'random_generator'
p5058
S'random number generator'
p5059
I0
I0
I00
Ntp5060
asg29
(dp5061
sbsS'TRuleBeamCandidateSelector'
p5062
(i__main__
ClassDefinition
p5063
(dp5064
g4
I1
sg5
I01
sg6
g5062
sg7
S'TOrange'
p5065
sg9
I01
sg10
(lp5066
sg12
(lp5067
sg29
(dp5068
sbsS'TSubsetsGenerator_minMaxSize'
p5069
(i__main__
ClassDefinition
p5070
(dp5071
g4
I1
sg5
I01
sg6
g5069
sg7
S'TSubsetsGenerator'
p5072
sg9
I00
sg10
(lp5073
sg12
(lp5074
(S'int'
p5075
S'min'
p5076
g5076
S'minimal subset size'
p5077
I0
I0
I01
Ntp5078
a(S'int'
p5079
S'max'
p5080
g5080
S'maximal subset size'
p5081
I0
I0
I01
Ntp5082
ag207
asg29
(dp5083
sbsS'TMakeRandomIndicesN'
p5084
(i__main__
ClassDefinition
p5085
(dp5086
g4
I1
sg5
I01
sg6
g5084
sg7
S'TMakeRandomIndices'
p5087
sg9
I00
sg10
(lp5088
sg12
(lp5089
(S'TFloatList'
p5090
g2222
g2222
S'probabilities of indices (last is 1-sum(p))'
p5091
I0
I0
I00
Ntp5092
ag714
ag718
ag723
asg29
(dp5093
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5094
(i__main__
ClassDefinition
p5095
(dp5096
g4
I1
sg5
I01
sg6
g5094
sg7
S'TTreeExampleSplitter'
p5097
sg9
I00
sg10
(lp5098
sg12
(lp5099
sg29
(dp5100
sbsS'TValueFilter_stringList'
p5101
(i__main__
ClassDefinition
p5102
(dp5103
g4
I1
sg5
I01
sg6
g5101
sg7
S'TValueFilter'
p5104
sg9
I00
sg10
(lp5105
sg12
(lp5106
(S'TStringList'
p5107
S'values'
p5108
g5108
S'accepted values'
p5109
I0
I0
I00
Ntp5110
a(S'bool'
p5111
S'caseSensitive'
p5112
S'case_sensitive'
p5113
S'if true (default), the comparison is case sensitive'
p5114
I0
I0
I01
Ntp5115
ag1065
ag1070
asg29
(dp5116
sbsS'TContingencyClass'
p5117
(i__main__
ClassDefinition
p5118
(dp5119
g4
I1
sg5
I01
sg6
g5117
sg7
S'TContingency'
p5120
sg9
I01
sg10
(lp5121
sg12
(lp5122
g1618
ag1623
ag1629
ag1634
ag1639
ag1644
asg29
(dp5123
sbsS'TAssociationClassifier'
p5124
(i__main__
ClassDefinition
p5125
(dp5126
g4
I1
sg5
I01
sg6
g5124
sg7
S'TClassifierFD'
p5127
sg9
I00
sg10
(lp5128
sg12
(lp5129
(S'TAssociationRules'
p5130
S'rules'
p5131
g5131
S'association rules'
p5132
I0
I0
I00
Ntp5133
a(S'int'
p5134
S'voteWeight'
p5135
S'vote_weight'
p5136
S'vote weight (s=support, c=confidence, p=product)'
p5137
I0
I0
I01
Ntp5138
ag291
ag94
ag99
asg29
(dp5139
sbsS'TDomainDistributions'
p5140
(ipyprops
ClassDefinition
p5141
(dp5142
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p5143
sg7
g143
sg9
I0
sg10
(lp5144
sg12
(lp5145
sg29
(dp5146
sbsS'TSVMLearnerSparse'
p5147
(i__main__
ClassDefinition
p5148
(dp5149
g4
I1
sg5
I01
sg6
g5147
sg7
S'TSVMLearner'
p5150
sg9
I00
sg10
(lp5151
sg12
(lp5152
(S'bool'
p5153
S'useNonMeta'
p5154
S'use_non_meta'
p5155
S'include non meta attributes in the learning process'
p5156
I0
I0
I01
Ntp5157
ag4151
ag4156
ag4160
ag4164
ag4168
ag4172
ag4176
ag4179
ag4183
ag4186
ag4190
ag4194
ag4198
ag4203
ag110
asg29
(dp5158
sbsS'TDomain'
p5159
(i__main__
ClassDefinition
p5160
(dp5161
g4
I1
sg5
I01
sg6
g5159
sg7
S'TOrange'
p5162
sg9
I00
sg10
(lp5163
sg12
(lp5164
(S'TVariable'
p5165
S'classVar'
p5166
S'class_var'
p5167
S'class variable'
p5168
I01
I0
I00
Ntp5169
a(S'TVarList'
p5170
S'attributes'
p5171
(g5171
S'features'
p5172
tp5173
S' list of attributes, excluding the class'
p5174
I01
I0
I00
Ntp5175
a(S'TVarList'
p5176
S'variables'
p5177
g5177
S'list of attributes, including the class at the end of the list'
p5178
I01
I0
I00
Ntp5179
a(S'TVarList'
p5180
S'classVars'
p5181
S'class_vars'
p5182
S'list of class variables, if multiple; else None'
p5183
I01
I0
I00
Ntp5184
a(S'int'
p5185
S'version'
p5186
g5186
S"unique version identifier; it's changed each time a domain is changed"
p5187
I01
I0
I01
Ntp5188
asg29
(dp5189
sbsS'TTreePruner_SameMajority'
p5190
(i__main__
ClassDefinition
p5191
(dp5192
g4
I1
sg5
I01
sg6
g5190
sg7
S'TTreePruner'
p5193
sg9
I00
sg10
(lp5194
sg12
(lp5195
sg29
(dp5196
sbsS'TSubsetsGenerator_constant_iterator'
p5197
(i__main__
ClassDefinition
p5198
(dp5199
g4
I1
sg5
I01
sg6
g5197
sg7
S'TSubsetsGenerator_iterator'
p5200
sg9
I00
sg10
(lp5201
sg12
(lp5202
(S'TVarList'
p5203
S'constant'
p5204
g5204
S'a subset that is returned (once!)'
p5205
I0
I0
I00
Ntp5206
a(S'bool'
p5207
S'moreToCome'
p5208
S'more_to_come'
p5209
g600
I0
I0
I01
Ntp5210
ag510
asg29
(dp5211
sbsS'TExampleDistConstructor'
p5212
(i__main__
ClassDefinition
p5213
(dp5214
g4
I1
sg5
I01
sg6
g5212
sg7
S'TOrange'
p5215
sg9
I01
sg10
(lp5216
sg12
(lp5217
sg29
(dp5218
sbsS'TIMByIMByRows'
p5219
(i__main__
ClassDefinition
p5220
(dp5221
g4
I1
sg5
I01
sg6
g5219
sg7
S'TIMConstructor'
p5222
sg9
I00
sg10
(lp5223
sg12
(lp5224
g1253
asg29
(dp5225
sbsS'TAlignmentList'
p5226
(ipyprops
ClassDefinition
p5227
(dp5228
g4
I0
sg5
I01
sg6
g5226
sg7
g143
sg9
I0
sg10
(lp5229
sg12
(lp5230
sg29
(dp5231
sbsS'TDiscrete2Continuous'
p5232
(i__main__
ClassDefinition
p5233
(dp5234
g4
I1
sg5
I01
sg6
g5232
sg7
S'TTransformValue'
p5235
sg9
I00
sg10
(lp5236
sg12
(lp5237
(S'int'
p5238
S'value'
p5239
g5239
S'target value'
p5240
I0
I0
I01
Ntp5241
a(S'bool'
p5242
S'invert'
p5243
g5243
S'give 1.0 to values not equal to the target'
p5244
I0
I0
I01
Ntp5245
a(S'bool'
p5246
S'zeroBased'
p5247
S'zero_based'
p5248
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5249
I0
I0
I01
Ntp5250
ag805
asg29
(dp5251
sbsS'TDomainDiscretization'
p5252
(i__main__
ClassDefinition
p5253
(dp5254
g4
I1
sg5
I01
sg6
g5252
sg7
S'TOrange'
p5255
sg9
I00
sg10
(lp5256
sg12
(lp5257
(S'TDiscretization'
p5258
S'discretization'
p5259
g5259
S'discretization'
p5260
I0
I0
I00
Ntp5261
asg29
(dp5262
sbsS'TColumnAssessor_m'
p5263
(i__main__
ClassDefinition
p5264
(dp5265
g4
I1
sg5
I01
sg6
g5263
sg7
S'TColumnAssessor'
p5266
sg9
I00
sg10
(lp5267
sg12
(lp5268
(S'float'
p5269
g1216
g1216
S'm for m-estimate'
p5270
I0
I0
I01
Ntp5271
asg29
(dp5272
sbsS'TImputer_defaults'
p5273
(i__main__
ClassDefinition
p5274
(dp5275
g4
I1
sg5
I01
sg6
g5273
sg7
S'TImputer'
p5276
sg9
I00
sg10
(lp5277
sg12
(lp5278
(S'TExample'
p5279
S'defaults'
p5280
g5280
S'values that are to be inserted instead of missing ones'
p5281
I0
I0
I00
Ntp5282
asg29
(dp5283
sbsS'TContingency'
p5284
(i__main__
ClassDefinition
p5285
(dp5286
g4
I1
sg5
I01
sg6
g5284
sg7
S'TOrange'
p5287
sg9
I00
sg10
(lp5288
sg12
(lp5289
g1618
ag1623
ag1629
ag1634
ag1639
ag1644
asg29
(dp5290
sbsS'TStringValue'
p5291
(i__main__
ClassDefinition
p5292
(dp5293
g4
I1
sg5
I01
sg6
g5291
sg7
S'TSomeValue'
p5294
sg9
I00
sg10
(lp5295
sg12
(lp5296
sg29
(dp5297
sbsS'TClassifierGenerator'
p5298
(i__main__
ClassDefinition
p5299
(dp5300
g4
I1
sg5
I01
sg6
g5298
sg7
S'TExampleGenerator'
p5301
sg9
I00
sg10
(lp5302
sg12
(lp5303
(S'TClassifier'
p5304
S'classify'
p5305
g5305
S'classifier'
p5306
I0
I0
I00
Ntp5307
ag306
ag310
asg29
(dp5308
sbsS'TRuleDataStoppingCriteria_Python'
p5309
(i__main__
ClassDefinition
p5310
(dp5311
g4
I1
sg5
I01
sg6
g5309
sg7
S'TRuleDataStoppingCriteria'
p5312
sg9
I00
sg10
(lp5313
sg12
(lp5314
sg29
(dp5315
sbsS'TTreeDescender_UnknownToCommonSelector'
p5316
(i__main__
ClassDefinition
p5317
(dp5318
g4
I1
sg5
I01
sg6
g5316
sg7
g1551
sg9
I0
sg10
(lp5319
sg12
(lp5320
sg29
(dp5321
sbsS'THierarchicalCluster'
p5322
(i__main__
ClassDefinition
p5323
(dp5324
g4
I1
sg5
I01
sg6
g5322
sg7
S'TOrange'
p5325
sg9
I00
sg10
(lp5326
sg12
(lp5327
(S'THierarchicalClusterList'
p5328
S'branches'
p5329
g5329
S'subclusters'
p5330
I0
I0
I00
Ntp5331
a(S'float'
p5332
S'height'
p5333
g5333
S'height'
p5334
I0
I0
I01
Ntp5335
a(S'TIntList'
p5336
S'mapping'
p5337
g5337
S'indices to the list of all elements in the clustering'
p5338
I0
I0
I00
Ntp5339
a(S'int'
p5340
S'first'
p5341
g5341
S"the index into 'elements' to the first element of the cluster"
p5342
I0
I0
I01
Ntp5343
a(S'int'
p5344
S'last'
p5345
g5345
S"the index into 'elements' to the one after the last element of the cluster"
p5346
I0
I0
I01
Ntp5347
asg29
(dp5348
sbsS'TPreprocessIM'
p5349
(i__main__
ClassDefinition
p5350
(dp5351
g4
I1
sg5
I01
sg6
g5349
sg7
S'TOrange'
p5352
sg9
I01
sg10
(lp5353
sg12
(lp5354
sg29
(dp5355
sbsS'TLongList'
p5356
(ipyprops
ClassDefinition
p5357
(dp5358
g4
I0
sg5
I01
sg6
g5356
sg7
g143
sg9
I0
sg10
(lp5359
sg12
(lp5360
sg29
(dp5361
sbsS'TBasketFeeder'
p5362
(i__main__
ClassDefinition
p5363
(dp5364
g4
I1
sg5
I01
sg6
g5362
sg7
S'TOrange'
p5365
sg9
I00
sg10
(lp5366
sg12
(lp5367
(S'bool'
p5368
S'dontStore'
p5369
S'dont_store'
p5370
S'disables items storing'
p5371
I0
I0
I01
Ntp5372
a(S'bool'
p5373
S'dontCheckStored'
p5374
S'dont_check_stored'
p5375
S'disables items lookup in the global cache'
p5376
I0
I0
I01
Ntp5377
a(S'TDomain'
p5378
S'domain'
p5379
g5379
S'domain where the meta attributes are stored'
p5380
I0
I0
I00
Ntp5381
a(S'TDomain'
p5382
S'sourceDomain'
p5383
S'source_domain'
p5384
S'domain with items that can be reused'
p5385
I0
I0
I00
Ntp5386
asg29
(dp5387
sbsS'TRuleEvaluator_Laplace'
p5388
(i__main__
ClassDefinition
p5389
(dp5390
g4
I1
sg5
I01
sg6
g5388
sg7
S'TRuleEvaluator'
p5391
sg9
I00
sg10
(lp5392
sg12
(lp5393
sg29
(dp5394
sbsS'TColumnAssessor_N'
p5395
(i__main__
ClassDefinition
p5396
(dp5397
g4
I1
sg5
I01
sg6
g5395
sg7
S'TColumnAssessor'
p5398
sg9
I00
sg10
(lp5399
sg12
(lp5400
sg29
(dp5401
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5402
(i__main__
ClassDefinition
p5403
(dp5404
g4
I1
sg5
I01
sg6
g5402
sg7
S'TSubsetsGenerator_iterator'
p5405
sg9
I00
sg10
(lp5406
sg12
(lp5407
(S'int'
p5408
g2556
g2556
g600
I01
I0
I01
Ntp5409
a(S'int'
p5410
S'max'
p5411
g5411
S'maximal subset size'
p5412
I0
I0
I01
Ntp5413
a(S'bool'
p5414
S'moreToCome'
p5415
S'more_to_come'
p5416
g600
I01
I0
I01
Ntp5417
ag510
asg29
(dp5418
sbsS'TExamplesDistanceConstructor_Lp'
p5419
(i__main__
ClassDefinition
p5420
(dp5421
g4
I1
sg5
I01
sg6
g5419
sg7
S'TExamplesDistanceConstructor_Normalized'
p5422
sg9
I00
sg10
(lp5423
sg12
(lp5424
(S'float'
p5425
g2222
g2222
g2222
I0
I0
I01
Ntp5426
ag2056
ag2061
ag1374
asg29
(dp5427
sbsS'TRuleEvaluator_mEVC'
p5428
(i__main__
ClassDefinition
p5429
(dp5430
g4
I1
sg5
I01
sg6
g5428
sg7
S'TRuleEvaluator'
p5431
sg9
I00
sg10
(lp5432
sg12
(lp5433
(S'float'
p5434
g1216
g1216
S'Parameter m for m-estimate after EVC correction'
p5435
I0
I0
I01
Ntp5436
a(S'TEVDistGetter'
p5437
S'evDistGetter'
p5438
S'ev_dist_getter'
p5439
S'get EVC distribution for chi correction'
p5440
I0
I0
I00
Ntp5441
a(S'TVariable'
p5442
S'probVar'
p5443
S'prob_var'
p5444
S'probability coverage variable (meta usually)'
p5445
I0
I0
I00
Ntp5446
a(S'TRuleValidator'
p5447
S'validator'
p5448
g5448
S'rule validator for best rule'
p5449
I0
I0
I00
Ntp5450
a(S'int'
p5451
S'min_improved'
p5452
g5452
S'minimal number of improved examples'
p5453
I0
I0
I01
Ntp5454
a(S'float'
p5455
S'min_improved_perc'
p5456
g5456
S'minimal percentage of improved examples'
p5457
I0
I0
I01
Ntp5458
a(S'TRule'
p5459
S'bestRule'
p5460
S'best_rule'
p5461
S'best rule found and evaluated given conditions (min_improved, validator)'
p5462
I0
I0
I00
Ntp5463
a(S'float'
p5464
S'ruleAlpha'
p5465
S'rule_alpha'
p5466
S"minimal 'true' rule significance"
p5467
I0
I0
I01
Ntp5468
a(S'float'
p5469
S'attributeAlpha'
p5470
S'attribute_alpha'
p5471
S'minimal attribute significance'
p5472
I0
I0
I01
Ntp5473
a(S'bool'
p5474
S'returnExpectedProb'
p5475
S'return_expected_prob'
p5476
S'if true, evaluator returns expected class probability, if false, current class probability'
p5477
I0
I0
I01
Ntp5478
a(S'int'
p5479
S'optimismReduction'
p5480
S'optimism_reduction'
p5481
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5482
I0
I0
I01
Ntp5483
asg29
(dp5484
sbsS'TExample'
p5485
(i__main__
ClassDefinition
p5486
(dp5487
g4
I1
sg5
I01
sg6
g5485
sg7
S'TOrange'
p5488
sg9
I00
sg10
(lp5489
sg12
(lp5490
g2662
ag2665
asg29
(dp5491
sbsS'TFixedDiscretization'
p5492
(i__main__
ClassDefinition
p5493
(dp5494
g4
I1
sg5
I01
sg6
g5492
sg7
S'TDiscretization'
p5495
sg9
I00
sg10
(lp5496
sg12
(lp5497
(S'TFloatList'
p5498
S'points'
p5499
g5499
S'cut-off points'
p5500
I0
I0
I00
Ntp5501
asg29
(dp5502
sbsS'TDomainContingency'
p5503
(ipyprops
ClassDefinition
p5504
(dp5505
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5506
sg7
g143
sg9
I0
sg10
(lp5507
sg12
(lp5508
sg29
(dp5509
sbsS'TPreprocessor_addGaussianClassNoise'
p5510
(i__main__
ClassDefinition
p5511
(dp5512
g4
I1
sg5
I01
sg6
g5510
sg7
S'TPreprocessor'
p5513
sg9
I00
sg10
(lp5514
sg12
(lp5515
(S'float'
p5516
S'deviation'
p5517
g5517
S'class deviation'
p5518
I0
I0
I01
Ntp5519
a(S'TRandomGenerator'
p5520
S'randomGenerator'
p5521
S'random_generator'
p5522
S'random number generator'
p5523
I0
I0
I00
Ntp5524
asg29
(dp5525
sbsS'TRuleDataStoppingCriteria'
p5526
(i__main__
ClassDefinition
p5527
(dp5528
g4
I1
sg5
I01
sg6
g5526
sg7
S'TOrange'
p5529
sg9
I01
sg10
(lp5530
sg12
(lp5531
sg29
(dp5532
sbsS'TPreprocessor_filter'
p5533
(i__main__
ClassDefinition
p5534
(dp5535
g4
I1
sg5
I01
sg6
g5533
sg7
S'TPreprocessor'
p5536
sg9
I00
sg10
(lp5537
sg12
(lp5538
(S'TFilter'
p5539
S'filter'
p5540
g5540
S'filter'
p5541
I0
I0
I00
Ntp5542
asg29
(dp5543
sbsS'TSOMNodeList'
p5544
(ipyprops
ClassDefinition
p5545
(dp5546
g4
I0
sg5
I01
sg6
g5544
sg7
g143
sg9
I0
sg10
(lp5547
sg12
(lp5548
sg29
(dp5549
sbsS'TExampleDistBySorting'
p5550
(i__main__
ClassDefinition
p5551
(dp5552
g4
I1
sg5
I01
sg6
g5550
sg7
S'TExampleDistConstructor'
p5553
sg9
I00
sg10
(lp5554
sg12
(lp5555
sg29
(dp5556
sbsS'TGraphAsMatrix'
p5557
(i__main__
ClassDefinition
p5558
(dp5559
g4
I1
sg5
I01
sg6
g5557
sg7
S'TGraph'
p5560
sg9
I00
sg10
(lp5561
sg12
(lp5562
g1497
ag1502
ag1506
asg29
(dp5563
sbsS'TMDS'
p5564
(i__main__
ClassDefinition
p5565
(dp5566
g4
I1
sg5
I0
sg6
g5564
sg7
S'TOrange'
p5567
sg9
I00
sg10
(lp5568
sg12
(lp5569
(S'TSymMatrix'
p5570
S'distances'
p5571
g5571
S'SymMatrix that holds the original real distances'
p5572
I0
I0
I00
Ntp5573
a(S'TSymMatrix'
p5574
S'projectedDistances'
p5575
S'projected_distances'
p5576
S'SymMatrix that holds the projected distances'
p5577
I0
I0
I00
Ntp5578
a(S'TSymMatrix'
p5579
S'stress'
p5580
g5580
S'SymMatrix that holds the pointwise stress values'
p5581
I0
I0
I00
Ntp5582
a(S'TFloatListList'
p5583
S'points'
p5584
g5584
S'Holds the current projected point configuration'
p5585
I0
I0
I00
Ntp5586
a(S'TProgressCallback'
p5587
S'progressCallback'
p5588
S'progress_callback'
p5589
S'progressCallback function'
p5590
I0
I0
I00
Ntp5591
a(S'bool'
p5592
S'freshD'
p5593
S'fresh_d'
p5594
g600
I01
I0
I01
Ntp5595
a(S'float'
p5596
S'avgStress'
p5597
S'avg_stress'
p5598
g600
I01
I0
I01
Ntp5599
a(S'int'
p5600
S'dim'
p5601
g5601
g600
I01
I0
I01
Ntp5602
a(S'int'
p5603
S'n'
p5604
g5604
g600
I01
I0
I01
Ntp5605
asg29
(dp5606
sbsS'TValueFilter_discrete'
p5607
(i__main__
ClassDefinition
p5608
(dp5609
g4
I1
sg5
I01
sg6
g5607
sg7
S'TValueFilter'
p5610
sg9
I00
sg10
(lp5611
sg12
(lp5612
(S'TValueList'
p5613
S'values'
p5614
g5614
S'accepted values'
p5615
I0
I0
I00
Ntp5616
a(S'bool'
p5617
S'negate'
p5618
g5618
S'negate'
p5619
I0
I0
I01
Ntp5620
ag1065
ag1070
asg29
(dp5621
sbsS'TComputeDomainContingency'
p5622
(i__main__
ClassDefinition
p5623
(dp5624
g4
I1
sg5
I01
sg6
g5622
sg7
S'TOrange'
p5625
sg9
I00
sg10
(lp5626
sg12
(lp5627
g28
asg29
(dp5628
sbsS'TAssociationRulesInducer'
p5629
(i__main__
ClassDefinition
p5630
(dp5631
g4
I1
sg5
I01
sg6
g5629
sg7
S'TOrange'
p5632
sg9
I00
sg10
(lp5633
sg12
(lp5634
(S'int'
p5635
S'maxItemSets'
p5636
S'max_item_sets'
p5637
S'maximal number of itemsets (increase if you want)'
p5638
I0
I0
I01
Ntp5639
a(S'float'
p5640
S'confidence'
p5641
g5641
S'required confidence'
p5642
I0
I0
I01
Ntp5643
a(S'float'
p5644
S'support'
p5645
g5645
S'required support'
p5646
I0
I0
I01
Ntp5647
a(S'bool'
p5648
S'classificationRules'
p5649
S'classification_rules'
p5650
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5651
I0
I0
I01
Ntp5652
a(S'bool'
p5653
S'storeExamples'
p5654
S'store_examples'
p5655
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5656
I0
I0
I01
Ntp5657
asg29
(dp5658
sbsS'TEarthClassifier'
p5659
(i__main__
ClassDefinition
p5660
(dp5661
g4
I1
sg5
I01
sg6
g5659
sg7
S'TClassifierFD'
p5662
sg9
I00
sg10
(lp5663
sg12
(lp5664
(S'int'
p5665
S'num_preds'
p5666
g5666
S'Number of predictor variables'
p5667
I0
I0
I01
Ntp5668
a(S'int'
p5669
S'num_terms'
p5670
g5670
S'Number of used terms'
p5671
I0
I0
I01
Ntp5672
a(S'int'
p5673
S'max_terms'
p5674
g5674
S'Maximum number of terms'
p5675
I0
I0
I01
Ntp5676
a(S'int'
p5677
S'num_responses'
p5678
g5678
S'Number of response variables'
p5679
I0
I0
I01
Ntp5680
a(S'TBoolList'
p5681
S'best_set'
p5682
g5682
S'Used terms.'
p5683
I0
I0
I00
Ntp5684
a(S'TFloatListList'
p5685
S'dirs'
p5686
g5686
S'max_preds x num_preds matrix'
p5687
I0
I0
I00
Ntp5688
a(S'TFloatListList'
p5689
S'cuts'
p5690
g5690
S'max_preds x num_preds matrix of cuts'
p5691
I0
I0
I00
Ntp5692
a(S'TFloatList'
p5693
S'betas'
p5694
g5694
S'Term coefficients;'
p5695
I0
I0
I00
Ntp5696
ag291
ag94
ag99
asg29
(dp5697
sbsS'TTreeStopCriteria'
p5698
(i__main__
ClassDefinition
p5699
(dp5700
g4
I1
sg5
I01
sg6
g5698
sg7
S'TOrange'
p5701
sg9
I00
sg10
(lp5702
sg12
(lp5703
sg29
(dp5704
sbsS'TPreprocessor_addMissingClasses'
p5705
(i__main__
ClassDefinition
p5706
(dp5707
g4
I1
sg5
I01
sg6
g5705
sg7
S'TPreprocessor'
p5708
sg9
I00
sg10
(lp5709
sg12
(lp5710
(S'float'
p5711
S'proportion'
p5712
g5712
S'proportion of removed class values'
p5713
I0
I0
I01
Ntp5714
a(S'int'
p5715
S'specialType'
p5716
S'special_type'
p5717
S'special value type (1=DC, 2=DK)'
p5718
I0
I0
I01
Ntp5719
a(S'TRandomGenerator'
p5720
S'randomGenerator'
p5721
S'random_generator'
p5722
S'random number generator'
p5723
I0
I0
I00
Ntp5724
asg29
(dp5725
sbsS'TIMClustering'
p5726
(i__main__
ClassDefinition
p5727
(dp5728
g4
I1
sg5
I01
sg6
g5726
sg7
S'TOrange'
p5729
sg9
I00
sg10
(lp5730
sg12
(lp5731
(S'TIM'
p5732
S'im'
p5733
g5733
S'incompatibilty matrix'
p5734
I0
I0
I00
Ntp5735
a(S'TIntList'
p5736
S'clusters'
p5737
g5737
S'cluster index for each matrix column'
p5738
I0
I0
I00
Ntp5739
a(S'int'
p5740
S'maxCluster'
p5741
S'max_cluster'
p5742
S'the highest cluster index'
p5743
I0
I0
I01
Ntp5744
a(S'float'
p5745
S'quality'
p5746
g5746
S'cluster quality'
p5747
I0
I0
I01
Ntp5748
asg29
(dp5749
sbsS'TBasketExampleGenerator'
p5750
(i__main__
ClassDefinition
p5751
(dp5752
g4
I1
sg5
I01
sg6
g5750
sg7
S'TFileExampleGenerator'
p5753
sg9
I00
sg10
(lp5754
sg12
(lp5755
g1589
ag1594
ag1599
ag306
ag310
asg29
(dp5756
sbsS'TRuleEvaluator_Entropy'
p5757
(i__main__
ClassDefinition
p5758
(dp5759
g4
I1
sg5
I01
sg6
g5757
sg7
S'TRuleEvaluator'
p5760
sg9
I00
sg10
(lp5761
sg12
(lp5762
sg29
(dp5763
sbsS'TMeasureAttribute_chiSquare'
p5764
(i__main__
ClassDefinition
p5765
(dp5766
g4
I1
sg5
I01
sg6
g5764
sg7
S'TMeasureAttributeFromProbabilities'
p5767
sg9
I00
sg10
(lp5768
sg12
(lp5769
(S'bool'
p5770
S'computeProbabilities'
p5771
S'compute_probabilities'
p5772
g600
I0
I0
I01
Ntp5773
ag914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp5774
sbsS'TDistribution'
p5775
(i__main__
ClassDefinition
p5776
(dp5777
g4
I1
sg5
I01
sg6
g5775
sg7
S'TSomeValue'
p5778
sg9
I01
sg10
(lp5779
sg12
(lp5780
g1136
ag1140
ag1144
ag1148
ag1152
ag1157
ag1162
ag1167
asg29
(dp5781
sbsS'TExamplesDistance_DTW'
p5782
(i__main__
ClassDefinition
p5783
(dp5784
g4
I1
sg5
I01
sg6
g5782
sg7
S'TExamplesDistance_Normalized'
p5785
sg9
I00
sg10
(lp5786
sg12
(lp5787
(S'int'
p5788
S'dtwDistance'
p5789
S'dtw_distance'
p5790
S' distance measure between individual attributes (default: square of difference)'
p5791
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5792
tp5793
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp5794
S'DistanceType'
p5795
(lp5796
(S'Euclidean'
p5797
I0
tp5798
a(S'Derivative'
p5799
I1
tp5800
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5801
(i__main__
ClassDefinition
p5802
(dp5803
g4
I1
sg5
I01
sg6
g5801
sg7
S'TTreeExampleSplitter'
p5804
sg9
I00
sg10
(lp5805
sg12
(lp5806
sg29
(dp5807
sbsS'TTreePruner_m'
p5808
(i__main__
ClassDefinition
p5809
(dp5810
g4
I1
sg5
I01
sg6
g5808
sg7
S'TTreePruner'
p5811
sg9
I00
sg10
(lp5812
sg12
(lp5813
(S'float'
p5814
g1216
g1216
S'm for m-estimate'
p5815
I0
I0
I01
Ntp5816
asg29
(dp5817
sbsS'TImputer'
p5818
(i__main__
ClassDefinition
p5819
(dp5820
g4
I1
sg5
I01
sg6
g5818
sg7
S'TOrange'
p5821
sg9
I01
sg10
(lp5822
sg12
(lp5823
sg29
(dp5824
sbsS'TExamplesDistanceConstructor_DTW'
p5825
(i__main__
ClassDefinition
p5826
(dp5827
g4
I1
sg5
I01
sg6
g5825
sg7
S'TExamplesDistanceConstructor_Normalized'
p5828
sg9
I00
sg10
(lp5829
sg12
(lp5830
(S'int'
p5831
S'dtwDistance'
p5832
S'dtw_distance'
p5833
S'distance measure between individual attributes (default: square of difference)'
p5834
I0
I0
I01
Ntp5835
ag2056
ag2061
ag1374
asg29
(dp5836
sbsS'TStopIMClusteringByAssessor_n'
p5837
(i__main__
ClassDefinition
p5838
(dp5839
g4
I1
sg5
I01
sg6
g5837
sg7
S'TStopIMClusteringByAssessor'
p5840
sg9
I00
sg10
(lp5841
sg12
(lp5842
(S'int'
p5843
g1022
g1022
S'number of clusters'
p5844
I0
I0
I01
Ntp5845
asg29
(dp5846
sbsS'TVarListList'
p5847
(ipyprops
ClassDefinition
p5848
(dp5849
g4
I0
sg5
I01
sg6
g5847
sg7
g143
sg9
I0
sg10
(lp5850
sg12
(lp5851
sg29
(dp5852
sbsS'TRandomGenerator'
p5853
(i__main__
ClassDefinition
p5854
(dp5855
g4
I1
sg5
I01
sg6
g5853
sg7
S'TOrange'
p5856
sg9
I00
sg10
(lp5857
sg12
(lp5858
(S'int'
p5859
S'initseed'
p5860
g5860
S'initial random seed'
p5861
I0
I0
I01
Ntp5862
a(S'int'
p5863
S'uses'
p5864
g5864
S'#times a number was returned'
p5865
I0
I0
I01
Ntp5866
asg29
(dp5867
sbsS'TFloatListList'
p5868
(ipyprops
ClassDefinition
p5869
(dp5870
g4
I0
sg5
I01
sg6
g5868
sg7
g143
sg9
I0
sg10
(lp5871
sg12
(lp5872
sg29
(dp5873
sbsS'TPreprocessor_imputeByLearner'
p5874
(i__main__
ClassDefinition
p5875
(dp5876
g4
I1
sg5
I01
sg6
g5874
sg7
S'TPreprocessor'
p5877
sg9
I00
sg10
(lp5878
sg12
(lp5879
(S'TLearner'
p5880
S'learner'
p5881
g5881
S'learner used for inducing a model for imputation'
p5882
I0
I0
I00
Ntp5883
asg29
(dp5884
sbsS'TRuleBeamRefiner_Python'
p5885
(i__main__
ClassDefinition
p5886
(dp5887
g4
I1
sg5
I01
sg6
g5885
sg7
S'TRuleBeamRefiner'
p5888
sg9
I00
sg10
(lp5889
sg12
(lp5890
sg29
(dp5891
sbsS'TClassifierFromVarFD'
p5892
(i__main__
ClassDefinition
p5893
(dp5894
g4
I1
sg5
I01
sg6
g5892
sg7
S'TClassifierFD'
p5895
sg9
I00
sg10
(lp5896
sg12
(lp5897
(S'int'
p5898
S'position'
p5899
g5899
S'position of the attribute in domain'
p5900
I0
I0
I01
Ntp5901
a(S'TTransformValue'
p5902
S'transformer'
p5903
g5903
S'transformer'
p5904
I0
I0
I00
Ntp5905
a(S'TDistribution'
p5906
S'distributionForUnknown'
p5907
S'distribution_for_unknown'
p5908
S'distribution for unknown value'
p5909
I0
I0
I00
Ntp5910
a(S'bool'
p5911
S'transformUnknowns'
p5912
S'transform_unknowns'
p5913
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p5914
I0
I0
I01
Ntp5915
ag291
ag94
ag99
asg29
(dp5916
sbsS'TSimpleTreeLearner'
p5917
(i__main__
ClassDefinition
p5918
(dp5919
g4
I1
sg5
I01
sg6
g5917
sg7
S'TLearner'
p5920
sg9
I00
sg10
(lp5921
sg12
(lp5922
(S'float'
p5923
S'maxMajority'
p5924
S'max_majority'
p5925
g600
I0
I0
I01
Ntp5926
a(S'int'
p5927
S'minInstances'
p5928
S'min_instances'
p5929
g600
I0
I0
I01
Ntp5930
a(S'int'
p5931
S'maxDepth'
p5932
S'max_depth'
p5933
g600
I0
I0
I01
Ntp5934
a(S'float'
p5935
S'skipProb'
p5936
S'skip_prob'
p5937
g600
I0
I0
I01
Ntp5938
a(S'TRandomGenerator'
p5939
S'randomGenerator'
p5940
S'random_generator'
p5941
g600
I0
I0
I00
Ntp5942
ag110
asg29
(dp5943
sbsS'TImputer_model'
p5944
(i__main__
ClassDefinition
p5945
(dp5946
g4
I1
sg5
I01
sg6
g5944
sg7
S'TImputer'
p5947
sg9
I00
sg10
(lp5948
sg12
(lp5949
(S'TClassifierList'
p5950
S'models'
p5951
g5951
S'classifiers'
p5952
I0
I0
I00
Ntp5953
asg29
(dp5954
sbsS'TLogRegLearner'
p5955
(i__main__
ClassDefinition
p5956
(dp5957
g4
I1
sg5
I01
sg6
g5955
sg7
S'TLearner'
p5958
sg9
I00
sg10
(lp5959
sg12
(lp5960
(S'TLogRegFitter'
p5961
S'fitter'
p5962
g5962
S'fits beta coefficients and calculates beta errors.'
p5963
I0
I0
I00
Ntp5964
a(S'TImputerConstructor'
p5965
S'imputerConstructor'
p5966
S'imputer_constructor'
p5967
S'if present, it constructs an imputer for unknown values'
p5968
I0
I0
I00
Ntp5969
a(S'TDomainContinuizer'
p5970
S'domainContinuizer'
p5971
S'domain_continuizer'
p5972
S'if present, it constructs continuous domain if needed; if absent, default is used'
p5973
I0
I0
I00
Ntp5974
ag110
asg29
(dp5975
sbsS'TPreprocessor_takeMissing'
p5976
(i__main__
ClassDefinition
p5977
(dp5978
g4
I1
sg5
I01
sg6
g5976
sg7
S'TPreprocessor'
p5979
sg9
I00
sg10
(lp5980
sg12
(lp5981
sg29
(dp5982
sbsS'TMeasureAttribute_IM'
p5983
(i__main__
ClassDefinition
p5984
(dp5985
g4
I1
sg5
I01
sg6
g5983
sg7
S'TMeasureAttribute'
p5986
sg9
I00
sg10
(lp5987
sg12
(lp5988
(S'TIMConstructor'
p5989
S'IMconstructor'
p5990
g5990
S'incompatibility matrix constructor'
p5991
I0
I0
I00
Ntp5992
a(S'TColumnAssessor'
p5993
S'columnAssessor'
p5994
S'column_assessor'
p5995
S'column quality assessor'
p5996
I0
I0
I00
Ntp5997
ag930
ag935
ag940
ag945
asg29
(dp5998
sbsS'TFeatureByDistributions'
p5999
(i__main__
ClassDefinition
p6000
(dp6001
g4
I1
sg5
I01
sg6
g5999
sg7
S'TFeatureInducer'
p6002
sg9
I00
sg10
(lp6003
sg12
(lp6004
(S'TClustersFromDistributions'
p6005
S'clustersFromDistributions'
p6006
S'clusters_from_distributions'
p6007
S'clustering algorithm'
p6008
I0
I0
I00
Ntp6009
a(S'int'
p6010
S'completion'
p6011
g6011
S' decides how to determine the class for points not covered by any cluster'
p6012
I0
I0
I01
S'FeatureByDistributions_Completion'
p6013
tp6014
asg29
(dp6015
S'Completion'
p6016
(lp6017
(S'NoCompletion'
p6018
S'completion_no'
p6019
tp6020
a(S'CompletionByDefault'
p6021
S'completion_default'
p6022
tp6023
a(S'CompletionByBayes'
p6024
S'completion_bayes'
p6025
tp6026
assbsS'TExamplesDistanceConstructor_Relief'
p6027
(i__main__
ClassDefinition
p6028
(dp6029
g4
I1
sg5
I01
sg6
g6027
sg7
S'TExamplesDistanceConstructor'
p6030
sg9
I00
sg10
(lp6031
sg12
(lp6032
g1374
asg29
(dp6033
sbsS'TRuleStoppingCriteria_Python'
p6034
(i__main__
ClassDefinition
p6035
(dp6036
g4
I1
sg5
I01
sg6
g6034
sg7
S'TRuleStoppingCriteria'
p6037
sg9
I00
sg10
(lp6038
sg12
(lp6039
sg29
(dp6040
sbsS'TRemoveUnusedValues'
p6041
(i__main__
ClassDefinition
p6042
(dp6043
g4
I1
sg5
I01
sg6
g6041
sg7
S'TOrange'
p6044
sg9
I00
sg10
(lp6045
sg12
(lp6046
(S'bool'
p6047
S'removeOneValued'
p6048
S'remove_one_valued'
p6049
S'if true (default is false), one valued attributes are also removed'
p6050
I0
I0
I01
Ntp6051
asg29
(dp6052
sbsS'TExamplesDistance_Normalized'
p6053
(i__main__
ClassDefinition
p6054
(dp6055
g4
I1
sg5
I01
sg6
g6053
sg7
S'TExamplesDistance'
p6056
sg9
I01
sg10
(lp6057
sg12
(lp6058
g454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp6059
sbsS'TC45TreeNode'
p6060
(i__main__
ClassDefinition
p6061
(dp6062
g4
I1
sg5
I01
sg6
g6060
sg7
S'TOrange'
p6063
sg9
I00
sg10
(lp6064
sg12
(lp6065
(S'int'
p6066
S'nodeType'
p6067
S'node_type'
p6068
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p6069
I0
I0
I01
S'C45TreeNode_NodeType'
p6070
tp6071
a(S'TValue'
p6072
S'leaf'
p6073
g6073
S'most frequent class at this node'
p6074
I0
I0
I01
Ntp6075
a(S'float'
p6076
S'items'
p6077
g6077
S'no of items at this node'
p6078
I0
I0
I01
Ntp6079
a(S'TDiscDistribution'
p6080
S'classDist'
p6081
S'class_dist'
p6082
S'class distribution of items'
p6083
I0
I0
I00
Ntp6084
a(S'TVariable'
p6085
S'tested'
p6086
g6086
S'attribute referenced in test'
p6087
I0
I0
I00
Ntp6088
a(S'float'
p6089
S'cut'
p6090
g6090
S'threshold for continuous attribute'
p6091
I0
I0
I01
Ntp6092
a(S'float'
p6093
S'lower'
p6094
g6094
S'lower limit of soft threshold'
p6095
I0
I0
I01
Ntp6096
a(S'float'
p6097
S'upper'
p6098
g6098
S'upper limit of soft threshold'
p6099
I0
I0
I01
Ntp6100
a(S'TIntList'
p6101
S'mapping'
p6102
g6102
S'mapping for discrete value'
p6103
I0
I0
I00
Ntp6104
a(S'TC45TreeNodeList'
p6105
S'branch'
p6106
g6106
S'branch[x] = (sub)tree for outcome x */'
p6107
I0
I0
I00
Ntp6108
asg29
(dp6109
S'NodeType'
p6110
(lp6111
(S'Leaf'
p6112
S'0'
p6113
tp6114
a(S'Branch'
p6115
I1
tp6116
a(S'Cut'
p6117
I2
tp6118
a(S'Subset'
p6119
I3
tp6120
assbsS'TDistributionAssessor_Measure'
p6121
(i__main__
ClassDefinition
p6122
(dp6123
g4
I1
sg5
I01
sg6
g6121
sg7
S'TDistributionAssessor'
p6124
sg9
I00
sg10
(lp6125
sg12
(lp6126
(S'TMeasureAttribute'
p6127
S'measure'
p6128
g6128
S'attribute quality measure'
p6129
I0
I0
I00
Ntp6130
asg29
(dp6131
sbsS'TIMConstructor'
p6132
(i__main__
ClassDefinition
p6133
(dp6134
g4
I1
sg5
I01
sg6
g6132
sg7
S'TOrange'
p6135
sg9
I01
sg10
(lp6136
sg12
(lp6137
g1253
asg29
(dp6138
sbsS'TRuleFinder_Python'
p6139
(i__main__
ClassDefinition
p6140
(dp6141
g4
I1
sg5
I01
sg6
g6139
sg7
S'TRuleFinder'
p6142
sg9
I00
sg10
(lp6143
sg12
(lp6144
g4011
ag4014
asg29
(dp6145
sbsS'TTabDelimExampleGenerator'
p6146
(i__main__
ClassDefinition
p6147
(dp6148
g4
I1
sg5
I01
sg6
g6146
sg7
S'TFileExampleGenerator'
p6149
sg9
I00
sg10
(lp6150
sg12
(lp6151
(S'TIntList'
p6152
S'attributeTypes'
p6153
S'attribute_types'
p6154
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6155
I0
I0
I00
Ntp6156
a(S'int'
p6157
S'classPos'
p6158
S'class_pos'
p6159
S'position of the class attribute'
p6160
I0
I0
I01
Ntp6161
a(S'TIntList'
p6162
S'classPoses'
p6163
S'class_poses'
p6164
S'positions of class attributes if there are multiple; otherwise None'
p6165
I0
I0
I00
Ntp6166
a(S'int'
p6167
S'basketPos'
p6168
S'basket_pos'
p6169
S'position of the (virtual) basket attribute'
p6170
I0
I0
I01
Ntp6171
a(S'int'
p6172
S'headerLines'
p6173
S'header_lines'
p6174
S'number of header lines (3 for .tab, 1 for .txt)'
p6175
I0
I0
I01
Ntp6176
a(S'bool'
p6177
S'csv'
p6178
g6178
S"also allow ',' as a separator"
p6179
I0
I0
I01
Ntp6180
a(S'TBasketFeeder'
p6181
S'basketFeeder'
p6182
S'basket_feeder'
p6183
S'takes care of inserting the meta attributes from the basket if need be'
p6184
I0
I0
I00
Ntp6185
ag1589
ag1594
ag1599
ag306
ag310
asg29
(dp6186
sbsS'TRandomClassifier'
p6187
(i__main__
ClassDefinition
p6188
(dp6189
g4
I1
sg5
I01
sg6
g6187
sg7
S'TClassifier'
p6190
sg9
I00
sg10
(lp6191
sg12
(lp6192
(S'TDistribution'
p6193
S'probabilities'
p6194
g6194
S'probabilities of predictions'
p6195
I0
I0
I00
Ntp6196
ag94
ag99
asg29
(dp6197
sbsS'TkNNLearner'
p6198
(i__main__
ClassDefinition
p6199
(dp6200
g4
I1
sg5
I01
sg6
g6198
sg7
S'TLearner'
p6201
sg9
I00
sg10
(lp6202
sg12
(lp6203
(S'float'
p6204
g1212
g1212
S'number of neighbours (0 for sqrt of #examples)'
p6205
I0
I0
I01
Ntp6206
a(S'bool'
p6207
S'rankWeight'
p6208
S'rank_weight'
p6209
S'enable weighting by ranks'
p6210
I0
I0
I01
Ntp6211
a(S'TExamplesDistanceConstructor'
p6212
S'distanceConstructor'
p6213
S'distance_constructor'
p6214
S'metrics'
p6215
I0
I0
I00
Ntp6216
ag110
asg29
(dp6217
sbsS'TTreeDescender_UnknownToNode'
p6218
(i__main__
ClassDefinition
p6219
(dp6220
g4
I1
sg5
I01
sg6
g6218
sg7
g1551
sg9
I0
sg10
(lp6221
sg12
(lp6222
sg29
(dp6223
sbsS'TIntFloatList'
p6224
(ipyprops
ClassDefinition
p6225
(dp6226
g4
I0
sg5
I01
sg6
g6224
sg7
g143
sg9
I0
sg10
(lp6227
sg12
(lp6228
sg29
(dp6229
sbsS'TDistributionAssessor_mf'
p6230
(i__main__
ClassDefinition
p6231
(dp6232
g4
I1
sg5
I01
sg6
g6230
sg7
S'TDistributionAssessor'
p6233
sg9
I00
sg10
(lp6234
sg12
(lp6235
(S'float'
p6236
g1216
g1216
S'm for m-estimate'
p6237
I0
I0
I01
Ntp6238
asg29
(dp6239
sbsS'TExampleClusters'
p6240
(i__main__
ClassDefinition
p6241
(dp6242
g4
I1
sg5
I01
sg6
g6240
sg7
S'TGeneralExampleClustering'
p6243
sg9
I00
sg10
(lp6244
sg12
(lp6245
(S'TExampleCluster'
p6246
S'root'
p6247
g6247
S'root of cluster hierarchy'
p6248
I0
I0
I00
Ntp6249
a(S'float'
p6250
S'quality'
p6251
g6251
S"'quality' of clustering"
p6252
I0
I0
I01
Ntp6253
asg29
(dp6254
sbsS'TExamplesDistance_Python'
p6255
(i__main__
ClassDefinition
p6256
(dp6257
g4
I1
sg5
I01
sg6
g6255
sg7
S'TExamplesDistance'
p6258
sg9
I00
sg10
(lp6259
sg12
(lp6260
sg29
(dp6261
sbsS'TCostLearner'
p6262
(i__main__
ClassDefinition
p6263
(dp6264
g4
I1
sg5
I01
sg6
g6262
sg7
S'TMajorityLearner'
p6265
sg9
I00
sg10
(lp6266
sg12
(lp6267
(S'TCostMatrix'
p6268
S'cost'
p6269
g6269
S'cost matrix'
p6270
I0
I0
I00
Ntp6271
ag4134
ag4139
ag110
asg29
(dp6272
sbsS'TEFMDataDescription'
p6273
(i__main__
ClassDefinition
p6274
(dp6275
g4
I1
sg5
I01
sg6
g6273
sg7
S'TOrange'
p6276
sg9
I00
sg10
(lp6277
S'domainDistributions'
p6278
asg12
(lp6279
(S'TDomain'
p6280
S'domain'
p6281
g6281
S'domain'
p6282
I01
I0
I00
Ntp6283
asg29
(dp6284
sbsS'TClassifierFD'
p6285
(i__main__
ClassDefinition
p6286
(dp6287
g4
I1
sg5
I01
sg6
g6285
sg7
S'TClassifier'
p6288
sg9
I00
sg10
(lp6289
sg12
(lp6290
g291
ag94
ag99
asg29
(dp6291
sbsS'TPreprocessor_drop'
p6292
(i__main__
ClassDefinition
p6293
(dp6294
g4
I1
sg5
I01
sg6
g6292
sg7
S'TPreprocessor'
p6295
sg9
I00
sg10
(lp6296
sg12
(lp6297
(S'TVariableFilterMap'
p6298
S'values'
p6299
g6299
S'variable-filter pairs'
p6300
I0
I0
I00
Ntp6301
a(S'bool'
p6302
S'conjunction'
p6303
g6303
S'decides whether to take conjunction or disjunction of values'
p6304
I0
I0
I01
Ntp6305
asg29
(dp6306
sbsS'TTreeDescender_UnknownToCommonBranch'
p6307
(i__main__
ClassDefinition
p6308
(dp6309
g4
I1
sg5
I01
sg6
g6307
sg7
g1551
sg9
I0
sg10
(lp6310
sg12
(lp6311
sg29
(dp6312
sbsS'TPreprocessor_addNoise'
p6313
(i__main__
ClassDefinition
p6314
(dp6315
g4
I1
sg5
I01
sg6
g6313
sg7
S'TPreprocessor'
p6316
sg9
I00
sg10
(lp6317
sg12
(lp6318
(S'TVariableFloatMap'
p6319
S'proportions'
p6320
g6320
S'proportion of changed values for individual attributes'
p6321
I0
I0
I00
Ntp6322
a(S'float'
p6323
S'defaultProportion'
p6324
S'default_proportion'
p6325
S'default proportion of changed values (for attributes not specified above)'
p6326
I0
I0
I01
Ntp6327
a(S'TRandomGenerator'
p6328
S'randomGenerator'
p6329
S'random_generator'
p6330
S'random number generator'
p6331
I0
I0
I00
Ntp6332
asg29
(dp6333
sbsS'TStopIMClusteringByAssessor_binary'
p6334
(i__main__
ClassDefinition
p6335
(dp6336
g4
I1
sg5
I01
sg6
g6334
sg7
S'TStopIMClusteringByAssessor'
p6337
sg9
I00
sg10
(lp6338
sg12
(lp6339
sg29
(dp6340
sbsS'TColumnAssessor_mf'
p6341
(i__main__
ClassDefinition
p6342
(dp6343
g4
I1
sg5
I01
sg6
g6341
sg7
S'TColumnAssessor'
p6344
sg9
I00
sg10
(lp6345
sg12
(lp6346
(S'float'
p6347
g1216
g1216
S'm for m-estimate'
p6348
I0
I0
I01
Ntp6349
asg29
(dp6350
sbsS'TKruskalStress'
p6351
(i__main__
ClassDefinition
p6352
(dp6353
g4
I1
sg5
I0
sg6
g6351
sg7
S'TStressFunc'
p6354
sg9
I00
sg10
(lp6355
sg12
(lp6356
sg29
(dp6357
sbsS'TExamplesDistanceConstructor'
p6358
(i__main__
ClassDefinition
p6359
(dp6360
g4
I1
sg5
I01
sg6
g6358
sg7
S'TOrange'
p6361
sg9
I01
sg10
(lp6362
sg12
(lp6363
g1374
asg29
(dp6364
sbsS'TSubsetsGenerator'
p6365
(i__main__
ClassDefinition
p6366
(dp6367
g4
I1
sg5
I01
sg6
g6365
sg7
S'TOrange'
p6368
sg9
I01
sg10
(lp6369
sg12
(lp6370
g207
asg29
(dp6371
sbsS'TPreprocessor_addCensorWeight'
p6372
(i__main__
ClassDefinition
p6373
(dp6374
g4
I1
sg5
I01
sg6
g6372
sg7
S'TPreprocessor'
p6375
sg9
I00
sg10
(lp6376
sg12
(lp6377
(S'TVariable'
p6378
S'outcomeVar'
p6379
S'outcome_var'
p6380
S'outcome variable'
p6381
I0
I0
I00
Ntp6382
a(S'TVariable'
p6383
S'timeVar'
p6384
S'time_var'
p6385
S'time variable'
p6386
I0
I0
I00
Ntp6387
a(S'TValue'
p6388
S'eventValue'
p6389
S'event_value'
p6390
S'event (fail) value'
p6391
I0
I0
I01
Ntp6392
a(S'int'
p6393
S'method'
p6394
g6394
S' weighting method'
p6395
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6396
tp6397
a(S'float'
p6398
S'maxTime'
p6399
S'max_time'
p6400
S'maximal time'
p6401
I0
I0
I01
Ntp6402
a(S'bool'
p6403
S'addComplementary'
p6404
S'add_complementary'
p6405
S'if true (default is false), complementary examples are added for censored examples'
p6406
I0
I0
I01
Ntp6407
asg29
(dp6408
S'Method'
p6409
(lp6410
(S'Linear'
p6411
S'TPreprocessor_addCensorWeight::linear'
p6412
tp6413
a(S'KM'
p6414
S'TPreprocessor_addCensorWeight::km'
p6415
tp6416
a(S'Bayes'
p6417
S'TPreprocessor_addCensorWeight::bayes'
p6418
tp6419
assbsS'TRuleBeamCandidateSelector_Python'
p6420
(i__main__
ClassDefinition
p6421
(dp6422
g4
I1
sg5
I01
sg6
g6420
sg7
S'TRuleBeamCandidateSelector'
p6423
sg9
I00
sg10
(lp6424
sg12
(lp6425
sg29
(dp6426
sbsS'TIntList'
p6427
(ipyprops
ClassDefinition
p6428
(dp6429
g4
I0
sg5
I01
sg6
g6427
sg7
g143
sg9
I0
sg10
(lp6430
sg12
(lp6431
sg29
(dp6432
sbsS'TEntropyDiscretization'
p6433
(i__main__
ClassDefinition
p6434
(dp6435
g4
I1
sg5
I01
sg6
g6433
sg7
S'TDiscretization'
p6436
sg9
I00
sg10
(lp6437
sg12
(lp6438
(S'int'
p6439
S'maxNumberOfIntervals'
p6440
(g6440
g1022
tp6441
S' maximal number of intervals; default = 0 (no limits)'
p6442
I0
I0
I01
Ntp6443
a(S'bool'
p6444
S'forceAttribute'
p6445
(g6445
S'forced'
p6446
tp6447
S' minimal number of intervals; default = 0 (no limits)'
p6448
I0
I0
I01
Ntp6449
asg29
(dp6450
sbsS'TIMBySorting'
p6451
(i__main__
ClassDefinition
p6452
(dp6453
g4
I1
sg5
I01
sg6
g6451
sg7
S'TIMConstructor'
p6454
sg9
I00
sg10
(lp6455
sg12
(lp6456
g1253
asg29
(dp6457
sbsS'TImputerConstructor_asValue'
p6458
(i__main__
ClassDefinition
p6459
(dp6460
g4
I1
sg5
I01
sg6
g6458
sg7
S'TImputerConstructor'
p6461
sg9
I00
sg10
(lp6462
sg12
(lp6463
g164
asg29
(dp6464
sbsS'TTreeDescender_UnknownMergeAsSelector'
p6465
(i__main__
ClassDefinition
p6466
(dp6467
g4
I1
sg5
I01
sg6
g6465
sg7
g1551
sg9
I0
sg10
(lp6468
sg12
(lp6469
sg29
(dp6470
sbsS'TExampleDistVector'
p6471
(i__main__
ClassDefinition
p6472
(dp6473
g4
I1
sg5
I01
sg6
g6471
sg7
S'TOrange'
p6474
sg9
I00
sg10
(lp6475
sg12
(lp6476
sg29
(dp6477
sbsS'TConditionalProbabilityEstimatorList'
p6478
(ipyprops
ClassDefinition
p6479
(dp6480
g4
I0
sg5
I01
sg6
g6478
sg7
g143
sg9
I0
sg10
(lp6481
sg12
(lp6482
sg29
(dp6483
sbsS'TRuleBeamFilter_Width'
p6484
(i__main__
ClassDefinition
p6485
(dp6486
g4
I1
sg5
I01
sg6
g6484
sg7
S'TRuleBeamFilter'
p6487
sg9
I00
sg10
(lp6488
sg12
(lp6489
(S'int'
p6490
S'width'
p6491
g6491
g600
I0
I0
I01
Ntp6492
asg29
(dp6493
sbsS'TProbabilityEstimator'
p6494
(i__main__
ClassDefinition
p6495
(dp6496
g4
I1
sg5
I01
sg6
g6494
sg7
S'TOrange'
p6497
sg9
I01
sg10
(lp6498
sg12
(lp6499
g1529
ag1534
asg29
(dp6500
sbsS'TMeasureAttribute_info'
p6501
(i__main__
ClassDefinition
p6502
(dp6503
g4
I1
sg5
I01
sg6
g6501
sg7
S'TMeasureAttributeFromProbabilities'
p6504
sg9
I00
sg10
(lp6505
sg12
(lp6506
g914
ag919
ag925
ag930
ag935
ag940
ag945
asg29
(dp6507
sbsS'TRuleStoppingCriteria'
p6508
(i__main__
ClassDefinition
p6509
(dp6510
g4
I1
sg5
I01
sg6
g6508
sg7
S'TOrange'
p6511
sg9
I01
sg10
(lp6512
sg12
(lp6513
sg29
(dp6514
sbsS'TImputerConstructor_model'
p6515
(i__main__
ClassDefinition
p6516
(dp6517
g4
I1
sg5
I01
sg6
g6515
sg7
S'TImputerConstructor'
p6518
sg9
I00
sg10
(lp6519
sg12
(lp6520
(S'TLearner'
p6521
S'learnerDiscrete'
p6522
S'learner_discrete'
p6523
S'learner for discrete attributes'
p6524
I0
I0
I00
Ntp6525
a(S'TLearner'
p6526
S'learnerContinuous'
p6527
S'learner_continuous'
p6528
S'learner for continuous attributes'
p6529
I0
I0
I00
Ntp6530
a(S'bool'
p6531
S'useClass'
p6532
S'use_class'
p6533
S'tells whether to use class value in imputation (default: false)'
p6534
I0
I0
I01
Ntp6535
ag164
asg29
(dp6536
sbsS'TFindNearestConstructor_BruteForce'
p6537
(i__main__
ClassDefinition
p6538
(dp6539
g4
I1
sg5
I01
sg6
g6537
sg7
S'TFindNearestConstructor'
p6540
sg9
I00
sg10
(lp6541
sg12
(lp6542
g1821
ag1826
asg29
(dp6543
sbsS'TImputerConstructor'
p6544
(i__main__
ClassDefinition
p6545
(dp6546
g4
I1
sg5
I01
sg6
g6544
sg7
S'TOrange'
p6547
sg9
I01
sg10
(lp6548
sg12
(lp6549
g164
asg29
(dp6550
sbsS'TPreprocessor'
p6551
(i__main__
ClassDefinition
p6552
(dp6553
g4
I1
sg5
I01
sg6
g6551
sg7
S'TOrange'
p6554
sg9
I01
sg10
(lp6555
sg12
(lp6556
sg29
(dp6557
sbsS'TDiscretizer'
p6558
(i__main__
ClassDefinition
p6559
(dp6560
g4
I1
sg5
I01
sg6
g6558
sg7
S'TTransformValue'
p6561
sg9
I01
sg10
(lp6562
sg12
(lp6563
g805
asg29
(dp6564
sbsS'TIMByRowsPreprocessor'
p6565
(i__main__
ClassDefinition
p6566
(dp6567
g4
I1
sg5
I01
sg6
g6565
sg7
S'TOrange'
p6568
sg9
I01
sg10
(lp6569
sg12
(lp6570
sg29
(dp6571
sbsS'TTreeStopCriteria_common'
p6572
(i__main__
ClassDefinition
p6573
(dp6574
g4
I1
sg5
I01
sg6
g6572
sg7
S'TTreeStopCriteria'
p6575
sg9
I00
sg10
(lp6576
sg12
(lp6577
(S'float'
p6578
S'maxMajority'
p6579
S'max_majority'
p6580
S'a maximal proportion of majority class for division to continue'
p6581
I0
I0
I01
Ntp6582
a(S'float'
p6583
S'minExamples'
p6584
S'min_examples'
p6585
S'a minimal number of examples for division to continue'
p6586
I0
I0
I01
Ntp6587
asg29
(dp6588
sbsS'TTreeStopCriteria_Python'
p6589
(i__main__
ClassDefinition
p6590
(dp6591
g4
I1
sg5
I01
sg6
g6589
sg7
S'TTreeStopCriteria'
p6592
sg9
I00
sg10
(lp6593
sg12
(lp6594
sg29
(dp6595
sbsS'TExamplesDistanceConstructor_Maximal'
p6596
(i__main__
ClassDefinition
p6597
(dp6598
g4
I1
sg5
I01
sg6
g6596
sg7
S'TExamplesDistanceConstructor_Normalized'
p6599
sg9
I00
sg10
(lp6600
sg12
(lp6601
g2056
ag2061
ag1374
asg29
(dp6602
sbsS'TIGByIM'
p6603
(i__main__
ClassDefinition
p6604
(dp6605
g4
I1
sg5
I01
sg6
g6603
sg7
S'TIGConstructor'
p6606
sg9
I00
sg10
(lp6607
sg12
(lp6608
(S'TIMConstructor'
p6609
S'IMconstructor'
p6610
g6610
S'IM constructor'
p6611
I0
I0
I00
Ntp6612
asg29
(dp6613
sbsS'TRuleEvaluator_LRS'
p6614
(i__main__
ClassDefinition
p6615
(dp6616
g4
I1
sg5
I01
sg6
g6614
sg7
S'TRuleEvaluator'
p6617
sg9
I00
sg10
(lp6618
sg12
(lp6619
(S'TRuleList'
p6620
S'rules'
p6621
g6621
g600
I0
I0
I00
Ntp6622
a(S'bool'
p6623
S'storeRules'
p6624
S'store_rules'
p6625
g600
I0
I0
I01
Ntp6626
asg29
(dp6627
sbs.