/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern IMPORT_DLL TOrangeType PyOrOrange_Type;


/* -------------- GraphLayout --------------*/

PyMethodDef GraphLayout_methods[] = {
     {"circular_crossing_reduction", (binaryfunc)GraphLayout_circular_crossing_reduction, METH_VARARGS, "() -> None"},
     {"circular_original", (binaryfunc)GraphLayout_circular_original, METH_VARARGS, "() -> None"},
     {"circular_random", (binaryfunc)GraphLayout_circular_random, METH_VARARGS, "() -> None"},
     {"closest_vertex", (binaryfunc)GraphLayout_closest_vertex, METH_VARARGS, "(x, y) -> vertex id"},
     {"edges_from_distance_matrix", (binaryfunc)GraphLayout_edges_from_distance_matrix, METH_VARARGS, "(matrix, lower, upper, kNN) -> list of edges"},
     {"fr", (binaryfunc)GraphLayout_fr, METH_VARARGS, "(steps, temperature, coolFactor, weighted) -> temperature"},
     {"fr_radial", (binaryfunc)GraphLayout_fr_radial, METH_VARARGS, "(center, steps, temperature) -> temperature"},
     {"get_vertex_powers", (binaryfunc)GraphLayout_get_vertex_powers, METH_NOARGS, "() -> list"},
     {"get_vertices_in_rect", (binaryfunc)GraphLayout_get_vertices_in_rect, METH_VARARGS, "(x1, y1, x2, y2) -> list of vertices"},
     {"random", (binaryfunc)GraphLayout_random, METH_VARARGS, "() -> None"},
     {"read_pajek", (binaryfunc)GraphLayout_readPajek, METH_VARARGS, "(fn, project) -> Edge List"},
     {"set_graph", (binaryfunc)GraphLayout_set_graph, METH_VARARGS, "(Orange.network.Graph) -> None"},
     {"vertex_distances", (binaryfunc)GraphLayout_vertex_distances, METH_VARARGS, "(x, y) -> List of (distance, vertex)"},
     {NULL, NULL}
};

PyGetSetDef GraphLayout_getset[]=  {
  {"coors", (getter)GraphLayout_get_coors, NULL},
  {NULL}};



PyTypeObject PyOrGraphLayout_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.GraphLayout",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() -> None",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  GraphLayout_methods,                               /* tp_methods */
  0,
  GraphLayout_getset,                                /* tp_getset */
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)GraphLayout_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_GraphLayout(PyObject *obj, void *ptr) { if (!PyOrGraphLayout_Check(obj)) return 0;      *(GCPtr<TGraphLayout> *)(ptr) = PyOrange_AsGraphLayout(obj); return 1; }
int ccn_func_GraphLayout(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGraphLayout> *)(ptr) = GCPtr<TGraphLayout>(); return 1; }      if (!PyOrGraphLayout_Check(obj)) return 0;      *(GCPtr<TGraphLayout> *)(ptr) = PyOrange_AsGraphLayout(obj); return 1; }


ORANGEOM_API TOrangeType PyOrGraphLayout_Type (PyOrGraphLayout_Type_inh, typeid(TGraphLayout), 0, cc_GraphLayout, ccn_GraphLayout, NULL, false, NULL, NULL);



