/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern ORANGE_API TOrangeType PyOrOrange_Type;


/* -------------- AlignmentList --------------*/

PyMethodDef AlignmentList_methods[] = {
     {"__reduce__", (binaryfunc)AlignmentList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)AlignmentList_append, METH_O, "(Alignment) -> None"},
     {"count", (binaryfunc)AlignmentList_count, METH_O, "(Alignment) -> int"},
     {"extend", (binaryfunc)AlignmentList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)AlignmentList_filter, METH_VARARGS, "([filter-function]) -> AlignmentList"},
     {"index", (binaryfunc)AlignmentList_index, METH_O, "(Alignment) -> int"},
     {"insert", (binaryfunc)AlignmentList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)AlignmentList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)AlignmentList_pop, METH_VARARGS, "() -> Alignment"},
     {"remove", (binaryfunc)AlignmentList_remove, METH_O, "(Alignment) -> None"},
     {"reverse", (binaryfunc)AlignmentList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)AlignmentList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods AlignmentList_as_sequence = {
  (inquiry)AlignmentList_len_sq,                     /* sq_length */
  (binaryfunc)AlignmentList_concat,                  /* sq_concat */
  (intargfunc)AlignmentList_repeat,                  /* sq_repeat */
  (intargfunc)AlignmentList_getitem_sq,              /* sq_item */
  (intintargfunc)AlignmentList_getslice,             /* sq_slice */
  (intobjargproc)AlignmentList_setitem_sq,           /* sq_ass_item */
  (intintobjargproc)AlignmentList_setslice,          /* sq_ass_slice */
  (objobjproc)AlignmentList_contains,                /* sq_contains */
};

PyTypeObject PyOrAlignmentList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.AlignmentList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)AlignmentList_repr,                      /* tp_repr */
  0,
  &AlignmentList_as_sequence,                        /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)AlignmentList_str,                       /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Alignment>)",                           /* tp_doc */
  0, 0,
  (richcmpfunc)AlignmentList_richcmp,                /* tp_richcmp */
  0, 0, 0,
  AlignmentList_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)AlignmentList_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AlignmentList(PyObject *obj, void *ptr) { if (!PyOrAlignmentList_Check(obj)) return 0;      *(GCPtr<TAlignmentList> *)(ptr) = PyOrange_AsAlignmentList(obj); return 1; }
int ccn_func_AlignmentList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAlignmentList> *)(ptr) = GCPtr<TAlignmentList>(); return 1; }      if (!PyOrAlignmentList_Check(obj)) return 0;      *(GCPtr<TAlignmentList> *)(ptr) = PyOrange_AsAlignmentList(obj); return 1; }


ORANGE_API TOrangeType PyOrAlignmentList_Type (PyOrAlignmentList_Type_inh, typeid(TAlignmentList), 0, cc_AlignmentList, ccn_AlignmentList, NULL, true, NULL, NULL);



/* -------------- BoolList --------------*/

PyMethodDef BoolList_methods[] = {
     {"__reduce__", (binaryfunc)BoolList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)BoolList_append, METH_O, "(bool) -> None"},
     {"count", (binaryfunc)BoolList_count, METH_O, "(bool) -> int"},
     {"extend", (binaryfunc)BoolList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)BoolList_filter, METH_VARARGS, "([filter-function]) -> BoolList"},
     {"index", (binaryfunc)BoolList_index, METH_O, "(bool) -> int"},
     {"insert", (binaryfunc)BoolList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)BoolList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)BoolList_pop, METH_VARARGS, "() -> bool"},
     {"remove", (binaryfunc)BoolList_remove, METH_O, "(bool) -> None"},
     {"reverse", (binaryfunc)BoolList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)BoolList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods BoolList_as_sequence = {
  (inquiry)BoolList_len_sq,                          /* sq_length */
  (binaryfunc)BoolList_concat,                       /* sq_concat */
  (intargfunc)BoolList_repeat,                       /* sq_repeat */
  (intargfunc)BoolList_getitem_sq,                   /* sq_item */
  (intintargfunc)BoolList_getslice,                  /* sq_slice */
  (intobjargproc)BoolList_setitem_sq,                /* sq_ass_item */
  (intintobjargproc)BoolList_setslice,               /* sq_ass_slice */
  (objobjproc)BoolList_contains,                     /* sq_contains */
};

PyTypeObject PyOrBoolList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.BoolList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)BoolList_repr,                           /* tp_repr */
  0,
  &BoolList_as_sequence,                             /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)BoolList_str,                            /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of bool>)",                                /* tp_doc */
  0, 0,
  (richcmpfunc)BoolList_richcmp,                     /* tp_richcmp */
  0, 0, 0,
  BoolList_methods,                                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)BoolList_new,                             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_BoolList(PyObject *obj, void *ptr) { if (!PyOrBoolList_Check(obj)) return 0;      *(GCPtr<TBoolList> *)(ptr) = PyOrange_AsBoolList(obj); return 1; }
int ccn_func_BoolList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TBoolList> *)(ptr) = GCPtr<TBoolList>(); return 1; }      if (!PyOrBoolList_Check(obj)) return 0;      *(GCPtr<TBoolList> *)(ptr) = PyOrange_AsBoolList(obj); return 1; }


ORANGE_API TOrangeType PyOrBoolList_Type (PyOrBoolList_Type_inh, typeid(TBoolList), 0, cc_BoolList, ccn_BoolList, NULL, true, NULL, NULL);



/* -------------- FloatFloatList --------------*/

PyMethodDef FloatFloatList_methods[] = {
     {"__reduce__", (binaryfunc)FloatFloatList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)FloatFloatList_append, METH_O, "(tuple(float, float)) -> None"},
     {"count", (binaryfunc)FloatFloatList_count, METH_O, "(tuple(float, float)) -> int"},
     {"extend", (binaryfunc)FloatFloatList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)FloatFloatList_filter, METH_VARARGS, "([filter-function]) -> FloatFloatList"},
     {"index", (binaryfunc)FloatFloatList_index, METH_O, "(tuple(float, float)) -> int"},
     {"insert", (binaryfunc)FloatFloatList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)FloatFloatList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)FloatFloatList_pop, METH_VARARGS, "() -> tuple(float, float)"},
     {"remove", (binaryfunc)FloatFloatList_remove, METH_O, "(tuple(float, float)) -> None"},
     {"reverse", (binaryfunc)FloatFloatList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)FloatFloatList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods FloatFloatList_as_sequence = {
  (inquiry)FloatFloatList_len_sq,                    /* sq_length */
  (binaryfunc)FloatFloatList_concat,                 /* sq_concat */
  (intargfunc)FloatFloatList_repeat,                 /* sq_repeat */
  (intargfunc)FloatFloatList_getitem_sq,             /* sq_item */
  (intintargfunc)FloatFloatList_getslice,            /* sq_slice */
  (intobjargproc)FloatFloatList_setitem_sq,          /* sq_ass_item */
  (intintobjargproc)FloatFloatList_setslice,         /* sq_ass_slice */
  (objobjproc)FloatFloatList_contains,               /* sq_contains */
};

PyTypeObject PyOrFloatFloatList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FloatFloatList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)FloatFloatList_repr,                     /* tp_repr */
  0,
  &FloatFloatList_as_sequence,                       /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)FloatFloatList_str,                      /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of tuple(float, float)>)",                 /* tp_doc */
  0, 0,
  (richcmpfunc)FloatFloatList_richcmp,               /* tp_richcmp */
  0, 0, 0,
  FloatFloatList_methods,                            /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FloatFloatList_new,                       /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FloatFloatList(PyObject *obj, void *ptr) { if (!PyOrFloatFloatList_Check(obj)) return 0;      *(GCPtr<TFloatFloatList> *)(ptr) = PyOrange_AsFloatFloatList(obj); return 1; }
int ccn_func_FloatFloatList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFloatFloatList> *)(ptr) = GCPtr<TFloatFloatList>(); return 1; }      if (!PyOrFloatFloatList_Check(obj)) return 0;      *(GCPtr<TFloatFloatList> *)(ptr) = PyOrange_AsFloatFloatList(obj); return 1; }


ORANGE_API TOrangeType PyOrFloatFloatList_Type (PyOrFloatFloatList_Type_inh, typeid(TFloatFloatList), 0, cc_FloatFloatList, ccn_FloatFloatList, NULL, true, NULL, NULL);



/* -------------- FloatList --------------*/

PyMethodDef FloatList_methods[] = {
     {"__reduce__", (binaryfunc)FloatList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)FloatList_append, METH_O, "(float) -> None"},
     {"count", (binaryfunc)FloatList_count, METH_O, "(float) -> int"},
     {"extend", (binaryfunc)FloatList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)FloatList_filter, METH_VARARGS, "([filter-function]) -> FloatList"},
     {"index", (binaryfunc)FloatList_index, METH_O, "(float) -> int"},
     {"insert", (binaryfunc)FloatList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)FloatList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)FloatList_pop, METH_VARARGS, "() -> float"},
     {"remove", (binaryfunc)FloatList_remove, METH_O, "(float) -> None"},
     {"reverse", (binaryfunc)FloatList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)FloatList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods FloatList_as_sequence = {
  (inquiry)FloatList_len_sq,                         /* sq_length */
  (binaryfunc)FloatList_concat,                      /* sq_concat */
  (intargfunc)FloatList_repeat,                      /* sq_repeat */
  (intargfunc)FloatList_getitem_sq,                  /* sq_item */
  (intintargfunc)FloatList_getslice,                 /* sq_slice */
  (intobjargproc)FloatList_setitem_sq,               /* sq_ass_item */
  (intintobjargproc)FloatList_setslice,              /* sq_ass_slice */
  (objobjproc)FloatList_contains,                    /* sq_contains */
};

PyTypeObject PyOrFloatList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FloatList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)FloatList_repr,                          /* tp_repr */
  0,
  &FloatList_as_sequence,                            /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)FloatList_str,                           /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of float>)",                               /* tp_doc */
  0, 0,
  (richcmpfunc)FloatList_richcmp,                    /* tp_richcmp */
  0, 0, 0,
  FloatList_methods,                                 /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FloatList_new,                            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FloatList(PyObject *obj, void *ptr) { if (!PyOrFloatList_Check(obj)) return 0;      *(GCPtr<TFloatList> *)(ptr) = PyOrange_AsFloatList(obj); return 1; }
int ccn_func_FloatList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFloatList> *)(ptr) = GCPtr<TFloatList>(); return 1; }      if (!PyOrFloatList_Check(obj)) return 0;      *(GCPtr<TFloatList> *)(ptr) = PyOrange_AsFloatList(obj); return 1; }


ORANGE_API TOrangeType PyOrFloatList_Type (PyOrFloatList_Type_inh, typeid(TFloatList), 0, cc_FloatList, ccn_FloatList, NULL, true, NULL, NULL);



/* -------------- FloatListList --------------*/

PyMethodDef FloatListList_methods[] = {
     {"__reduce__", (binaryfunc)FloatListList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)FloatListList_append, METH_O, "(FloatList) -> None"},
     {"count", (binaryfunc)FloatListList_count, METH_O, "(FloatList) -> int"},
     {"extend", (binaryfunc)FloatListList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)FloatListList_filter, METH_VARARGS, "([filter-function]) -> FloatListList"},
     {"index", (binaryfunc)FloatListList_index, METH_O, "(FloatList) -> int"},
     {"insert", (binaryfunc)FloatListList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)FloatListList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)FloatListList_pop, METH_VARARGS, "() -> FloatList"},
     {"remove", (binaryfunc)FloatListList_remove, METH_O, "(FloatList) -> None"},
     {"reverse", (binaryfunc)FloatListList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)FloatListList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods FloatListList_as_sequence = {
  (inquiry)FloatListList_len_sq,                     /* sq_length */
  (binaryfunc)FloatListList_concat,                  /* sq_concat */
  (intargfunc)FloatListList_repeat,                  /* sq_repeat */
  (intargfunc)FloatListList_getitem_sq,              /* sq_item */
  (intintargfunc)FloatListList_getslice,             /* sq_slice */
  (intobjargproc)FloatListList_setitem_sq,           /* sq_ass_item */
  (intintobjargproc)FloatListList_setslice,          /* sq_ass_slice */
  (objobjproc)FloatListList_contains,                /* sq_contains */
};

PyTypeObject PyOrFloatListList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FloatListList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)FloatListList_repr,                      /* tp_repr */
  0,
  &FloatListList_as_sequence,                        /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)FloatListList_str,                       /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of FloatList>)",                           /* tp_doc */
  0, 0,
  (richcmpfunc)FloatListList_richcmp,                /* tp_richcmp */
  0, 0, 0,
  FloatListList_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FloatListList_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FloatListList(PyObject *obj, void *ptr) { if (!PyOrFloatListList_Check(obj)) return 0;      *(GCPtr<TFloatListList> *)(ptr) = PyOrange_AsFloatListList(obj); return 1; }
int ccn_func_FloatListList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFloatListList> *)(ptr) = GCPtr<TFloatListList>(); return 1; }      if (!PyOrFloatListList_Check(obj)) return 0;      *(GCPtr<TFloatListList> *)(ptr) = PyOrange_AsFloatListList(obj); return 1; }


ORANGE_API TOrangeType PyOrFloatListList_Type (PyOrFloatListList_Type_inh, typeid(TFloatListList), 0, cc_FloatListList, ccn_FloatListList, NULL, true, NULL, NULL);



/* -------------- IntFloatList --------------*/

PyMethodDef IntFloatList_methods[] = {
     {"__reduce__", (binaryfunc)IntFloatList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)IntFloatList_append, METH_O, "(tuple(int, float)) -> None"},
     {"count", (binaryfunc)IntFloatList_count, METH_O, "(tuple(int, float)) -> int"},
     {"extend", (binaryfunc)IntFloatList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)IntFloatList_filter, METH_VARARGS, "([filter-function]) -> IntFloatList"},
     {"index", (binaryfunc)IntFloatList_index, METH_O, "(tuple(int, float)) -> int"},
     {"insert", (binaryfunc)IntFloatList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)IntFloatList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)IntFloatList_pop, METH_VARARGS, "() -> tuple(int, float)"},
     {"remove", (binaryfunc)IntFloatList_remove, METH_O, "(tuple(int, float)) -> None"},
     {"reverse", (binaryfunc)IntFloatList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)IntFloatList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods IntFloatList_as_sequence = {
  (inquiry)IntFloatList_len_sq,                      /* sq_length */
  (binaryfunc)IntFloatList_concat,                   /* sq_concat */
  (intargfunc)IntFloatList_repeat,                   /* sq_repeat */
  (intargfunc)IntFloatList_getitem_sq,               /* sq_item */
  (intintargfunc)IntFloatList_getslice,              /* sq_slice */
  (intobjargproc)IntFloatList_setitem_sq,            /* sq_ass_item */
  (intintobjargproc)IntFloatList_setslice,           /* sq_ass_slice */
  (objobjproc)IntFloatList_contains,                 /* sq_contains */
};

PyTypeObject PyOrIntFloatList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IntFloatList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)IntFloatList_repr,                       /* tp_repr */
  0,
  &IntFloatList_as_sequence,                         /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)IntFloatList_str,                        /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of tuple(int, float)>)",                   /* tp_doc */
  0, 0,
  (richcmpfunc)IntFloatList_richcmp,                 /* tp_richcmp */
  0, 0, 0,
  IntFloatList_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IntFloatList_new,                         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IntFloatList(PyObject *obj, void *ptr) { if (!PyOrIntFloatList_Check(obj)) return 0;      *(GCPtr<TIntFloatList> *)(ptr) = PyOrange_AsIntFloatList(obj); return 1; }
int ccn_func_IntFloatList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIntFloatList> *)(ptr) = GCPtr<TIntFloatList>(); return 1; }      if (!PyOrIntFloatList_Check(obj)) return 0;      *(GCPtr<TIntFloatList> *)(ptr) = PyOrange_AsIntFloatList(obj); return 1; }


ORANGE_API TOrangeType PyOrIntFloatList_Type (PyOrIntFloatList_Type_inh, typeid(TIntFloatList), 0, cc_IntFloatList, ccn_IntFloatList, NULL, true, NULL, NULL);



/* -------------- IntList --------------*/

PyMethodDef IntList_methods[] = {
     {"__reduce__", (binaryfunc)IntList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)IntList_append, METH_O, "(int) -> None"},
     {"count", (binaryfunc)IntList_count, METH_O, "(int) -> int"},
     {"extend", (binaryfunc)IntList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)IntList_filter, METH_VARARGS, "([filter-function]) -> IntList"},
     {"index", (binaryfunc)IntList_index, METH_O, "(int) -> int"},
     {"insert", (binaryfunc)IntList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)IntList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)IntList_pop, METH_VARARGS, "() -> int"},
     {"remove", (binaryfunc)IntList_remove, METH_O, "(int) -> None"},
     {"reverse", (binaryfunc)IntList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)IntList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods IntList_as_sequence = {
  (inquiry)IntList_len_sq,                           /* sq_length */
  (binaryfunc)IntList_concat,                        /* sq_concat */
  (intargfunc)IntList_repeat,                        /* sq_repeat */
  (intargfunc)IntList_getitem_sq,                    /* sq_item */
  (intintargfunc)IntList_getslice,                   /* sq_slice */
  (intobjargproc)IntList_setitem_sq,                 /* sq_ass_item */
  (intintobjargproc)IntList_setslice,                /* sq_ass_slice */
  (objobjproc)IntList_contains,                      /* sq_contains */
};

PyTypeObject PyOrIntList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IntList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)IntList_repr,                            /* tp_repr */
  0,
  &IntList_as_sequence,                              /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)IntList_str,                             /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of int>)",                                 /* tp_doc */
  0, 0,
  (richcmpfunc)IntList_richcmp,                      /* tp_richcmp */
  0, 0, 0,
  IntList_methods,                                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IntList_new,                              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IntList(PyObject *obj, void *ptr) { if (!PyOrIntList_Check(obj)) return 0;      *(GCPtr<TIntList> *)(ptr) = PyOrange_AsIntList(obj); return 1; }
int ccn_func_IntList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIntList> *)(ptr) = GCPtr<TIntList>(); return 1; }      if (!PyOrIntList_Check(obj)) return 0;      *(GCPtr<TIntList> *)(ptr) = PyOrange_AsIntList(obj); return 1; }


ORANGE_API TOrangeType PyOrIntList_Type (PyOrIntList_Type_inh, typeid(TIntList), 0, cc_IntList, ccn_IntList, NULL, true, NULL, NULL);



/* -------------- LongList --------------*/

PyMethodDef LongList_methods[] = {
     {"__reduce__", (binaryfunc)LongList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)LongList_append, METH_O, "(int) -> None"},
     {"count", (binaryfunc)LongList_count, METH_O, "(int) -> int"},
     {"extend", (binaryfunc)LongList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)LongList_filter, METH_VARARGS, "([filter-function]) -> LongList"},
     {"index", (binaryfunc)LongList_index, METH_O, "(int) -> int"},
     {"insert", (binaryfunc)LongList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)LongList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)LongList_pop, METH_VARARGS, "() -> int"},
     {"remove", (binaryfunc)LongList_remove, METH_O, "(int) -> None"},
     {"reverse", (binaryfunc)LongList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)LongList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods LongList_as_sequence = {
  (inquiry)LongList_len_sq,                          /* sq_length */
  (binaryfunc)LongList_concat,                       /* sq_concat */
  (intargfunc)LongList_repeat,                       /* sq_repeat */
  (intargfunc)LongList_getitem_sq,                   /* sq_item */
  (intintargfunc)LongList_getslice,                  /* sq_slice */
  (intobjargproc)LongList_setitem_sq,                /* sq_ass_item */
  (intintobjargproc)LongList_setslice,               /* sq_ass_slice */
  (objobjproc)LongList_contains,                     /* sq_contains */
};

PyTypeObject PyOrLongList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.LongList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)LongList_repr,                           /* tp_repr */
  0,
  &LongList_as_sequence,                             /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)LongList_str,                            /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of int>)",                                 /* tp_doc */
  0, 0,
  (richcmpfunc)LongList_richcmp,                     /* tp_richcmp */
  0, 0, 0,
  LongList_methods,                                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)LongList_new,                             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LongList(PyObject *obj, void *ptr) { if (!PyOrLongList_Check(obj)) return 0;      *(GCPtr<TLongList> *)(ptr) = PyOrange_AsLongList(obj); return 1; }
int ccn_func_LongList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLongList> *)(ptr) = GCPtr<TLongList>(); return 1; }      if (!PyOrLongList_Check(obj)) return 0;      *(GCPtr<TLongList> *)(ptr) = PyOrange_AsLongList(obj); return 1; }


ORANGE_API TOrangeType PyOrLongList_Type (PyOrLongList_Type_inh, typeid(TLongList), 0, cc_LongList, ccn_LongList, NULL, true, NULL, NULL);



/* -------------- StringList --------------*/

PyMethodDef StringList_methods[] = {
     {"__reduce__", (binaryfunc)StringList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)StringList_append, METH_O, "(string) -> None"},
     {"count", (binaryfunc)StringList_count, METH_O, "(string) -> int"},
     {"extend", (binaryfunc)StringList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)StringList_filter, METH_VARARGS, "([filter-function]) -> StringList"},
     {"index", (binaryfunc)StringList_index, METH_O, "(string) -> int"},
     {"insert", (binaryfunc)StringList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)StringList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)StringList_pop, METH_VARARGS, "() -> string"},
     {"remove", (binaryfunc)StringList_remove, METH_O, "(string) -> None"},
     {"reverse", (binaryfunc)StringList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)StringList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods StringList_as_sequence = {
  (inquiry)StringList_len_sq,                        /* sq_length */
  (binaryfunc)StringList_concat,                     /* sq_concat */
  (intargfunc)StringList_repeat,                     /* sq_repeat */
  (intargfunc)StringList_getitem_sq,                 /* sq_item */
  (intintargfunc)StringList_getslice,                /* sq_slice */
  (intobjargproc)StringList_setitem_sq,              /* sq_ass_item */
  (intintobjargproc)StringList_setslice,             /* sq_ass_slice */
  (objobjproc)StringList_contains,                   /* sq_contains */
};

PyTypeObject PyOrStringList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StringList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)StringList_repr,                         /* tp_repr */
  0,
  &StringList_as_sequence,                           /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)StringList_str,                          /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of string>)",                              /* tp_doc */
  0, 0,
  (richcmpfunc)StringList_richcmp,                   /* tp_richcmp */
  0, 0, 0,
  StringList_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)StringList_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StringList(PyObject *obj, void *ptr) { if (!PyOrStringList_Check(obj)) return 0;      *(GCPtr<TStringList> *)(ptr) = PyOrange_AsStringList(obj); return 1; }
int ccn_func_StringList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStringList> *)(ptr) = GCPtr<TStringList>(); return 1; }      if (!PyOrStringList_Check(obj)) return 0;      *(GCPtr<TStringList> *)(ptr) = PyOrange_AsStringList(obj); return 1; }


ORANGE_API TOrangeType PyOrStringList_Type (PyOrStringList_Type_inh, typeid(TStringList), 0, cc_StringList, ccn_StringList, NULL, true, NULL, NULL);



