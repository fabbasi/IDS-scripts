/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern ORANGE_API TOrangeType PyOrBoolList_Type;
extern ORANGE_API TOrangeType PyOrClassifier_Type;
extern ORANGE_API TOrangeType PyOrClassifierByLookupTable_Type;
extern ORANGE_API TOrangeType PyOrClassifierFD_Type;
extern ORANGE_API TOrangeType PyOrDistribution_Type;
extern ORANGE_API TOrangeType PyOrExampleGenerator_Type;
extern ORANGE_API TOrangeType PyOrFloatList_Type;
extern ORANGE_API TOrangeType PyOrLearner_Type;
extern ORANGE_API TOrangeType PyOrOrange_Type;
extern ORANGE_API TOrangeType PyOrSomeValue_Type;
extern ORANGE_API TOrangeType PyOrVariable_Type;


/* -------------- AttributedBoolList --------------*/



PyMappingMethods AttributedBoolList_as_mapping = {
  0,
  (binaryfunc)AttributedBoolList_getitem,            /* mp_subscript */
  (objobjargproc)AttributedBoolList_setitem,         /* mp_ass_subscript */
};

PyTypeObject PyOrAttributedBoolList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.AttributedBoolList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  &AttributedBoolList_as_mapping,                    /* tp_as_mapping */
  0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(attributes, list)",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrBoolList_Type,                 /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)AttributedBoolList_new,                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AttributedBoolList(PyObject *obj, void *ptr) { if (!PyOrAttributedBoolList_Check(obj)) return 0;      *(GCPtr<TAttributedBoolList> *)(ptr) = PyOrange_AsAttributedBoolList(obj); return 1; }
int ccn_func_AttributedBoolList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAttributedBoolList> *)(ptr) = GCPtr<TAttributedBoolList>(); return 1; }      if (!PyOrAttributedBoolList_Check(obj)) return 0;      *(GCPtr<TAttributedBoolList> *)(ptr) = PyOrange_AsAttributedBoolList(obj); return 1; }


ORANGE_API TOrangeType PyOrAttributedBoolList_Type (PyOrAttributedBoolList_Type_inh, typeid(TAttributedBoolList), 0, cc_AttributedBoolList, ccn_AttributedBoolList, NULL, true, NULL, NULL);



/* -------------- AttributedFloatList --------------*/



PyMappingMethods AttributedFloatList_as_mapping = {
  0,
  (binaryfunc)AttributedFloatList_getitem,           /* mp_subscript */
  (objobjargproc)AttributedFloatList_setitem,        /* mp_ass_subscript */
};

PyTypeObject PyOrAttributedFloatList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.AttributedFloatList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  &AttributedFloatList_as_mapping,                   /* tp_as_mapping */
  0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(attributes, list)",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFloatList_Type,                /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)AttributedFloatList_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AttributedFloatList(PyObject *obj, void *ptr) { if (!PyOrAttributedFloatList_Check(obj)) return 0;      *(GCPtr<TAttributedFloatList> *)(ptr) = PyOrange_AsAttributedFloatList(obj); return 1; }
int ccn_func_AttributedFloatList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAttributedFloatList> *)(ptr) = GCPtr<TAttributedFloatList>(); return 1; }      if (!PyOrAttributedFloatList_Check(obj)) return 0;      *(GCPtr<TAttributedFloatList> *)(ptr) = PyOrange_AsAttributedFloatList(obj); return 1; }


ORANGE_API TOrangeType PyOrAttributedFloatList_Type (PyOrAttributedFloatList_Type_inh, typeid(TAttributedFloatList), 0, cc_AttributedFloatList, ccn_AttributedFloatList, NULL, true, NULL, NULL);



/* -------------- CartesianClassifier --------------*/


POrange CartesianClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TCartesianClassifier(), type); }


PyTypeObject PyOrCartesianClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.CartesianClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_CartesianClassifier(PyObject *obj, void *ptr) { if (!PyOrCartesianClassifier_Check(obj)) return 0;      *(GCPtr<TCartesianClassifier> *)(ptr) = PyOrange_AsCartesianClassifier(obj); return 1; }
int ccn_func_CartesianClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TCartesianClassifier> *)(ptr) = GCPtr<TCartesianClassifier>(); return 1; }      if (!PyOrCartesianClassifier_Check(obj)) return 0;      *(GCPtr<TCartesianClassifier> *)(ptr) = PyOrange_AsCartesianClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrCartesianClassifier_Type (PyOrCartesianClassifier_Type_inh, typeid(TCartesianClassifier), CartesianClassifier_default_constructor, cc_CartesianClassifier, ccn_CartesianClassifier, NULL, true, NULL, NULL);



/* -------------- Classifier --------------*/

PyMethodDef Classifier_methods[] = {
     {"__reduce__", (binaryfunc)Classifier__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char Classifier_doc[] = "(example[, format]) -> Value | distribution | (Value, distribution)";

void Classifier_addConstants()
{ PyObject *&dict = PyOrClassifier_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "GetProbabilities", PyInt_FromLong((long)(1)));
  PyDict_SetItemString(dict, "GetBoth", PyInt_FromLong((long)(2)));
  PyDict_SetItemString(dict, "GetValue", PyInt_FromLong((long)(0)));
}


PyTypeObject PyOrClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.Classifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Classifier_call,                      /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Classifier_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Classifier_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Classifier(PyObject *obj, void *ptr) { if (!PyOrClassifier_Check(obj)) return 0;      *(GCPtr<TClassifier> *)(ptr) = PyOrange_AsClassifier(obj); return 1; }
int ccn_func_Classifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifier> *)(ptr) = GCPtr<TClassifier>(); return 1; }      if (!PyOrClassifier_Check(obj)) return 0;      *(GCPtr<TClassifier> *)(ptr) = PyOrange_AsClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifier_Type (PyOrClassifier_Type_inh, typeid(TClassifier), 0, cc_Classifier, ccn_Classifier, NULL, false, NULL, NULL);



/* -------------- ClassifierByExampleTable --------------*/

PyMethodDef ClassifierByExampleTable_methods[] = {
     {"bound_set", (binaryfunc)ClassifierByExampleTable_bound_set, 0, "() -> variables"},
     {NULL, NULL}
};

PyGetSetDef ClassifierByExampleTable_getset[]=  {
  {"variables", (getter)ClassifierByExampleTable_get_variables, NULL},
  {NULL}};


POrange ClassifierByExampleTable_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TClassifierByExampleTable(), type); }


TAttributeAlias ClassifierByExampleTable_aliases[] = {
    {"boundset", "bound_set"},
    {NULL, NULL}};

PyTypeObject PyOrClassifierByExampleTable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.lookup.ClassifierByDataTable",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples=])",                                   /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ClassifierByExampleTable_methods,                  /* tp_methods */
  0,
  ClassifierByExampleTable_getset,                   /* tp_getset */
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierByExampleTable(PyObject *obj, void *ptr) { if (!PyOrClassifierByExampleTable_Check(obj)) return 0;      *(GCPtr<TClassifierByExampleTable> *)(ptr) = PyOrange_AsClassifierByExampleTable(obj); return 1; }
int ccn_func_ClassifierByExampleTable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierByExampleTable> *)(ptr) = GCPtr<TClassifierByExampleTable>(); return 1; }      if (!PyOrClassifierByExampleTable_Check(obj)) return 0;      *(GCPtr<TClassifierByExampleTable> *)(ptr) = PyOrange_AsClassifierByExampleTable(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierByExampleTable_Type (PyOrClassifierByExampleTable_Type_inh, typeid(TClassifierByExampleTable), ClassifierByExampleTable_default_constructor, cc_ClassifierByExampleTable, ccn_ClassifierByExampleTable, NULL, true, NULL, ClassifierByExampleTable_aliases);



/* -------------- ClassifierByLookupTable --------------*/

PyMethodDef ClassifierByLookupTable_methods[] = {
     {"__reduce__", (binaryfunc)ClassifierByLookupTable__reduce__, METH_NOARGS, "()"},
     {"bound_set", (binaryfunc)ClassifierByLookupTable_bound_set, 0, "() -> (variables)"},
     {"get_index", (binaryfunc)ClassifierByLookupTable_get_index, METH_O, "(example) -> int"},
     {NULL, NULL}
};

PyGetSetDef ClassifierByLookupTable_getset[]=  {
  {"variables", (getter)ClassifierByLookupTable_get_variables, NULL},
  {NULL}};



TAttributeAlias ClassifierByLookupTable_aliases[] = {
    {"boundset", "bound_set"},
    {"getindex", "get_index"},
    {NULL, NULL}};

PyTypeObject PyOrClassifierByLookupTable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.lookup.ClassifierByLookupTable",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(class-descriptor, descriptor)",                  /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ClassifierByLookupTable_methods,                   /* tp_methods */
  0,
  ClassifierByLookupTable_getset,                    /* tp_getset */
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClassifierByLookupTable_new,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierByLookupTable(PyObject *obj, void *ptr) { if (!PyOrClassifierByLookupTable_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable> *)(ptr) = PyOrange_AsClassifierByLookupTable(obj); return 1; }
int ccn_func_ClassifierByLookupTable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierByLookupTable> *)(ptr) = GCPtr<TClassifierByLookupTable>(); return 1; }      if (!PyOrClassifierByLookupTable_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable> *)(ptr) = PyOrange_AsClassifierByLookupTable(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierByLookupTable_Type (PyOrClassifierByLookupTable_Type_inh, typeid(TClassifierByLookupTable), 0, cc_ClassifierByLookupTable, ccn_ClassifierByLookupTable, NULL, false, NULL, ClassifierByLookupTable_aliases);



/* -------------- ClassifierByLookupTable1 --------------*/

PyMethodDef ClassifierByLookupTable1_methods[] = {
     {"__reduce__", (binaryfunc)ClassifierByLookupTable1__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrClassifierByLookupTable1_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.lookup.ClassifierByLookupTable1",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(class-descriptor, descriptor)",                  /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ClassifierByLookupTable1_methods,                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierByLookupTable_Type,  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClassifierByLookupTable1_new,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierByLookupTable1(PyObject *obj, void *ptr) { if (!PyOrClassifierByLookupTable1_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable1> *)(ptr) = PyOrange_AsClassifierByLookupTable1(obj); return 1; }
int ccn_func_ClassifierByLookupTable1(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierByLookupTable1> *)(ptr) = GCPtr<TClassifierByLookupTable1>(); return 1; }      if (!PyOrClassifierByLookupTable1_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable1> *)(ptr) = PyOrange_AsClassifierByLookupTable1(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierByLookupTable1_Type (PyOrClassifierByLookupTable1_Type_inh, typeid(TClassifierByLookupTable1), 0, cc_ClassifierByLookupTable1, ccn_ClassifierByLookupTable1, NULL, false, NULL, NULL);



/* -------------- ClassifierByLookupTable2 --------------*/

PyMethodDef ClassifierByLookupTable2_methods[] = {
     {"__reduce__", (binaryfunc)ClassifierByLookupTable2__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrClassifierByLookupTable2_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.lookup.ClassifierByLookupTable2",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(class-descriptor, desc0, desc1)",                /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ClassifierByLookupTable2_methods,                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierByLookupTable_Type,  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClassifierByLookupTable2_new,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierByLookupTable2(PyObject *obj, void *ptr) { if (!PyOrClassifierByLookupTable2_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable2> *)(ptr) = PyOrange_AsClassifierByLookupTable2(obj); return 1; }
int ccn_func_ClassifierByLookupTable2(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierByLookupTable2> *)(ptr) = GCPtr<TClassifierByLookupTable2>(); return 1; }      if (!PyOrClassifierByLookupTable2_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable2> *)(ptr) = PyOrange_AsClassifierByLookupTable2(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierByLookupTable2_Type (PyOrClassifierByLookupTable2_Type_inh, typeid(TClassifierByLookupTable2), 0, cc_ClassifierByLookupTable2, ccn_ClassifierByLookupTable2, NULL, false, NULL, NULL);



/* -------------- ClassifierByLookupTable3 --------------*/

PyMethodDef ClassifierByLookupTable3_methods[] = {
     {"__reduce__", (binaryfunc)ClassifierByLookupTable3__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrClassifierByLookupTable3_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.lookup.ClassifierByLookupTable3",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(class-descriptor, desc0, desc1, desc2)",         /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ClassifierByLookupTable3_methods,                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierByLookupTable_Type,  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClassifierByLookupTable3_new,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierByLookupTable3(PyObject *obj, void *ptr) { if (!PyOrClassifierByLookupTable3_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable3> *)(ptr) = PyOrange_AsClassifierByLookupTable3(obj); return 1; }
int ccn_func_ClassifierByLookupTable3(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierByLookupTable3> *)(ptr) = GCPtr<TClassifierByLookupTable3>(); return 1; }      if (!PyOrClassifierByLookupTable3_Check(obj)) return 0;      *(GCPtr<TClassifierByLookupTable3> *)(ptr) = PyOrange_AsClassifierByLookupTable3(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierByLookupTable3_Type (PyOrClassifierByLookupTable3_Type_inh, typeid(TClassifierByLookupTable3), 0, cc_ClassifierByLookupTable3, ccn_ClassifierByLookupTable3, NULL, false, NULL, NULL);



/* -------------- ClassifierFD --------------*/


PyObject *ClassifierFD_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrClassifierFD_Type, type, args, kwds); }


PyTypeObject PyOrClassifierFD_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.ClassifierFD",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClassifierFD_abstract_constructor,        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierFD(PyObject *obj, void *ptr) { if (!PyOrClassifierFD_Check(obj)) return 0;      *(GCPtr<TClassifierFD> *)(ptr) = PyOrange_AsClassifierFD(obj); return 1; }
int ccn_func_ClassifierFD(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierFD> *)(ptr) = GCPtr<TClassifierFD>(); return 1; }      if (!PyOrClassifierFD_Check(obj)) return 0;      *(GCPtr<TClassifierFD> *)(ptr) = PyOrange_AsClassifierFD(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierFD_Type (PyOrClassifierFD_Type_inh, typeid(TClassifierFD), 0, cc_ClassifierFD, ccn_ClassifierFD, NULL, false, NULL, NULL);



/* -------------- ClassifierFromVar --------------*/


POrange ClassifierFromVar_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TClassifierFromVar(), type); }


PyTypeObject PyOrClassifierFromVar_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.ClassifierFromVar",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([whichVar=, transformer=])",                     /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierFromVar(PyObject *obj, void *ptr) { if (!PyOrClassifierFromVar_Check(obj)) return 0;      *(GCPtr<TClassifierFromVar> *)(ptr) = PyOrange_AsClassifierFromVar(obj); return 1; }
int ccn_func_ClassifierFromVar(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierFromVar> *)(ptr) = GCPtr<TClassifierFromVar>(); return 1; }      if (!PyOrClassifierFromVar_Check(obj)) return 0;      *(GCPtr<TClassifierFromVar> *)(ptr) = PyOrange_AsClassifierFromVar(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierFromVar_Type (PyOrClassifierFromVar_Type_inh, typeid(TClassifierFromVar), ClassifierFromVar_default_constructor, cc_ClassifierFromVar, ccn_ClassifierFromVar, NULL, true, NULL, NULL);



/* -------------- ClassifierFromVarFD --------------*/


POrange ClassifierFromVarFD_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TClassifierFromVarFD(), type); }


PyTypeObject PyOrClassifierFromVarFD_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.ClassifierFromVarFD",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([position=, transformer=])",                     /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierFromVarFD(PyObject *obj, void *ptr) { if (!PyOrClassifierFromVarFD_Check(obj)) return 0;      *(GCPtr<TClassifierFromVarFD> *)(ptr) = PyOrange_AsClassifierFromVarFD(obj); return 1; }
int ccn_func_ClassifierFromVarFD(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierFromVarFD> *)(ptr) = GCPtr<TClassifierFromVarFD>(); return 1; }      if (!PyOrClassifierFromVarFD_Check(obj)) return 0;      *(GCPtr<TClassifierFromVarFD> *)(ptr) = PyOrange_AsClassifierFromVarFD(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierFromVarFD_Type (PyOrClassifierFromVarFD_Type_inh, typeid(TClassifierFromVarFD), ClassifierFromVarFD_default_constructor, cc_ClassifierFromVarFD, ccn_ClassifierFromVarFD, NULL, true, NULL, NULL);



/* -------------- ClassifierList --------------*/

PyMethodDef ClassifierList_methods[] = {
     {"__reduce__", (binaryfunc)ClassifierList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)ClassifierList_append, METH_O, "(Classifier) -> None"},
     {"count", (binaryfunc)ClassifierList_count, METH_O, "(Classifier) -> int"},
     {"extend", (binaryfunc)ClassifierList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)ClassifierList_filter, METH_VARARGS, "([filter-function]) -> ClassifierList"},
     {"index", (binaryfunc)ClassifierList_index, METH_O, "(Classifier) -> int"},
     {"insert", (binaryfunc)ClassifierList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)ClassifierList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)ClassifierList_pop, METH_VARARGS, "() -> Classifier"},
     {"remove", (binaryfunc)ClassifierList_remove, METH_O, "(Classifier) -> None"},
     {"reverse", (binaryfunc)ClassifierList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ClassifierList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods ClassifierList_as_sequence = {
  (inquiry)ClassifierList_len_sq,                    /* sq_length */
  (binaryfunc)ClassifierList_concat,                 /* sq_concat */
  (intargfunc)ClassifierList_repeat,                 /* sq_repeat */
  (intargfunc)ClassifierList_getitem_sq,             /* sq_item */
  (intintargfunc)ClassifierList_getslice,            /* sq_slice */
  (intobjargproc)ClassifierList_setitem_sq,          /* sq_ass_item */
  (intintobjargproc)ClassifierList_setslice,         /* sq_ass_slice */
  (objobjproc)ClassifierList_contains,               /* sq_contains */
};

PyTypeObject PyOrClassifierList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.ClassifierList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)ClassifierList_repr,                     /* tp_repr */
  0,
  &ClassifierList_as_sequence,                       /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)ClassifierList_str,                      /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Classifier>)",                          /* tp_doc */
  0, 0,
  (richcmpfunc)ClassifierList_richcmp,               /* tp_richcmp */
  0, 0, 0,
  ClassifierList_methods,                            /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClassifierList_new,                       /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClassifierList(PyObject *obj, void *ptr) { if (!PyOrClassifierList_Check(obj)) return 0;      *(GCPtr<TClassifierList> *)(ptr) = PyOrange_AsClassifierList(obj); return 1; }
int ccn_func_ClassifierList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClassifierList> *)(ptr) = GCPtr<TClassifierList>(); return 1; }      if (!PyOrClassifierList_Check(obj)) return 0;      *(GCPtr<TClassifierList> *)(ptr) = PyOrange_AsClassifierList(obj); return 1; }


ORANGE_API TOrangeType PyOrClassifierList_Type (PyOrClassifierList_Type_inh, typeid(TClassifierList), 0, cc_ClassifierList, ccn_ClassifierList, NULL, true, NULL, NULL);



/* -------------- ContDistribution --------------*/

PyMethodDef ContDistribution_methods[] = {
     {"__reduce__", (binaryfunc)ContDistribution__reduce__, METH_NOARGS, "()"},
     {"add", (binaryfunc)ContDistribution_add, METH_VARARGS, "(value, weight) -> Value"},
     {"average", (binaryfunc)ContDistribution_average, 0, "() -> float"},
     {"density", (binaryfunc)ContDistribution_density, METH_VARARGS, "(x) -> float"},
     {"dev", (binaryfunc)ContDistribution_dev, 0, "() -> float"},
     {"error", (binaryfunc)ContDistribution_error, 0, "() -> float"},
     {"items", (binaryfunc)ContDistribution_items, 0, "() -> [(string, float)] | [(float, float)]"},
     {"keys", (binaryfunc)ContDistribution_keys, 0, "() -> [string] | [float]"},
     {"percentile", (binaryfunc)ContDistribution_percentile, METH_VARARGS, "(int) -> float"},
     {"values", (binaryfunc)ContDistribution_values, 0, "() -> list"},
     {"var", (binaryfunc)ContDistribution_var, 0, "() -> float"},
     {NULL, NULL}
};



PyMappingMethods ContDistribution_as_mapping = {
  (inquiry)ContDistribution_len,                     /* mp_length */
  0, 0,
};

PyTypeObject PyOrContDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.distribution.Continuous",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  &ContDistribution_as_mapping,                      /* tp_as_mapping */
  0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "[dist of float:float] | DiscDistribution",        /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ContDistribution_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrDistribution_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ContDistribution_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ContDistribution(PyObject *obj, void *ptr) { if (!PyOrContDistribution_Check(obj)) return 0;      *(GCPtr<TContDistribution> *)(ptr) = PyOrange_AsContDistribution(obj); return 1; }
int ccn_func_ContDistribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TContDistribution> *)(ptr) = GCPtr<TContDistribution>(); return 1; }      if (!PyOrContDistribution_Check(obj)) return 0;      *(GCPtr<TContDistribution> *)(ptr) = PyOrange_AsContDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrContDistribution_Type (PyOrContDistribution_Type_inh, typeid(TContDistribution), 0, cc_ContDistribution, ccn_ContDistribution, NULL, false, NULL, NULL);



/* -------------- DefaultClassifier --------------*/

PyGetSetDef DefaultClassifier_getset[]=  {
  {"default_value", (getter)DefaultClassifier_get_defaultValue, (setter)DefaultClassifier_set_defaultValue},
  {NULL}};



PyTypeObject PyOrDefaultClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.ConstantClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([defaultVal])",                                  /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0,
  DefaultClassifier_getset,                          /* tp_getset */
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DefaultClassifier_new,                    /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DefaultClassifier(PyObject *obj, void *ptr) { if (!PyOrDefaultClassifier_Check(obj)) return 0;      *(GCPtr<TDefaultClassifier> *)(ptr) = PyOrange_AsDefaultClassifier(obj); return 1; }
int ccn_func_DefaultClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDefaultClassifier> *)(ptr) = GCPtr<TDefaultClassifier>(); return 1; }      if (!PyOrDefaultClassifier_Check(obj)) return 0;      *(GCPtr<TDefaultClassifier> *)(ptr) = PyOrange_AsDefaultClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrDefaultClassifier_Type (PyOrDefaultClassifier_Type_inh, typeid(TDefaultClassifier), 0, cc_DefaultClassifier, ccn_DefaultClassifier, NULL, true, NULL, NULL);



/* -------------- DiscDistribution --------------*/

PyMethodDef DiscDistribution_methods[] = {
     {"__reduce__", (binaryfunc)DiscDistribution__reduce__, METH_NOARGS, "()"},
     {"add", (binaryfunc)DiscDistribution_add, METH_VARARGS, "(value, weight) -> Value"},
     {"items", (binaryfunc)DiscDistribution_items, 0, "() -> [(string, float)] | [(float, float)]"},
     {"keys", (binaryfunc)DiscDistribution_keys, 0, "() -> [string] | [float]"},
     {"values", (binaryfunc)DiscDistribution_values, 0, "() -> list"},
     {NULL, NULL}
};



PySequenceMethods DiscDistribution_as_sequence = {
  0, 0, 0,
  (intargfunc)DiscDistribution_getitem_sq,           /* sq_item */
  0, 0, 0, 0,
};

PyMappingMethods DiscDistribution_as_mapping = {
  (inquiry)DiscDistribution_len,                     /* mp_length */
  0, 0,
};

PyTypeObject PyOrDiscDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.distribution.Discrete",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0,
  &DiscDistribution_as_sequence,                     /* tp_as_sequence */
  &DiscDistribution_as_mapping,                      /* tp_as_mapping */
  0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "[list of floats] | DiscDistribution",             /* tp_doc */
  0, 0, 0, 0, 0, 0,
  DiscDistribution_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrDistribution_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DiscDistribution_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DiscDistribution(PyObject *obj, void *ptr) { if (!PyOrDiscDistribution_Check(obj)) return 0;      *(GCPtr<TDiscDistribution> *)(ptr) = PyOrange_AsDiscDistribution(obj); return 1; }
int ccn_func_DiscDistribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDiscDistribution> *)(ptr) = GCPtr<TDiscDistribution>(); return 1; }      if (!PyOrDiscDistribution_Check(obj)) return 0;      *(GCPtr<TDiscDistribution> *)(ptr) = PyOrange_AsDiscDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrDiscDistribution_Type (PyOrDiscDistribution_Type_inh, typeid(TDiscDistribution), 0, cc_DiscDistribution, ccn_DiscDistribution, NULL, false, NULL, NULL);



/* -------------- Distribution --------------*/

PyMethodDef Distribution_methods[] = {
     {"__reduce__", (binaryfunc)yieldNoPickleError, METH_NOARGS},
     {"modus", (binaryfunc)Distribution_modus, 0, "() -> Value"},
     {"native", (binaryfunc)Distribution_native, 0, "() -> list | dictionary"},
     {"normalize", (binaryfunc)Distribution_normalize, 0, "() -> None"},
     {"random", (binaryfunc)Distribution_random, 0, "() -> Value"},
     {NULL, NULL}
};



PyMappingMethods Distribution_as_mapping = {
  0,
  (binaryfunc)Distribution_getitem,                  /* mp_subscript */
  (objobjargproc)Distribution_setitem,               /* mp_ass_subscript */
};

PyTypeObject PyOrDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.distribution.Distribution",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)Distribution_repr,                       /* tp_repr */
  0, 0,
  &Distribution_as_mapping,                          /* tp_as_mapping */
  0, 0,
  (reprfunc)Distribution_str,                        /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(attribute[, examples[, weightID]])",             /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Distribution_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrSomeValue_Type,                /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Distribution_new,                         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Distribution(PyObject *obj, void *ptr) { if (!PyOrDistribution_Check(obj)) return 0;      *(GCPtr<TDistribution> *)(ptr) = PyOrange_AsDistribution(obj); return 1; }
int ccn_func_Distribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistribution> *)(ptr) = GCPtr<TDistribution>(); return 1; }      if (!PyOrDistribution_Check(obj)) return 0;      *(GCPtr<TDistribution> *)(ptr) = PyOrange_AsDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrDistribution_Type (PyOrDistribution_Type_inh, typeid(TDistribution), 0, cc_Distribution, ccn_Distribution, NULL, false, NULL, NULL);



/* -------------- DistributionList --------------*/

PyMethodDef DistributionList_methods[] = {
     {"__reduce__", (binaryfunc)DistributionList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)DistributionList_append, METH_O, "(Distribution) -> None"},
     {"count", (binaryfunc)DistributionList_count, METH_O, "(Distribution) -> int"},
     {"extend", (binaryfunc)DistributionList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)DistributionList_filter, METH_VARARGS, "([filter-function]) -> DistributionList"},
     {"index", (binaryfunc)DistributionList_index, METH_O, "(Distribution) -> int"},
     {"insert", (binaryfunc)DistributionList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)DistributionList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)DistributionList_pop, METH_VARARGS, "() -> Distribution"},
     {"remove", (binaryfunc)DistributionList_remove, METH_O, "(Distribution) -> None"},
     {"reverse", (binaryfunc)DistributionList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)DistributionList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods DistributionList_as_sequence = {
  (inquiry)DistributionList_len_sq,                  /* sq_length */
  (binaryfunc)DistributionList_concat,               /* sq_concat */
  (intargfunc)DistributionList_repeat,               /* sq_repeat */
  (intargfunc)DistributionList_getitem_sq,           /* sq_item */
  (intintargfunc)DistributionList_getslice,          /* sq_slice */
  (intobjargproc)DistributionList_setitem_sq,        /* sq_ass_item */
  (intintobjargproc)DistributionList_setslice,       /* sq_ass_slice */
  (objobjproc)DistributionList_contains,             /* sq_contains */
};

PyTypeObject PyOrDistributionList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)DistributionList_repr,                   /* tp_repr */
  0,
  &DistributionList_as_sequence,                     /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)DistributionList_str,                    /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Distribution>)",                        /* tp_doc */
  0, 0,
  (richcmpfunc)DistributionList_richcmp,             /* tp_richcmp */
  0, 0, 0,
  DistributionList_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DistributionList_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionList(PyObject *obj, void *ptr) { if (!PyOrDistributionList_Check(obj)) return 0;      *(GCPtr<TDistributionList> *)(ptr) = PyOrange_AsDistributionList(obj); return 1; }
int ccn_func_DistributionList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionList> *)(ptr) = GCPtr<TDistributionList>(); return 1; }      if (!PyOrDistributionList_Check(obj)) return 0;      *(GCPtr<TDistributionList> *)(ptr) = PyOrange_AsDistributionList(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionList_Type (PyOrDistributionList_Type_inh, typeid(TDistributionList), 0, cc_DistributionList, ccn_DistributionList, NULL, true, NULL, NULL);



/* -------------- Domain --------------*/

PyMethodDef Domain_methods[] = {
     {"__reduce__", (binaryfunc)Domain__reduce__, METH_NOARGS, "()"},
     {"add_meta", (binaryfunc)Domain_add_meta, METH_VARARGS, "(id, descriptor[, optional]) -> None"},
     {"add_metas", (binaryfunc)Domain_add_metas, METH_VARARGS, "({id: descriptor, id: descriptor, ...}[, optional]) -> None"},
     {"checksum", (binaryfunc)Domain_checksum, METH_NOARGS, "() -> crc"},
     {"get_meta", (binaryfunc)Domain_get_meta, METH_O, "(name | int) -> Variable"},
     {"get_metas", (binaryfunc)Domain_get_metas, METH_VARARGS, "([optional]) -> {int: Variable}"},
     {"has_continuous_attributes", (binaryfunc)Domain_hasContinuousAttributes, METH_VARARGS, "(includeClass=0) -> int"},
     {"has_discrete_attributes", (binaryfunc)Domain_hasDiscreteAttributes, METH_VARARGS, "(includeClass=0) -> int"},
     {"has_meta", (binaryfunc)Domain_has_meta, METH_O, "(name | int | descriptor) -> bool"},
     {"has_other_attributes", (binaryfunc)Domain_hasOtherAttributes, METH_VARARGS, "(includeClass=0) -> int"},
     {"index", (binaryfunc)Domain_index, METH_O, "(variable) -> int"},
     {"is_optional_meta", (binaryfunc)Domain_isOptionalMeta, METH_O, "(name | int | descriptor) -> bool"},
     {"meta_id", (binaryfunc)Domain_meta_id, METH_O, "(name | descriptor) -> int"},
     {"remove_meta", (binaryfunc)Domain_remove_meta, METH_O, "({id0:desc0, id1:desc1, ...}) | ([id0|desc0, id1|desc1, ...]) -> None"},
     {NULL, NULL}
};

PyGetSetDef Domain_getset[]=  {
  {"class_var", NULL, (setter)Domain_set_classVar, "Domain's class attribute"},
  {NULL}};

char Domain_doc[] = "(example) -> Example";

char *Domain_constructor_keywords[] = {"source", "class_vars", NULL};

TAttributeAlias Domain_aliases[] = {
    {"metaid", "meta_id"},
    {"hasmeta", "has_meta"},
    {"getmeta", "get_meta"},
    {"getmetas", "get_metas"},
    {"addmeta", "add_meta"},
    {"addmetas", "add_metas"},
    {"removemeta", "remove_meta"},
    {NULL, NULL}};

PySequenceMethods Domain_as_sequence = {
  0, 0, 0,
  (intargfunc)Domain_getitem_sq,                     /* sq_item */
  (intintargfunc)Domain_getslice,                    /* sq_slice */
  0, 0,
  (objobjproc)Domain_contains,                       /* sq_contains */
};

PyMappingMethods Domain_as_mapping = {
  (inquiry)Domain_len,                               /* mp_length */
  (binaryfunc)Domain_getitem,                        /* mp_subscript */
  0,
};

PyTypeObject PyOrDomain_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.Domain",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)Domain_repr,                             /* tp_repr */
  0,
  &Domain_as_sequence,                               /* tp_as_sequence */
  &Domain_as_mapping,                                /* tp_as_mapping */
  0,
  (ternaryfunc)Domain_call,                          /* tp_call */
  (reprfunc)Domain_str,                              /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(list-of-attrs | domain [, hasClass | classVar | None] [,domain | list-of-attrs | source=domain])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Domain_methods,                                    /* tp_methods */
  0,
  Domain_getset,                                     /* tp_getset */
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Domain_new,                               /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Domain(PyObject *obj, void *ptr) { if (!PyOrDomain_Check(obj)) return 0;      *(GCPtr<TDomain> *)(ptr) = PyOrange_AsDomain(obj); return 1; }
int ccn_func_Domain(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDomain> *)(ptr) = GCPtr<TDomain>(); return 1; }      if (!PyOrDomain_Check(obj)) return 0;      *(GCPtr<TDomain> *)(ptr) = PyOrange_AsDomain(obj); return 1; }


ORANGE_API TOrangeType PyOrDomain_Type (PyOrDomain_Type_inh, typeid(TDomain), 0, cc_Domain, ccn_Domain, Domain_constructor_keywords, false, NULL, Domain_aliases);



/* -------------- DomainDistributions --------------*/

PyMethodDef DomainDistributions_methods[] = {
     {"__reduce__", (binaryfunc)DomainDistributions__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)DomainDistributions_append, METH_O, "(Distribution) -> None"},
     {"count", (binaryfunc)DomainDistributions_count, METH_O, "(Distribution) -> int"},
     {"extend", (binaryfunc)DomainDistributions_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)DomainDistributions_filter, METH_VARARGS, "([filter-function]) -> DomainDistributions"},
     {"index", (binaryfunc)DomainDistributions_index, METH_O, "(Distribution) -> int"},
     {"insert", (binaryfunc)DomainDistributions_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)DomainDistributions_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)DomainDistributions_pop, METH_VARARGS, "() -> Distribution"},
     {"remove", (binaryfunc)DomainDistributions_remove, METH_O, "(Distribution) -> None"},
     {"reverse", (binaryfunc)DomainDistributions_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)DomainDistributions_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods DomainDistributions_as_sequence = {
  (inquiry)DomainDistributions_len_sq,               /* sq_length */
  (binaryfunc)DomainDistributions_concat,            /* sq_concat */
  (intargfunc)DomainDistributions_repeat,            /* sq_repeat */
  (intargfunc)DomainDistributions_getitem_sq,        /* sq_item */
  (intintargfunc)DomainDistributions_getslice,       /* sq_slice */
  (intobjargproc)DomainDistributions_setitem_sq,     /* sq_ass_item */
  (intintobjargproc)DomainDistributions_setslice,    /* sq_ass_slice */
  (objobjproc)DomainDistributions_contains,          /* sq_contains */
};

PyMappingMethods DomainDistributions_as_mapping = {
  0,
  (binaryfunc)DomainDistributions_getitem,           /* mp_subscript */
  (objobjargproc)DomainDistributions_setitem,        /* mp_ass_subscript */
};

PyTypeObject PyOrDomainDistributions_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.distribution.Domain",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)DomainDistributions_repr,                /* tp_repr */
  0,
  &DomainDistributions_as_sequence,                  /* tp_as_sequence */
  &DomainDistributions_as_mapping,                   /* tp_as_mapping */
  0, 0,
  (reprfunc)DomainDistributions_str,                 /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID, skipDiscrete, skipContinuous] | <list of Distribution>) -> DomainDistributions", /* tp_doc */
  0, 0,
  (richcmpfunc)DomainDistributions_richcmp,          /* tp_richcmp */
  0, 0, 0,
  DomainDistributions_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DomainDistributions_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DomainDistributions(PyObject *obj, void *ptr) { if (!PyOrDomainDistributions_Check(obj)) return 0;      *(GCPtr<TDomainDistributions> *)(ptr) = PyOrange_AsDomainDistributions(obj); return 1; }
int ccn_func_DomainDistributions(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDomainDistributions> *)(ptr) = GCPtr<TDomainDistributions>(); return 1; }      if (!PyOrDomainDistributions_Check(obj)) return 0;      *(GCPtr<TDomainDistributions> *)(ptr) = PyOrange_AsDomainDistributions(obj); return 1; }


ORANGE_API TOrangeType PyOrDomainDistributions_Type (PyOrDomainDistributions_Type_inh, typeid(TDomainDistributions), 0, cc_DomainDistributions, ccn_DomainDistributions, NULL, true, NULL, NULL);



/* -------------- EFMDataDescription --------------*/

PyMethodDef EFMDataDescription_methods[] = {
     {"__reduce__", (binaryfunc)EFMDataDescription__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};


PyObject *EFMDataDescription_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrEFMDataDescription_Type, type, args, kwds); }


PyTypeObject PyOrEFMDataDescription_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EFMDataDescription",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  EFMDataDescription_methods,                        /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)EFMDataDescription_abstract_constructor,  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EFMDataDescription(PyObject *obj, void *ptr) { if (!PyOrEFMDataDescription_Check(obj)) return 0;      *(GCPtr<TEFMDataDescription> *)(ptr) = PyOrange_AsEFMDataDescription(obj); return 1; }
int ccn_func_EFMDataDescription(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEFMDataDescription> *)(ptr) = GCPtr<TEFMDataDescription>(); return 1; }      if (!PyOrEFMDataDescription_Check(obj)) return 0;      *(GCPtr<TEFMDataDescription> *)(ptr) = PyOrange_AsEFMDataDescription(obj); return 1; }


ORANGE_API TOrangeType PyOrEFMDataDescription_Type (PyOrEFMDataDescription_Type_inh, typeid(TEFMDataDescription), 0, cc_EFMDataDescription, ccn_EFMDataDescription, NULL, false, NULL, NULL);



/* -------------- EnumVariable --------------*/

PyMethodDef EnumVariable_methods[] = {
     {"__reduce__", (binaryfunc)EnumVariable__reduce__, METH_NOARGS, "()"},
     {"add_value", (binaryfunc)EnumVariable_addValue, METH_O, "(string) -> None"},
     {NULL, NULL}
};


POrange EnumVariable_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEnumVariable(), type); }


TAttributeAlias EnumVariable_aliases[] = {
    {"attr", "name"},
    {NULL, NULL}};

PySequenceMethods EnumVariable_as_sequence = {
  0, 0, 0,
  (intargfunc)EnumVariable_getitem_sq,               /* sq_item */
  0, 0, 0, 0,
};

PyTypeObject PyOrEnumVariable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.Discrete",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0,
  &EnumVariable_as_sequence,                         /* tp_as_sequence */
  0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([name=, values=, autoValues=, distributed=, getValueFrom=])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  EnumVariable_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrVariable_Type,                 /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EnumVariable(PyObject *obj, void *ptr) { if (!PyOrEnumVariable_Check(obj)) return 0;      *(GCPtr<TEnumVariable> *)(ptr) = PyOrange_AsEnumVariable(obj); return 1; }
int ccn_func_EnumVariable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEnumVariable> *)(ptr) = GCPtr<TEnumVariable>(); return 1; }      if (!PyOrEnumVariable_Check(obj)) return 0;      *(GCPtr<TEnumVariable> *)(ptr) = PyOrange_AsEnumVariable(obj); return 1; }


ORANGE_API TOrangeType PyOrEnumVariable_Type (PyOrEnumVariable_Type_inh, typeid(TEnumVariable), EnumVariable_default_constructor, cc_EnumVariable, ccn_EnumVariable, NULL, true, NULL, EnumVariable_aliases);



/* -------------- ExampleGenerator --------------*/

PyMethodDef ExampleGenerator_methods[] = {
     {"__reduce__", (binaryfunc)yieldNoPickleError, METH_NOARGS},
     {"checksum", (binaryfunc)ExampleGenerator_checksum, METH_NOARGS, "() -> crc"},
     {"filter", (binaryfunc)ExampleGenerator_filter, METH_VARARGS | METH_KEYWORDS, "(list-of-attribute-conditions | filter)"},
     {"get_items", (binaryfunc)ExampleGenerator_get_items, METH_O, "(indices) -> ExampleTable"},
     {"native", (binaryfunc)ExampleGenerator_native, METH_VARARGS | METH_KEYWORDS, "([nativity, tuple=]) -> examples"},
     {"save", (binaryfunc)ExampleGenerator_save, METH_VARARGS | METH_KEYWORDS, "(filename) -> None"},
     {"select", (binaryfunc)ExampleGenerator_select, METH_VARARGS | METH_KEYWORDS, "see the manual for help"},
     {"translate", (binaryfunc)ExampleGenerator_translate, METH_VARARGS, "translate(domain | list-of-attributes) -> ExampleTable"},
     {"weight", (binaryfunc)ExampleGenerator_weight, METH_VARARGS, "(weightID)"},
     {NULL, NULL}
};


char *ExampleGenerator_constructor_keywords[] = {"domain", "use", "useMetas", "dontCheckStored", "dontStore", "filterMetas", "DC", "DK", "NA", "noClass", "noCodedDiscrete", NULL};

TAttributeAlias ExampleGenerator_aliases[] = {
    {"getitems", "get_items"},
    {NULL, NULL}};

PyTypeObject PyOrExampleGenerator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExampleGenerator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(filename)",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExampleGenerator_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExampleGenerator_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleGenerator(PyObject *obj, void *ptr) { if (!PyOrExampleGenerator_Check(obj)) return 0;      *(GCPtr<TExampleGenerator> *)(ptr) = PyOrange_AsExampleGenerator(obj); return 1; }
int ccn_func_ExampleGenerator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleGenerator> *)(ptr) = GCPtr<TExampleGenerator>(); return 1; }      if (!PyOrExampleGenerator_Check(obj)) return 0;      *(GCPtr<TExampleGenerator> *)(ptr) = PyOrange_AsExampleGenerator(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleGenerator_Type (PyOrExampleGenerator_Type_inh, typeid(TExampleGenerator), 0, cc_ExampleGenerator, ccn_ExampleGenerator, ExampleGenerator_constructor_keywords, false, NULL, ExampleGenerator_aliases);



/* -------------- ExampleGeneratorList --------------*/

PyMethodDef ExampleGeneratorList_methods[] = {
     {"__reduce__", (binaryfunc)ExampleGeneratorList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)ExampleGeneratorList_append, METH_O, "(ExampleGenerator) -> None"},
     {"count", (binaryfunc)ExampleGeneratorList_count, METH_O, "(ExampleGenerator) -> int"},
     {"extend", (binaryfunc)ExampleGeneratorList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)ExampleGeneratorList_filter, METH_VARARGS, "([filter-function]) -> ExampleGeneratorList"},
     {"index", (binaryfunc)ExampleGeneratorList_index, METH_O, "(ExampleGenerator) -> int"},
     {"insert", (binaryfunc)ExampleGeneratorList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)ExampleGeneratorList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)ExampleGeneratorList_pop, METH_VARARGS, "() -> ExampleGenerator"},
     {"remove", (binaryfunc)ExampleGeneratorList_remove, METH_O, "(ExampleGenerator) -> None"},
     {"reverse", (binaryfunc)ExampleGeneratorList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ExampleGeneratorList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods ExampleGeneratorList_as_sequence = {
  (inquiry)ExampleGeneratorList_len_sq,              /* sq_length */
  (binaryfunc)ExampleGeneratorList_concat,           /* sq_concat */
  (intargfunc)ExampleGeneratorList_repeat,           /* sq_repeat */
  (intargfunc)ExampleGeneratorList_getitem_sq,       /* sq_item */
  (intintargfunc)ExampleGeneratorList_getslice,      /* sq_slice */
  (intobjargproc)ExampleGeneratorList_setitem_sq,    /* sq_ass_item */
  (intintobjargproc)ExampleGeneratorList_setslice,   /* sq_ass_slice */
  (objobjproc)ExampleGeneratorList_contains,         /* sq_contains */
};

PyTypeObject PyOrExampleGeneratorList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExampleGeneratorList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)ExampleGeneratorList_repr,               /* tp_repr */
  0,
  &ExampleGeneratorList_as_sequence,                 /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)ExampleGeneratorList_str,                /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of ExampleGenerator>)",                    /* tp_doc */
  0, 0,
  (richcmpfunc)ExampleGeneratorList_richcmp,         /* tp_richcmp */
  0, 0, 0,
  ExampleGeneratorList_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExampleGeneratorList_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleGeneratorList(PyObject *obj, void *ptr) { if (!PyOrExampleGeneratorList_Check(obj)) return 0;      *(GCPtr<TExampleGeneratorList> *)(ptr) = PyOrange_AsExampleGeneratorList(obj); return 1; }
int ccn_func_ExampleGeneratorList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleGeneratorList> *)(ptr) = GCPtr<TExampleGeneratorList>(); return 1; }      if (!PyOrExampleGeneratorList_Check(obj)) return 0;      *(GCPtr<TExampleGeneratorList> *)(ptr) = PyOrange_AsExampleGeneratorList(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleGeneratorList_Type (PyOrExampleGeneratorList_Type_inh, typeid(TExampleGeneratorList), 0, cc_ExampleGeneratorList, ccn_ExampleGeneratorList, NULL, true, NULL, NULL);



/* -------------- ExampleTable --------------*/

PyMethodDef ExampleTable_methods[] = {
     {"__reduce__", (binaryfunc)ExampleTable__reduce__, METH_NOARGS, "()"},
     {"add_meta_attribute", (binaryfunc)ExampleTable_addMetaAttribute, METH_VARARGS, "(id[, Value=1.0]) -> None"},
     {"append", (binaryfunc)ExampleTable_append, METH_O, "(example) -> None"},
     {"change_domain", (binaryfunc)ExampleTable_changeDomain, METH_VARARGS, "(Domain) -> None"},
     {"extend", (binaryfunc)ExampleTable_extend, METH_O, "(examples) -> None"},
     {"filter_bool", (binaryfunc)ExampleTable_filter_bool, METH_VARARGS | METH_KEYWORDS, "(list-of-attribute-conditions | filter)"},
     {"filter_list", (binaryfunc)ExampleTable_filter_list, METH_VARARGS | METH_KEYWORDS, "(list-of-attribute-conditions | filter)"},
     {"filter_ref", (binaryfunc)ExampleTable_filter_ref, METH_VARARGS | METH_KEYWORDS, "(list-of-attribute-conditions | filter)"},
     {"get_items_ref", (binaryfunc)ExampleTable_get_items_ref, METH_O, "(indices) -> ExampleTable"},
     {"has_missing_classes", (binaryfunc)ExampleTable_hasMissingClasses, 0, "() -> bool"},
     {"has_missing_values", (binaryfunc)ExampleTable_hasMissingValues, 0, "() -> bool"},
     {"native", (binaryfunc)ExampleTable_native, METH_VARARGS | METH_KEYWORDS, "([nativity, tuple=]) -> examples"},
     {"pick_class", (binaryfunc)ExampleTable_pickClass, METH_O, "(Variable | name) -> None"},
     {"random_example", (binaryfunc)ExampleTable_random_example, 0, "() -> Example"},
     {"remove_duplicates", (binaryfunc)ExampleTable_removeDuplicates, METH_VARARGS, "([weightID=0]]) -> None"},
     {"remove_meta_attribute", (binaryfunc)ExampleTable_removeMetaAttribute, METH_VARARGS, "(id) -> None"},
     {"select_bool", (binaryfunc)ExampleTable_select_bool, METH_VARARGS | METH_KEYWORDS, "see the manual for help"},
     {"select_list", (binaryfunc)ExampleTable_select_list, METH_VARARGS | METH_KEYWORDS, "see the manual for help"},
     {"select_ref", (binaryfunc)ExampleTable_select_ref, METH_VARARGS | METH_KEYWORDS, "see the manual for help"},
     {"shuffle", (binaryfunc)ExampleTable_shuffle, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ExampleTable_sort, METH_VARARGS, "() -> None"},
     {"to_MA", (binaryfunc)ExampleTable_toMA, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {"to_numarray", (binaryfunc)ExampleTable_toNumarray, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {"to_numarray_MA", (binaryfunc)ExampleTable_toNumarrayMA, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {"to_numeric", (binaryfunc)ExampleTable_toNumeric, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {"to_numeric_MA", (binaryfunc)ExampleTable_toNumericMA, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {"to_numpy", (binaryfunc)ExampleTable_toNumpy, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {"to_numpy_MA", (binaryfunc)ExampleTable_toNumpyMA, METH_VARARGS, "([contents='a/cw'[, weightID=0[, multinomialTreatment=1]]) -> matrix(-ces)"},
     {NULL, NULL}
};


void ExampleTable_addConstants()
{ PyObject *&dict = PyOrExampleTable_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Multinomial_AsOrdinal", PyInt_FromLong((long)(1)));
  PyDict_SetItemString(dict, "Multinomial_Error", PyInt_FromLong((long)(2)));
  PyDict_SetItemString(dict, "Multinomial_Ignore", PyInt_FromLong((long)(0)));
}

char *ExampleTable_constructor_keywords[] = {"domain", "use", "useMetas", "dontCheckStored", "dontStore", "filterMetas", "filter_metas", "DC", "DK", "NA", "noClass", "noCodedDiscrete", "createNewOn", NULL};

TAttributeAlias ExampleTable_aliases[] = {
    {"getitemsref", "get_items_ref"},
    {"selectlist", "select_list"},
    {"selectref", "select_ref"},
    {"selectbool", "select_bool"},
    {"filterlist", "filter_list"},
    {"filterref", "filter_ref"},
    {"filterbool", "filter_bool"},
    {"randomexample", "random_example"},
    {"random_instance", "random_example"},
    {NULL, NULL}};

PyNumberMethods ExampleTable_as_number = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (inquiry)ExampleTable_nonzero,                     /* nb_nonzero */
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

PySequenceMethods ExampleTable_as_sequence = {
  (inquiry)ExampleTable_len_sq,                      /* sq_length */
  0, 0,
  (intargfunc)ExampleTable_getitem_sq,               /* sq_item */
  (intintargfunc)ExampleTable_getslice,              /* sq_slice */
  (intobjargproc)ExampleTable_setitem_sq,            /* sq_ass_item */
  (intintobjargproc)ExampleTable_setslice,           /* sq_ass_slice */
  0,
};

PyTypeObject PyOrExampleTable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.Table",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0,
  &ExampleTable_as_number,                           /* tp_as_number */
  &ExampleTable_as_sequence,                         /* tp_as_sequence */
  0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(filename | domain[, examples] | examples)",      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExampleTable_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrExampleGenerator_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExampleTable_new,                         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleTable(PyObject *obj, void *ptr) { if (!PyOrExampleTable_Check(obj)) return 0;      *(GCPtr<TExampleTable> *)(ptr) = PyOrange_AsExampleTable(obj); return 1; }
int ccn_func_ExampleTable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleTable> *)(ptr) = GCPtr<TExampleTable>(); return 1; }      if (!PyOrExampleTable_Check(obj)) return 0;      *(GCPtr<TExampleTable> *)(ptr) = PyOrange_AsExampleTable(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleTable_Type (PyOrExampleTable_Type_inh, typeid(TExampleTable), 0, cc_ExampleTable, ccn_ExampleTable, ExampleTable_constructor_keywords, false, NULL, ExampleTable_aliases);



/* -------------- FloatVariable --------------*/


POrange FloatVariable_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFloatVariable(), type); }


PySequenceMethods FloatVariable_as_sequence = {
  0, 0, 0,
  (intargfunc)FloatVariable_getitem_sq,              /* sq_item */
  0, 0, 0, 0,
};

PyTypeObject PyOrFloatVariable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.Continuous",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0,
  &FloatVariable_as_sequence,                        /* tp_as_sequence */
  0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([name=, startValue=, endValue=, stepValue=, distributed=, getValueFrom=])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrVariable_Type,                 /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FloatVariable(PyObject *obj, void *ptr) { if (!PyOrFloatVariable_Check(obj)) return 0;      *(GCPtr<TFloatVariable> *)(ptr) = PyOrange_AsFloatVariable(obj); return 1; }
int ccn_func_FloatVariable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFloatVariable> *)(ptr) = GCPtr<TFloatVariable>(); return 1; }      if (!PyOrFloatVariable_Check(obj)) return 0;      *(GCPtr<TFloatVariable> *)(ptr) = PyOrange_AsFloatVariable(obj); return 1; }


ORANGE_API TOrangeType PyOrFloatVariable_Type (PyOrFloatVariable_Type_inh, typeid(TFloatVariable), FloatVariable_default_constructor, cc_FloatVariable, ccn_FloatVariable, NULL, true, NULL, NULL);



/* -------------- GaussianDistribution --------------*/

PyMethodDef GaussianDistribution_methods[] = {
     {"average", (binaryfunc)GaussianDistribution_average, 0, "() -> float"},
     {"density", (binaryfunc)GaussianDistribution_density, METH_VARARGS, "(x) -> float"},
     {"dev", (binaryfunc)GaussianDistribution_dev, 0, "() -> float"},
     {"error", (binaryfunc)GaussianDistribution_error, 0, "() -> float"},
     {"var", (binaryfunc)GaussianDistribution_var, 0, "() -> float"},
     {NULL, NULL}
};



PyTypeObject PyOrGaussianDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.distribution.Gaussian",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(mean, sigma) | (distribution) | () -> distribution", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  GaussianDistribution_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrDistribution_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)GaussianDistribution_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_GaussianDistribution(PyObject *obj, void *ptr) { if (!PyOrGaussianDistribution_Check(obj)) return 0;      *(GCPtr<TGaussianDistribution> *)(ptr) = PyOrange_AsGaussianDistribution(obj); return 1; }
int ccn_func_GaussianDistribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGaussianDistribution> *)(ptr) = GCPtr<TGaussianDistribution>(); return 1; }      if (!PyOrGaussianDistribution_Check(obj)) return 0;      *(GCPtr<TGaussianDistribution> *)(ptr) = PyOrange_AsGaussianDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrGaussianDistribution_Type (PyOrGaussianDistribution_Type_inh, typeid(TGaussianDistribution), 0, cc_GaussianDistribution, ccn_GaussianDistribution, NULL, true, NULL, NULL);



/* -------------- Learner --------------*/

PyMethodDef Learner_methods[] = {
     {"__reduce__", (binaryfunc)Learner__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char Learner_doc[] = "(examples) -> Classifier";


PyTypeObject PyOrLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.Learner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Learner_call,                         /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Learner_methods,                                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Learner_new,                              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Learner(PyObject *obj, void *ptr) { if (!PyOrLearner_Check(obj)) return 0;      *(GCPtr<TLearner> *)(ptr) = PyOrange_AsLearner(obj); return 1; }
int ccn_func_Learner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLearner> *)(ptr) = GCPtr<TLearner>(); return 1; }      if (!PyOrLearner_Check(obj)) return 0;      *(GCPtr<TLearner> *)(ptr) = PyOrange_AsLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrLearner_Type (PyOrLearner_Type_inh, typeid(TLearner), 0, cc_Learner, ccn_Learner, NULL, false, NULL, NULL);



/* -------------- LearnerFD --------------*/


PyObject *LearnerFD_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrLearnerFD_Type, type, args, kwds); }


PyTypeObject PyOrLearnerFD_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.LearnerFD",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)LearnerFD_abstract_constructor,           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LearnerFD(PyObject *obj, void *ptr) { if (!PyOrLearnerFD_Check(obj)) return 0;      *(GCPtr<TLearnerFD> *)(ptr) = PyOrange_AsLearnerFD(obj); return 1; }
int ccn_func_LearnerFD(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLearnerFD> *)(ptr) = GCPtr<TLearnerFD>(); return 1; }      if (!PyOrLearnerFD_Check(obj)) return 0;      *(GCPtr<TLearnerFD> *)(ptr) = PyOrange_AsLearnerFD(obj); return 1; }


ORANGE_API TOrangeType PyOrLearnerFD_Type (PyOrLearnerFD_Type_inh, typeid(TLearnerFD), 0, cc_LearnerFD, ccn_LearnerFD, NULL, false, NULL, NULL);



/* -------------- LookupLearner --------------*/

char LookupLearner_doc[] = "(examples) -> Classifier | (classVar, attributes, examples) -> Classifier";

POrange LookupLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TLookupLearner(), type); }


PyTypeObject PyOrLookupLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.lookup.LookupLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)LookupLearner_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=]) -/-> Classifier",        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LookupLearner(PyObject *obj, void *ptr) { if (!PyOrLookupLearner_Check(obj)) return 0;      *(GCPtr<TLookupLearner> *)(ptr) = PyOrange_AsLookupLearner(obj); return 1; }
int ccn_func_LookupLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLookupLearner> *)(ptr) = GCPtr<TLookupLearner>(); return 1; }      if (!PyOrLookupLearner_Check(obj)) return 0;      *(GCPtr<TLookupLearner> *)(ptr) = PyOrange_AsLookupLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrLookupLearner_Type (PyOrLookupLearner_Type_inh, typeid(TLookupLearner), LookupLearner_default_constructor, cc_LookupLearner, ccn_LookupLearner, NULL, true, NULL, NULL);



/* -------------- ProgressCallback --------------*/

PyMethodDef ProgressCallback_methods[] = {
     {"__reduce__", (binaryfunc)ProgressCallback__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char ProgressCallback_doc[] = "(float[, Orange]) -> bool";


PyTypeObject PyOrProgressCallback_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProgressCallback",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ProgressCallback_call,                /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ProgressCallback_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ProgressCallback_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProgressCallback(PyObject *obj, void *ptr) { if (!PyOrProgressCallback_Check(obj)) return 0;      *(GCPtr<TProgressCallback> *)(ptr) = PyOrange_AsProgressCallback(obj); return 1; }
int ccn_func_ProgressCallback(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProgressCallback> *)(ptr) = GCPtr<TProgressCallback>(); return 1; }      if (!PyOrProgressCallback_Check(obj)) return 0;      *(GCPtr<TProgressCallback> *)(ptr) = PyOrange_AsProgressCallback(obj); return 1; }


ORANGE_API TOrangeType PyOrProgressCallback_Type (PyOrProgressCallback_Type_inh, typeid(TProgressCallback), 0, cc_ProgressCallback, ccn_ProgressCallback, NULL, false, NULL, NULL);



/* -------------- PythonValue --------------*/

PyMethodDef PythonValue_methods[] = {
     {"__reduce__", (binaryfunc)PythonValue__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

PyGetSetDef PythonValue_getset[]=  {
  {"value", (getter)PythonValue_get_value, (setter)PythonValue_set_value},
  {NULL}};



PyTypeObject PyOrPythonValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.PythonValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([object])",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  PythonValue_methods,                               /* tp_methods */
  0,
  PythonValue_getset,                                /* tp_getset */
  (_typeobject *)&PyOrSomeValue_Type,                /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PythonValue_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_PythonValue(PyObject *obj, void *ptr) { if (!PyOrPythonValue_Check(obj)) return 0;      *(GCPtr<TPythonValue> *)(ptr) = PyOrange_AsPythonValue(obj); return 1; }
int ccn_func_PythonValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPythonValue> *)(ptr) = GCPtr<TPythonValue>(); return 1; }      if (!PyOrPythonValue_Check(obj)) return 0;      *(GCPtr<TPythonValue> *)(ptr) = PyOrange_AsPythonValue(obj); return 1; }


ORANGE_API TOrangeType PyOrPythonValue_Type (PyOrPythonValue_Type_inh, typeid(TPythonValue), 0, cc_PythonValue, ccn_PythonValue, NULL, false, NULL, NULL);



/* -------------- PythonValueSpecial --------------*/



PyTypeObject PyOrPythonValueSpecial_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.PythonValueSpecial",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(int)",                                           /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PythonValueSpecial_new,                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_PythonValueSpecial(PyObject *obj, void *ptr) { if (!PyOrPythonValueSpecial_Check(obj)) return 0;      *(GCPtr<TPythonValueSpecial> *)(ptr) = PyOrange_AsPythonValueSpecial(obj); return 1; }
int ccn_func_PythonValueSpecial(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPythonValueSpecial> *)(ptr) = GCPtr<TPythonValueSpecial>(); return 1; }      if (!PyOrPythonValueSpecial_Check(obj)) return 0;      *(GCPtr<TPythonValueSpecial> *)(ptr) = PyOrange_AsPythonValueSpecial(obj); return 1; }


ORANGE_API TOrangeType PyOrPythonValueSpecial_Type (PyOrPythonValueSpecial_Type_inh, typeid(TPythonValueSpecial), 0, cc_PythonValueSpecial, ccn_PythonValueSpecial, NULL, true, NULL, NULL);



/* -------------- PythonVariable --------------*/


POrange PythonVariable_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPythonVariable(), type); }


PyTypeObject PyOrPythonVariable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.Python",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([name=])",                                       /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrVariable_Type,                 /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_PythonVariable(PyObject *obj, void *ptr) { if (!PyOrPythonVariable_Check(obj)) return 0;      *(GCPtr<TPythonVariable> *)(ptr) = PyOrange_AsPythonVariable(obj); return 1; }
int ccn_func_PythonVariable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPythonVariable> *)(ptr) = GCPtr<TPythonVariable>(); return 1; }      if (!PyOrPythonVariable_Check(obj)) return 0;      *(GCPtr<TPythonVariable> *)(ptr) = PyOrange_AsPythonVariable(obj); return 1; }


ORANGE_API TOrangeType PyOrPythonVariable_Type (PyOrPythonVariable_Type_inh, typeid(TPythonVariable), PythonVariable_default_constructor, cc_PythonVariable, ccn_PythonVariable, NULL, true, NULL, NULL);



/* -------------- RandomClassifier --------------*/


POrange RandomClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRandomClassifier(), type); }


PyTypeObject PyOrRandomClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.RandomClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([probabilities=])",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RandomClassifier(PyObject *obj, void *ptr) { if (!PyOrRandomClassifier_Check(obj)) return 0;      *(GCPtr<TRandomClassifier> *)(ptr) = PyOrange_AsRandomClassifier(obj); return 1; }
int ccn_func_RandomClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRandomClassifier> *)(ptr) = GCPtr<TRandomClassifier>(); return 1; }      if (!PyOrRandomClassifier_Check(obj)) return 0;      *(GCPtr<TRandomClassifier> *)(ptr) = PyOrange_AsRandomClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrRandomClassifier_Type (PyOrRandomClassifier_Type_inh, typeid(TRandomClassifier), RandomClassifier_default_constructor, cc_RandomClassifier, ccn_RandomClassifier, NULL, true, NULL, NULL);



/* -------------- RandomGenerator --------------*/

PyMethodDef RandomGenerator_methods[] = {
     {"__reduce__", (binaryfunc)RandomGenerator__reduce__, METH_NOARGS, "()"},
     {"reset", (binaryfunc)RandomGenerator_reset, METH_VARARGS, "([new_seed]) -> None"},
     {NULL, NULL}
};

char RandomGenerator_doc[] = "() -> 32-bit random int";


PyTypeObject PyOrRandomGenerator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RandomGenerator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RandomGenerator_call,                 /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([int])",                                         /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RandomGenerator_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RandomGenerator_new,                      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RandomGenerator(PyObject *obj, void *ptr) { if (!PyOrRandomGenerator_Check(obj)) return 0;      *(GCPtr<TRandomGenerator> *)(ptr) = PyOrange_AsRandomGenerator(obj); return 1; }
int ccn_func_RandomGenerator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRandomGenerator> *)(ptr) = GCPtr<TRandomGenerator>(); return 1; }      if (!PyOrRandomGenerator_Check(obj)) return 0;      *(GCPtr<TRandomGenerator> *)(ptr) = PyOrange_AsRandomGenerator(obj); return 1; }


ORANGE_API TOrangeType PyOrRandomGenerator_Type (PyOrRandomGenerator_Type_inh, typeid(TRandomGenerator), 0, cc_RandomGenerator, ccn_RandomGenerator, NULL, false, NULL, NULL);



/* -------------- RandomLearner --------------*/


POrange RandomLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRandomLearner(), type); }


PyTypeObject PyOrRandomLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.RandomLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([probabilities=])",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RandomLearner(PyObject *obj, void *ptr) { if (!PyOrRandomLearner_Check(obj)) return 0;      *(GCPtr<TRandomLearner> *)(ptr) = PyOrange_AsRandomLearner(obj); return 1; }
int ccn_func_RandomLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRandomLearner> *)(ptr) = GCPtr<TRandomLearner>(); return 1; }      if (!PyOrRandomLearner_Check(obj)) return 0;      *(GCPtr<TRandomLearner> *)(ptr) = PyOrange_AsRandomLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrRandomLearner_Type (PyOrRandomLearner_Type_inh, typeid(TRandomLearner), RandomLearner_default_constructor, cc_RandomLearner, ccn_RandomLearner, NULL, true, NULL, NULL);



/* -------------- StringValue --------------*/

PyMethodDef StringValue_methods[] = {
     {"__reduce__", (binaryfunc)StringValue__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrStringValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.StringValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(string)",                                        /* tp_doc */
  0, 0, 0, 0, 0, 0,
  StringValue_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrSomeValue_Type,                /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)StringValue_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StringValue(PyObject *obj, void *ptr) { if (!PyOrStringValue_Check(obj)) return 0;      *(GCPtr<TStringValue> *)(ptr) = PyOrange_AsStringValue(obj); return 1; }
int ccn_func_StringValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStringValue> *)(ptr) = GCPtr<TStringValue>(); return 1; }      if (!PyOrStringValue_Check(obj)) return 0;      *(GCPtr<TStringValue> *)(ptr) = PyOrange_AsStringValue(obj); return 1; }


ORANGE_API TOrangeType PyOrStringValue_Type (PyOrStringValue_Type_inh, typeid(TStringValue), 0, cc_StringValue, ccn_StringValue, NULL, false, NULL, NULL);



/* -------------- StringVariable --------------*/


POrange StringVariable_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStringVariable(), type); }


PyTypeObject PyOrStringVariable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.String",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([name=])",                                       /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrVariable_Type,                 /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StringVariable(PyObject *obj, void *ptr) { if (!PyOrStringVariable_Check(obj)) return 0;      *(GCPtr<TStringVariable> *)(ptr) = PyOrange_AsStringVariable(obj); return 1; }
int ccn_func_StringVariable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStringVariable> *)(ptr) = GCPtr<TStringVariable>(); return 1; }      if (!PyOrStringVariable_Check(obj)) return 0;      *(GCPtr<TStringVariable> *)(ptr) = PyOrange_AsStringVariable(obj); return 1; }


ORANGE_API TOrangeType PyOrStringVariable_Type (PyOrStringVariable_Type_inh, typeid(TStringVariable), StringVariable_default_constructor, cc_StringVariable, ccn_StringVariable, NULL, true, NULL, NULL);



/* -------------- TransformValue --------------*/

PyMethodDef TransformValue_methods[] = {
     {"__reduce__", (binaryfunc)TransformValue__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char TransformValue_doc[] = "(value) -> Value";


TAttributeAlias TransformValue_aliases[] = {
    {"sub_transformer", "subtransformer"},
    {NULL, NULL}};

PyTypeObject PyOrTransformValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.TransformValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TransformValue_call,                  /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TransformValue_methods,                            /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TransformValue_new,                       /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TransformValue(PyObject *obj, void *ptr) { if (!PyOrTransformValue_Check(obj)) return 0;      *(GCPtr<TTransformValue> *)(ptr) = PyOrange_AsTransformValue(obj); return 1; }
int ccn_func_TransformValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTransformValue> *)(ptr) = GCPtr<TTransformValue>(); return 1; }      if (!PyOrTransformValue_Check(obj)) return 0;      *(GCPtr<TTransformValue> *)(ptr) = PyOrange_AsTransformValue(obj); return 1; }


ORANGE_API TOrangeType PyOrTransformValue_Type (PyOrTransformValue_Type_inh, typeid(TTransformValue), 0, cc_TransformValue, ccn_TransformValue, NULL, false, NULL, TransformValue_aliases);



/* -------------- VarList --------------*/

PyMethodDef VarList_methods[] = {
     {"__reduce__", (binaryfunc)VarList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)VarList_append, METH_O, "(Variable) -> None"},
     {"count", (binaryfunc)VarList_count, METH_O, "(Variable) -> int"},
     {"extend", (binaryfunc)VarList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)VarList_filter, METH_VARARGS, "([filter-function]) -> VarList"},
     {"index", (binaryfunc)VarList_index, METH_O, "(Variable) -> int"},
     {"insert", (binaryfunc)VarList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)VarList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)VarList_pop, METH_VARARGS, "() -> Variable"},
     {"remove", (binaryfunc)VarList_remove, METH_O, "(Variable) -> None"},
     {"reverse", (binaryfunc)VarList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)VarList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods VarList_as_sequence = {
  (inquiry)VarList_len_sq,                           /* sq_length */
  (binaryfunc)VarList_concat,                        /* sq_concat */
  (intargfunc)VarList_repeat,                        /* sq_repeat */
  (intargfunc)VarList_getitem_sq,                    /* sq_item */
  (intintargfunc)VarList_getslice,                   /* sq_slice */
  (intobjargproc)VarList_setitem_sq,                 /* sq_ass_item */
  (intintobjargproc)VarList_setslice,                /* sq_ass_slice */
  (objobjproc)VarList_contains,                      /* sq_contains */
};

PyTypeObject PyOrVarList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.VarList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)VarList_repr,                            /* tp_repr */
  0,
  &VarList_as_sequence,                              /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)VarList_str,                             /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Variable>)",                            /* tp_doc */
  0, 0,
  (richcmpfunc)VarList_richcmp,                      /* tp_richcmp */
  0, 0, 0,
  VarList_methods,                                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)VarList_new,                              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_VarList(PyObject *obj, void *ptr) { if (!PyOrVarList_Check(obj)) return 0;      *(GCPtr<TVarList> *)(ptr) = PyOrange_AsVarList(obj); return 1; }
int ccn_func_VarList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TVarList> *)(ptr) = GCPtr<TVarList>(); return 1; }      if (!PyOrVarList_Check(obj)) return 0;      *(GCPtr<TVarList> *)(ptr) = PyOrange_AsVarList(obj); return 1; }


ORANGE_API TOrangeType PyOrVarList_Type (PyOrVarList_Type_inh, typeid(TVarList), 0, cc_VarList, ccn_VarList, NULL, true, NULL, NULL);



/* -------------- VarListList --------------*/

PyMethodDef VarListList_methods[] = {
     {"__reduce__", (binaryfunc)VarListList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)VarListList_append, METH_O, "(VarList) -> None"},
     {"count", (binaryfunc)VarListList_count, METH_O, "(VarList) -> int"},
     {"extend", (binaryfunc)VarListList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)VarListList_filter, METH_VARARGS, "([filter-function]) -> VarListList"},
     {"index", (binaryfunc)VarListList_index, METH_O, "(VarList) -> int"},
     {"insert", (binaryfunc)VarListList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)VarListList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)VarListList_pop, METH_VARARGS, "() -> VarList"},
     {"remove", (binaryfunc)VarListList_remove, METH_O, "(VarList) -> None"},
     {"reverse", (binaryfunc)VarListList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)VarListList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods VarListList_as_sequence = {
  (inquiry)VarListList_len_sq,                       /* sq_length */
  (binaryfunc)VarListList_concat,                    /* sq_concat */
  (intargfunc)VarListList_repeat,                    /* sq_repeat */
  (intargfunc)VarListList_getitem_sq,                /* sq_item */
  (intintargfunc)VarListList_getslice,               /* sq_slice */
  (intobjargproc)VarListList_setitem_sq,             /* sq_ass_item */
  (intintobjargproc)VarListList_setslice,            /* sq_ass_slice */
  (objobjproc)VarListList_contains,                  /* sq_contains */
};

PyTypeObject PyOrVarListList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.VarListList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)VarListList_repr,                        /* tp_repr */
  0,
  &VarListList_as_sequence,                          /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)VarListList_str,                         /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of VarList>)",                             /* tp_doc */
  0, 0,
  (richcmpfunc)VarListList_richcmp,                  /* tp_richcmp */
  0, 0, 0,
  VarListList_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)VarListList_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_VarListList(PyObject *obj, void *ptr) { if (!PyOrVarListList_Check(obj)) return 0;      *(GCPtr<TVarListList> *)(ptr) = PyOrange_AsVarListList(obj); return 1; }
int ccn_func_VarListList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TVarListList> *)(ptr) = GCPtr<TVarListList>(); return 1; }      if (!PyOrVarListList_Check(obj)) return 0;      *(GCPtr<TVarListList> *)(ptr) = PyOrange_AsVarListList(obj); return 1; }


ORANGE_API TOrangeType PyOrVarListList_Type (PyOrVarListList_Type_inh, typeid(TVarListList), 0, cc_VarListList, ccn_VarListList, NULL, true, NULL, NULL);



/* -------------- Variable --------------*/

PyMethodDef Variable_methods[] = {
     {"DC", (binaryfunc)Variable_DC, METH_NOARGS, "() -> DC"},
     {"DK", (binaryfunc)Variable_DK, METH_NOARGS, "() -> DK"},
     {"__reduce__", (binaryfunc)Variable__reduce__, METH_NOARGS, "()"},
     {"compute_value", (binaryfunc)Variable_computeValue, METH_O, "(example) -> Value"},
     {"firstvalue", (binaryfunc)Variable_firstvalue, 0, "() -> Value | None"},
     {"get_existing", (binaryfunc)Variable_getExisting, METH_VARARGS | METH_STATIC, "(name, type[, fixedOrderValues[, otherValues, failOn]]) -> (Variable|None, status)"},
     {"make", (binaryfunc)Variable_make, METH_VARARGS | METH_STATIC, "(name, type[, fixedOrderValues[, otherValues, createNewOn]]) -> (Variable|None, status)"},
     {"new_meta_id", (binaryfunc)Variable_new_meta_id, METH_VARARGS | METH_STATIC, "([Variable]) -> int"},
     {"nextvalue", (binaryfunc)Variable_nextvalue, METH_O, "(value)  -> Value | None"},
     {"randomvalue", (binaryfunc)Variable_randomvalue, 0, "() -> Value"},
     {"retrieve", (binaryfunc)Variable_retrieve, METH_VARARGS | METH_STATIC, "(name, type[, fixedOrderValues[, otherValues, failOn]]) -> (Variable|None, status)"},
     {"special_value", (binaryfunc)Variable_specialValue, METH_O, "(int) -> special value"},
     {NULL, NULL}
};

PyGetSetDef Variable_getset[]=  {
  {"name", (getter)Variable_get_name, (setter)Variable_set_name},
  {NULL}};

char Variable_doc[] = "(value) -> Value";


TNamedConstantsDef Variable_Type_values[] = {{"None", (int)TValue::NONE}, {"Discrete", (int)TValue::INTVAR}, {"Continuous", (int)TValue::FLOATVAR}, {"Other", (int)(TValue::FLOATVAR+1)}, {"String", (int)STRINGVAR}, {0, 0}};
static PyObject *Variable_Type_repr(PyObject *self) { return stringFromList(self, Variable_Type_values); }
PyObject *Variable_Type__reduce__(PyObject *self);
PyMethodDef Variable_Type_methods[] = { {"__reduce__", (binaryfunc)Variable_Type__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyVariable_Type_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "Variable.Type", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)Variable_Type_repr, 0, 0, 0, 0, 0, (reprfunc)Variable_Type_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, Variable_Type_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyVariable_Type_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyVariable_Type_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTVariable_Type(void *l) { return PyVariable_Type_FromLong(*(int *)l); }
PyObject *Variable_Type__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "Variable_Type", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef Variable_MakeStatus_values[] = {{"OK", 0}, {"MissingValues", 1}, {"NoRecognizedValues", 2}, {"Incompatible", 3}, {"NotFound", 4}, {0, 0}};
static PyObject *Variable_MakeStatus_repr(PyObject *self) { return stringFromList(self, Variable_MakeStatus_values); }
PyObject *Variable_MakeStatus__reduce__(PyObject *self);
PyMethodDef Variable_MakeStatus_methods[] = { {"__reduce__", (binaryfunc)Variable_MakeStatus__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyVariable_MakeStatus_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "Variable.MakeStatus", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)Variable_MakeStatus_repr, 0, 0, 0, 0, 0, (reprfunc)Variable_MakeStatus_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, Variable_MakeStatus_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyVariable_MakeStatus_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyVariable_MakeStatus_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTVariable_MakeStatus(void *l) { return PyVariable_MakeStatus_FromLong(*(int *)l); }
PyObject *Variable_MakeStatus__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "Variable_MakeStatus", ((PyIntObject *)(self))->ob_ival); }

void Variable_addConstants()
{ PyObject *&dict = PyOrVariable_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "NotFound", PyVariable_MakeStatus_FromLong((long)(4)));
  PyDict_SetItemString(dict, "None", PyVariable_Type_FromLong((long)((int)TValue::NONE)));
  PyDict_SetItemString(dict, "OK", PyVariable_MakeStatus_FromLong((long)(0)));
  PyDict_SetItemString(dict, "String", PyVariable_Type_FromLong((long)((int)STRINGVAR)));
  PyDict_SetItemString(dict, "MakeStatus", MakeStatus());
  PyDict_SetItemString(dict, "Incompatible", PyVariable_MakeStatus_FromLong((long)(3)));
  PyDict_SetItemString(dict, "Continuous", PyVariable_Type_FromLong((long)((int)TValue::FLOATVAR)));
  PyDict_SetItemString(dict, "Discrete", PyVariable_Type_FromLong((long)((int)TValue::INTVAR)));
  PyDict_SetItemString(dict, "Other", PyVariable_Type_FromLong((long)((int)(TValue::FLOATVAR+1))));
  PyDict_SetItemString(dict, "NoRecognizedValues", PyVariable_MakeStatus_FromLong((long)(2)));
  PyDict_SetItemString(dict, "MissingValues", PyVariable_MakeStatus_FromLong((long)(1)));
}

PyObject *Variable_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrVariable_Type, type, args, kwds); }


PyTypeObject PyOrVariable_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.Descriptor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Variable_call,                        /* tp_call */
  0,
  (getattrofunc)Variable_getattr,                    /* tp_getattro */
  0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Variable_methods,                                  /* tp_methods */
  0,
  Variable_getset,                                   /* tp_getset */
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Variable_abstract_constructor,            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Variable(PyObject *obj, void *ptr) { if (!PyOrVariable_Check(obj)) return 0;      *(GCPtr<TVariable> *)(ptr) = PyOrange_AsVariable(obj); return 1; }
int ccn_func_Variable(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TVariable> *)(ptr) = GCPtr<TVariable>(); return 1; }      if (!PyOrVariable_Check(obj)) return 0;      *(GCPtr<TVariable> *)(ptr) = PyOrange_AsVariable(obj); return 1; }


ORANGE_API TOrangeType PyOrVariable_Type (PyOrVariable_Type_inh, typeid(TVariable), 0, cc_Variable, ccn_Variable, NULL, false, NULL, NULL);



