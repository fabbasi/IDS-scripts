/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern ORANGE_API TOrangeType PyOrClassifier_Type;
extern ORANGE_API TOrangeType PyOrClustersFromDistributions_Type;
extern ORANGE_API TOrangeType PyOrClustersFromIM_Type;
extern ORANGE_API TOrangeType PyOrColorIG_Type;
extern ORANGE_API TOrangeType PyOrColumnAssessor_Type;
extern ORANGE_API TOrangeType PyOrDiscretization_Type;
extern ORANGE_API TOrangeType PyOrDiscretizer_Type;
extern ORANGE_API TOrangeType PyOrDistributionAssessor_Type;
extern ORANGE_API TOrangeType PyOrExampleDistConstructor_Type;
extern ORANGE_API TOrangeType PyOrFeatureInducer_Type;
extern ORANGE_API TOrangeType PyOrGeneralExampleClustering_Type;
extern ORANGE_API TOrangeType PyOrIGConstructor_Type;
extern ORANGE_API TOrangeType PyOrIMByRowsConstructor_Type;
extern ORANGE_API TOrangeType PyOrIMByRowsPreprocessor_Type;
extern ORANGE_API TOrangeType PyOrIMConstructor_Type;
extern ORANGE_API TOrangeType PyOrMeasureAttribute_Type;
extern ORANGE_API TOrangeType PyOrOrange_Type;
extern ORANGE_API TOrangeType PyOrPreprocessor_Type;
extern ORANGE_API TOrangeType PyOrRemoveRedundant_Type;
extern ORANGE_API TOrangeType PyOrStopDistributionClustering_Type;
extern ORANGE_API TOrangeType PyOrStopIMClusteringByAssessor_Type;
extern ORANGE_API TOrangeType PyOrSubsetsGenerator_Type;
extern ORANGE_API TOrangeType PyOrSubsetsGenerator_iterator_Type;
extern ORANGE_API TOrangeType PyOrTransformValue_Type;


/* -------------- AssessIMQuality --------------*/

char AssessIMQuality_doc[] = "(im) -> float";

POrange AssessIMQuality_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TAssessIMQuality(), type); }


PyTypeObject PyOrAssessIMQuality_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.AssessIMQuality",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)AssessIMQuality_call,                 /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([IM] -/-> float)",                               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssessIMQuality(PyObject *obj, void *ptr) { if (!PyOrAssessIMQuality_Check(obj)) return 0;      *(GCPtr<TAssessIMQuality> *)(ptr) = PyOrange_AsAssessIMQuality(obj); return 1; }
int ccn_func_AssessIMQuality(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssessIMQuality> *)(ptr) = GCPtr<TAssessIMQuality>(); return 1; }      if (!PyOrAssessIMQuality_Check(obj)) return 0;      *(GCPtr<TAssessIMQuality> *)(ptr) = PyOrange_AsAssessIMQuality(obj); return 1; }


ORANGE_API TOrangeType PyOrAssessIMQuality_Type (PyOrAssessIMQuality_Type_inh, typeid(TAssessIMQuality), AssessIMQuality_default_constructor, cc_AssessIMQuality, ccn_AssessIMQuality, NULL, true, NULL, NULL);



/* -------------- BiModalDiscretization --------------*/


POrange BiModalDiscretization_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TBiModalDiscretization(), type); }


PyTypeObject PyOrBiModalDiscretization_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.BiModal",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (attribute, examples[, weight]) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretization_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_BiModalDiscretization(PyObject *obj, void *ptr) { if (!PyOrBiModalDiscretization_Check(obj)) return 0;      *(GCPtr<TBiModalDiscretization> *)(ptr) = PyOrange_AsBiModalDiscretization(obj); return 1; }
int ccn_func_BiModalDiscretization(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TBiModalDiscretization> *)(ptr) = GCPtr<TBiModalDiscretization>(); return 1; }      if (!PyOrBiModalDiscretization_Check(obj)) return 0;      *(GCPtr<TBiModalDiscretization> *)(ptr) = PyOrange_AsBiModalDiscretization(obj); return 1; }


ORANGE_API TOrangeType PyOrBiModalDiscretization_Type (PyOrBiModalDiscretization_Type_inh, typeid(TBiModalDiscretization), BiModalDiscretization_default_constructor, cc_BiModalDiscretization, ccn_BiModalDiscretization, NULL, true, NULL, NULL);



/* -------------- BiModalDiscretizer --------------*/


POrange BiModalDiscretizer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TBiModalDiscretizer(), type); }


PyTypeObject PyOrBiModalDiscretizer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.BiModalDiscretizer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([low=, high=])",                                 /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretizer_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_BiModalDiscretizer(PyObject *obj, void *ptr) { if (!PyOrBiModalDiscretizer_Check(obj)) return 0;      *(GCPtr<TBiModalDiscretizer> *)(ptr) = PyOrange_AsBiModalDiscretizer(obj); return 1; }
int ccn_func_BiModalDiscretizer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TBiModalDiscretizer> *)(ptr) = GCPtr<TBiModalDiscretizer>(); return 1; }      if (!PyOrBiModalDiscretizer_Check(obj)) return 0;      *(GCPtr<TBiModalDiscretizer> *)(ptr) = PyOrange_AsBiModalDiscretizer(obj); return 1; }


ORANGE_API TOrangeType PyOrBiModalDiscretizer_Type (PyOrBiModalDiscretizer_Type_inh, typeid(TBiModalDiscretizer), BiModalDiscretizer_default_constructor, cc_BiModalDiscretizer, ccn_BiModalDiscretizer, NULL, true, NULL, NULL);



/* -------------- ClustersFromDistributions --------------*/

char ClustersFromDistributions_doc[] = "(example-dist-vector) -> DistClustering";

PyObject *ClustersFromDistributions_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrClustersFromDistributions_Type, type, args, kwds); }


PyTypeObject PyOrClustersFromDistributions_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ClustersFromDistributions",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ClustersFromDistributions_call,       /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClustersFromDistributions_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClustersFromDistributions(PyObject *obj, void *ptr) { if (!PyOrClustersFromDistributions_Check(obj)) return 0;      *(GCPtr<TClustersFromDistributions> *)(ptr) = PyOrange_AsClustersFromDistributions(obj); return 1; }
int ccn_func_ClustersFromDistributions(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClustersFromDistributions> *)(ptr) = GCPtr<TClustersFromDistributions>(); return 1; }      if (!PyOrClustersFromDistributions_Check(obj)) return 0;      *(GCPtr<TClustersFromDistributions> *)(ptr) = PyOrange_AsClustersFromDistributions(obj); return 1; }


ORANGE_API TOrangeType PyOrClustersFromDistributions_Type (PyOrClustersFromDistributions_Type_inh, typeid(TClustersFromDistributions), 0, cc_ClustersFromDistributions, ccn_ClustersFromDistributions, NULL, false, NULL, NULL);



/* -------------- ClustersFromDistributionsByAssessor --------------*/


POrange ClustersFromDistributionsByAssessor_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TClustersFromDistributionsByAssessor(), type); }


PyTypeObject PyOrClustersFromDistributionsByAssessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ClustersFromDistributionsByAssessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example-dist-vector] [minProfitProportion=, distributionAssessor=, stopCriterion=]) -/-> DistClustering", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClustersFromDistributions_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClustersFromDistributionsByAssessor(PyObject *obj, void *ptr) { if (!PyOrClustersFromDistributionsByAssessor_Check(obj)) return 0;      *(GCPtr<TClustersFromDistributionsByAssessor> *)(ptr) = PyOrange_AsClustersFromDistributionsByAssessor(obj); return 1; }
int ccn_func_ClustersFromDistributionsByAssessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClustersFromDistributionsByAssessor> *)(ptr) = GCPtr<TClustersFromDistributionsByAssessor>(); return 1; }      if (!PyOrClustersFromDistributionsByAssessor_Check(obj)) return 0;      *(GCPtr<TClustersFromDistributionsByAssessor> *)(ptr) = PyOrange_AsClustersFromDistributionsByAssessor(obj); return 1; }


ORANGE_API TOrangeType PyOrClustersFromDistributionsByAssessor_Type (PyOrClustersFromDistributionsByAssessor_Type_inh, typeid(TClustersFromDistributionsByAssessor), ClustersFromDistributionsByAssessor_default_constructor, cc_ClustersFromDistributionsByAssessor, ccn_ClustersFromDistributionsByAssessor, NULL, true, NULL, NULL);



/* -------------- ClustersFromIM --------------*/

char ClustersFromIM_doc[] = "(im) -> IMClustering";

PyObject *ClustersFromIM_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrClustersFromIM_Type, type, args, kwds); }


PyTypeObject PyOrClustersFromIM_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ClustersFromIM",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ClustersFromIM_call,                  /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ClustersFromIM_abstract_constructor,      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClustersFromIM(PyObject *obj, void *ptr) { if (!PyOrClustersFromIM_Check(obj)) return 0;      *(GCPtr<TClustersFromIM> *)(ptr) = PyOrange_AsClustersFromIM(obj); return 1; }
int ccn_func_ClustersFromIM(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClustersFromIM> *)(ptr) = GCPtr<TClustersFromIM>(); return 1; }      if (!PyOrClustersFromIM_Check(obj)) return 0;      *(GCPtr<TClustersFromIM> *)(ptr) = PyOrange_AsClustersFromIM(obj); return 1; }


ORANGE_API TOrangeType PyOrClustersFromIM_Type (PyOrClustersFromIM_Type_inh, typeid(TClustersFromIM), 0, cc_ClustersFromIM, ccn_ClustersFromIM, NULL, false, NULL, NULL);



/* -------------- ClustersFromIMByAssessor --------------*/


POrange ClustersFromIMByAssessor_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TClustersFromIMByAssessor(), type); }


PyTypeObject PyOrClustersFromIMByAssessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ClustersFromIMByAssessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([IM] [minProfitProportion=, columnAssessor=, stopCriterion=]) -/-> IMClustering", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClustersFromIM_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ClustersFromIMByAssessor(PyObject *obj, void *ptr) { if (!PyOrClustersFromIMByAssessor_Check(obj)) return 0;      *(GCPtr<TClustersFromIMByAssessor> *)(ptr) = PyOrange_AsClustersFromIMByAssessor(obj); return 1; }
int ccn_func_ClustersFromIMByAssessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TClustersFromIMByAssessor> *)(ptr) = GCPtr<TClustersFromIMByAssessor>(); return 1; }      if (!PyOrClustersFromIMByAssessor_Check(obj)) return 0;      *(GCPtr<TClustersFromIMByAssessor> *)(ptr) = PyOrange_AsClustersFromIMByAssessor(obj); return 1; }


ORANGE_API TOrangeType PyOrClustersFromIMByAssessor_Type (PyOrClustersFromIMByAssessor_Type_inh, typeid(TClustersFromIMByAssessor), ClustersFromIMByAssessor_default_constructor, cc_ClustersFromIMByAssessor, ccn_ClustersFromIMByAssessor, NULL, true, NULL, NULL);



/* -------------- ColorIG --------------*/

char ColorIG_doc[] = "(ig) -> [int]";

PyObject *ColorIG_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrColorIG_Type, type, args, kwds); }


PyTypeObject PyOrColorIG_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColorIG",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ColorIG_call,                         /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ColorIG_abstract_constructor,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColorIG(PyObject *obj, void *ptr) { if (!PyOrColorIG_Check(obj)) return 0;      *(GCPtr<TColorIG> *)(ptr) = PyOrange_AsColorIG(obj); return 1; }
int ccn_func_ColorIG(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColorIG> *)(ptr) = GCPtr<TColorIG>(); return 1; }      if (!PyOrColorIG_Check(obj)) return 0;      *(GCPtr<TColorIG> *)(ptr) = PyOrange_AsColorIG(obj); return 1; }


ORANGE_API TOrangeType PyOrColorIG_Type (PyOrColorIG_Type_inh, typeid(TColorIG), 0, cc_ColorIG, ccn_ColorIG, NULL, false, NULL, NULL);



/* -------------- ColorIG_MCF --------------*/


POrange ColorIG_MCF_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColorIG_MCF(), type); }


PyTypeObject PyOrColorIG_MCF_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColorIG_MCF",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([IG]) -/-> ColoredIG",                           /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColorIG_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColorIG_MCF(PyObject *obj, void *ptr) { if (!PyOrColorIG_MCF_Check(obj)) return 0;      *(GCPtr<TColorIG_MCF> *)(ptr) = PyOrange_AsColorIG_MCF(obj); return 1; }
int ccn_func_ColorIG_MCF(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColorIG_MCF> *)(ptr) = GCPtr<TColorIG_MCF>(); return 1; }      if (!PyOrColorIG_MCF_Check(obj)) return 0;      *(GCPtr<TColorIG_MCF> *)(ptr) = PyOrange_AsColorIG_MCF(obj); return 1; }


ORANGE_API TOrangeType PyOrColorIG_MCF_Type (PyOrColorIG_MCF_Type_inh, typeid(TColorIG_MCF), ColorIG_MCF_default_constructor, cc_ColorIG_MCF, ccn_ColorIG_MCF, NULL, true, NULL, NULL);



/* -------------- ColoredIG --------------*/


POrange ColoredIG_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColoredIG(), type); }


PyTypeObject PyOrColoredIG_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColoredIG",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(ig=, colors=)",                                  /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrGeneralExampleClustering_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColoredIG(PyObject *obj, void *ptr) { if (!PyOrColoredIG_Check(obj)) return 0;      *(GCPtr<TColoredIG> *)(ptr) = PyOrange_AsColoredIG(obj); return 1; }
int ccn_func_ColoredIG(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColoredIG> *)(ptr) = GCPtr<TColoredIG>(); return 1; }      if (!PyOrColoredIG_Check(obj)) return 0;      *(GCPtr<TColoredIG> *)(ptr) = PyOrange_AsColoredIG(obj); return 1; }


ORANGE_API TOrangeType PyOrColoredIG_Type (PyOrColoredIG_Type_inh, typeid(TColoredIG), ColoredIG_default_constructor, cc_ColoredIG, ccn_ColoredIG, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor --------------*/


PyObject *ColumnAssessor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrColumnAssessor_Type, type, args, kwds); }


PyTypeObject PyOrColumnAssessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ColumnAssessor_abstract_constructor,      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_Check(obj)) return 0;      *(GCPtr<TColumnAssessor> *)(ptr) = PyOrange_AsColumnAssessor(obj); return 1; }
int ccn_func_ColumnAssessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor> *)(ptr) = GCPtr<TColumnAssessor>(); return 1; }      if (!PyOrColumnAssessor_Check(obj)) return 0;      *(GCPtr<TColumnAssessor> *)(ptr) = PyOrange_AsColumnAssessor(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_Type (PyOrColumnAssessor_Type_inh, typeid(TColumnAssessor), 0, cc_ColumnAssessor, ccn_ColumnAssessor, NULL, false, NULL, NULL);



/* -------------- ColumnAssessor_Kramer --------------*/


POrange ColumnAssessor_Kramer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_Kramer(), type); }


PyTypeObject PyOrColumnAssessor_Kramer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_Kramer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_Kramer(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_Kramer_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Kramer> *)(ptr) = PyOrange_AsColumnAssessor_Kramer(obj); return 1; }
int ccn_func_ColumnAssessor_Kramer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_Kramer> *)(ptr) = GCPtr<TColumnAssessor_Kramer>(); return 1; }      if (!PyOrColumnAssessor_Kramer_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Kramer> *)(ptr) = PyOrange_AsColumnAssessor_Kramer(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_Kramer_Type (PyOrColumnAssessor_Kramer_Type_inh, typeid(TColumnAssessor_Kramer), ColumnAssessor_Kramer_default_constructor, cc_ColumnAssessor_Kramer, ccn_ColumnAssessor_Kramer, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor_Laplace --------------*/


POrange ColumnAssessor_Laplace_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_Laplace(), type); }


PyTypeObject PyOrColumnAssessor_Laplace_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_Laplace",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_Laplace(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_Laplace_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Laplace> *)(ptr) = PyOrange_AsColumnAssessor_Laplace(obj); return 1; }
int ccn_func_ColumnAssessor_Laplace(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_Laplace> *)(ptr) = GCPtr<TColumnAssessor_Laplace>(); return 1; }      if (!PyOrColumnAssessor_Laplace_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Laplace> *)(ptr) = PyOrange_AsColumnAssessor_Laplace(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_Laplace_Type (PyOrColumnAssessor_Laplace_Type_inh, typeid(TColumnAssessor_Laplace), ColumnAssessor_Laplace_default_constructor, cc_ColumnAssessor_Laplace, ccn_ColumnAssessor_Laplace, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor_Measure --------------*/


POrange ColumnAssessor_Measure_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_Measure(), type); }


PyTypeObject PyOrColumnAssessor_Measure_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_Measure",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(measure=)",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_Measure(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_Measure_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Measure> *)(ptr) = PyOrange_AsColumnAssessor_Measure(obj); return 1; }
int ccn_func_ColumnAssessor_Measure(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_Measure> *)(ptr) = GCPtr<TColumnAssessor_Measure>(); return 1; }      if (!PyOrColumnAssessor_Measure_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Measure> *)(ptr) = PyOrange_AsColumnAssessor_Measure(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_Measure_Type (PyOrColumnAssessor_Measure_Type_inh, typeid(TColumnAssessor_Measure), ColumnAssessor_Measure_default_constructor, cc_ColumnAssessor_Measure, ccn_ColumnAssessor_Measure, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor_N --------------*/


POrange ColumnAssessor_N_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_N(), type); }


PyTypeObject PyOrColumnAssessor_N_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_N",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_N(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_N_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_N> *)(ptr) = PyOrange_AsColumnAssessor_N(obj); return 1; }
int ccn_func_ColumnAssessor_N(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_N> *)(ptr) = GCPtr<TColumnAssessor_N>(); return 1; }      if (!PyOrColumnAssessor_N_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_N> *)(ptr) = PyOrange_AsColumnAssessor_N(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_N_Type (PyOrColumnAssessor_N_Type_inh, typeid(TColumnAssessor_N), ColumnAssessor_N_default_constructor, cc_ColumnAssessor_N, ccn_ColumnAssessor_N, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor_Relief --------------*/


POrange ColumnAssessor_Relief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_Relief(), type); }


PyTypeObject PyOrColumnAssessor_Relief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_Relief",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_Relief(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_Relief_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Relief> *)(ptr) = PyOrange_AsColumnAssessor_Relief(obj); return 1; }
int ccn_func_ColumnAssessor_Relief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_Relief> *)(ptr) = GCPtr<TColumnAssessor_Relief>(); return 1; }      if (!PyOrColumnAssessor_Relief_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_Relief> *)(ptr) = PyOrange_AsColumnAssessor_Relief(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_Relief_Type (PyOrColumnAssessor_Relief_Type_inh, typeid(TColumnAssessor_Relief), ColumnAssessor_Relief_default_constructor, cc_ColumnAssessor_Relief, ccn_ColumnAssessor_Relief, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor_m --------------*/


POrange ColumnAssessor_m_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_m(), type); }


PyTypeObject PyOrColumnAssessor_m_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_m",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([m=])",                                          /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_m(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_m_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_m> *)(ptr) = PyOrange_AsColumnAssessor_m(obj); return 1; }
int ccn_func_ColumnAssessor_m(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_m> *)(ptr) = GCPtr<TColumnAssessor_m>(); return 1; }      if (!PyOrColumnAssessor_m_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_m> *)(ptr) = PyOrange_AsColumnAssessor_m(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_m_Type (PyOrColumnAssessor_m_Type_inh, typeid(TColumnAssessor_m), ColumnAssessor_m_default_constructor, cc_ColumnAssessor_m, ccn_ColumnAssessor_m, NULL, true, NULL, NULL);



/* -------------- ColumnAssessor_mf --------------*/


POrange ColumnAssessor_mf_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TColumnAssessor_mf(), type); }


PyTypeObject PyOrColumnAssessor_mf_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ColumnAssessor_mf",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([m=])",                                          /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrColumnAssessor_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ColumnAssessor_mf(PyObject *obj, void *ptr) { if (!PyOrColumnAssessor_mf_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_mf> *)(ptr) = PyOrange_AsColumnAssessor_mf(obj); return 1; }
int ccn_func_ColumnAssessor_mf(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TColumnAssessor_mf> *)(ptr) = GCPtr<TColumnAssessor_mf>(); return 1; }      if (!PyOrColumnAssessor_mf_Check(obj)) return 0;      *(GCPtr<TColumnAssessor_mf> *)(ptr) = PyOrange_AsColumnAssessor_mf(obj); return 1; }


ORANGE_API TOrangeType PyOrColumnAssessor_mf_Type (PyOrColumnAssessor_mf_Type_inh, typeid(TColumnAssessor_mf), ColumnAssessor_mf_default_constructor, cc_ColumnAssessor_mf, ccn_ColumnAssessor_mf, NULL, true, NULL, NULL);



/* -------------- Discrete2Continuous --------------*/


POrange Discrete2Continuous_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDiscrete2Continuous(), type); }


PyTypeObject PyOrDiscrete2Continuous_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.Discrete2Continuous",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([value=])",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTransformValue_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Discrete2Continuous(PyObject *obj, void *ptr) { if (!PyOrDiscrete2Continuous_Check(obj)) return 0;      *(GCPtr<TDiscrete2Continuous> *)(ptr) = PyOrange_AsDiscrete2Continuous(obj); return 1; }
int ccn_func_Discrete2Continuous(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDiscrete2Continuous> *)(ptr) = GCPtr<TDiscrete2Continuous>(); return 1; }      if (!PyOrDiscrete2Continuous_Check(obj)) return 0;      *(GCPtr<TDiscrete2Continuous> *)(ptr) = PyOrange_AsDiscrete2Continuous(obj); return 1; }


ORANGE_API TOrangeType PyOrDiscrete2Continuous_Type (PyOrDiscrete2Continuous_Type_inh, typeid(TDiscrete2Continuous), Discrete2Continuous_default_constructor, cc_Discrete2Continuous, ccn_Discrete2Continuous, NULL, true, NULL, NULL);



/* -------------- Discretization --------------*/

char Discretization_doc[] = "(attribute, examples[, weight]) -> Variable";

PyObject *Discretization_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrDiscretization_Type, type, args, kwds); }


PyTypeObject PyOrDiscretization_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.Discretization",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Discretization_call,                  /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Discretization_abstract_constructor,      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Discretization(PyObject *obj, void *ptr) { if (!PyOrDiscretization_Check(obj)) return 0;      *(GCPtr<TDiscretization> *)(ptr) = PyOrange_AsDiscretization(obj); return 1; }
int ccn_func_Discretization(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDiscretization> *)(ptr) = GCPtr<TDiscretization>(); return 1; }      if (!PyOrDiscretization_Check(obj)) return 0;      *(GCPtr<TDiscretization> *)(ptr) = PyOrange_AsDiscretization(obj); return 1; }


ORANGE_API TOrangeType PyOrDiscretization_Type (PyOrDiscretization_Type_inh, typeid(TDiscretization), 0, cc_Discretization, ccn_Discretization, NULL, false, NULL, NULL);



/* -------------- Discretizer --------------*/

PyMethodDef Discretizer_methods[] = {
     {"construct_variable", (binaryfunc)Discretizer_constructVariable, METH_O, "(variable) -> variable"},
     {NULL, NULL}
};


PyObject *Discretizer_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrDiscretizer_Type, type, args, kwds); }


PyTypeObject PyOrDiscretizer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.Discretizer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Discretizer_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrTransformValue_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Discretizer_abstract_constructor,         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Discretizer(PyObject *obj, void *ptr) { if (!PyOrDiscretizer_Check(obj)) return 0;      *(GCPtr<TDiscretizer> *)(ptr) = PyOrange_AsDiscretizer(obj); return 1; }
int ccn_func_Discretizer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDiscretizer> *)(ptr) = GCPtr<TDiscretizer>(); return 1; }      if (!PyOrDiscretizer_Check(obj)) return 0;      *(GCPtr<TDiscretizer> *)(ptr) = PyOrange_AsDiscretizer(obj); return 1; }


ORANGE_API TOrangeType PyOrDiscretizer_Type (PyOrDiscretizer_Type_inh, typeid(TDiscretizer), 0, cc_Discretizer, ccn_Discretizer, NULL, false, NULL, NULL);



/* -------------- DistributionAssessor --------------*/


PyObject *DistributionAssessor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrDistributionAssessor_Type, type, args, kwds); }


PyTypeObject PyOrDistributionAssessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DistributionAssessor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor> *)(ptr) = PyOrange_AsDistributionAssessor(obj); return 1; }
int ccn_func_DistributionAssessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor> *)(ptr) = GCPtr<TDistributionAssessor>(); return 1; }      if (!PyOrDistributionAssessor_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor> *)(ptr) = PyOrange_AsDistributionAssessor(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_Type (PyOrDistributionAssessor_Type_inh, typeid(TDistributionAssessor), 0, cc_DistributionAssessor, ccn_DistributionAssessor, NULL, false, NULL, NULL);



/* -------------- DistributionAssessor_Kramer --------------*/


POrange DistributionAssessor_Kramer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistributionAssessor_Kramer(), type); }


PyTypeObject PyOrDistributionAssessor_Kramer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor_Kramer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDistributionAssessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor_Kramer(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_Kramer_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Kramer> *)(ptr) = PyOrange_AsDistributionAssessor_Kramer(obj); return 1; }
int ccn_func_DistributionAssessor_Kramer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor_Kramer> *)(ptr) = GCPtr<TDistributionAssessor_Kramer>(); return 1; }      if (!PyOrDistributionAssessor_Kramer_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Kramer> *)(ptr) = PyOrange_AsDistributionAssessor_Kramer(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_Kramer_Type (PyOrDistributionAssessor_Kramer_Type_inh, typeid(TDistributionAssessor_Kramer), DistributionAssessor_Kramer_default_constructor, cc_DistributionAssessor_Kramer, ccn_DistributionAssessor_Kramer, NULL, true, NULL, NULL);



/* -------------- DistributionAssessor_Laplace --------------*/


POrange DistributionAssessor_Laplace_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistributionAssessor_Laplace(), type); }


PyTypeObject PyOrDistributionAssessor_Laplace_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor_Laplace",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDistributionAssessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor_Laplace(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_Laplace_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Laplace> *)(ptr) = PyOrange_AsDistributionAssessor_Laplace(obj); return 1; }
int ccn_func_DistributionAssessor_Laplace(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor_Laplace> *)(ptr) = GCPtr<TDistributionAssessor_Laplace>(); return 1; }      if (!PyOrDistributionAssessor_Laplace_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Laplace> *)(ptr) = PyOrange_AsDistributionAssessor_Laplace(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_Laplace_Type (PyOrDistributionAssessor_Laplace_Type_inh, typeid(TDistributionAssessor_Laplace), DistributionAssessor_Laplace_default_constructor, cc_DistributionAssessor_Laplace, ccn_DistributionAssessor_Laplace, NULL, true, NULL, NULL);



/* -------------- DistributionAssessor_Measure --------------*/


POrange DistributionAssessor_Measure_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistributionAssessor_Measure(), type); }


PyTypeObject PyOrDistributionAssessor_Measure_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor_Measure",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([measure=])",                                    /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDistributionAssessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor_Measure(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_Measure_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Measure> *)(ptr) = PyOrange_AsDistributionAssessor_Measure(obj); return 1; }
int ccn_func_DistributionAssessor_Measure(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor_Measure> *)(ptr) = GCPtr<TDistributionAssessor_Measure>(); return 1; }      if (!PyOrDistributionAssessor_Measure_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Measure> *)(ptr) = PyOrange_AsDistributionAssessor_Measure(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_Measure_Type (PyOrDistributionAssessor_Measure_Type_inh, typeid(TDistributionAssessor_Measure), DistributionAssessor_Measure_default_constructor, cc_DistributionAssessor_Measure, ccn_DistributionAssessor_Measure, NULL, true, NULL, NULL);



/* -------------- DistributionAssessor_Relief --------------*/


POrange DistributionAssessor_Relief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistributionAssessor_Relief(), type); }


PyTypeObject PyOrDistributionAssessor_Relief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor_Relief",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDistributionAssessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor_Relief(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_Relief_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Relief> *)(ptr) = PyOrange_AsDistributionAssessor_Relief(obj); return 1; }
int ccn_func_DistributionAssessor_Relief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor_Relief> *)(ptr) = GCPtr<TDistributionAssessor_Relief>(); return 1; }      if (!PyOrDistributionAssessor_Relief_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_Relief> *)(ptr) = PyOrange_AsDistributionAssessor_Relief(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_Relief_Type (PyOrDistributionAssessor_Relief_Type_inh, typeid(TDistributionAssessor_Relief), DistributionAssessor_Relief_default_constructor, cc_DistributionAssessor_Relief, ccn_DistributionAssessor_Relief, NULL, true, NULL, NULL);



/* -------------- DistributionAssessor_m --------------*/


POrange DistributionAssessor_m_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistributionAssessor_m(), type); }


PyTypeObject PyOrDistributionAssessor_m_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor_m",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([m=])",                                          /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDistributionAssessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor_m(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_m_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_m> *)(ptr) = PyOrange_AsDistributionAssessor_m(obj); return 1; }
int ccn_func_DistributionAssessor_m(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor_m> *)(ptr) = GCPtr<TDistributionAssessor_m>(); return 1; }      if (!PyOrDistributionAssessor_m_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_m> *)(ptr) = PyOrange_AsDistributionAssessor_m(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_m_Type (PyOrDistributionAssessor_m_Type_inh, typeid(TDistributionAssessor_m), DistributionAssessor_m_default_constructor, cc_DistributionAssessor_m, ccn_DistributionAssessor_m, NULL, true, NULL, NULL);



/* -------------- DistributionAssessor_mf --------------*/


POrange DistributionAssessor_mf_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistributionAssessor_mf(), type); }


PyTypeObject PyOrDistributionAssessor_mf_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DistributionAssessor_mf",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([m=])",                                          /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDistributionAssessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistributionAssessor_mf(PyObject *obj, void *ptr) { if (!PyOrDistributionAssessor_mf_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_mf> *)(ptr) = PyOrange_AsDistributionAssessor_mf(obj); return 1; }
int ccn_func_DistributionAssessor_mf(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistributionAssessor_mf> *)(ptr) = GCPtr<TDistributionAssessor_mf>(); return 1; }      if (!PyOrDistributionAssessor_mf_Check(obj)) return 0;      *(GCPtr<TDistributionAssessor_mf> *)(ptr) = PyOrange_AsDistributionAssessor_mf(obj); return 1; }


ORANGE_API TOrangeType PyOrDistributionAssessor_mf_Type (PyOrDistributionAssessor_mf_Type_inh, typeid(TDistributionAssessor_mf), DistributionAssessor_mf_default_constructor, cc_DistributionAssessor_mf, ccn_DistributionAssessor_mf, NULL, true, NULL, NULL);



/* -------------- DomainContinuizer --------------*/

char DomainContinuizer_doc[] = "(domain[, targetClass] | examples[, weightID, targetClass]) -> domain";


TNamedConstantsDef DomainContinuizer_MultinomialTreatment_values[] = {{"LowestIsBase", 0}, {"FrequentIsBase", 1}, {"NValues", 2}, {"Ignore", 3}, {"IgnoreAllDiscrete", 4}, {"ReportError", 5}, {"AsOrdinal", 6}, {"AsNormalizedOrdinal", 7}, {0, 0}};
static PyObject *DomainContinuizer_MultinomialTreatment_repr(PyObject *self) { return stringFromList(self, DomainContinuizer_MultinomialTreatment_values); }
PyObject *DomainContinuizer_MultinomialTreatment__reduce__(PyObject *self);
PyMethodDef DomainContinuizer_MultinomialTreatment_methods[] = { {"__reduce__", (binaryfunc)DomainContinuizer_MultinomialTreatment__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyDomainContinuizer_MultinomialTreatment_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "DomainContinuizer.MultinomialTreatment", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)DomainContinuizer_MultinomialTreatment_repr, 0, 0, 0, 0, 0, (reprfunc)DomainContinuizer_MultinomialTreatment_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, DomainContinuizer_MultinomialTreatment_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyDomainContinuizer_MultinomialTreatment_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyDomainContinuizer_MultinomialTreatment_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTDomainContinuizer_MultinomialTreatment(void *l) { return PyDomainContinuizer_MultinomialTreatment_FromLong(*(int *)l); }
PyObject *DomainContinuizer_MultinomialTreatment__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "DomainContinuizer_MultinomialTreatment", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef DomainContinuizer_ClassTreatment_values[] = {{"LeaveUnlessTarget", 3}, {"ErrorIfCannotHandle", 5}, {"AsOrdinal", 6}, {0, 0}};
static PyObject *DomainContinuizer_ClassTreatment_repr(PyObject *self) { return stringFromList(self, DomainContinuizer_ClassTreatment_values); }
PyObject *DomainContinuizer_ClassTreatment__reduce__(PyObject *self);
PyMethodDef DomainContinuizer_ClassTreatment_methods[] = { {"__reduce__", (binaryfunc)DomainContinuizer_ClassTreatment__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyDomainContinuizer_ClassTreatment_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "DomainContinuizer.ClassTreatment", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)DomainContinuizer_ClassTreatment_repr, 0, 0, 0, 0, 0, (reprfunc)DomainContinuizer_ClassTreatment_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, DomainContinuizer_ClassTreatment_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyDomainContinuizer_ClassTreatment_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyDomainContinuizer_ClassTreatment_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTDomainContinuizer_ClassTreatment(void *l) { return PyDomainContinuizer_ClassTreatment_FromLong(*(int *)l); }
PyObject *DomainContinuizer_ClassTreatment__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "DomainContinuizer_ClassTreatment", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef DomainContinuizer_ContinuousTreatment_values[] = {{"Leave", 0}, {"NormalizeBySpan", 1}, {"NormalizeByVariance", 2}, {0, 0}};
static PyObject *DomainContinuizer_ContinuousTreatment_repr(PyObject *self) { return stringFromList(self, DomainContinuizer_ContinuousTreatment_values); }
PyObject *DomainContinuizer_ContinuousTreatment__reduce__(PyObject *self);
PyMethodDef DomainContinuizer_ContinuousTreatment_methods[] = { {"__reduce__", (binaryfunc)DomainContinuizer_ContinuousTreatment__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyDomainContinuizer_ContinuousTreatment_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "DomainContinuizer.ContinuousTreatment", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)DomainContinuizer_ContinuousTreatment_repr, 0, 0, 0, 0, 0, (reprfunc)DomainContinuizer_ContinuousTreatment_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, DomainContinuizer_ContinuousTreatment_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyDomainContinuizer_ContinuousTreatment_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyDomainContinuizer_ContinuousTreatment_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTDomainContinuizer_ContinuousTreatment(void *l) { return PyDomainContinuizer_ContinuousTreatment_FromLong(*(int *)l); }
PyObject *DomainContinuizer_ContinuousTreatment__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "DomainContinuizer_ContinuousTreatment", ((PyIntObject *)(self))->ob_ival); }

void DomainContinuizer_addConstants()
{ PyObject *&dict = PyOrDomainContinuizer_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Leave", PyDomainContinuizer_ContinuousTreatment_FromLong((long)(0)));
  PyDict_SetItemString(dict, "ErrorIfCannotHandle", PyDomainContinuizer_ClassTreatment_FromLong((long)(5)));
  PyDict_SetItemString(dict, "FrequentIsBase", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(1)));
  PyDict_SetItemString(dict, "NormalizeByVariance", PyDomainContinuizer_ContinuousTreatment_FromLong((long)(2)));
  PyDict_SetItemString(dict, "AsNormalizedOrdinal", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(7)));
  PyDict_SetItemString(dict, "ReportError", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(5)));
  PyDict_SetItemString(dict, "Ignore", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(3)));
  PyDict_SetItemString(dict, "NormalizeBySpan", PyDomainContinuizer_ContinuousTreatment_FromLong((long)(1)));
  PyDict_SetItemString(dict, "LowestIsBase", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(0)));
  PyDict_SetItemString(dict, "NValues", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(2)));
  PyDict_SetItemString(dict, "IgnoreAllDiscrete", PyDomainContinuizer_MultinomialTreatment_FromLong((long)(4)));
  PyDict_SetItemString(dict, "AsOrdinal", PyDomainContinuizer_ClassTreatment_FromLong((long)(6)));
  PyDict_SetItemString(dict, "LeaveUnlessTarget", PyDomainContinuizer_ClassTreatment_FromLong((long)(3)));
}

POrange DomainContinuizer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDomainContinuizer(), type); }


PyTypeObject PyOrDomainContinuizer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.continuization.DomainContinuizer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)DomainContinuizer_call,               /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(domain|examples, convertClass=, invertClass=, zeroBased=, normalizeContinuous=, baseValueSelection=) -/-> Domain", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DomainContinuizer(PyObject *obj, void *ptr) { if (!PyOrDomainContinuizer_Check(obj)) return 0;      *(GCPtr<TDomainContinuizer> *)(ptr) = PyOrange_AsDomainContinuizer(obj); return 1; }
int ccn_func_DomainContinuizer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDomainContinuizer> *)(ptr) = GCPtr<TDomainContinuizer>(); return 1; }      if (!PyOrDomainContinuizer_Check(obj)) return 0;      *(GCPtr<TDomainContinuizer> *)(ptr) = PyOrange_AsDomainContinuizer(obj); return 1; }


ORANGE_API TOrangeType PyOrDomainContinuizer_Type (PyOrDomainContinuizer_Type_inh, typeid(TDomainContinuizer), DomainContinuizer_default_constructor, cc_DomainContinuizer, ccn_DomainContinuizer, NULL, true, NULL, NULL);



/* -------------- EntropyDiscretization --------------*/


POrange EntropyDiscretization_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEntropyDiscretization(), type); }


PyTypeObject PyOrEntropyDiscretization_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.Entropy",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (attribute, examples[, weight]) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretization_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EntropyDiscretization(PyObject *obj, void *ptr) { if (!PyOrEntropyDiscretization_Check(obj)) return 0;      *(GCPtr<TEntropyDiscretization> *)(ptr) = PyOrange_AsEntropyDiscretization(obj); return 1; }
int ccn_func_EntropyDiscretization(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEntropyDiscretization> *)(ptr) = GCPtr<TEntropyDiscretization>(); return 1; }      if (!PyOrEntropyDiscretization_Check(obj)) return 0;      *(GCPtr<TEntropyDiscretization> *)(ptr) = PyOrange_AsEntropyDiscretization(obj); return 1; }


ORANGE_API TOrangeType PyOrEntropyDiscretization_Type (PyOrEntropyDiscretization_Type_inh, typeid(TEntropyDiscretization), EntropyDiscretization_default_constructor, cc_EntropyDiscretization, ccn_EntropyDiscretization, NULL, true, NULL, NULL);



/* -------------- EquiDistDiscretization --------------*/


POrange EquiDistDiscretization_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEquiDistDiscretization(), type); }


PyTypeObject PyOrEquiDistDiscretization_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.EqualWidth",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (attribute, examples[, weight, numberOfIntervals=]) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretization_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EquiDistDiscretization(PyObject *obj, void *ptr) { if (!PyOrEquiDistDiscretization_Check(obj)) return 0;      *(GCPtr<TEquiDistDiscretization> *)(ptr) = PyOrange_AsEquiDistDiscretization(obj); return 1; }
int ccn_func_EquiDistDiscretization(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEquiDistDiscretization> *)(ptr) = GCPtr<TEquiDistDiscretization>(); return 1; }      if (!PyOrEquiDistDiscretization_Check(obj)) return 0;      *(GCPtr<TEquiDistDiscretization> *)(ptr) = PyOrange_AsEquiDistDiscretization(obj); return 1; }


ORANGE_API TOrangeType PyOrEquiDistDiscretization_Type (PyOrEquiDistDiscretization_Type_inh, typeid(TEquiDistDiscretization), EquiDistDiscretization_default_constructor, cc_EquiDistDiscretization, ccn_EquiDistDiscretization, NULL, true, NULL, NULL);



/* -------------- EquiDistDiscretizer --------------*/

PyGetSetDef EquiDistDiscretizer_getset[]=  {
  {"points", (getter)EquiDistDiscretizer_get_points, NULL},
  {NULL}};


POrange EquiDistDiscretizer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEquiDistDiscretizer(), type); }


TAttributeAlias EquiDistDiscretizer_aliases[] = {
    {"firstVal", "first_cut"},
    {NULL, NULL}};

PyTypeObject PyOrEquiDistDiscretizer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.EqualWidthDiscretizer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([numberOfIntervals=, firstCut=, step=])",        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0,
  EquiDistDiscretizer_getset,                        /* tp_getset */
  (_typeobject *)&PyOrDiscretizer_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EquiDistDiscretizer(PyObject *obj, void *ptr) { if (!PyOrEquiDistDiscretizer_Check(obj)) return 0;      *(GCPtr<TEquiDistDiscretizer> *)(ptr) = PyOrange_AsEquiDistDiscretizer(obj); return 1; }
int ccn_func_EquiDistDiscretizer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEquiDistDiscretizer> *)(ptr) = GCPtr<TEquiDistDiscretizer>(); return 1; }      if (!PyOrEquiDistDiscretizer_Check(obj)) return 0;      *(GCPtr<TEquiDistDiscretizer> *)(ptr) = PyOrange_AsEquiDistDiscretizer(obj); return 1; }


ORANGE_API TOrangeType PyOrEquiDistDiscretizer_Type (PyOrEquiDistDiscretizer_Type_inh, typeid(TEquiDistDiscretizer), EquiDistDiscretizer_default_constructor, cc_EquiDistDiscretizer, ccn_EquiDistDiscretizer, NULL, true, NULL, EquiDistDiscretizer_aliases);



/* -------------- EquiNDiscretization --------------*/


POrange EquiNDiscretization_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEquiNDiscretization(), type); }


PyTypeObject PyOrEquiNDiscretization_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.EqualFreq",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (attribute, examples[, weight, numberOfIntervals=]) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretization_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EquiNDiscretization(PyObject *obj, void *ptr) { if (!PyOrEquiNDiscretization_Check(obj)) return 0;      *(GCPtr<TEquiNDiscretization> *)(ptr) = PyOrange_AsEquiNDiscretization(obj); return 1; }
int ccn_func_EquiNDiscretization(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEquiNDiscretization> *)(ptr) = GCPtr<TEquiNDiscretization>(); return 1; }      if (!PyOrEquiNDiscretization_Check(obj)) return 0;      *(GCPtr<TEquiNDiscretization> *)(ptr) = PyOrange_AsEquiNDiscretization(obj); return 1; }


ORANGE_API TOrangeType PyOrEquiNDiscretization_Type (PyOrEquiNDiscretization_Type_inh, typeid(TEquiNDiscretization), EquiNDiscretization_default_constructor, cc_EquiNDiscretization, ccn_EquiNDiscretization, NULL, true, NULL, NULL);



/* -------------- ExampleDistBySorting --------------*/


POrange ExampleDistBySorting_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExampleDistBySorting(), type); }


PyTypeObject PyOrExampleDistBySorting_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExampleDistBySorting",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, bound-attrs[, weightID]]) -/-> ExampleDistVector", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExampleDistConstructor_Type,   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleDistBySorting(PyObject *obj, void *ptr) { if (!PyOrExampleDistBySorting_Check(obj)) return 0;      *(GCPtr<TExampleDistBySorting> *)(ptr) = PyOrange_AsExampleDistBySorting(obj); return 1; }
int ccn_func_ExampleDistBySorting(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleDistBySorting> *)(ptr) = GCPtr<TExampleDistBySorting>(); return 1; }      if (!PyOrExampleDistBySorting_Check(obj)) return 0;      *(GCPtr<TExampleDistBySorting> *)(ptr) = PyOrange_AsExampleDistBySorting(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleDistBySorting_Type (PyOrExampleDistBySorting_Type_inh, typeid(TExampleDistBySorting), ExampleDistBySorting_default_constructor, cc_ExampleDistBySorting, ccn_ExampleDistBySorting, NULL, true, NULL, NULL);



/* -------------- ExampleDistConstructor --------------*/

char ExampleDistConstructor_doc[] = "(examples, bound-attrs[, weightID]) -> ExampleDistVector";

PyObject *ExampleDistConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrExampleDistConstructor_Type, type, args, kwds); }


PyTypeObject PyOrExampleDistConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExampleDistConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ExampleDistConstructor_call,          /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExampleDistConstructor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleDistConstructor(PyObject *obj, void *ptr) { if (!PyOrExampleDistConstructor_Check(obj)) return 0;      *(GCPtr<TExampleDistConstructor> *)(ptr) = PyOrange_AsExampleDistConstructor(obj); return 1; }
int ccn_func_ExampleDistConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleDistConstructor> *)(ptr) = GCPtr<TExampleDistConstructor>(); return 1; }      if (!PyOrExampleDistConstructor_Check(obj)) return 0;      *(GCPtr<TExampleDistConstructor> *)(ptr) = PyOrange_AsExampleDistConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleDistConstructor_Type (PyOrExampleDistConstructor_Type_inh, typeid(TExampleDistConstructor), 0, cc_ExampleDistConstructor, ccn_ExampleDistConstructor, NULL, false, NULL, NULL);



/* -------------- ExampleDistVector --------------*/

PyMethodDef ExampleDistVector_methods[] = {
     {"__reduce__", (binaryfunc)ExampleDistVector__reduce__, METH_NOARGS, "()"},
     {"native", (binaryfunc)ExampleDistVector_native, 0, "() -> [[[float]]] | [[{float: float}]]"},
     {NULL, NULL}
};


PyObject *ExampleDistVector_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrExampleDistVector_Type, type, args, kwds); }


PyTypeObject PyOrExampleDistVector_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExampleDistVector",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExampleDistVector_methods,                         /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExampleDistVector_abstract_constructor,   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleDistVector(PyObject *obj, void *ptr) { if (!PyOrExampleDistVector_Check(obj)) return 0;      *(GCPtr<TExampleDistVector> *)(ptr) = PyOrange_AsExampleDistVector(obj); return 1; }
int ccn_func_ExampleDistVector(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleDistVector> *)(ptr) = GCPtr<TExampleDistVector>(); return 1; }      if (!PyOrExampleDistVector_Check(obj)) return 0;      *(GCPtr<TExampleDistVector> *)(ptr) = PyOrange_AsExampleDistVector(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleDistVector_Type (PyOrExampleDistVector_Type_inh, typeid(TExampleDistVector), 0, cc_ExampleDistVector, ccn_ExampleDistVector, NULL, false, NULL, NULL);



/* -------------- FeatureByDistributions --------------*/



TNamedConstantsDef FeatureByDistributions_Completion_values[] = {{"NoCompletion", completion_no}, {"CompletionByDefault", completion_default}, {"CompletionByBayes", completion_bayes}, {0, 0}};
static PyObject *FeatureByDistributions_Completion_repr(PyObject *self) { return stringFromList(self, FeatureByDistributions_Completion_values); }
PyObject *FeatureByDistributions_Completion__reduce__(PyObject *self);
PyMethodDef FeatureByDistributions_Completion_methods[] = { {"__reduce__", (binaryfunc)FeatureByDistributions_Completion__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyFeatureByDistributions_Completion_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "FeatureByDistributions.Completion", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)FeatureByDistributions_Completion_repr, 0, 0, 0, 0, 0, (reprfunc)FeatureByDistributions_Completion_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, FeatureByDistributions_Completion_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyFeatureByDistributions_Completion_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyFeatureByDistributions_Completion_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTFeatureByDistributions_Completion(void *l) { return PyFeatureByDistributions_Completion_FromLong(*(int *)l); }
PyObject *FeatureByDistributions_Completion__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "FeatureByDistributions_Completion", ((PyIntObject *)(self))->ob_ival); }

void FeatureByDistributions_addConstants()
{ PyObject *&dict = PyOrFeatureByDistributions_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "CompletionByDefault", PyFeatureByDistributions_Completion_FromLong((long)(completion_default)));
  PyDict_SetItemString(dict, "CompletionByBayes", PyFeatureByDistributions_Completion_FromLong((long)(completion_bayes)));
  PyDict_SetItemString(dict, "NoCompletion", PyFeatureByDistributions_Completion_FromLong((long)(completion_no)));
}

POrange FeatureByDistributions_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFeatureByDistributions(), type); }


PyTypeObject PyOrFeatureByDistributions_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FeatureByDistributions",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | ([examples, bound-attrs, name], [constructExampleDist=, completion=]) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFeatureInducer_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FeatureByDistributions(PyObject *obj, void *ptr) { if (!PyOrFeatureByDistributions_Check(obj)) return 0;      *(GCPtr<TFeatureByDistributions> *)(ptr) = PyOrange_AsFeatureByDistributions(obj); return 1; }
int ccn_func_FeatureByDistributions(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFeatureByDistributions> *)(ptr) = GCPtr<TFeatureByDistributions>(); return 1; }      if (!PyOrFeatureByDistributions_Check(obj)) return 0;      *(GCPtr<TFeatureByDistributions> *)(ptr) = PyOrange_AsFeatureByDistributions(obj); return 1; }


ORANGE_API TOrangeType PyOrFeatureByDistributions_Type (PyOrFeatureByDistributions_Type_inh, typeid(TFeatureByDistributions), FeatureByDistributions_default_constructor, cc_FeatureByDistributions, ccn_FeatureByDistributions, NULL, true, NULL, NULL);



/* -------------- FeatureByIM --------------*/



TNamedConstantsDef FeatureByIM_Completion_values[] = {{"NoCompletion", completion_no}, {"CompletionByDefault", completion_default}, {"CompletionByBayes", completion_bayes}, {0, 0}};
static PyObject *FeatureByIM_Completion_repr(PyObject *self) { return stringFromList(self, FeatureByIM_Completion_values); }
PyObject *FeatureByIM_Completion__reduce__(PyObject *self);
PyMethodDef FeatureByIM_Completion_methods[] = { {"__reduce__", (binaryfunc)FeatureByIM_Completion__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyFeatureByIM_Completion_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "FeatureByIM.Completion", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)FeatureByIM_Completion_repr, 0, 0, 0, 0, 0, (reprfunc)FeatureByIM_Completion_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, FeatureByIM_Completion_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyFeatureByIM_Completion_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyFeatureByIM_Completion_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTFeatureByIM_Completion(void *l) { return PyFeatureByIM_Completion_FromLong(*(int *)l); }
PyObject *FeatureByIM_Completion__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "FeatureByIM_Completion", ((PyIntObject *)(self))->ob_ival); }

void FeatureByIM_addConstants()
{ PyObject *&dict = PyOrFeatureByIM_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "CompletionByDefault", PyFeatureByIM_Completion_FromLong((long)(completion_default)));
  PyDict_SetItemString(dict, "CompletionByBayes", PyFeatureByIM_Completion_FromLong((long)(completion_bayes)));
  PyDict_SetItemString(dict, "NoCompletion", PyFeatureByIM_Completion_FromLong((long)(completion_no)));
}

POrange FeatureByIM_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFeatureByIM(), type); }


PyTypeObject PyOrFeatureByIM_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FeatureByIM",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, bound-attrs, name] [constructIM=, classifierFromIM=]) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFeatureInducer_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FeatureByIM(PyObject *obj, void *ptr) { if (!PyOrFeatureByIM_Check(obj)) return 0;      *(GCPtr<TFeatureByIM> *)(ptr) = PyOrange_AsFeatureByIM(obj); return 1; }
int ccn_func_FeatureByIM(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFeatureByIM> *)(ptr) = GCPtr<TFeatureByIM>(); return 1; }      if (!PyOrFeatureByIM_Check(obj)) return 0;      *(GCPtr<TFeatureByIM> *)(ptr) = PyOrange_AsFeatureByIM(obj); return 1; }


ORANGE_API TOrangeType PyOrFeatureByIM_Type (PyOrFeatureByIM_Type_inh, typeid(TFeatureByIM), FeatureByIM_default_constructor, cc_FeatureByIM, ccn_FeatureByIM, NULL, true, NULL, NULL);



/* -------------- FeatureByMinComplexity --------------*/



TNamedConstantsDef FeatureByMinComplexity_Completion_values[] = {{"NoCompletion", completion_no}, {"CompletionByDefault", completion_default}, {"CompletionByBayes", completion_bayes}, {0, 0}};
static PyObject *FeatureByMinComplexity_Completion_repr(PyObject *self) { return stringFromList(self, FeatureByMinComplexity_Completion_values); }
PyObject *FeatureByMinComplexity_Completion__reduce__(PyObject *self);
PyMethodDef FeatureByMinComplexity_Completion_methods[] = { {"__reduce__", (binaryfunc)FeatureByMinComplexity_Completion__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyFeatureByMinComplexity_Completion_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "FeatureByMinComplexity.Completion", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)FeatureByMinComplexity_Completion_repr, 0, 0, 0, 0, 0, (reprfunc)FeatureByMinComplexity_Completion_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, FeatureByMinComplexity_Completion_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyFeatureByMinComplexity_Completion_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyFeatureByMinComplexity_Completion_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTFeatureByMinComplexity_Completion(void *l) { return PyFeatureByMinComplexity_Completion_FromLong(*(int *)l); }
PyObject *FeatureByMinComplexity_Completion__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "FeatureByMinComplexity_Completion", ((PyIntObject *)(self))->ob_ival); }

void FeatureByMinComplexity_addConstants()
{ PyObject *&dict = PyOrFeatureByMinComplexity_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "CompletionByDefault", PyFeatureByMinComplexity_Completion_FromLong((long)(completion_default)));
  PyDict_SetItemString(dict, "CompletionByBayes", PyFeatureByMinComplexity_Completion_FromLong((long)(completion_bayes)));
  PyDict_SetItemString(dict, "NoCompletion", PyFeatureByMinComplexity_Completion_FromLong((long)(completion_no)));
}

POrange FeatureByMinComplexity_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFeatureByMinComplexity(), type); }


PyTypeObject PyOrFeatureByMinComplexity_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FeatureByMinComplexity",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, bound-attrs, name] [IGConstructor=, classifierFromIG=) -/-> Variable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFeatureInducer_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FeatureByMinComplexity(PyObject *obj, void *ptr) { if (!PyOrFeatureByMinComplexity_Check(obj)) return 0;      *(GCPtr<TFeatureByMinComplexity> *)(ptr) = PyOrange_AsFeatureByMinComplexity(obj); return 1; }
int ccn_func_FeatureByMinComplexity(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFeatureByMinComplexity> *)(ptr) = GCPtr<TFeatureByMinComplexity>(); return 1; }      if (!PyOrFeatureByMinComplexity_Check(obj)) return 0;      *(GCPtr<TFeatureByMinComplexity> *)(ptr) = PyOrange_AsFeatureByMinComplexity(obj); return 1; }


ORANGE_API TOrangeType PyOrFeatureByMinComplexity_Type (PyOrFeatureByMinComplexity_Type_inh, typeid(TFeatureByMinComplexity), FeatureByMinComplexity_default_constructor, cc_FeatureByMinComplexity, ccn_FeatureByMinComplexity, NULL, true, NULL, NULL);



/* -------------- FeatureInducer --------------*/

char FeatureInducer_doc[] = "(examples, bound-attrs, new-name, weightID) -> (Variable, float)";

PyObject *FeatureInducer_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrFeatureInducer_Type, type, args, kwds); }


PyTypeObject PyOrFeatureInducer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FeatureInducer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)FeatureInducer_call,                  /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FeatureInducer_abstract_constructor,      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FeatureInducer(PyObject *obj, void *ptr) { if (!PyOrFeatureInducer_Check(obj)) return 0;      *(GCPtr<TFeatureInducer> *)(ptr) = PyOrange_AsFeatureInducer(obj); return 1; }
int ccn_func_FeatureInducer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFeatureInducer> *)(ptr) = GCPtr<TFeatureInducer>(); return 1; }      if (!PyOrFeatureInducer_Check(obj)) return 0;      *(GCPtr<TFeatureInducer> *)(ptr) = PyOrange_AsFeatureInducer(obj); return 1; }


ORANGE_API TOrangeType PyOrFeatureInducer_Type (PyOrFeatureInducer_Type_inh, typeid(TFeatureInducer), 0, cc_FeatureInducer, ccn_FeatureInducer, NULL, false, NULL, NULL);



/* -------------- IG --------------*/

PyMethodDef IG_methods[] = {
     {"__reduce__", (binaryfunc)IG__reduce__, METH_NOARGS, "()"},
     {"complete", (binaryfunc)IG_complete, 0, "() -> None"},
     {"make0or1", (binaryfunc)IG_make0or1, 0, "() -> None"},
     {"native", (binaryfunc)IG_native, 0, "() -> [(Example, [incompatibility-float], [compatibility-float])]"},
     {"normalize", (binaryfunc)IG_normalize, 0, "() -> None"},
     {"remove_empty", (binaryfunc)IG_removeEmpty, 0, "() -> None"},
     {NULL, NULL}
};



PyTypeObject PyOrIG_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IG",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<see the manual>",                                /* tp_doc */
  0, 0, 0, 0, 0, 0,
  IG_methods,                                        /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IG_new,                                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IG(PyObject *obj, void *ptr) { if (!PyOrIG_Check(obj)) return 0;      *(GCPtr<TIG> *)(ptr) = PyOrange_AsIG(obj); return 1; }
int ccn_func_IG(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIG> *)(ptr) = GCPtr<TIG>(); return 1; }      if (!PyOrIG_Check(obj)) return 0;      *(GCPtr<TIG> *)(ptr) = PyOrange_AsIG(obj); return 1; }


ORANGE_API TOrangeType PyOrIG_Type (PyOrIG_Type_inh, typeid(TIG), 0, cc_IG, ccn_IG, NULL, false, NULL, NULL);



/* -------------- IGBySorting --------------*/


POrange IGBySorting_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIGBySorting(), type); }


PyTypeObject PyOrIGBySorting_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IGBySorting",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, bound-attrs]) -/-> IG",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIGConstructor_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IGBySorting(PyObject *obj, void *ptr) { if (!PyOrIGBySorting_Check(obj)) return 0;      *(GCPtr<TIGBySorting> *)(ptr) = PyOrange_AsIGBySorting(obj); return 1; }
int ccn_func_IGBySorting(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIGBySorting> *)(ptr) = GCPtr<TIGBySorting>(); return 1; }      if (!PyOrIGBySorting_Check(obj)) return 0;      *(GCPtr<TIGBySorting> *)(ptr) = PyOrange_AsIGBySorting(obj); return 1; }


ORANGE_API TOrangeType PyOrIGBySorting_Type (PyOrIGBySorting_Type_inh, typeid(TIGBySorting), IGBySorting_default_constructor, cc_IGBySorting, ccn_IGBySorting, NULL, true, NULL, NULL);



/* -------------- IGConstructor --------------*/

char IGConstructor_doc[] = "(examples, bound-attrs) -> IG";

PyObject *IGConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrIGConstructor_Type, type, args, kwds); }


PyTypeObject PyOrIGConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IGConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)IGConstructor_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IGConstructor_abstract_constructor,       /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IGConstructor(PyObject *obj, void *ptr) { if (!PyOrIGConstructor_Check(obj)) return 0;      *(GCPtr<TIGConstructor> *)(ptr) = PyOrange_AsIGConstructor(obj); return 1; }
int ccn_func_IGConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIGConstructor> *)(ptr) = GCPtr<TIGConstructor>(); return 1; }      if (!PyOrIGConstructor_Check(obj)) return 0;      *(GCPtr<TIGConstructor> *)(ptr) = PyOrange_AsIGConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrIGConstructor_Type (PyOrIGConstructor_Type_inh, typeid(TIGConstructor), 0, cc_IGConstructor, ccn_IGConstructor, NULL, false, NULL, NULL);



/* -------------- IM --------------*/

PyMethodDef IM_methods[] = {
     {"__reduce__", (binaryfunc)IM__reduce__, METH_NOARGS, "()"},
     {"fuzzy", (binaryfunc)IM_fuzzy, 0, "() -> boolean"},
     {"native", (binaryfunc)IM_native, 0, "() -> [[index, quality, distribution, c]] | [[index, quality, sum, sum2, N]]"},
     {NULL, NULL}
};



PyTypeObject PyOrIM_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IM",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<see the manual>",                                /* tp_doc */
  0, 0, 0, 0, 0, 0,
  IM_methods,                                        /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IM_new,                                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IM(PyObject *obj, void *ptr) { if (!PyOrIM_Check(obj)) return 0;      *(GCPtr<TIM> *)(ptr) = PyOrange_AsIM(obj); return 1; }
int ccn_func_IM(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIM> *)(ptr) = GCPtr<TIM>(); return 1; }      if (!PyOrIM_Check(obj)) return 0;      *(GCPtr<TIM> *)(ptr) = PyOrange_AsIM(obj); return 1; }


ORANGE_API TOrangeType PyOrIM_Type (PyOrIM_Type_inh, typeid(TIM), 0, cc_IM, ccn_IM, NULL, false, NULL, NULL);



/* -------------- IMBlurer --------------*/


POrange IMBlurer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMBlurer(), type); }


PyTypeObject PyOrIMBlurer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMBlurer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([IMByRows]) -> None",                            /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIMByRowsPreprocessor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMBlurer(PyObject *obj, void *ptr) { if (!PyOrIMBlurer_Check(obj)) return 0;      *(GCPtr<TIMBlurer> *)(ptr) = PyOrange_AsIMBlurer(obj); return 1; }
int ccn_func_IMBlurer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMBlurer> *)(ptr) = GCPtr<TIMBlurer>(); return 1; }      if (!PyOrIMBlurer_Check(obj)) return 0;      *(GCPtr<TIMBlurer> *)(ptr) = PyOrange_AsIMBlurer(obj); return 1; }


ORANGE_API TOrangeType PyOrIMBlurer_Type (PyOrIMBlurer_Type_inh, typeid(TIMBlurer), IMBlurer_default_constructor, cc_IMBlurer, ccn_IMBlurer, NULL, true, NULL, NULL);



/* -------------- IMByIMByRows --------------*/


POrange IMByIMByRows_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMByIMByRows(), type); }


PyTypeObject PyOrIMByIMByRows_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByIMByRows",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (examples, bound-attrs[[, free-attrs], weightID]) -/-> IM", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIMConstructor_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByIMByRows(PyObject *obj, void *ptr) { if (!PyOrIMByIMByRows_Check(obj)) return 0;      *(GCPtr<TIMByIMByRows> *)(ptr) = PyOrange_AsIMByIMByRows(obj); return 1; }
int ccn_func_IMByIMByRows(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByIMByRows> *)(ptr) = GCPtr<TIMByIMByRows>(); return 1; }      if (!PyOrIMByIMByRows_Check(obj)) return 0;      *(GCPtr<TIMByIMByRows> *)(ptr) = PyOrange_AsIMByIMByRows(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByIMByRows_Type (PyOrIMByIMByRows_Type_inh, typeid(TIMByIMByRows), IMByIMByRows_default_constructor, cc_IMByIMByRows, ccn_IMByIMByRows, NULL, true, NULL, NULL);



/* -------------- IMByRelief --------------*/


POrange IMByRelief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMByRelief(), type); }


PyTypeObject PyOrIMByRelief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByRelief",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (examples, bound-attrs[[, free-attrs], weightID]) -/-> IM", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIMConstructor_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByRelief(PyObject *obj, void *ptr) { if (!PyOrIMByRelief_Check(obj)) return 0;      *(GCPtr<TIMByRelief> *)(ptr) = PyOrange_AsIMByRelief(obj); return 1; }
int ccn_func_IMByRelief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByRelief> *)(ptr) = GCPtr<TIMByRelief>(); return 1; }      if (!PyOrIMByRelief_Check(obj)) return 0;      *(GCPtr<TIMByRelief> *)(ptr) = PyOrange_AsIMByRelief(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByRelief_Type (PyOrIMByRelief_Type_inh, typeid(TIMByRelief), IMByRelief_default_constructor, cc_IMByRelief, ccn_IMByRelief, NULL, true, NULL, NULL);



/* -------------- IMByRows --------------*/

PyMethodDef IMByRows_methods[] = {
     {"__reduce__", (binaryfunc)yieldNoPickleError, METH_NOARGS},
     {"native", (binaryfunc)IMByRows_native, 0, "() -> [example, [distributions]]"},
     {NULL, NULL}
};

PyGetSetDef IMByRows_getset[]=  {
  {"column_examples", (getter)IMByRows_get_columnExamples, NULL, "Values of bound attributes for each column"},
  {NULL}};


PyObject *IMByRows_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrIMByRows_Type, type, args, kwds); }


PyTypeObject PyOrIMByRows_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByRows",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  IMByRows_methods,                                  /* tp_methods */
  0,
  IMByRows_getset,                                   /* tp_getset */
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IMByRows_abstract_constructor,            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByRows(PyObject *obj, void *ptr) { if (!PyOrIMByRows_Check(obj)) return 0;      *(GCPtr<TIMByRows> *)(ptr) = PyOrange_AsIMByRows(obj); return 1; }
int ccn_func_IMByRows(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByRows> *)(ptr) = GCPtr<TIMByRows>(); return 1; }      if (!PyOrIMByRows_Check(obj)) return 0;      *(GCPtr<TIMByRows> *)(ptr) = PyOrange_AsIMByRows(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByRows_Type (PyOrIMByRows_Type_inh, typeid(TIMByRows), 0, cc_IMByRows, ccn_IMByRows, NULL, false, NULL, NULL);



/* -------------- IMByRowsByRelief --------------*/


POrange IMByRowsByRelief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMByRowsByRelief(), type); }


PyTypeObject PyOrIMByRowsByRelief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByRowsByRelief",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (examples, bound-attrs[[, free-attrs], weightID]) -/-> IMByRows", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIMByRowsConstructor_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByRowsByRelief(PyObject *obj, void *ptr) { if (!PyOrIMByRowsByRelief_Check(obj)) return 0;      *(GCPtr<TIMByRowsByRelief> *)(ptr) = PyOrange_AsIMByRowsByRelief(obj); return 1; }
int ccn_func_IMByRowsByRelief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByRowsByRelief> *)(ptr) = GCPtr<TIMByRowsByRelief>(); return 1; }      if (!PyOrIMByRowsByRelief_Check(obj)) return 0;      *(GCPtr<TIMByRowsByRelief> *)(ptr) = PyOrange_AsIMByRowsByRelief(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByRowsByRelief_Type (PyOrIMByRowsByRelief_Type_inh, typeid(TIMByRowsByRelief), IMByRowsByRelief_default_constructor, cc_IMByRowsByRelief, ccn_IMByRowsByRelief, NULL, true, NULL, NULL);



/* -------------- IMByRowsBySorting --------------*/


POrange IMByRowsBySorting_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMByRowsBySorting(), type); }


PyTypeObject PyOrIMByRowsBySorting_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByRowsBySorting",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (examples, bound-attrs[[, free-attrs], weightID]) -/-> IMByRows", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIMByRowsConstructor_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByRowsBySorting(PyObject *obj, void *ptr) { if (!PyOrIMByRowsBySorting_Check(obj)) return 0;      *(GCPtr<TIMByRowsBySorting> *)(ptr) = PyOrange_AsIMByRowsBySorting(obj); return 1; }
int ccn_func_IMByRowsBySorting(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByRowsBySorting> *)(ptr) = GCPtr<TIMByRowsBySorting>(); return 1; }      if (!PyOrIMByRowsBySorting_Check(obj)) return 0;      *(GCPtr<TIMByRowsBySorting> *)(ptr) = PyOrange_AsIMByRowsBySorting(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByRowsBySorting_Type (PyOrIMByRowsBySorting_Type_inh, typeid(TIMByRowsBySorting), IMByRowsBySorting_default_constructor, cc_IMByRowsBySorting, ccn_IMByRowsBySorting, NULL, true, NULL, NULL);



/* -------------- IMByRowsConstructor --------------*/

char IMByRowsConstructor_doc[] = "(example, bound-attrs[, weightID]) -> IM";

PyObject *IMByRowsConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrIMByRowsConstructor_Type, type, args, kwds); }


PyTypeObject PyOrIMByRowsConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByRowsConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)IMByRowsConstructor_call,             /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IMByRowsConstructor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByRowsConstructor(PyObject *obj, void *ptr) { if (!PyOrIMByRowsConstructor_Check(obj)) return 0;      *(GCPtr<TIMByRowsConstructor> *)(ptr) = PyOrange_AsIMByRowsConstructor(obj); return 1; }
int ccn_func_IMByRowsConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByRowsConstructor> *)(ptr) = GCPtr<TIMByRowsConstructor>(); return 1; }      if (!PyOrIMByRowsConstructor_Check(obj)) return 0;      *(GCPtr<TIMByRowsConstructor> *)(ptr) = PyOrange_AsIMByRowsConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByRowsConstructor_Type (PyOrIMByRowsConstructor_Type_inh, typeid(TIMByRowsConstructor), 0, cc_IMByRowsConstructor, ccn_IMByRowsConstructor, NULL, false, NULL, NULL);



/* -------------- IMByRowsPreprocessor --------------*/

char IMByRowsPreprocessor_doc[] = "(IMByRows) -> None";

PyObject *IMByRowsPreprocessor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrIMByRowsPreprocessor_Type, type, args, kwds); }


PyTypeObject PyOrIMByRowsPreprocessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMByRowsPreprocessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)IMByRowsPreprocessor_call,            /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IMByRowsPreprocessor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMByRowsPreprocessor(PyObject *obj, void *ptr) { if (!PyOrIMByRowsPreprocessor_Check(obj)) return 0;      *(GCPtr<TIMByRowsPreprocessor> *)(ptr) = PyOrange_AsIMByRowsPreprocessor(obj); return 1; }
int ccn_func_IMByRowsPreprocessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMByRowsPreprocessor> *)(ptr) = GCPtr<TIMByRowsPreprocessor>(); return 1; }      if (!PyOrIMByRowsPreprocessor_Check(obj)) return 0;      *(GCPtr<TIMByRowsPreprocessor> *)(ptr) = PyOrange_AsIMByRowsPreprocessor(obj); return 1; }


ORANGE_API TOrangeType PyOrIMByRowsPreprocessor_Type (PyOrIMByRowsPreprocessor_Type_inh, typeid(TIMByRowsPreprocessor), 0, cc_IMByRowsPreprocessor, ccn_IMByRowsPreprocessor, NULL, false, NULL, NULL);



/* -------------- IMBySorting --------------*/


POrange IMBySorting_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMBySorting(), type); }


PyTypeObject PyOrIMBySorting_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMBySorting",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() | (examples, bound-attrs[[, free-attrs], weightID]) -/-> IM", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrIMConstructor_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMBySorting(PyObject *obj, void *ptr) { if (!PyOrIMBySorting_Check(obj)) return 0;      *(GCPtr<TIMBySorting> *)(ptr) = PyOrange_AsIMBySorting(obj); return 1; }
int ccn_func_IMBySorting(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMBySorting> *)(ptr) = GCPtr<TIMBySorting>(); return 1; }      if (!PyOrIMBySorting_Check(obj)) return 0;      *(GCPtr<TIMBySorting> *)(ptr) = PyOrange_AsIMBySorting(obj); return 1; }


ORANGE_API TOrangeType PyOrIMBySorting_Type (PyOrIMBySorting_Type_inh, typeid(TIMBySorting), IMBySorting_default_constructor, cc_IMBySorting, ccn_IMBySorting, NULL, true, NULL, NULL);



/* -------------- IMClustering --------------*/


POrange IMClustering_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIMClustering(), type); }


PyTypeObject PyOrIMClustering_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMClustering",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([im= clusters=, maxCluster=])",                  /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMClustering(PyObject *obj, void *ptr) { if (!PyOrIMClustering_Check(obj)) return 0;      *(GCPtr<TIMClustering> *)(ptr) = PyOrange_AsIMClustering(obj); return 1; }
int ccn_func_IMClustering(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMClustering> *)(ptr) = GCPtr<TIMClustering>(); return 1; }      if (!PyOrIMClustering_Check(obj)) return 0;      *(GCPtr<TIMClustering> *)(ptr) = PyOrange_AsIMClustering(obj); return 1; }


ORANGE_API TOrangeType PyOrIMClustering_Type (PyOrIMClustering_Type_inh, typeid(TIMClustering), IMClustering_default_constructor, cc_IMClustering, ccn_IMClustering, NULL, true, NULL, NULL);



/* -------------- IMConstructor --------------*/

char IMConstructor_doc[] = "(example, bound-attrs[, weightID]) -> IM";

PyObject *IMConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrIMConstructor_Type, type, args, kwds); }


PyTypeObject PyOrIMConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.IMConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)IMConstructor_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)IMConstructor_abstract_constructor,       /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IMConstructor(PyObject *obj, void *ptr) { if (!PyOrIMConstructor_Check(obj)) return 0;      *(GCPtr<TIMConstructor> *)(ptr) = PyOrange_AsIMConstructor(obj); return 1; }
int ccn_func_IMConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIMConstructor> *)(ptr) = GCPtr<TIMConstructor>(); return 1; }      if (!PyOrIMConstructor_Check(obj)) return 0;      *(GCPtr<TIMConstructor> *)(ptr) = PyOrange_AsIMConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrIMConstructor_Type (PyOrIMConstructor_Type_inh, typeid(TIMConstructor), 0, cc_IMConstructor, ccn_IMConstructor, NULL, false, NULL, NULL);



/* -------------- ImputeClassifier --------------*/


POrange ImputeClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputeClassifier(), type); }


PyTypeObject PyOrImputeClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ImputeClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([classifierFromVar=][imputer=])",                /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputeClassifier(PyObject *obj, void *ptr) { if (!PyOrImputeClassifier_Check(obj)) return 0;      *(GCPtr<TImputeClassifier> *)(ptr) = PyOrange_AsImputeClassifier(obj); return 1; }
int ccn_func_ImputeClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputeClassifier> *)(ptr) = GCPtr<TImputeClassifier>(); return 1; }      if (!PyOrImputeClassifier_Check(obj)) return 0;      *(GCPtr<TImputeClassifier> *)(ptr) = PyOrange_AsImputeClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrImputeClassifier_Type (PyOrImputeClassifier_Type_inh, typeid(TImputeClassifier), ImputeClassifier_default_constructor, cc_ImputeClassifier, ccn_ImputeClassifier, NULL, true, NULL, NULL);



/* -------------- IntervalDiscretizer --------------*/


POrange IntervalDiscretizer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TIntervalDiscretizer(), type); }


PyTypeObject PyOrIntervalDiscretizer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.IntervalDiscretizer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([points=])",                                     /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretizer_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_IntervalDiscretizer(PyObject *obj, void *ptr) { if (!PyOrIntervalDiscretizer_Check(obj)) return 0;      *(GCPtr<TIntervalDiscretizer> *)(ptr) = PyOrange_AsIntervalDiscretizer(obj); return 1; }
int ccn_func_IntervalDiscretizer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TIntervalDiscretizer> *)(ptr) = GCPtr<TIntervalDiscretizer>(); return 1; }      if (!PyOrIntervalDiscretizer_Check(obj)) return 0;      *(GCPtr<TIntervalDiscretizer> *)(ptr) = PyOrange_AsIntervalDiscretizer(obj); return 1; }


ORANGE_API TOrangeType PyOrIntervalDiscretizer_Type (PyOrIntervalDiscretizer_Type_inh, typeid(TIntervalDiscretizer), IntervalDiscretizer_default_constructor, cc_IntervalDiscretizer, ccn_IntervalDiscretizer, NULL, true, NULL, NULL);



/* -------------- MapIntValue --------------*/


POrange MapIntValue_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMapIntValue(), type); }


PyTypeObject PyOrMapIntValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.MapIntValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([mapping=])",                                    /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTransformValue_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MapIntValue(PyObject *obj, void *ptr) { if (!PyOrMapIntValue_Check(obj)) return 0;      *(GCPtr<TMapIntValue> *)(ptr) = PyOrange_AsMapIntValue(obj); return 1; }
int ccn_func_MapIntValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMapIntValue> *)(ptr) = GCPtr<TMapIntValue>(); return 1; }      if (!PyOrMapIntValue_Check(obj)) return 0;      *(GCPtr<TMapIntValue> *)(ptr) = PyOrange_AsMapIntValue(obj); return 1; }


ORANGE_API TOrangeType PyOrMapIntValue_Type (PyOrMapIntValue_Type_inh, typeid(TMapIntValue), MapIntValue_default_constructor, cc_MapIntValue, ccn_MapIntValue, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_IM --------------*/


POrange MeasureAttribute_IM_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_IM(), type); }


PyTypeObject PyOrMeasureAttribute_IM_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.MeasureAttribute_IM",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(constructIM=, columnAssessor=) | (attr, examples[, apriori] [,weightID]) -/-> (float, meas-type)", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttribute_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_IM(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_IM_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_IM> *)(ptr) = PyOrange_AsMeasureAttribute_IM(obj); return 1; }
int ccn_func_MeasureAttribute_IM(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_IM> *)(ptr) = GCPtr<TMeasureAttribute_IM>(); return 1; }      if (!PyOrMeasureAttribute_IM_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_IM> *)(ptr) = PyOrange_AsMeasureAttribute_IM(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_IM_Type (PyOrMeasureAttribute_IM_Type_inh, typeid(TMeasureAttribute_IM), MeasureAttribute_IM_default_constructor, cc_MeasureAttribute_IM, ccn_MeasureAttribute_IM, NULL, true, NULL, NULL);



/* -------------- NormalizeContinuous --------------*/


POrange NormalizeContinuous_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TNormalizeContinuous(), type); }


PyTypeObject PyOrNormalizeContinuous_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.NormalizeContinuous",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([average=, span=])",                             /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTransformValue_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_NormalizeContinuous(PyObject *obj, void *ptr) { if (!PyOrNormalizeContinuous_Check(obj)) return 0;      *(GCPtr<TNormalizeContinuous> *)(ptr) = PyOrange_AsNormalizeContinuous(obj); return 1; }
int ccn_func_NormalizeContinuous(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TNormalizeContinuous> *)(ptr) = GCPtr<TNormalizeContinuous>(); return 1; }      if (!PyOrNormalizeContinuous_Check(obj)) return 0;      *(GCPtr<TNormalizeContinuous> *)(ptr) = PyOrange_AsNormalizeContinuous(obj); return 1; }


ORANGE_API TOrangeType PyOrNormalizeContinuous_Type (PyOrNormalizeContinuous_Type_inh, typeid(TNormalizeContinuous), NormalizeContinuous_default_constructor, cc_NormalizeContinuous, ccn_NormalizeContinuous, NULL, true, NULL, NULL);



/* -------------- Ordinal2Continuous --------------*/


POrange Ordinal2Continuous_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TOrdinal2Continuous(), type); }


PyTypeObject PyOrOrdinal2Continuous_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Ordinal2Continuous",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([nvalues=])",                                    /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTransformValue_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Ordinal2Continuous(PyObject *obj, void *ptr) { if (!PyOrOrdinal2Continuous_Check(obj)) return 0;      *(GCPtr<TOrdinal2Continuous> *)(ptr) = PyOrange_AsOrdinal2Continuous(obj); return 1; }
int ccn_func_Ordinal2Continuous(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TOrdinal2Continuous> *)(ptr) = GCPtr<TOrdinal2Continuous>(); return 1; }      if (!PyOrOrdinal2Continuous_Check(obj)) return 0;      *(GCPtr<TOrdinal2Continuous> *)(ptr) = PyOrange_AsOrdinal2Continuous(obj); return 1; }


ORANGE_API TOrangeType PyOrOrdinal2Continuous_Type (PyOrOrdinal2Continuous_Type_inh, typeid(TOrdinal2Continuous), Ordinal2Continuous_default_constructor, cc_Ordinal2Continuous, ccn_Ordinal2Continuous, NULL, true, NULL, NULL);



/* -------------- Preprocessor --------------*/

PyMethodDef Preprocessor_methods[] = {
     {"selection_vector", (binaryfunc)Preprocessor_selectionVector, METH_VARARGS, "(examples[, weightID])"},
     {NULL, NULL}
};

char Preprocessor_doc[] = "(examples[, weightID]) -> ExampleTable";

PyObject *Preprocessor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrPreprocessor_Type, type, args, kwds); }


PyTypeObject PyOrPreprocessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Preprocessor_call,                    /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Preprocessor_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Preprocessor_abstract_constructor,        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_Check(obj)) return 0;      *(GCPtr<TPreprocessor> *)(ptr) = PyOrange_AsPreprocessor(obj); return 1; }
int ccn_func_Preprocessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor> *)(ptr) = GCPtr<TPreprocessor>(); return 1; }      if (!PyOrPreprocessor_Check(obj)) return 0;      *(GCPtr<TPreprocessor> *)(ptr) = PyOrange_AsPreprocessor(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_Type (PyOrPreprocessor_Type_inh, typeid(TPreprocessor), 0, cc_Preprocessor, ccn_Preprocessor, NULL, false, NULL, NULL);



/* -------------- Preprocessor_addCensorWeight --------------*/



TNamedConstantsDef Preprocessor_addCensorWeight_Method_values[] = {{"Linear", TPreprocessor_addCensorWeight::linear}, {"KM", TPreprocessor_addCensorWeight::km}, {"Bayes", TPreprocessor_addCensorWeight::bayes}, {0, 0}};
static PyObject *Preprocessor_addCensorWeight_Method_repr(PyObject *self) { return stringFromList(self, Preprocessor_addCensorWeight_Method_values); }
PyObject *Preprocessor_addCensorWeight_Method__reduce__(PyObject *self);
PyMethodDef Preprocessor_addCensorWeight_Method_methods[] = { {"__reduce__", (binaryfunc)Preprocessor_addCensorWeight_Method__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyPreprocessor_addCensorWeight_Method_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "Preprocessor_addCensorWeight.Method", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)Preprocessor_addCensorWeight_Method_repr, 0, 0, 0, 0, 0, (reprfunc)Preprocessor_addCensorWeight_Method_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, Preprocessor_addCensorWeight_Method_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyPreprocessor_addCensorWeight_Method_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyPreprocessor_addCensorWeight_Method_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTPreprocessor_addCensorWeight_Method(void *l) { return PyPreprocessor_addCensorWeight_Method_FromLong(*(int *)l); }
PyObject *Preprocessor_addCensorWeight_Method__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "Preprocessor_addCensorWeight_Method", ((PyIntObject *)(self))->ob_ival); }

void Preprocessor_addCensorWeight_addConstants()
{ PyObject *&dict = PyOrPreprocessor_addCensorWeight_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Linear", PyPreprocessor_addCensorWeight_Method_FromLong((long)(TPreprocessor_addCensorWeight::linear)));
  PyDict_SetItemString(dict, "KM", PyPreprocessor_addCensorWeight_Method_FromLong((long)(TPreprocessor_addCensorWeight::km)));
  PyDict_SetItemString(dict, "Bayes", PyPreprocessor_addCensorWeight_Method_FromLong((long)(TPreprocessor_addCensorWeight::bayes)));
}

POrange Preprocessor_addCensorWeight_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addCensorWeight(), type); }


PyTypeObject PyOrPreprocessor_addCensorWeight_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addCensorWeight",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [method=0-km, 1-nmr, 2-linear, outcomeVar=, eventValue=, timeID=, maxTime=]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addCensorWeight(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addCensorWeight_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addCensorWeight> *)(ptr) = PyOrange_AsPreprocessor_addCensorWeight(obj); return 1; }
int ccn_func_Preprocessor_addCensorWeight(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addCensorWeight> *)(ptr) = GCPtr<TPreprocessor_addCensorWeight>(); return 1; }      if (!PyOrPreprocessor_addCensorWeight_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addCensorWeight> *)(ptr) = PyOrange_AsPreprocessor_addCensorWeight(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addCensorWeight_Type (PyOrPreprocessor_addCensorWeight_Type_inh, typeid(TPreprocessor_addCensorWeight), Preprocessor_addCensorWeight_default_constructor, cc_Preprocessor_addCensorWeight, ccn_Preprocessor_addCensorWeight, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addClassNoise --------------*/


POrange Preprocessor_addClassNoise_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addClassNoise(), type); }


PyTypeObject PyOrPreprocessor_addClassNoise_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addClassNoise",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [proportion=<float>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addClassNoise(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addClassNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addClassNoise> *)(ptr) = PyOrange_AsPreprocessor_addClassNoise(obj); return 1; }
int ccn_func_Preprocessor_addClassNoise(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addClassNoise> *)(ptr) = GCPtr<TPreprocessor_addClassNoise>(); return 1; }      if (!PyOrPreprocessor_addClassNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addClassNoise> *)(ptr) = PyOrange_AsPreprocessor_addClassNoise(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addClassNoise_Type (PyOrPreprocessor_addClassNoise_Type_inh, typeid(TPreprocessor_addClassNoise), Preprocessor_addClassNoise_default_constructor, cc_Preprocessor_addClassNoise, ccn_Preprocessor_addClassNoise, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addClassWeight --------------*/


POrange Preprocessor_addClassWeight_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addClassWeight(), type); }


PyTypeObject PyOrPreprocessor_addClassWeight_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addClassWeight",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [equalize=, classWeights=) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addClassWeight(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addClassWeight_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addClassWeight> *)(ptr) = PyOrange_AsPreprocessor_addClassWeight(obj); return 1; }
int ccn_func_Preprocessor_addClassWeight(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addClassWeight> *)(ptr) = GCPtr<TPreprocessor_addClassWeight>(); return 1; }      if (!PyOrPreprocessor_addClassWeight_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addClassWeight> *)(ptr) = PyOrange_AsPreprocessor_addClassWeight(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addClassWeight_Type (PyOrPreprocessor_addClassWeight_Type_inh, typeid(TPreprocessor_addClassWeight), Preprocessor_addClassWeight_default_constructor, cc_Preprocessor_addClassWeight, ccn_Preprocessor_addClassWeight, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addGaussianClassNoise --------------*/


POrange Preprocessor_addGaussianClassNoise_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addGaussianClassNoise(), type); }


PyTypeObject PyOrPreprocessor_addGaussianClassNoise_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addGaussianClassNoise",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [deviation=<float>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addGaussianClassNoise(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addGaussianClassNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addGaussianClassNoise> *)(ptr) = PyOrange_AsPreprocessor_addGaussianClassNoise(obj); return 1; }
int ccn_func_Preprocessor_addGaussianClassNoise(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addGaussianClassNoise> *)(ptr) = GCPtr<TPreprocessor_addGaussianClassNoise>(); return 1; }      if (!PyOrPreprocessor_addGaussianClassNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addGaussianClassNoise> *)(ptr) = PyOrange_AsPreprocessor_addGaussianClassNoise(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addGaussianClassNoise_Type (PyOrPreprocessor_addGaussianClassNoise_Type_inh, typeid(TPreprocessor_addGaussianClassNoise), Preprocessor_addGaussianClassNoise_default_constructor, cc_Preprocessor_addGaussianClassNoise, ccn_Preprocessor_addGaussianClassNoise, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addGaussianNoise --------------*/


POrange Preprocessor_addGaussianNoise_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addGaussianNoise(), type); }


PyTypeObject PyOrPreprocessor_addGaussianNoise_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addGaussianNoise",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [<see the manual>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addGaussianNoise(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addGaussianNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addGaussianNoise> *)(ptr) = PyOrange_AsPreprocessor_addGaussianNoise(obj); return 1; }
int ccn_func_Preprocessor_addGaussianNoise(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addGaussianNoise> *)(ptr) = GCPtr<TPreprocessor_addGaussianNoise>(); return 1; }      if (!PyOrPreprocessor_addGaussianNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addGaussianNoise> *)(ptr) = PyOrange_AsPreprocessor_addGaussianNoise(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addGaussianNoise_Type (PyOrPreprocessor_addGaussianNoise_Type_inh, typeid(TPreprocessor_addGaussianNoise), Preprocessor_addGaussianNoise_default_constructor, cc_Preprocessor_addGaussianNoise, ccn_Preprocessor_addGaussianNoise, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addMissing --------------*/


POrange Preprocessor_addMissing_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addMissing(), type); }


PyTypeObject PyOrPreprocessor_addMissing_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addMissing",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [<see the manual>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addMissing(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addMissing_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addMissing> *)(ptr) = PyOrange_AsPreprocessor_addMissing(obj); return 1; }
int ccn_func_Preprocessor_addMissing(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addMissing> *)(ptr) = GCPtr<TPreprocessor_addMissing>(); return 1; }      if (!PyOrPreprocessor_addMissing_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addMissing> *)(ptr) = PyOrange_AsPreprocessor_addMissing(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addMissing_Type (PyOrPreprocessor_addMissing_Type_inh, typeid(TPreprocessor_addMissing), Preprocessor_addMissing_default_constructor, cc_Preprocessor_addMissing, ccn_Preprocessor_addMissing, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addMissingClasses --------------*/


POrange Preprocessor_addMissingClasses_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addMissingClasses(), type); }


PyTypeObject PyOrPreprocessor_addMissingClasses_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addMissingClasses",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [classMissing=<float>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addMissingClasses(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addMissingClasses_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addMissingClasses> *)(ptr) = PyOrange_AsPreprocessor_addMissingClasses(obj); return 1; }
int ccn_func_Preprocessor_addMissingClasses(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addMissingClasses> *)(ptr) = GCPtr<TPreprocessor_addMissingClasses>(); return 1; }      if (!PyOrPreprocessor_addMissingClasses_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addMissingClasses> *)(ptr) = PyOrange_AsPreprocessor_addMissingClasses(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addMissingClasses_Type (PyOrPreprocessor_addMissingClasses_Type_inh, typeid(TPreprocessor_addMissingClasses), Preprocessor_addMissingClasses_default_constructor, cc_Preprocessor_addMissingClasses, ccn_Preprocessor_addMissingClasses, NULL, true, NULL, NULL);



/* -------------- Preprocessor_addNoise --------------*/


POrange Preprocessor_addNoise_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_addNoise(), type); }


PyTypeObject PyOrPreprocessor_addNoise_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_addNoise",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [<see the manual>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_addNoise(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_addNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addNoise> *)(ptr) = PyOrange_AsPreprocessor_addNoise(obj); return 1; }
int ccn_func_Preprocessor_addNoise(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_addNoise> *)(ptr) = GCPtr<TPreprocessor_addNoise>(); return 1; }      if (!PyOrPreprocessor_addNoise_Check(obj)) return 0;      *(GCPtr<TPreprocessor_addNoise> *)(ptr) = PyOrange_AsPreprocessor_addNoise(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_addNoise_Type (PyOrPreprocessor_addNoise_Type_inh, typeid(TPreprocessor_addNoise), Preprocessor_addNoise_default_constructor, cc_Preprocessor_addNoise, ccn_Preprocessor_addNoise, NULL, true, NULL, NULL);



/* -------------- Preprocessor_discretize --------------*/


POrange Preprocessor_discretize_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_discretize(), type); }


PyTypeObject PyOrPreprocessor_discretize_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_discretize",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [notClass=, method=, attributes=<list-of-strings>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_discretize(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_discretize_Check(obj)) return 0;      *(GCPtr<TPreprocessor_discretize> *)(ptr) = PyOrange_AsPreprocessor_discretize(obj); return 1; }
int ccn_func_Preprocessor_discretize(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_discretize> *)(ptr) = GCPtr<TPreprocessor_discretize>(); return 1; }      if (!PyOrPreprocessor_discretize_Check(obj)) return 0;      *(GCPtr<TPreprocessor_discretize> *)(ptr) = PyOrange_AsPreprocessor_discretize(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_discretize_Type (PyOrPreprocessor_discretize_Type_inh, typeid(TPreprocessor_discretize), Preprocessor_discretize_default_constructor, cc_Preprocessor_discretize, ccn_Preprocessor_discretize, NULL, true, NULL, NULL);



/* -------------- Preprocessor_drop --------------*/


POrange Preprocessor_drop_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_drop(), type); }


PyTypeObject PyOrPreprocessor_drop_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_drop",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [attributes=<list-of-strings>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_drop(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_drop_Check(obj)) return 0;      *(GCPtr<TPreprocessor_drop> *)(ptr) = PyOrange_AsPreprocessor_drop(obj); return 1; }
int ccn_func_Preprocessor_drop(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_drop> *)(ptr) = GCPtr<TPreprocessor_drop>(); return 1; }      if (!PyOrPreprocessor_drop_Check(obj)) return 0;      *(GCPtr<TPreprocessor_drop> *)(ptr) = PyOrange_AsPreprocessor_drop(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_drop_Type (PyOrPreprocessor_drop_Type_inh, typeid(TPreprocessor_drop), Preprocessor_drop_default_constructor, cc_Preprocessor_drop, ccn_Preprocessor_drop, NULL, true, NULL, NULL);



/* -------------- Preprocessor_dropMissing --------------*/


POrange Preprocessor_dropMissing_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_dropMissing(), type); }


PyTypeObject PyOrPreprocessor_dropMissing_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_dropMissing",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]]) -/-> ExampleTable",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_dropMissing(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_dropMissing_Check(obj)) return 0;      *(GCPtr<TPreprocessor_dropMissing> *)(ptr) = PyOrange_AsPreprocessor_dropMissing(obj); return 1; }
int ccn_func_Preprocessor_dropMissing(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_dropMissing> *)(ptr) = GCPtr<TPreprocessor_dropMissing>(); return 1; }      if (!PyOrPreprocessor_dropMissing_Check(obj)) return 0;      *(GCPtr<TPreprocessor_dropMissing> *)(ptr) = PyOrange_AsPreprocessor_dropMissing(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_dropMissing_Type (PyOrPreprocessor_dropMissing_Type_inh, typeid(TPreprocessor_dropMissing), Preprocessor_dropMissing_default_constructor, cc_Preprocessor_dropMissing, ccn_Preprocessor_dropMissing, NULL, true, NULL, NULL);



/* -------------- Preprocessor_dropMissingClasses --------------*/


POrange Preprocessor_dropMissingClasses_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_dropMissingClasses(), type); }


PyTypeObject PyOrPreprocessor_dropMissingClasses_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_dropMissingClasses",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]]) -/-> ExampleTable",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_dropMissingClasses(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_dropMissingClasses_Check(obj)) return 0;      *(GCPtr<TPreprocessor_dropMissingClasses> *)(ptr) = PyOrange_AsPreprocessor_dropMissingClasses(obj); return 1; }
int ccn_func_Preprocessor_dropMissingClasses(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_dropMissingClasses> *)(ptr) = GCPtr<TPreprocessor_dropMissingClasses>(); return 1; }      if (!PyOrPreprocessor_dropMissingClasses_Check(obj)) return 0;      *(GCPtr<TPreprocessor_dropMissingClasses> *)(ptr) = PyOrange_AsPreprocessor_dropMissingClasses(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_dropMissingClasses_Type (PyOrPreprocessor_dropMissingClasses_Type_inh, typeid(TPreprocessor_dropMissingClasses), Preprocessor_dropMissingClasses_default_constructor, cc_Preprocessor_dropMissingClasses, ccn_Preprocessor_dropMissingClasses, NULL, true, NULL, NULL);



/* -------------- Preprocessor_filter --------------*/


POrange Preprocessor_filter_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_filter(), type); }


PyTypeObject PyOrPreprocessor_filter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_filter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [filter=]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_filter(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_filter_Check(obj)) return 0;      *(GCPtr<TPreprocessor_filter> *)(ptr) = PyOrange_AsPreprocessor_filter(obj); return 1; }
int ccn_func_Preprocessor_filter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_filter> *)(ptr) = GCPtr<TPreprocessor_filter>(); return 1; }      if (!PyOrPreprocessor_filter_Check(obj)) return 0;      *(GCPtr<TPreprocessor_filter> *)(ptr) = PyOrange_AsPreprocessor_filter(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_filter_Type (PyOrPreprocessor_filter_Type_inh, typeid(TPreprocessor_filter), Preprocessor_filter_default_constructor, cc_Preprocessor_filter, ccn_Preprocessor_filter, NULL, true, NULL, NULL);



/* -------------- Preprocessor_ignore --------------*/


POrange Preprocessor_ignore_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_ignore(), type); }


PyTypeObject PyOrPreprocessor_ignore_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_ignore",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [attributes=<list-of-strings>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_ignore(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_ignore_Check(obj)) return 0;      *(GCPtr<TPreprocessor_ignore> *)(ptr) = PyOrange_AsPreprocessor_ignore(obj); return 1; }
int ccn_func_Preprocessor_ignore(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_ignore> *)(ptr) = GCPtr<TPreprocessor_ignore>(); return 1; }      if (!PyOrPreprocessor_ignore_Check(obj)) return 0;      *(GCPtr<TPreprocessor_ignore> *)(ptr) = PyOrange_AsPreprocessor_ignore(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_ignore_Type (PyOrPreprocessor_ignore_Type_inh, typeid(TPreprocessor_ignore), Preprocessor_ignore_default_constructor, cc_Preprocessor_ignore, ccn_Preprocessor_ignore, NULL, true, NULL, NULL);



/* -------------- Preprocessor_imputeByLearner --------------*/


POrange Preprocessor_imputeByLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_imputeByLearner(), type); }


PyTypeObject PyOrPreprocessor_imputeByLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_imputeByLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [learner=]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_imputeByLearner(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_imputeByLearner_Check(obj)) return 0;      *(GCPtr<TPreprocessor_imputeByLearner> *)(ptr) = PyOrange_AsPreprocessor_imputeByLearner(obj); return 1; }
int ccn_func_Preprocessor_imputeByLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_imputeByLearner> *)(ptr) = GCPtr<TPreprocessor_imputeByLearner>(); return 1; }      if (!PyOrPreprocessor_imputeByLearner_Check(obj)) return 0;      *(GCPtr<TPreprocessor_imputeByLearner> *)(ptr) = PyOrange_AsPreprocessor_imputeByLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_imputeByLearner_Type (PyOrPreprocessor_imputeByLearner_Type_inh, typeid(TPreprocessor_imputeByLearner), Preprocessor_imputeByLearner_default_constructor, cc_Preprocessor_imputeByLearner, ccn_Preprocessor_imputeByLearner, NULL, true, NULL, NULL);



/* -------------- Preprocessor_removeDuplicates --------------*/


POrange Preprocessor_removeDuplicates_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_removeDuplicates(), type); }


PyTypeObject PyOrPreprocessor_removeDuplicates_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_removeDuplicates",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]]) -/-> ExampleTable",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_removeDuplicates(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_removeDuplicates_Check(obj)) return 0;      *(GCPtr<TPreprocessor_removeDuplicates> *)(ptr) = PyOrange_AsPreprocessor_removeDuplicates(obj); return 1; }
int ccn_func_Preprocessor_removeDuplicates(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_removeDuplicates> *)(ptr) = GCPtr<TPreprocessor_removeDuplicates>(); return 1; }      if (!PyOrPreprocessor_removeDuplicates_Check(obj)) return 0;      *(GCPtr<TPreprocessor_removeDuplicates> *)(ptr) = PyOrange_AsPreprocessor_removeDuplicates(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_removeDuplicates_Type (PyOrPreprocessor_removeDuplicates_Type_inh, typeid(TPreprocessor_removeDuplicates), Preprocessor_removeDuplicates_default_constructor, cc_Preprocessor_removeDuplicates, ccn_Preprocessor_removeDuplicates, NULL, true, NULL, NULL);



/* -------------- Preprocessor_select --------------*/


POrange Preprocessor_select_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_select(), type); }


PyTypeObject PyOrPreprocessor_select_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_select",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [attributes=<list-of-strings>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_select(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_select_Check(obj)) return 0;      *(GCPtr<TPreprocessor_select> *)(ptr) = PyOrange_AsPreprocessor_select(obj); return 1; }
int ccn_func_Preprocessor_select(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_select> *)(ptr) = GCPtr<TPreprocessor_select>(); return 1; }      if (!PyOrPreprocessor_select_Check(obj)) return 0;      *(GCPtr<TPreprocessor_select> *)(ptr) = PyOrange_AsPreprocessor_select(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_select_Type (PyOrPreprocessor_select_Type_inh, typeid(TPreprocessor_select), Preprocessor_select_default_constructor, cc_Preprocessor_select, ccn_Preprocessor_select, NULL, true, NULL, NULL);



/* -------------- Preprocessor_shuffle --------------*/


POrange Preprocessor_shuffle_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_shuffle(), type); }


PyTypeObject PyOrPreprocessor_shuffle_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_shuffle",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [attributes=<list-of-strings>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_shuffle(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_shuffle_Check(obj)) return 0;      *(GCPtr<TPreprocessor_shuffle> *)(ptr) = PyOrange_AsPreprocessor_shuffle(obj); return 1; }
int ccn_func_Preprocessor_shuffle(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_shuffle> *)(ptr) = GCPtr<TPreprocessor_shuffle>(); return 1; }      if (!PyOrPreprocessor_shuffle_Check(obj)) return 0;      *(GCPtr<TPreprocessor_shuffle> *)(ptr) = PyOrange_AsPreprocessor_shuffle(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_shuffle_Type (PyOrPreprocessor_shuffle_Type_inh, typeid(TPreprocessor_shuffle), Preprocessor_shuffle_default_constructor, cc_Preprocessor_shuffle, ccn_Preprocessor_shuffle, NULL, true, NULL, NULL);



/* -------------- Preprocessor_take --------------*/


POrange Preprocessor_take_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_take(), type); }


PyTypeObject PyOrPreprocessor_take_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_take",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]] [attributes=<list-of-strings>]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_take(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_take_Check(obj)) return 0;      *(GCPtr<TPreprocessor_take> *)(ptr) = PyOrange_AsPreprocessor_take(obj); return 1; }
int ccn_func_Preprocessor_take(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_take> *)(ptr) = GCPtr<TPreprocessor_take>(); return 1; }      if (!PyOrPreprocessor_take_Check(obj)) return 0;      *(GCPtr<TPreprocessor_take> *)(ptr) = PyOrange_AsPreprocessor_take(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_take_Type (PyOrPreprocessor_take_Type_inh, typeid(TPreprocessor_take), Preprocessor_take_default_constructor, cc_Preprocessor_take, ccn_Preprocessor_take, NULL, true, NULL, NULL);



/* -------------- Preprocessor_takeMissing --------------*/


POrange Preprocessor_takeMissing_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_takeMissing(), type); }


PyTypeObject PyOrPreprocessor_takeMissing_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_takeMissing",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]]) -/-> ExampleTable",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_takeMissing(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_takeMissing_Check(obj)) return 0;      *(GCPtr<TPreprocessor_takeMissing> *)(ptr) = PyOrange_AsPreprocessor_takeMissing(obj); return 1; }
int ccn_func_Preprocessor_takeMissing(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_takeMissing> *)(ptr) = GCPtr<TPreprocessor_takeMissing>(); return 1; }      if (!PyOrPreprocessor_takeMissing_Check(obj)) return 0;      *(GCPtr<TPreprocessor_takeMissing> *)(ptr) = PyOrange_AsPreprocessor_takeMissing(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_takeMissing_Type (PyOrPreprocessor_takeMissing_Type_inh, typeid(TPreprocessor_takeMissing), Preprocessor_takeMissing_default_constructor, cc_Preprocessor_takeMissing, ccn_Preprocessor_takeMissing, NULL, true, NULL, NULL);



/* -------------- Preprocessor_takeMissingClasses --------------*/


POrange Preprocessor_takeMissingClasses_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TPreprocessor_takeMissingClasses(), type); }


PyTypeObject PyOrPreprocessor_takeMissingClasses_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Preprocessor_takeMissingClasses",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]]) -/-> ExampleTable",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrPreprocessor_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Preprocessor_takeMissingClasses(PyObject *obj, void *ptr) { if (!PyOrPreprocessor_takeMissingClasses_Check(obj)) return 0;      *(GCPtr<TPreprocessor_takeMissingClasses> *)(ptr) = PyOrange_AsPreprocessor_takeMissingClasses(obj); return 1; }
int ccn_func_Preprocessor_takeMissingClasses(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPreprocessor_takeMissingClasses> *)(ptr) = GCPtr<TPreprocessor_takeMissingClasses>(); return 1; }      if (!PyOrPreprocessor_takeMissingClasses_Check(obj)) return 0;      *(GCPtr<TPreprocessor_takeMissingClasses> *)(ptr) = PyOrange_AsPreprocessor_takeMissingClasses(obj); return 1; }


ORANGE_API TOrangeType PyOrPreprocessor_takeMissingClasses_Type (PyOrPreprocessor_takeMissingClasses_Type_inh, typeid(TPreprocessor_takeMissingClasses), Preprocessor_takeMissingClasses_default_constructor, cc_Preprocessor_takeMissingClasses, ccn_Preprocessor_takeMissingClasses, NULL, true, NULL, NULL);



/* -------------- RemoveRedundant --------------*/

char RemoveRedundant_doc[] = "([examples[, weightID][, suspicious]) -/-> Domain";

PyObject *RemoveRedundant_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrRemoveRedundant_Type, type, args, kwds); }


PyTypeObject PyOrRemoveRedundant_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RemoveRedundant",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RemoveRedundant_call,                 /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RemoveRedundant_abstract_constructor,     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RemoveRedundant(PyObject *obj, void *ptr) { if (!PyOrRemoveRedundant_Check(obj)) return 0;      *(GCPtr<TRemoveRedundant> *)(ptr) = PyOrange_AsRemoveRedundant(obj); return 1; }
int ccn_func_RemoveRedundant(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRemoveRedundant> *)(ptr) = GCPtr<TRemoveRedundant>(); return 1; }      if (!PyOrRemoveRedundant_Check(obj)) return 0;      *(GCPtr<TRemoveRedundant> *)(ptr) = PyOrange_AsRemoveRedundant(obj); return 1; }


ORANGE_API TOrangeType PyOrRemoveRedundant_Type (PyOrRemoveRedundant_Type_inh, typeid(TRemoveRedundant), 0, cc_RemoveRedundant, ccn_RemoveRedundant, NULL, false, NULL, NULL);



/* -------------- RemoveRedundantByInduction --------------*/


POrange RemoveRedundantByInduction_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRemoveRedundantByInduction(), type); }


PyTypeObject PyOrRemoveRedundantByInduction_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RemoveRedundantByInduction",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID][, suspicious]) -/-> Domain", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRemoveRedundant_Type,          /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RemoveRedundantByInduction(PyObject *obj, void *ptr) { if (!PyOrRemoveRedundantByInduction_Check(obj)) return 0;      *(GCPtr<TRemoveRedundantByInduction> *)(ptr) = PyOrange_AsRemoveRedundantByInduction(obj); return 1; }
int ccn_func_RemoveRedundantByInduction(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRemoveRedundantByInduction> *)(ptr) = GCPtr<TRemoveRedundantByInduction>(); return 1; }      if (!PyOrRemoveRedundantByInduction_Check(obj)) return 0;      *(GCPtr<TRemoveRedundantByInduction> *)(ptr) = PyOrange_AsRemoveRedundantByInduction(obj); return 1; }


ORANGE_API TOrangeType PyOrRemoveRedundantByInduction_Type (PyOrRemoveRedundantByInduction_Type_inh, typeid(TRemoveRedundantByInduction), RemoveRedundantByInduction_default_constructor, cc_RemoveRedundantByInduction, ccn_RemoveRedundantByInduction, NULL, true, NULL, NULL);



/* -------------- RemoveRedundantByQuality --------------*/


POrange RemoveRedundantByQuality_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRemoveRedundantByQuality(), type); }


PyTypeObject PyOrRemoveRedundantByQuality_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RemoveRedundantByQuality",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID][, suspicious]) -/-> Domain", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRemoveRedundant_Type,          /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RemoveRedundantByQuality(PyObject *obj, void *ptr) { if (!PyOrRemoveRedundantByQuality_Check(obj)) return 0;      *(GCPtr<TRemoveRedundantByQuality> *)(ptr) = PyOrange_AsRemoveRedundantByQuality(obj); return 1; }
int ccn_func_RemoveRedundantByQuality(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRemoveRedundantByQuality> *)(ptr) = GCPtr<TRemoveRedundantByQuality>(); return 1; }      if (!PyOrRemoveRedundantByQuality_Check(obj)) return 0;      *(GCPtr<TRemoveRedundantByQuality> *)(ptr) = PyOrange_AsRemoveRedundantByQuality(obj); return 1; }


ORANGE_API TOrangeType PyOrRemoveRedundantByQuality_Type (PyOrRemoveRedundantByQuality_Type_inh, typeid(TRemoveRedundantByQuality), RemoveRedundantByQuality_default_constructor, cc_RemoveRedundantByQuality, ccn_RemoveRedundantByQuality, NULL, true, NULL, NULL);



/* -------------- RemoveRedundantOneValue --------------*/

PyMethodDef RemoveRedundantOneValue_methods[] = {
     {"has_at_least_two_values", (binaryfunc)RemoveRedundantOneValue_hasAtLeastTwoValues, METH_VARARGS | METH_STATIC, "(attribute, examples) -> bool"},
     {NULL, NULL}
};


POrange RemoveRedundantOneValue_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRemoveRedundantOneValue(), type); }


PyTypeObject PyOrRemoveRedundantOneValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RemoveRedundantOneValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID][, suspicious]) -/-> Domain", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RemoveRedundantOneValue_methods,                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrRemoveRedundant_Type,          /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RemoveRedundantOneValue(PyObject *obj, void *ptr) { if (!PyOrRemoveRedundantOneValue_Check(obj)) return 0;      *(GCPtr<TRemoveRedundantOneValue> *)(ptr) = PyOrange_AsRemoveRedundantOneValue(obj); return 1; }
int ccn_func_RemoveRedundantOneValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRemoveRedundantOneValue> *)(ptr) = GCPtr<TRemoveRedundantOneValue>(); return 1; }      if (!PyOrRemoveRedundantOneValue_Check(obj)) return 0;      *(GCPtr<TRemoveRedundantOneValue> *)(ptr) = PyOrange_AsRemoveRedundantOneValue(obj); return 1; }


ORANGE_API TOrangeType PyOrRemoveRedundantOneValue_Type (PyOrRemoveRedundantOneValue_Type_inh, typeid(TRemoveRedundantOneValue), RemoveRedundantOneValue_default_constructor, cc_RemoveRedundantOneValue, ccn_RemoveRedundantOneValue, NULL, true, NULL, NULL);



/* -------------- RemoveUnusedValues --------------*/

char RemoveUnusedValues_doc[] = "(attribute, examples[, weightId]) -> attribute";

POrange RemoveUnusedValues_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRemoveUnusedValues(), type); }


PyTypeObject PyOrRemoveUnusedValues_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RemoveUnusedValues",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RemoveUnusedValues_call,              /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([[attribute, ]examples[, weightId]]) -/-> attribute", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RemoveUnusedValues(PyObject *obj, void *ptr) { if (!PyOrRemoveUnusedValues_Check(obj)) return 0;      *(GCPtr<TRemoveUnusedValues> *)(ptr) = PyOrange_AsRemoveUnusedValues(obj); return 1; }
int ccn_func_RemoveUnusedValues(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRemoveUnusedValues> *)(ptr) = GCPtr<TRemoveUnusedValues>(); return 1; }      if (!PyOrRemoveUnusedValues_Check(obj)) return 0;      *(GCPtr<TRemoveUnusedValues> *)(ptr) = PyOrange_AsRemoveUnusedValues(obj); return 1; }


ORANGE_API TOrangeType PyOrRemoveUnusedValues_Type (PyOrRemoveUnusedValues_Type_inh, typeid(TRemoveUnusedValues), RemoveUnusedValues_default_constructor, cc_RemoveUnusedValues, ccn_RemoveUnusedValues, NULL, true, NULL, NULL);



/* -------------- StopDistributionClustering --------------*/


PyObject *StopDistributionClustering_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrStopDistributionClustering_Type, type, args, kwds); }


PyTypeObject PyOrStopDistributionClustering_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopDistributionClustering",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)StopDistributionClustering_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopDistributionClustering(PyObject *obj, void *ptr) { if (!PyOrStopDistributionClustering_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering> *)(ptr) = PyOrange_AsStopDistributionClustering(obj); return 1; }
int ccn_func_StopDistributionClustering(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopDistributionClustering> *)(ptr) = GCPtr<TStopDistributionClustering>(); return 1; }      if (!PyOrStopDistributionClustering_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering> *)(ptr) = PyOrange_AsStopDistributionClustering(obj); return 1; }


ORANGE_API TOrangeType PyOrStopDistributionClustering_Type (PyOrStopDistributionClustering_Type_inh, typeid(TStopDistributionClustering), 0, cc_StopDistributionClustering, ccn_StopDistributionClustering, NULL, false, NULL, NULL);



/* -------------- StopDistributionClustering_binary --------------*/


POrange StopDistributionClustering_binary_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopDistributionClustering_binary(), type); }


PyTypeObject PyOrStopDistributionClustering_binary_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopDistributionClustering_binary",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopDistributionClustering_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopDistributionClustering_binary(PyObject *obj, void *ptr) { if (!PyOrStopDistributionClustering_binary_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_binary> *)(ptr) = PyOrange_AsStopDistributionClustering_binary(obj); return 1; }
int ccn_func_StopDistributionClustering_binary(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopDistributionClustering_binary> *)(ptr) = GCPtr<TStopDistributionClustering_binary>(); return 1; }      if (!PyOrStopDistributionClustering_binary_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_binary> *)(ptr) = PyOrange_AsStopDistributionClustering_binary(obj); return 1; }


ORANGE_API TOrangeType PyOrStopDistributionClustering_binary_Type (PyOrStopDistributionClustering_binary_Type_inh, typeid(TStopDistributionClustering_binary), StopDistributionClustering_binary_default_constructor, cc_StopDistributionClustering_binary, ccn_StopDistributionClustering_binary, NULL, true, NULL, NULL);



/* -------------- StopDistributionClustering_n --------------*/


POrange StopDistributionClustering_n_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopDistributionClustering_n(), type); }


PyTypeObject PyOrStopDistributionClustering_n_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopDistributionClustering_n",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([n=])",                                          /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopDistributionClustering_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopDistributionClustering_n(PyObject *obj, void *ptr) { if (!PyOrStopDistributionClustering_n_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_n> *)(ptr) = PyOrange_AsStopDistributionClustering_n(obj); return 1; }
int ccn_func_StopDistributionClustering_n(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopDistributionClustering_n> *)(ptr) = GCPtr<TStopDistributionClustering_n>(); return 1; }      if (!PyOrStopDistributionClustering_n_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_n> *)(ptr) = PyOrange_AsStopDistributionClustering_n(obj); return 1; }


ORANGE_API TOrangeType PyOrStopDistributionClustering_n_Type (PyOrStopDistributionClustering_n_Type_inh, typeid(TStopDistributionClustering_n), StopDistributionClustering_n_default_constructor, cc_StopDistributionClustering_n, ccn_StopDistributionClustering_n, NULL, true, NULL, NULL);



/* -------------- StopDistributionClustering_noBigChange --------------*/


POrange StopDistributionClustering_noBigChange_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopDistributionClustering_noBigChange(), type); }


PyTypeObject PyOrStopDistributionClustering_noBigChange_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopDistributionClustering_noBigChange",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopDistributionClustering_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopDistributionClustering_noBigChange(PyObject *obj, void *ptr) { if (!PyOrStopDistributionClustering_noBigChange_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_noBigChange> *)(ptr) = PyOrange_AsStopDistributionClustering_noBigChange(obj); return 1; }
int ccn_func_StopDistributionClustering_noBigChange(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopDistributionClustering_noBigChange> *)(ptr) = GCPtr<TStopDistributionClustering_noBigChange>(); return 1; }      if (!PyOrStopDistributionClustering_noBigChange_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_noBigChange> *)(ptr) = PyOrange_AsStopDistributionClustering_noBigChange(obj); return 1; }


ORANGE_API TOrangeType PyOrStopDistributionClustering_noBigChange_Type (PyOrStopDistributionClustering_noBigChange_Type_inh, typeid(TStopDistributionClustering_noBigChange), StopDistributionClustering_noBigChange_default_constructor, cc_StopDistributionClustering_noBigChange, ccn_StopDistributionClustering_noBigChange, NULL, true, NULL, NULL);



/* -------------- StopDistributionClustering_noProfit --------------*/


POrange StopDistributionClustering_noProfit_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopDistributionClustering_noProfit(), type); }


PyTypeObject PyOrStopDistributionClustering_noProfit_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopDistributionClustering_noProfit",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([minProfitProportion=])",                        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopDistributionClustering_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopDistributionClustering_noProfit(PyObject *obj, void *ptr) { if (!PyOrStopDistributionClustering_noProfit_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_noProfit> *)(ptr) = PyOrange_AsStopDistributionClustering_noProfit(obj); return 1; }
int ccn_func_StopDistributionClustering_noProfit(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopDistributionClustering_noProfit> *)(ptr) = GCPtr<TStopDistributionClustering_noProfit>(); return 1; }      if (!PyOrStopDistributionClustering_noProfit_Check(obj)) return 0;      *(GCPtr<TStopDistributionClustering_noProfit> *)(ptr) = PyOrange_AsStopDistributionClustering_noProfit(obj); return 1; }


ORANGE_API TOrangeType PyOrStopDistributionClustering_noProfit_Type (PyOrStopDistributionClustering_noProfit_Type_inh, typeid(TStopDistributionClustering_noProfit), StopDistributionClustering_noProfit_default_constructor, cc_StopDistributionClustering_noProfit, ccn_StopDistributionClustering_noProfit, NULL, true, NULL, NULL);



/* -------------- StopIMClusteringByAssessor --------------*/


PyObject *StopIMClusteringByAssessor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrStopIMClusteringByAssessor_Type, type, args, kwds); }


PyTypeObject PyOrStopIMClusteringByAssessor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopIMClusteringByAssessor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)StopIMClusteringByAssessor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopIMClusteringByAssessor(PyObject *obj, void *ptr) { if (!PyOrStopIMClusteringByAssessor_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor(obj); return 1; }
int ccn_func_StopIMClusteringByAssessor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopIMClusteringByAssessor> *)(ptr) = GCPtr<TStopIMClusteringByAssessor>(); return 1; }      if (!PyOrStopIMClusteringByAssessor_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor(obj); return 1; }


ORANGE_API TOrangeType PyOrStopIMClusteringByAssessor_Type (PyOrStopIMClusteringByAssessor_Type_inh, typeid(TStopIMClusteringByAssessor), 0, cc_StopIMClusteringByAssessor, ccn_StopIMClusteringByAssessor, NULL, false, NULL, NULL);



/* -------------- StopIMClusteringByAssessor_binary --------------*/


POrange StopIMClusteringByAssessor_binary_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopIMClusteringByAssessor_binary(), type); }


PyTypeObject PyOrStopIMClusteringByAssessor_binary_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopIMClusteringByAssessor_binary",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopIMClusteringByAssessor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopIMClusteringByAssessor_binary(PyObject *obj, void *ptr) { if (!PyOrStopIMClusteringByAssessor_binary_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_binary> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_binary(obj); return 1; }
int ccn_func_StopIMClusteringByAssessor_binary(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopIMClusteringByAssessor_binary> *)(ptr) = GCPtr<TStopIMClusteringByAssessor_binary>(); return 1; }      if (!PyOrStopIMClusteringByAssessor_binary_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_binary> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_binary(obj); return 1; }


ORANGE_API TOrangeType PyOrStopIMClusteringByAssessor_binary_Type (PyOrStopIMClusteringByAssessor_binary_Type_inh, typeid(TStopIMClusteringByAssessor_binary), StopIMClusteringByAssessor_binary_default_constructor, cc_StopIMClusteringByAssessor_binary, ccn_StopIMClusteringByAssessor_binary, NULL, true, NULL, NULL);



/* -------------- StopIMClusteringByAssessor_n --------------*/


POrange StopIMClusteringByAssessor_n_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopIMClusteringByAssessor_n(), type); }


PyTypeObject PyOrStopIMClusteringByAssessor_n_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopIMClusteringByAssessor_n",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(n=)",                                            /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopIMClusteringByAssessor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopIMClusteringByAssessor_n(PyObject *obj, void *ptr) { if (!PyOrStopIMClusteringByAssessor_n_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_n> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_n(obj); return 1; }
int ccn_func_StopIMClusteringByAssessor_n(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopIMClusteringByAssessor_n> *)(ptr) = GCPtr<TStopIMClusteringByAssessor_n>(); return 1; }      if (!PyOrStopIMClusteringByAssessor_n_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_n> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_n(obj); return 1; }


ORANGE_API TOrangeType PyOrStopIMClusteringByAssessor_n_Type (PyOrStopIMClusteringByAssessor_n_Type_inh, typeid(TStopIMClusteringByAssessor_n), StopIMClusteringByAssessor_n_default_constructor, cc_StopIMClusteringByAssessor_n, ccn_StopIMClusteringByAssessor_n, NULL, true, NULL, NULL);



/* -------------- StopIMClusteringByAssessor_noBigChange --------------*/


POrange StopIMClusteringByAssessor_noBigChange_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopIMClusteringByAssessor_noBigChange(), type); }


PyTypeObject PyOrStopIMClusteringByAssessor_noBigChange_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopIMClusteringByAssessor_noBigChange",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopIMClusteringByAssessor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopIMClusteringByAssessor_noBigChange(PyObject *obj, void *ptr) { if (!PyOrStopIMClusteringByAssessor_noBigChange_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_noBigChange> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_noBigChange(obj); return 1; }
int ccn_func_StopIMClusteringByAssessor_noBigChange(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopIMClusteringByAssessor_noBigChange> *)(ptr) = GCPtr<TStopIMClusteringByAssessor_noBigChange>(); return 1; }      if (!PyOrStopIMClusteringByAssessor_noBigChange_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_noBigChange> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_noBigChange(obj); return 1; }


ORANGE_API TOrangeType PyOrStopIMClusteringByAssessor_noBigChange_Type (PyOrStopIMClusteringByAssessor_noBigChange_Type_inh, typeid(TStopIMClusteringByAssessor_noBigChange), StopIMClusteringByAssessor_noBigChange_default_constructor, cc_StopIMClusteringByAssessor_noBigChange, ccn_StopIMClusteringByAssessor_noBigChange, NULL, true, NULL, NULL);



/* -------------- StopIMClusteringByAssessor_noProfit --------------*/


POrange StopIMClusteringByAssessor_noProfit_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TStopIMClusteringByAssessor_noProfit(), type); }


PyTypeObject PyOrStopIMClusteringByAssessor_noProfit_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.StopIMClusteringByAssessor_noProfit",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([minProfitProportion=])",                        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrStopIMClusteringByAssessor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_StopIMClusteringByAssessor_noProfit(PyObject *obj, void *ptr) { if (!PyOrStopIMClusteringByAssessor_noProfit_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_noProfit> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_noProfit(obj); return 1; }
int ccn_func_StopIMClusteringByAssessor_noProfit(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TStopIMClusteringByAssessor_noProfit> *)(ptr) = GCPtr<TStopIMClusteringByAssessor_noProfit>(); return 1; }      if (!PyOrStopIMClusteringByAssessor_noProfit_Check(obj)) return 0;      *(GCPtr<TStopIMClusteringByAssessor_noProfit> *)(ptr) = PyOrange_AsStopIMClusteringByAssessor_noProfit(obj); return 1; }


ORANGE_API TOrangeType PyOrStopIMClusteringByAssessor_noProfit_Type (PyOrStopIMClusteringByAssessor_noProfit_Type_inh, typeid(TStopIMClusteringByAssessor_noProfit), StopIMClusteringByAssessor_noProfit_default_constructor, cc_StopIMClusteringByAssessor_noProfit, ccn_StopIMClusteringByAssessor_noProfit, NULL, true, NULL, NULL);



/* -------------- SubsetsGenerator --------------*/

PyMethodDef SubsetsGenerator_methods[] = {
     {"reset", (binaryfunc)SubsetsGenerator_reset, METH_VARARGS, "([[var0, var1, ...]]) -> int"},
     {NULL, NULL}
};

char SubsetsGenerator_doc[] = "([var0, var1] | domain |) -> SubsetsGenerator";

PyObject *SubsetsGenerator_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrSubsetsGenerator_Type, type, args, kwds); }


PyTypeObject PyOrSubsetsGenerator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)SubsetsGenerator_call,                /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0,
  (getiterfunc)SubsetsGenerator_iter,                /* tp_iter */
  0,
  SubsetsGenerator_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_abstract_constructor,    /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator> *)(ptr) = PyOrange_AsSubsetsGenerator(obj); return 1; }
int ccn_func_SubsetsGenerator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator> *)(ptr) = GCPtr<TSubsetsGenerator>(); return 1; }      if (!PyOrSubsetsGenerator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator> *)(ptr) = PyOrange_AsSubsetsGenerator(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_Type (PyOrSubsetsGenerator_Type_inh, typeid(TSubsetsGenerator), 0, cc_SubsetsGenerator, ccn_SubsetsGenerator, NULL, false, NULL, NULL);



/* -------------- SubsetsGenerator_constSize --------------*/



PyTypeObject PyOrSubsetsGenerator_constSize_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_constSize",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(size)",                                          /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_constSize_new,           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_constSize(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_constSize_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constSize> *)(ptr) = PyOrange_AsSubsetsGenerator_constSize(obj); return 1; }
int ccn_func_SubsetsGenerator_constSize(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_constSize> *)(ptr) = GCPtr<TSubsetsGenerator_constSize>(); return 1; }      if (!PyOrSubsetsGenerator_constSize_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constSize> *)(ptr) = PyOrange_AsSubsetsGenerator_constSize(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_constSize_Type (PyOrSubsetsGenerator_constSize_Type_inh, typeid(TSubsetsGenerator_constSize), 0, cc_SubsetsGenerator_constSize, ccn_SubsetsGenerator_constSize, NULL, true, NULL, NULL);



/* -------------- SubsetsGenerator_constSize_iterator --------------*/

PyMethodDef SubsetsGenerator_constSize_iterator_methods[] = {
     {"__reduce__", (binaryfunc)SubsetsGenerator_constSize_iterator__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};


PyObject *SubsetsGenerator_constSize_iterator_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrSubsetsGenerator_constSize_iterator_Type, type, args, kwds); }


PyTypeObject PyOrSubsetsGenerator_constSize_iterator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_constSize_iterator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SubsetsGenerator_constSize_iterator_methods,       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_iterator_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_constSize_iterator_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_constSize_iterator(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_constSize_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constSize_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_constSize_iterator(obj); return 1; }
int ccn_func_SubsetsGenerator_constSize_iterator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_constSize_iterator> *)(ptr) = GCPtr<TSubsetsGenerator_constSize_iterator>(); return 1; }      if (!PyOrSubsetsGenerator_constSize_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constSize_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_constSize_iterator(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_constSize_iterator_Type (PyOrSubsetsGenerator_constSize_iterator_Type_inh, typeid(TSubsetsGenerator_constSize_iterator), 0, cc_SubsetsGenerator_constSize_iterator, ccn_SubsetsGenerator_constSize_iterator, NULL, false, NULL, NULL);



/* -------------- SubsetsGenerator_constant --------------*/



PyTypeObject PyOrSubsetsGenerator_constant_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_constant",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([constant=])",                                   /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_constant_new,            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_constant(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_constant_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constant> *)(ptr) = PyOrange_AsSubsetsGenerator_constant(obj); return 1; }
int ccn_func_SubsetsGenerator_constant(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_constant> *)(ptr) = GCPtr<TSubsetsGenerator_constant>(); return 1; }      if (!PyOrSubsetsGenerator_constant_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constant> *)(ptr) = PyOrange_AsSubsetsGenerator_constant(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_constant_Type (PyOrSubsetsGenerator_constant_Type_inh, typeid(TSubsetsGenerator_constant), 0, cc_SubsetsGenerator_constant, ccn_SubsetsGenerator_constant, NULL, true, NULL, NULL);



/* -------------- SubsetsGenerator_constant_iterator --------------*/


POrange SubsetsGenerator_constant_iterator_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSubsetsGenerator_constant_iterator(), type); }


PyTypeObject PyOrSubsetsGenerator_constant_iterator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_constant_iterator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "",                                                /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_iterator_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_constant_iterator(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_constant_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constant_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_constant_iterator(obj); return 1; }
int ccn_func_SubsetsGenerator_constant_iterator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_constant_iterator> *)(ptr) = GCPtr<TSubsetsGenerator_constant_iterator>(); return 1; }      if (!PyOrSubsetsGenerator_constant_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_constant_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_constant_iterator(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_constant_iterator_Type (PyOrSubsetsGenerator_constant_iterator_Type_inh, typeid(TSubsetsGenerator_constant_iterator), SubsetsGenerator_constant_iterator_default_constructor, cc_SubsetsGenerator_constant_iterator, ccn_SubsetsGenerator_constant_iterator, NULL, true, NULL, NULL);



/* -------------- SubsetsGenerator_iterator --------------*/


PyObject *SubsetsGenerator_iterator_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrSubsetsGenerator_iterator_Type, type, args, kwds); }


PyTypeObject PyOrSubsetsGenerator_iterator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_iterator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0,
  (iternextfunc)SubsetsGenerator_iterator_iternext,  /* tp_iternext */
  0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_iterator_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_iterator(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_iterator(obj); return 1; }
int ccn_func_SubsetsGenerator_iterator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_iterator> *)(ptr) = GCPtr<TSubsetsGenerator_iterator>(); return 1; }      if (!PyOrSubsetsGenerator_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_iterator(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_iterator_Type (PyOrSubsetsGenerator_iterator_Type_inh, typeid(TSubsetsGenerator_iterator), 0, cc_SubsetsGenerator_iterator, ccn_SubsetsGenerator_iterator, NULL, false, NULL, NULL);



/* -------------- SubsetsGenerator_minMaxSize --------------*/



PyTypeObject PyOrSubsetsGenerator_minMaxSize_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_minMaxSize",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([min=, max=][, varList=])",                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_minMaxSize_new,          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_minMaxSize(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_minMaxSize_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_minMaxSize> *)(ptr) = PyOrange_AsSubsetsGenerator_minMaxSize(obj); return 1; }
int ccn_func_SubsetsGenerator_minMaxSize(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_minMaxSize> *)(ptr) = GCPtr<TSubsetsGenerator_minMaxSize>(); return 1; }      if (!PyOrSubsetsGenerator_minMaxSize_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_minMaxSize> *)(ptr) = PyOrange_AsSubsetsGenerator_minMaxSize(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_minMaxSize_Type (PyOrSubsetsGenerator_minMaxSize_Type_inh, typeid(TSubsetsGenerator_minMaxSize), 0, cc_SubsetsGenerator_minMaxSize, ccn_SubsetsGenerator_minMaxSize, NULL, true, NULL, NULL);



/* -------------- SubsetsGenerator_minMaxSize_iterator --------------*/

PyMethodDef SubsetsGenerator_minMaxSize_iterator_methods[] = {
     {"__reduce__", (binaryfunc)SubsetsGenerator_minMaxSize_iterator__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};


PyObject *SubsetsGenerator_minMaxSize_iterator_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrSubsetsGenerator_minMaxSize_iterator_Type, type, args, kwds); }


PyTypeObject PyOrSubsetsGenerator_minMaxSize_iterator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_minMaxSize_iterator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SubsetsGenerator_minMaxSize_iterator_methods,      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_iterator_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SubsetsGenerator_minMaxSize_iterator_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_minMaxSize_iterator(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_minMaxSize_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_minMaxSize_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_minMaxSize_iterator(obj); return 1; }
int ccn_func_SubsetsGenerator_minMaxSize_iterator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_minMaxSize_iterator> *)(ptr) = GCPtr<TSubsetsGenerator_minMaxSize_iterator>(); return 1; }      if (!PyOrSubsetsGenerator_minMaxSize_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_minMaxSize_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_minMaxSize_iterator(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_minMaxSize_iterator_Type (PyOrSubsetsGenerator_minMaxSize_iterator_Type_inh, typeid(TSubsetsGenerator_minMaxSize_iterator), 0, cc_SubsetsGenerator_minMaxSize_iterator, ccn_SubsetsGenerator_minMaxSize_iterator, NULL, false, NULL, NULL);



/* -------------- SubsetsGenerator_withRestrictions --------------*/


POrange SubsetsGenerator_withRestrictions_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSubsetsGenerator_withRestrictions(), type); }


PyTypeObject PyOrSubsetsGenerator_withRestrictions_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_withRestrictions",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([subGenerator=])",                               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_withRestrictions(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_withRestrictions_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_withRestrictions> *)(ptr) = PyOrange_AsSubsetsGenerator_withRestrictions(obj); return 1; }
int ccn_func_SubsetsGenerator_withRestrictions(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_withRestrictions> *)(ptr) = GCPtr<TSubsetsGenerator_withRestrictions>(); return 1; }      if (!PyOrSubsetsGenerator_withRestrictions_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_withRestrictions> *)(ptr) = PyOrange_AsSubsetsGenerator_withRestrictions(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_withRestrictions_Type (PyOrSubsetsGenerator_withRestrictions_Type_inh, typeid(TSubsetsGenerator_withRestrictions), SubsetsGenerator_withRestrictions_default_constructor, cc_SubsetsGenerator_withRestrictions, ccn_SubsetsGenerator_withRestrictions, NULL, true, NULL, NULL);



/* -------------- SubsetsGenerator_withRestrictions_iterator --------------*/


POrange SubsetsGenerator_withRestrictions_iterator_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSubsetsGenerator_withRestrictions_iterator(), type); }


PyTypeObject PyOrSubsetsGenerator_withRestrictions_iterator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SubsetsGenerator_withRestrictions_iterator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "",                                                /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSubsetsGenerator_iterator_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SubsetsGenerator_withRestrictions_iterator(PyObject *obj, void *ptr) { if (!PyOrSubsetsGenerator_withRestrictions_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_withRestrictions_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_withRestrictions_iterator(obj); return 1; }
int ccn_func_SubsetsGenerator_withRestrictions_iterator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSubsetsGenerator_withRestrictions_iterator> *)(ptr) = GCPtr<TSubsetsGenerator_withRestrictions_iterator>(); return 1; }      if (!PyOrSubsetsGenerator_withRestrictions_iterator_Check(obj)) return 0;      *(GCPtr<TSubsetsGenerator_withRestrictions_iterator> *)(ptr) = PyOrange_AsSubsetsGenerator_withRestrictions_iterator(obj); return 1; }


ORANGE_API TOrangeType PyOrSubsetsGenerator_withRestrictions_iterator_Type (PyOrSubsetsGenerator_withRestrictions_iterator_Type_inh, typeid(TSubsetsGenerator_withRestrictions_iterator), SubsetsGenerator_withRestrictions_iterator_default_constructor, cc_SubsetsGenerator_withRestrictions_iterator, ccn_SubsetsGenerator_withRestrictions_iterator, NULL, true, NULL, NULL);



/* -------------- TableAverager --------------*/

char TableAverager_doc[] = "(list-of-example-generators) --> ExampleTable";

POrange TableAverager_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTableAverager(), type); }


PyTypeObject PyOrTableAverager_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.TableAverager",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TableAverager_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(list-of-example-generators) -/-> ExampleTable",  /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TableAverager(PyObject *obj, void *ptr) { if (!PyOrTableAverager_Check(obj)) return 0;      *(GCPtr<TTableAverager> *)(ptr) = PyOrange_AsTableAverager(obj); return 1; }
int ccn_func_TableAverager(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTableAverager> *)(ptr) = GCPtr<TTableAverager>(); return 1; }      if (!PyOrTableAverager_Check(obj)) return 0;      *(GCPtr<TTableAverager> *)(ptr) = PyOrange_AsTableAverager(obj); return 1; }


ORANGE_API TOrangeType PyOrTableAverager_Type (PyOrTableAverager_Type_inh, typeid(TTableAverager), TableAverager_default_constructor, cc_TableAverager, ccn_TableAverager, NULL, true, NULL, NULL);



/* -------------- ThresholdDiscretizer --------------*/


POrange ThresholdDiscretizer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TThresholdDiscretizer(), type); }


PyTypeObject PyOrThresholdDiscretizer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.discretization.ThresholdDiscretizer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([threshold=])",                                  /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrDiscretizer_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ThresholdDiscretizer(PyObject *obj, void *ptr) { if (!PyOrThresholdDiscretizer_Check(obj)) return 0;      *(GCPtr<TThresholdDiscretizer> *)(ptr) = PyOrange_AsThresholdDiscretizer(obj); return 1; }
int ccn_func_ThresholdDiscretizer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TThresholdDiscretizer> *)(ptr) = GCPtr<TThresholdDiscretizer>(); return 1; }      if (!PyOrThresholdDiscretizer_Check(obj)) return 0;      *(GCPtr<TThresholdDiscretizer> *)(ptr) = PyOrange_AsThresholdDiscretizer(obj); return 1; }


ORANGE_API TOrangeType PyOrThresholdDiscretizer_Type (PyOrThresholdDiscretizer_Type_inh, typeid(TThresholdDiscretizer), ThresholdDiscretizer_default_constructor, cc_ThresholdDiscretizer, ccn_ThresholdDiscretizer, NULL, true, NULL, NULL);



/* -------------- VariableFilterMap --------------*/

PyMethodDef VariableFilterMap_methods[] = {
     {"__reduce__", (binaryfunc)VariableFilterMap__reduce__, METH_NOARGS, "()"},
     {"clear", (binaryfunc)VariableFilterMap_clear, METH_NOARGS, "() -> None"},
     {"get", (binaryfunc)VariableFilterMap_get, METH_VARARGS, "(key[, default]) -> value"},
     {"has_key", (binaryfunc)VariableFilterMap_has_key, METH_O, "(key) -> None"},
     {"items", (binaryfunc)VariableFilterMap_items, METH_NOARGS, "() -> items"},
     {"keys", (binaryfunc)VariableFilterMap_keys, METH_NOARGS, "() -> keys"},
     {"setdefault", (binaryfunc)VariableFilterMap_setdefault, METH_VARARGS, "(key[, default]) -> value"},
     {"update", (binaryfunc)VariableFilterMap_update, METH_O, "(items) -> None"},
     {"values", (binaryfunc)VariableFilterMap_values, METH_NOARGS, "() -> values"},
     {NULL, NULL}
};



PySequenceMethods VariableFilterMap_as_sequence = {
  0, 0, 0, 0, 0, 0, 0,
  (objobjproc)VariableFilterMap_contains,            /* sq_contains */
};

PyMappingMethods VariableFilterMap_as_mapping = {
  (inquiry)VariableFilterMap_len,                    /* mp_length */
  (binaryfunc)VariableFilterMap_getitem,             /* mp_subscript */
  (objobjargproc)VariableFilterMap_setitem,          /* mp_ass_subscript */
};

PyTypeObject PyOrVariableFilterMap_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.VariableFilterMap",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)VariableFilterMap_repr,                  /* tp_repr */
  0,
  &VariableFilterMap_as_sequence,                    /* tp_as_sequence */
  &VariableFilterMap_as_mapping,                     /* tp_as_mapping */
  0, 0,
  (reprfunc)VariableFilterMap_str,                   /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(items)",                                         /* tp_doc */
  0, 0, 0, 0, 0, 0,
  VariableFilterMap_methods,                         /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)VariableFilterMap_new,                    /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_VariableFilterMap(PyObject *obj, void *ptr) { if (!PyOrVariableFilterMap_Check(obj)) return 0;      *(GCPtr<TVariableFilterMap> *)(ptr) = PyOrange_AsVariableFilterMap(obj); return 1; }
int ccn_func_VariableFilterMap(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TVariableFilterMap> *)(ptr) = GCPtr<TVariableFilterMap>(); return 1; }      if (!PyOrVariableFilterMap_Check(obj)) return 0;      *(GCPtr<TVariableFilterMap> *)(ptr) = PyOrange_AsVariableFilterMap(obj); return 1; }


ORANGE_API TOrangeType PyOrVariableFilterMap_Type (PyOrVariableFilterMap_Type_inh, typeid(TVariableFilterMap), 0, cc_VariableFilterMap, ccn_VariableFilterMap, NULL, true, NULL, NULL);



/* -------------- VariableFloatMap --------------*/

PyMethodDef VariableFloatMap_methods[] = {
     {"__reduce__", (binaryfunc)VariableFloatMap__reduce__, METH_NOARGS, "()"},
     {"clear", (binaryfunc)VariableFloatMap_clear, METH_NOARGS, "() -> None"},
     {"get", (binaryfunc)VariableFloatMap_get, METH_VARARGS, "(key[, default]) -> value"},
     {"has_key", (binaryfunc)VariableFloatMap_has_key, METH_O, "(key) -> None"},
     {"items", (binaryfunc)VariableFloatMap_items, METH_NOARGS, "() -> items"},
     {"keys", (binaryfunc)VariableFloatMap_keys, METH_NOARGS, "() -> keys"},
     {"setdefault", (binaryfunc)VariableFloatMap_setdefault, METH_VARARGS, "(key[, default]) -> value"},
     {"update", (binaryfunc)VariableFloatMap_update, METH_O, "(items) -> None"},
     {"values", (binaryfunc)VariableFloatMap_values, METH_NOARGS, "() -> values"},
     {NULL, NULL}
};



PySequenceMethods VariableFloatMap_as_sequence = {
  0, 0, 0, 0, 0, 0, 0,
  (objobjproc)VariableFloatMap_contains,             /* sq_contains */
};

PyMappingMethods VariableFloatMap_as_mapping = {
  (inquiry)VariableFloatMap_len,                     /* mp_length */
  (binaryfunc)VariableFloatMap_getitem,              /* mp_subscript */
  (objobjargproc)VariableFloatMap_setitem,           /* mp_ass_subscript */
};

PyTypeObject PyOrVariableFloatMap_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.VariableFloatMap",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)VariableFloatMap_repr,                   /* tp_repr */
  0,
  &VariableFloatMap_as_sequence,                     /* tp_as_sequence */
  &VariableFloatMap_as_mapping,                      /* tp_as_mapping */
  0, 0,
  (reprfunc)VariableFloatMap_str,                    /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(items)",                                         /* tp_doc */
  0, 0, 0, 0, 0, 0,
  VariableFloatMap_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)VariableFloatMap_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_VariableFloatMap(PyObject *obj, void *ptr) { if (!PyOrVariableFloatMap_Check(obj)) return 0;      *(GCPtr<TVariableFloatMap> *)(ptr) = PyOrange_AsVariableFloatMap(obj); return 1; }
int ccn_func_VariableFloatMap(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TVariableFloatMap> *)(ptr) = GCPtr<TVariableFloatMap>(); return 1; }      if (!PyOrVariableFloatMap_Check(obj)) return 0;      *(GCPtr<TVariableFloatMap> *)(ptr) = PyOrange_AsVariableFloatMap(obj); return 1; }


ORANGE_API TOrangeType PyOrVariableFloatMap_Type (PyOrVariableFloatMap_Type_inh, typeid(TVariableFloatMap), 0, cc_VariableFloatMap, ccn_VariableFloatMap, NULL, true, NULL, NULL);



