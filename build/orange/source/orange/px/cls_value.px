/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern ORANGE_API TOrangeType PyOrOrange_Type;


/* -------------- SomeValue --------------*/


PyObject *SomeValue_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrSomeValue_Type, type, args, kwds); }


PyTypeObject PyOrSomeValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SomeValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SomeValue_abstract_constructor,           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SomeValue(PyObject *obj, void *ptr) { if (!PyOrSomeValue_Check(obj)) return 0;      *(GCPtr<TSomeValue> *)(ptr) = PyOrange_AsSomeValue(obj); return 1; }
int ccn_func_SomeValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSomeValue> *)(ptr) = GCPtr<TSomeValue>(); return 1; }      if (!PyOrSomeValue_Check(obj)) return 0;      *(GCPtr<TSomeValue> *)(ptr) = PyOrange_AsSomeValue(obj); return 1; }


ORANGE_API TOrangeType PyOrSomeValue_Type (PyOrSomeValue_Type_inh, typeid(TSomeValue), 0, cc_SomeValue, ccn_SomeValue, NULL, false, NULL, NULL);



/* -------------- Value --------------*/

PyMethodDef Value_methods[] = {
     {"__reduce__", (binaryfunc)Value__reduce__, METH_NOARGS, "()"},
     {"first_value", (binaryfunc)Value_first_value, METH_NOARGS, "() -> bool; Sets the value to the first value"},
     {"is_DC", (binaryfunc)Value_isDC, METH_NOARGS, "() -> bool; Returns true if value is DC"},
     {"is_DK", (binaryfunc)Value_isDK, METH_NOARGS, "() -> bool; Returns true if value is DK"},
     {"is_special", (binaryfunc)Value_isSpecial, METH_NOARGS, "() -> bool; Returns true if value is DK, DC..."},
     {"native", (binaryfunc)Value_native, METH_NOARGS, "() -> bool; Converts the value into string or float"},
     {"next_value", (binaryfunc)Value_next_value, METH_NOARGS, "() -> bool; Increases the value (if possible)"},
     {"random_value", (binaryfunc)Value_random_value, METH_NOARGS, "(); Sets the value to a random"},
     {NULL, NULL}
};

PyGetSetDef Value_getset[]=  {
  {"svalue", (getter)Value_get_svalue, (setter)Value_set_svalue},
  {"value", (getter)Value_get_value, (setter)Value_set_value},
  {"value_type", (getter)Value_get_valueType, NULL},
  {"var_type", (getter)Value_get_varType, NULL},
  {"variable", (getter)Value_get_variable, (setter)Value_set_variable},
  {NULL}};


void Value_addConstants()
{ PyObject *&dict = PyOrValue_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Regular", PyValue_Type_FromLong(valueRegular));
  PyDict_SetItemString(dict, "DC", PyValue_Type_FromLong(valueDC));
  PyDict_SetItemString(dict, "DK", PyValue_Type_FromLong(valueDK));
}


PyNumberMethods Value_as_number = {
  (binaryfunc)Value_add,                             /* nb_add */
  (binaryfunc)Value_sub,                             /* nb_subtract */
  (binaryfunc)Value_mul,                             /* nb_multiply */
  (binaryfunc)Value_div,                             /* nb_divide */
  0, 0,
  (ternaryfunc)Value_pow,                            /* nb_power */
  (unaryfunc)Value_neg,                              /* nb_negative */
  0,
  (unaryfunc)Value_abs,                              /* nb_absolute */
  (inquiry)Value_nonzero,                            /* nb_nonzero */
  0, 0, 0, 0, 0, 0,
  (coercion)Value_coerce,                            /* nb_coerce */
  (unaryfunc)Value_int,                              /* nb_int */
  (unaryfunc)Value_long,                             /* nb_long */
  (unaryfunc)Value_float,                            /* nb_float */
  0, 0,
};

PyTypeObject PyOrValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.Value",
  sizeof(TPyValue), 0,
  (destructor)Value_dealloc,                         /* tp_dealloc */
  0, 0, 0, 0,
  (reprfunc)Value_repr,                              /* tp_repr */
  &Value_as_number,                                  /* tp_as_number */
  0, 0, 0, 0,
  (reprfunc)Value_str,                               /* tp_str */
  (getattrofunc)Value_getattr,                       /* tp_getattro */
  0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC, /* tp_flags */
  "([Variable], [int | float | Value | ...])",       /* tp_doc */
  (traverseproc)Value_traverse,                      /* tp_traverse */
  (inquiry)Value_clear,                              /* tp_clear */
  (richcmpfunc)Value_richcmp,                        /* tp_richcmp */
  0, 0, 0,
  Value_methods,                                     /* tp_methods */
  0,
  Value_getset,                                      /* tp_getset */
  0, 0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Value_new,                                /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

ORANGE_API TOrangeType PyOrValue_Type (PyOrValue_Type_inh, typeid(TValue), 0, PyOr_noConversion, PyOr_noConversion, NULL, false, NULL, NULL);



/* -------------- ValueList --------------*/

PyMethodDef ValueList_methods[] = {
     {"__reduce__", (binaryfunc)ValueList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)ValueList_append, METH_O, "(Value) -> None"},
     {"count", (binaryfunc)ValueList_count, METH_O, "(Value) -> int"},
     {"extend", (binaryfunc)ValueList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)ValueList_filter, METH_VARARGS, "([filter-function]) -> ValueList"},
     {"index", (binaryfunc)ValueList_index, METH_O, "(Value) -> int"},
     {"insert", (binaryfunc)ValueList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)ValueList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)ValueList_pop, METH_VARARGS, "() -> Value"},
     {"remove", (binaryfunc)ValueList_remove, METH_O, "(Value) -> None"},
     {"reverse", (binaryfunc)ValueList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ValueList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods ValueList_as_sequence = {
  (inquiry)ValueList_len_sq,                         /* sq_length */
  (binaryfunc)ValueList_concat,                      /* sq_concat */
  (intargfunc)ValueList_repeat,                      /* sq_repeat */
  (intargfunc)ValueList_getitem_sq,                  /* sq_item */
  (intintargfunc)ValueList_getslice,                 /* sq_slice */
  (intobjargproc)ValueList_setitem_sq,               /* sq_ass_item */
  (intintobjargproc)ValueList_setslice,              /* sq_ass_slice */
  (objobjproc)ValueList_contains,                    /* sq_contains */
};

PyTypeObject PyOrValueList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)ValueList_repr,                          /* tp_repr */
  0,
  &ValueList_as_sequence,                            /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)ValueList_str,                           /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Value>)",                               /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ValueList_methods,                                 /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ValueList_new,                            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueList(PyObject *obj, void *ptr) { if (!PyOrValueList_Check(obj)) return 0;      *(GCPtr<TValueList> *)(ptr) = PyOrange_AsValueList(obj); return 1; }
int ccn_func_ValueList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueList> *)(ptr) = GCPtr<TValueList>(); return 1; }      if (!PyOrValueList_Check(obj)) return 0;      *(GCPtr<TValueList> *)(ptr) = PyOrange_AsValueList(obj); return 1; }


ORANGE_API TOrangeType PyOrValueList_Type (PyOrValueList_Type_inh, typeid(TValueList), 0, cc_ValueList, ccn_ValueList, NULL, true, NULL, NULL);



