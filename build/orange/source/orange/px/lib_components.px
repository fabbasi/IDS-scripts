/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern ORANGE_API TOrangeType PyOrConditionalProbabilityEstimator_Type;
extern ORANGE_API TOrangeType PyOrConditionalProbabilityEstimatorConstructor_Type;
extern ORANGE_API TOrangeType PyOrContingency_Type;
extern ORANGE_API TOrangeType PyOrContingencyClass_Type;
extern ORANGE_API TOrangeType PyOrExamplesDistance_Type;
extern ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Type;
extern ORANGE_API TOrangeType PyOrExamplesDistance_Normalized_Type;
extern ORANGE_API TOrangeType PyOrFilter_Type;
extern ORANGE_API TOrangeType PyOrFindNearest_Type;
extern ORANGE_API TOrangeType PyOrFindNearestConstructor_Type;
extern ORANGE_API TOrangeType PyOrGeneralExampleClustering_Type;
extern ORANGE_API TOrangeType PyOrGraph_Type;
extern ORANGE_API TOrangeType PyOrImputer_Type;
extern ORANGE_API TOrangeType PyOrImputerConstructor_Type;
extern ORANGE_API TOrangeType PyOrMakeRandomIndices_Type;
extern ORANGE_API TOrangeType PyOrMeasureAttribute_Type;
extern ORANGE_API TOrangeType PyOrMeasureAttributeFromProbabilities_Type;
extern ORANGE_API TOrangeType PyOrOrange_Type;
extern ORANGE_API TOrangeType PyOrProbabilityEstimator_Type;
extern ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_Type;
extern ORANGE_API TOrangeType PyOrTransformValue_Type;
extern ORANGE_API TOrangeType PyOrValueFilter_Type;


/* -------------- BasicAttrStat --------------*/

PyMethodDef BasicAttrStat_methods[] = {
     {"add", (binaryfunc)BasicAttrStat_add, METH_VARARGS, "(value[, weight]) -> None"},
     {"recompute", (binaryfunc)BasicAttrStat_recompute, METH_NOARGS, "() -> None"},
     {"reset", (binaryfunc)BasicAttrStat_reset, METH_NOARGS, "() -> None"},
     {NULL, NULL}
};



PyTypeObject PyOrBasicAttrStat_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.basic.Variable",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(variable, [examples, weightID, min=, max=, avg=, dev=, n=]) -> BasicAttrStat", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  BasicAttrStat_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)BasicAttrStat_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_BasicAttrStat(PyObject *obj, void *ptr) { if (!PyOrBasicAttrStat_Check(obj)) return 0;      *(GCPtr<TBasicAttrStat> *)(ptr) = PyOrange_AsBasicAttrStat(obj); return 1; }
int ccn_func_BasicAttrStat(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TBasicAttrStat> *)(ptr) = GCPtr<TBasicAttrStat>(); return 1; }      if (!PyOrBasicAttrStat_Check(obj)) return 0;      *(GCPtr<TBasicAttrStat> *)(ptr) = PyOrange_AsBasicAttrStat(obj); return 1; }


ORANGE_API TOrangeType PyOrBasicAttrStat_Type (PyOrBasicAttrStat_Type_inh, typeid(TBasicAttrStat), 0, cc_BasicAttrStat, ccn_BasicAttrStat, NULL, true, NULL, NULL);



/* -------------- ComputeDomainContingency --------------*/


POrange ComputeDomainContingency_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TComputeDomainContingency(), type); }


PyTypeObject PyOrComputeDomainContingency_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ComputeDomainContingency",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ComputeDomainContingency_call,        /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID]) -/-> DomainContingency",   /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ComputeDomainContingency(PyObject *obj, void *ptr) { if (!PyOrComputeDomainContingency_Check(obj)) return 0;      *(GCPtr<TComputeDomainContingency> *)(ptr) = PyOrange_AsComputeDomainContingency(obj); return 1; }
int ccn_func_ComputeDomainContingency(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TComputeDomainContingency> *)(ptr) = GCPtr<TComputeDomainContingency>(); return 1; }      if (!PyOrComputeDomainContingency_Check(obj)) return 0;      *(GCPtr<TComputeDomainContingency> *)(ptr) = PyOrange_AsComputeDomainContingency(obj); return 1; }


ORANGE_API TOrangeType PyOrComputeDomainContingency_Type (PyOrComputeDomainContingency_Type_inh, typeid(TComputeDomainContingency), ComputeDomainContingency_default_constructor, cc_ComputeDomainContingency, ccn_ComputeDomainContingency, NULL, true, NULL, NULL);



/* -------------- ConditionalProbabilityEstimator --------------*/

char ConditionalProbabilityEstimator_doc[] = "(Value, Condition) -> float  |  (Condition) -> Distribution | () -> Contingency";

PyObject *ConditionalProbabilityEstimator_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrConditionalProbabilityEstimator_Type, type, args, kwds); }


PyTypeObject PyOrConditionalProbabilityEstimator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ConditionalProbabilityEstimator_call, /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ConditionalProbabilityEstimator_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimator(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimator_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimator> *)(ptr) = PyOrange_AsConditionalProbabilityEstimator(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimator> *)(ptr) = GCPtr<TConditionalProbabilityEstimator>(); return 1; }      if (!PyOrConditionalProbabilityEstimator_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimator> *)(ptr) = PyOrange_AsConditionalProbabilityEstimator(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimator_Type (PyOrConditionalProbabilityEstimator_Type_inh, typeid(TConditionalProbabilityEstimator), 0, cc_ConditionalProbabilityEstimator, ccn_ConditionalProbabilityEstimator, NULL, false, NULL, NULL);



/* -------------- ConditionalProbabilityEstimatorConstructor --------------*/

char ConditionalProbabilityEstimatorConstructor_doc[] = "([contingency[, apriori]] [example generator[, weight]]) -> ProbabilityEstimator";

PyObject *ConditionalProbabilityEstimatorConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrConditionalProbabilityEstimatorConstructor_Type, type, args, kwds); }


PyTypeObject PyOrConditionalProbabilityEstimatorConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimatorConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ConditionalProbabilityEstimatorConstructor_call, /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ConditionalProbabilityEstimatorConstructor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimatorConstructor(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimatorConstructor_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorConstructor> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorConstructor(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimatorConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimatorConstructor> *)(ptr) = GCPtr<TConditionalProbabilityEstimatorConstructor>(); return 1; }      if (!PyOrConditionalProbabilityEstimatorConstructor_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorConstructor> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimatorConstructor_Type (PyOrConditionalProbabilityEstimatorConstructor_Type_inh, typeid(TConditionalProbabilityEstimatorConstructor), 0, cc_ConditionalProbabilityEstimatorConstructor, ccn_ConditionalProbabilityEstimatorConstructor, NULL, false, NULL, NULL);



/* -------------- ConditionalProbabilityEstimatorConstructor_ByRows --------------*/


POrange ConditionalProbabilityEstimatorConstructor_ByRows_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TConditionalProbabilityEstimatorConstructor_ByRows(), type); }


PyTypeObject PyOrConditionalProbabilityEstimatorConstructor_ByRows_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimatorConstructor_ByRows",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ConditionalProbabilityEstimator_[FromDistribution|ByRows]", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrConditionalProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimatorConstructor_ByRows(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimatorConstructor_ByRows_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorConstructor_ByRows> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorConstructor_ByRows(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimatorConstructor_ByRows(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimatorConstructor_ByRows> *)(ptr) = GCPtr<TConditionalProbabilityEstimatorConstructor_ByRows>(); return 1; }      if (!PyOrConditionalProbabilityEstimatorConstructor_ByRows_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorConstructor_ByRows> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorConstructor_ByRows(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimatorConstructor_ByRows_Type (PyOrConditionalProbabilityEstimatorConstructor_ByRows_Type_inh, typeid(TConditionalProbabilityEstimatorConstructor_ByRows), ConditionalProbabilityEstimatorConstructor_ByRows_default_constructor, cc_ConditionalProbabilityEstimatorConstructor_ByRows, ccn_ConditionalProbabilityEstimatorConstructor_ByRows, NULL, true, NULL, NULL);



/* -------------- ConditionalProbabilityEstimatorConstructor_loess --------------*/



TNamedConstantsDef ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_values[] = {{"Minimal", DISTRIBUTE_MINIMAL}, {"Factor", DISTRIBUTE_FACTOR}, {"Fixed", DISTRIBUTE_FIXED}, {"Uniform", DISTRIBUTE_UNIFORM}, {"Maximal", DISTRIBUTE_MAXIMAL}, {0, 0}};
static PyObject *ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_repr(PyObject *self) { return stringFromList(self, ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_values); }
PyObject *ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod__reduce__(PyObject *self);
PyMethodDef ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_methods[] = { {"__reduce__", (binaryfunc)ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "ConditionalProbabilityEstimatorConstructor_loess.DistributionMethod", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_repr, 0, 0, 0, 0, 0, (reprfunc)ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTConditionalProbabilityEstimatorConstructor_loess_DistributionMethod(void *l) { return PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong(*(int *)l); }
PyObject *ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod", ((PyIntObject *)(self))->ob_ival); }

void ConditionalProbabilityEstimatorConstructor_loess_addConstants()
{ PyObject *&dict = PyOrConditionalProbabilityEstimatorConstructor_loess_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Maximal", PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_MAXIMAL)));
  PyDict_SetItemString(dict, "Fixed", PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_FIXED)));
  PyDict_SetItemString(dict, "Uniform", PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_UNIFORM)));
  PyDict_SetItemString(dict, "Minimal", PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_MINIMAL)));
  PyDict_SetItemString(dict, "Factor", PyConditionalProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_FACTOR)));
}

POrange ConditionalProbabilityEstimatorConstructor_loess_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TConditionalProbabilityEstimatorConstructor_loess(), type); }


PyTypeObject PyOrConditionalProbabilityEstimatorConstructor_loess_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimatorConstructor_loess",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ProbabilityEstimator_FromCurves", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrConditionalProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimatorConstructor_loess(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimatorConstructor_loess_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorConstructor_loess> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorConstructor_loess(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimatorConstructor_loess(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimatorConstructor_loess> *)(ptr) = GCPtr<TConditionalProbabilityEstimatorConstructor_loess>(); return 1; }      if (!PyOrConditionalProbabilityEstimatorConstructor_loess_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorConstructor_loess> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorConstructor_loess(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimatorConstructor_loess_Type (PyOrConditionalProbabilityEstimatorConstructor_loess_Type_inh, typeid(TConditionalProbabilityEstimatorConstructor_loess), ConditionalProbabilityEstimatorConstructor_loess_default_constructor, cc_ConditionalProbabilityEstimatorConstructor_loess, ccn_ConditionalProbabilityEstimatorConstructor_loess, NULL, true, NULL, NULL);



/* -------------- ConditionalProbabilityEstimatorList --------------*/

PyMethodDef ConditionalProbabilityEstimatorList_methods[] = {
     {"__reduce__", (binaryfunc)ConditionalProbabilityEstimatorList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)ConditionalProbabilityEstimatorList_append, METH_O, "(ConditionalProbabilityEstimator) -> None"},
     {"count", (binaryfunc)ConditionalProbabilityEstimatorList_count, METH_O, "(ConditionalProbabilityEstimator) -> int"},
     {"extend", (binaryfunc)ConditionalProbabilityEstimatorList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)ConditionalProbabilityEstimatorList_filter, METH_VARARGS, "([filter-function]) -> ConditionalProbabilityEstimatorList"},
     {"index", (binaryfunc)ConditionalProbabilityEstimatorList_index, METH_O, "(ConditionalProbabilityEstimator) -> int"},
     {"insert", (binaryfunc)ConditionalProbabilityEstimatorList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)ConditionalProbabilityEstimatorList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)ConditionalProbabilityEstimatorList_pop, METH_VARARGS, "() -> ConditionalProbabilityEstimator"},
     {"remove", (binaryfunc)ConditionalProbabilityEstimatorList_remove, METH_O, "(ConditionalProbabilityEstimator) -> None"},
     {"reverse", (binaryfunc)ConditionalProbabilityEstimatorList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ConditionalProbabilityEstimatorList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods ConditionalProbabilityEstimatorList_as_sequence = {
  (inquiry)ConditionalProbabilityEstimatorList_len_sq, /* sq_length */
  (binaryfunc)ConditionalProbabilityEstimatorList_concat, /* sq_concat */
  (intargfunc)ConditionalProbabilityEstimatorList_repeat, /* sq_repeat */
  (intargfunc)ConditionalProbabilityEstimatorList_getitem_sq, /* sq_item */
  (intintargfunc)ConditionalProbabilityEstimatorList_getslice, /* sq_slice */
  (intobjargproc)ConditionalProbabilityEstimatorList_setitem_sq, /* sq_ass_item */
  (intintobjargproc)ConditionalProbabilityEstimatorList_setslice, /* sq_ass_slice */
  (objobjproc)ConditionalProbabilityEstimatorList_contains, /* sq_contains */
};

PyTypeObject PyOrConditionalProbabilityEstimatorList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimatorList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)ConditionalProbabilityEstimatorList_repr, /* tp_repr */
  0,
  &ConditionalProbabilityEstimatorList_as_sequence,  /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)ConditionalProbabilityEstimatorList_str, /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of ConditionalProbabilityEstimator>)",     /* tp_doc */
  0, 0,
  (richcmpfunc)ConditionalProbabilityEstimatorList_richcmp, /* tp_richcmp */
  0, 0, 0,
  ConditionalProbabilityEstimatorList_methods,       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ConditionalProbabilityEstimatorList_new,  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimatorList(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimatorList_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorList> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorList(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimatorList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimatorList> *)(ptr) = GCPtr<TConditionalProbabilityEstimatorList>(); return 1; }      if (!PyOrConditionalProbabilityEstimatorList_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimatorList> *)(ptr) = PyOrange_AsConditionalProbabilityEstimatorList(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimatorList_Type (PyOrConditionalProbabilityEstimatorList_Type_inh, typeid(TConditionalProbabilityEstimatorList), 0, cc_ConditionalProbabilityEstimatorList, ccn_ConditionalProbabilityEstimatorList, NULL, true, NULL, NULL);



/* -------------- ConditionalProbabilityEstimator_ByRows --------------*/


POrange ConditionalProbabilityEstimator_ByRows_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TConditionalProbabilityEstimator_ByRows(), type); }


PyTypeObject PyOrConditionalProbabilityEstimator_ByRows_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimator_ByRows",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrConditionalProbabilityEstimator_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimator_ByRows(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimator_ByRows_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimator_ByRows> *)(ptr) = PyOrange_AsConditionalProbabilityEstimator_ByRows(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimator_ByRows(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimator_ByRows> *)(ptr) = GCPtr<TConditionalProbabilityEstimator_ByRows>(); return 1; }      if (!PyOrConditionalProbabilityEstimator_ByRows_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimator_ByRows> *)(ptr) = PyOrange_AsConditionalProbabilityEstimator_ByRows(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimator_ByRows_Type (PyOrConditionalProbabilityEstimator_ByRows_Type_inh, typeid(TConditionalProbabilityEstimator_ByRows), ConditionalProbabilityEstimator_ByRows_default_constructor, cc_ConditionalProbabilityEstimator_ByRows, ccn_ConditionalProbabilityEstimator_ByRows, NULL, true, NULL, NULL);



/* -------------- ConditionalProbabilityEstimator_FromDistribution --------------*/


POrange ConditionalProbabilityEstimator_FromDistribution_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TConditionalProbabilityEstimator_FromDistribution(), type); }


PyTypeObject PyOrConditionalProbabilityEstimator_FromDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ConditionalProbabilityEstimator_FromDistribution",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrConditionalProbabilityEstimator_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ConditionalProbabilityEstimator_FromDistribution(PyObject *obj, void *ptr) { if (!PyOrConditionalProbabilityEstimator_FromDistribution_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimator_FromDistribution> *)(ptr) = PyOrange_AsConditionalProbabilityEstimator_FromDistribution(obj); return 1; }
int ccn_func_ConditionalProbabilityEstimator_FromDistribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TConditionalProbabilityEstimator_FromDistribution> *)(ptr) = GCPtr<TConditionalProbabilityEstimator_FromDistribution>(); return 1; }      if (!PyOrConditionalProbabilityEstimator_FromDistribution_Check(obj)) return 0;      *(GCPtr<TConditionalProbabilityEstimator_FromDistribution> *)(ptr) = PyOrange_AsConditionalProbabilityEstimator_FromDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrConditionalProbabilityEstimator_FromDistribution_Type (PyOrConditionalProbabilityEstimator_FromDistribution_Type_inh, typeid(TConditionalProbabilityEstimator_FromDistribution), ConditionalProbabilityEstimator_FromDistribution_default_constructor, cc_ConditionalProbabilityEstimator_FromDistribution, ccn_ConditionalProbabilityEstimator_FromDistribution, NULL, true, NULL, NULL);



/* -------------- Contingency --------------*/

PyMethodDef Contingency_methods[] = {
     {"__reduce__", (binaryfunc)Contingency__reduce__, METH_NOARGS, "()"},
     {"add", (binaryfunc)Contingency_add, METH_VARARGS, "(outer_value, inner_value[, w=1]) -> None"},
     {"items", (binaryfunc)Contingency_items, 0, "() -> [(string, Distribution)] | [(float: Distribution)]"},
     {"keys", (binaryfunc)Contingency_keys, 0, "() -> [string] | [float]"},
     {"normalize", (binaryfunc)Contingency_normalize, 0, "() -> None"},
     {"values", (binaryfunc)Contingency_values, 0, "() -> [Distribution]"},
     {NULL, NULL}
};



PySequenceMethods Contingency_as_sequence = {
  0, 0, 0,
  (intargfunc)Contingency_getitem_sq,                /* sq_item */
  0, 0, 0, 0,
};

PyMappingMethods Contingency_as_mapping = {
  (inquiry)Contingency_len,                          /* mp_length */
  (binaryfunc)Contingency_getitem,                   /* mp_subscript */
  (objobjargproc)Contingency_setitem,                /* mp_ass_subscript */
};

PyTypeObject PyOrContingency_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.contingency.Table",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0,
  &Contingency_as_sequence,                          /* tp_as_sequence */
  &Contingency_as_mapping,                           /* tp_as_mapping */
  0, 0,
  (reprfunc)Contingency_str,                         /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(outer_desc, inner_desc)",                        /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Contingency_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Contingency_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Contingency(PyObject *obj, void *ptr) { if (!PyOrContingency_Check(obj)) return 0;      *(GCPtr<TContingency> *)(ptr) = PyOrange_AsContingency(obj); return 1; }
int ccn_func_Contingency(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TContingency> *)(ptr) = GCPtr<TContingency>(); return 1; }      if (!PyOrContingency_Check(obj)) return 0;      *(GCPtr<TContingency> *)(ptr) = PyOrange_AsContingency(obj); return 1; }


ORANGE_API TOrangeType PyOrContingency_Type (PyOrContingency_Type_inh, typeid(TContingency), 0, cc_Contingency, ccn_Contingency, NULL, false, NULL, NULL);



/* -------------- ContingencyAttrAttr --------------*/

PyMethodDef ContingencyAttrAttr_methods[] = {
     {"__reduce__", (binaryfunc)ContingencyAttrAttr__reduce__, METH_NOARGS, "()"},
     {"p_attr", (binaryfunc)ContingencyAttrAttr_p_attr, METH_VARARGS, "(outer_value[, inner_value]) -> p | distribution of values"},
     {NULL, NULL}
};



PyTypeObject PyOrContingencyAttrAttr_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.contingency.VarVar",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(outer_attr, inner_attr[, examples [, weight-id]])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ContingencyAttrAttr_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrContingency_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ContingencyAttrAttr_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ContingencyAttrAttr(PyObject *obj, void *ptr) { if (!PyOrContingencyAttrAttr_Check(obj)) return 0;      *(GCPtr<TContingencyAttrAttr> *)(ptr) = PyOrange_AsContingencyAttrAttr(obj); return 1; }
int ccn_func_ContingencyAttrAttr(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TContingencyAttrAttr> *)(ptr) = GCPtr<TContingencyAttrAttr>(); return 1; }      if (!PyOrContingencyAttrAttr_Check(obj)) return 0;      *(GCPtr<TContingencyAttrAttr> *)(ptr) = PyOrange_AsContingencyAttrAttr(obj); return 1; }


ORANGE_API TOrangeType PyOrContingencyAttrAttr_Type (PyOrContingencyAttrAttr_Type_inh, typeid(TContingencyAttrAttr), 0, cc_ContingencyAttrAttr, ccn_ContingencyAttrAttr, NULL, false, NULL, NULL);



/* -------------- ContingencyAttrClass --------------*/

PyMethodDef ContingencyAttrClass_methods[] = {
     {"__reduce__", (binaryfunc)ContingencyAttrClass__reduce__, METH_NOARGS, "()"},
     {"p_class", (binaryfunc)ContingencyAttrClass_p_class, METH_VARARGS, "(attr_value[, class_value]) -> p | distribution of classes"},
     {NULL, NULL}
};



PyTypeObject PyOrContingencyAttrClass_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.contingency.VarClass",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(attribute, class attribute) | (attribute, examples[, weightID])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ContingencyAttrClass_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrContingencyClass_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ContingencyAttrClass_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ContingencyAttrClass(PyObject *obj, void *ptr) { if (!PyOrContingencyAttrClass_Check(obj)) return 0;      *(GCPtr<TContingencyAttrClass> *)(ptr) = PyOrange_AsContingencyAttrClass(obj); return 1; }
int ccn_func_ContingencyAttrClass(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TContingencyAttrClass> *)(ptr) = GCPtr<TContingencyAttrClass>(); return 1; }      if (!PyOrContingencyAttrClass_Check(obj)) return 0;      *(GCPtr<TContingencyAttrClass> *)(ptr) = PyOrange_AsContingencyAttrClass(obj); return 1; }


ORANGE_API TOrangeType PyOrContingencyAttrClass_Type (PyOrContingencyAttrClass_Type_inh, typeid(TContingencyAttrClass), 0, cc_ContingencyAttrClass, ccn_ContingencyAttrClass, NULL, false, NULL, NULL);



/* -------------- ContingencyClass --------------*/

PyMethodDef ContingencyClass_methods[] = {
     {"add_var_class", (binaryfunc)ContingencyClass_add_var_class, METH_VARARGS, "(attribute_value, class_value[, w=1]) -> None"},
     {NULL, NULL}
};

PyGetSetDef ContingencyClass_getset[]=  {
  {"class_var", (getter)ContingencyClass_get_classVar, NULL},
  {"variable", (getter)ContingencyClass_get_variable, NULL},
  {NULL}};


PyObject *ContingencyClass_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrContingencyClass_Type, type, args, kwds); }


TAttributeAlias ContingencyClass_aliases[] = {
    {"add_attrclass", "add_var_class"},
    {NULL, NULL}};

PyTypeObject PyOrContingencyClass_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.contingency.Class",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(outer_desc, inner_desc)",                        /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ContingencyClass_methods,                          /* tp_methods */
  0,
  ContingencyClass_getset,                           /* tp_getset */
  (_typeobject *)&PyOrContingency_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ContingencyClass_abstract_constructor,    /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ContingencyClass(PyObject *obj, void *ptr) { if (!PyOrContingencyClass_Check(obj)) return 0;      *(GCPtr<TContingencyClass> *)(ptr) = PyOrange_AsContingencyClass(obj); return 1; }
int ccn_func_ContingencyClass(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TContingencyClass> *)(ptr) = GCPtr<TContingencyClass>(); return 1; }      if (!PyOrContingencyClass_Check(obj)) return 0;      *(GCPtr<TContingencyClass> *)(ptr) = PyOrange_AsContingencyClass(obj); return 1; }


ORANGE_API TOrangeType PyOrContingencyClass_Type (PyOrContingencyClass_Type_inh, typeid(TContingencyClass), 0, cc_ContingencyClass, ccn_ContingencyClass, NULL, false, NULL, ContingencyClass_aliases);



/* -------------- ContingencyClassAttr --------------*/

PyMethodDef ContingencyClassAttr_methods[] = {
     {"__reduce__", (binaryfunc)ContingencyClassAttr__reduce__, METH_NOARGS, "()"},
     {"p_attr", (binaryfunc)ContingencyClassAttr_p_attr, METH_VARARGS, "([attr_value, ]class_value) -> p | distribution of values"},
     {NULL, NULL}
};



PyTypeObject PyOrContingencyClassAttr_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.contingency.ClassVar",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(attribute, class attribute) | (attribute, examples[, weightID])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ContingencyClassAttr_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrContingencyClass_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ContingencyClassAttr_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ContingencyClassAttr(PyObject *obj, void *ptr) { if (!PyOrContingencyClassAttr_Check(obj)) return 0;      *(GCPtr<TContingencyClassAttr> *)(ptr) = PyOrange_AsContingencyClassAttr(obj); return 1; }
int ccn_func_ContingencyClassAttr(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TContingencyClassAttr> *)(ptr) = GCPtr<TContingencyClassAttr>(); return 1; }      if (!PyOrContingencyClassAttr_Check(obj)) return 0;      *(GCPtr<TContingencyClassAttr> *)(ptr) = PyOrange_AsContingencyClassAttr(obj); return 1; }


ORANGE_API TOrangeType PyOrContingencyClassAttr_Type (PyOrContingencyClassAttr_Type_inh, typeid(TContingencyClassAttr), 0, cc_ContingencyClassAttr, ccn_ContingencyClassAttr, NULL, false, NULL, NULL);



/* -------------- CostMatrix --------------*/

PyMethodDef CostMatrix_methods[] = {
     {"__reduce__", (binaryfunc)CostMatrix__reduce__, METH_NOARGS, "()"},
     {"getcost", (binaryfunc)CostMatrix_getcost, METH_VARARGS, "(predicted, correct) -> float"},
     {"native", (binaryfunc)CostMatrix_native, METH_O, "() -> list of lists of floats"},
     {"setcost", (binaryfunc)CostMatrix_setcost, METH_VARARGS, "(predicted, correct, cost) -> float"},
     {NULL, NULL}
};



PyTypeObject PyOrCostMatrix_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.CostMatrix",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(list-of-list-of-prices) -> CostMatrix",          /* tp_doc */
  0, 0, 0, 0, 0, 0,
  CostMatrix_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)CostMatrix_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_CostMatrix(PyObject *obj, void *ptr) { if (!PyOrCostMatrix_Check(obj)) return 0;      *(GCPtr<TCostMatrix> *)(ptr) = PyOrange_AsCostMatrix(obj); return 1; }
int ccn_func_CostMatrix(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TCostMatrix> *)(ptr) = GCPtr<TCostMatrix>(); return 1; }      if (!PyOrCostMatrix_Check(obj)) return 0;      *(GCPtr<TCostMatrix> *)(ptr) = PyOrange_AsCostMatrix(obj); return 1; }


ORANGE_API TOrangeType PyOrCostMatrix_Type (PyOrCostMatrix_Type_inh, typeid(TCostMatrix), 0, cc_CostMatrix, ccn_CostMatrix, NULL, false, NULL, NULL);



/* -------------- DistanceMap --------------*/

PyMethodDef DistanceMap_methods[] = {
     {"__reduce__", (binaryfunc)DistanceMap__reduce__, METH_NOARGS, "()"},
     {"get_bitmap", (binaryfunc)DistanceMap_getBitmap, METH_VARARGS, "(cell_width, cell_height, lowerBound, upperBound, gamma) -> bitmap"},
     {"get_cell_intensity", (binaryfunc)DistanceMap_getCellIntensity, METH_VARARGS, "(row, column) -> float"},
     {"get_percentile_interval", (binaryfunc)DistanceMap_getPercentileInterval, METH_VARARGS, "(lower_percentile, upper_percentile) -> (min, max)"},
     {NULL, NULL}
};


PyObject *DistanceMap_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrDistanceMap_Type, type, args, kwds); }


PyTypeObject PyOrDistanceMap_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.DistanceMap",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  DistanceMap_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DistanceMap_abstract_constructor,         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistanceMap(PyObject *obj, void *ptr) { if (!PyOrDistanceMap_Check(obj)) return 0;      *(GCPtr<TDistanceMap> *)(ptr) = PyOrange_AsDistanceMap(obj); return 1; }
int ccn_func_DistanceMap(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistanceMap> *)(ptr) = GCPtr<TDistanceMap>(); return 1; }      if (!PyOrDistanceMap_Check(obj)) return 0;      *(GCPtr<TDistanceMap> *)(ptr) = PyOrange_AsDistanceMap(obj); return 1; }


ORANGE_API TOrangeType PyOrDistanceMap_Type (PyOrDistanceMap_Type_inh, typeid(TDistanceMap), 0, cc_DistanceMap, ccn_DistanceMap, NULL, false, NULL, NULL);



/* -------------- DistanceMapConstructor --------------*/

PyMethodDef DistanceMapConstructor_methods[] = {
     {"get_legend", (binaryfunc)DistanceMapConstructor_getLegend, METH_VARARGS, "(width, height, gamma) -> bitmap"},
     {NULL, NULL}
};

char DistanceMapConstructor_doc[] = "(squeeze) -> DistanceMap";

POrange DistanceMapConstructor_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TDistanceMapConstructor(), type); }


PyTypeObject PyOrDistanceMapConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.DistanceMapConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)DistanceMapConstructor_call,          /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(distanceMatrix=, order=)",                       /* tp_doc */
  0, 0, 0, 0, 0, 0,
  DistanceMapConstructor_methods,                    /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DistanceMapConstructor(PyObject *obj, void *ptr) { if (!PyOrDistanceMapConstructor_Check(obj)) return 0;      *(GCPtr<TDistanceMapConstructor> *)(ptr) = PyOrange_AsDistanceMapConstructor(obj); return 1; }
int ccn_func_DistanceMapConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDistanceMapConstructor> *)(ptr) = GCPtr<TDistanceMapConstructor>(); return 1; }      if (!PyOrDistanceMapConstructor_Check(obj)) return 0;      *(GCPtr<TDistanceMapConstructor> *)(ptr) = PyOrange_AsDistanceMapConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrDistanceMapConstructor_Type (PyOrDistanceMapConstructor_Type_inh, typeid(TDistanceMapConstructor), DistanceMapConstructor_default_constructor, cc_DistanceMapConstructor, ccn_DistanceMapConstructor, NULL, true, NULL, NULL);



/* -------------- DomainBasicAttrStat --------------*/

PyMethodDef DomainBasicAttrStat_methods[] = {
     {"__reduce__", (binaryfunc)DomainBasicAttrStat__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)DomainBasicAttrStat_append, METH_O, "(BasicAttrStat) -> None"},
     {"count", (binaryfunc)DomainBasicAttrStat_count, METH_O, "(BasicAttrStat) -> int"},
     {"extend", (binaryfunc)DomainBasicAttrStat_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)DomainBasicAttrStat_filter, METH_VARARGS, "([filter-function]) -> DomainBasicAttrStat"},
     {"index", (binaryfunc)DomainBasicAttrStat_index, METH_O, "(BasicAttrStat) -> int"},
     {"insert", (binaryfunc)DomainBasicAttrStat_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)DomainBasicAttrStat_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)DomainBasicAttrStat_pop, METH_VARARGS, "() -> BasicAttrStat"},
     {"purge", (binaryfunc)DomainBasicAttrStat_purge, METH_NOARGS, "None -> None"},
     {"remove", (binaryfunc)DomainBasicAttrStat_remove, METH_O, "(BasicAttrStat) -> None"},
     {"reverse", (binaryfunc)DomainBasicAttrStat_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)DomainBasicAttrStat_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods DomainBasicAttrStat_as_sequence = {
  (inquiry)DomainBasicAttrStat_len_sq,               /* sq_length */
  (binaryfunc)DomainBasicAttrStat_concat,            /* sq_concat */
  (intargfunc)DomainBasicAttrStat_repeat,            /* sq_repeat */
  (intargfunc)DomainBasicAttrStat_getitem_sq,        /* sq_item */
  (intintargfunc)DomainBasicAttrStat_getslice,       /* sq_slice */
  (intobjargproc)DomainBasicAttrStat_setitem_sq,     /* sq_ass_item */
  (intintobjargproc)DomainBasicAttrStat_setslice,    /* sq_ass_slice */
  (objobjproc)DomainBasicAttrStat_contains,          /* sq_contains */
};

PyMappingMethods DomainBasicAttrStat_as_mapping = {
  0,
  (binaryfunc)DomainBasicAttrStat_getitem,           /* mp_subscript */
  (objobjargproc)DomainBasicAttrStat_setitem,        /* mp_ass_subscript */
};

PyTypeObject PyOrDomainBasicAttrStat_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.basic.Domain",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)DomainBasicAttrStat_repr,                /* tp_repr */
  0,
  &DomainBasicAttrStat_as_sequence,                  /* tp_as_sequence */
  &DomainBasicAttrStat_as_mapping,                   /* tp_as_mapping */
  0, 0,
  (reprfunc)DomainBasicAttrStat_str,                 /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples | <list of BasicAttrStat>) -> DomainBasicAttrStat", /* tp_doc */
  0, 0,
  (richcmpfunc)DomainBasicAttrStat_richcmp,          /* tp_richcmp */
  0, 0, 0,
  DomainBasicAttrStat_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DomainBasicAttrStat_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DomainBasicAttrStat(PyObject *obj, void *ptr) { if (!PyOrDomainBasicAttrStat_Check(obj)) return 0;      *(GCPtr<TDomainBasicAttrStat> *)(ptr) = PyOrange_AsDomainBasicAttrStat(obj); return 1; }
int ccn_func_DomainBasicAttrStat(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDomainBasicAttrStat> *)(ptr) = GCPtr<TDomainBasicAttrStat>(); return 1; }      if (!PyOrDomainBasicAttrStat_Check(obj)) return 0;      *(GCPtr<TDomainBasicAttrStat> *)(ptr) = PyOrange_AsDomainBasicAttrStat(obj); return 1; }


ORANGE_API TOrangeType PyOrDomainBasicAttrStat_Type (PyOrDomainBasicAttrStat_Type_inh, typeid(TDomainBasicAttrStat), 0, cc_DomainBasicAttrStat, ccn_DomainBasicAttrStat, NULL, true, NULL, NULL);



/* -------------- DomainContingency --------------*/

PyMethodDef DomainContingency_methods[] = {
     {"__reduce__", (binaryfunc)DomainContingency__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)DomainContingency_append, METH_O, "(Contingency) -> None"},
     {"count", (binaryfunc)DomainContingency_count, METH_O, "(Contingency) -> int"},
     {"extend", (binaryfunc)DomainContingency_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)DomainContingency_filter, METH_VARARGS, "([filter-function]) -> DomainContingency"},
     {"index", (binaryfunc)DomainContingency_index, METH_O, "(Contingency) -> int"},
     {"insert", (binaryfunc)DomainContingency_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)DomainContingency_native, METH_NOARGS, "() -> list"},
     {"normalize", (binaryfunc)DomainContingency_normalize, 0, "() -> None"},
     {"pop", (binaryfunc)DomainContingency_pop, METH_VARARGS, "() -> Contingency"},
     {"remove", (binaryfunc)DomainContingency_remove, METH_O, "(Contingency) -> None"},
     {"reverse", (binaryfunc)DomainContingency_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)DomainContingency_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};


char *DomainContingency_constructor_keywords[] = {"classIsOuter", "class_is_outer", NULL};

PySequenceMethods DomainContingency_as_sequence = {
  (inquiry)DomainContingency_len_sq,                 /* sq_length */
  (binaryfunc)DomainContingency_concat,              /* sq_concat */
  (intargfunc)DomainContingency_repeat,              /* sq_repeat */
  (intargfunc)DomainContingency_getitem_sq,          /* sq_item */
  (intintargfunc)DomainContingency_getslice,         /* sq_slice */
  (intobjargproc)DomainContingency_setitem_sq,       /* sq_ass_item */
  (intintobjargproc)DomainContingency_setslice,      /* sq_ass_slice */
  (objobjproc)DomainContingency_contains,            /* sq_contains */
};

PyMappingMethods DomainContingency_as_mapping = {
  0,
  (binaryfunc)DomainContingency_getitem,             /* mp_subscript */
  (objobjargproc)DomainContingency_setitem,          /* mp_ass_subscript */
};

PyTypeObject PyOrDomainContingency_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.statistics.contingency.Domain",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)DomainContingency_repr,                  /* tp_repr */
  0,
  &DomainContingency_as_sequence,                    /* tp_as_sequence */
  &DomainContingency_as_mapping,                     /* tp_as_mapping */
  0, 0,
  (reprfunc)DomainContingency_str,                   /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples [, weightID] | <list of Contingency>) -> DomainContingency", /* tp_doc */
  0, 0,
  (richcmpfunc)DomainContingency_richcmp,            /* tp_richcmp */
  0, 0, 0,
  DomainContingency_methods,                         /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DomainContingency_new,                    /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DomainContingency(PyObject *obj, void *ptr) { if (!PyOrDomainContingency_Check(obj)) return 0;      *(GCPtr<TDomainContingency> *)(ptr) = PyOrange_AsDomainContingency(obj); return 1; }
int ccn_func_DomainContingency(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDomainContingency> *)(ptr) = GCPtr<TDomainContingency>(); return 1; }      if (!PyOrDomainContingency_Check(obj)) return 0;      *(GCPtr<TDomainContingency> *)(ptr) = PyOrange_AsDomainContingency(obj); return 1; }


ORANGE_API TOrangeType PyOrDomainContingency_Type (PyOrDomainContingency_Type_inh, typeid(TDomainContingency), 0, cc_DomainContingency, ccn_DomainContingency, DomainContingency_constructor_keywords, true, NULL, NULL);



/* -------------- DomainTransformerConstructor --------------*/


PyObject *DomainTransformerConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrDomainTransformerConstructor_Type, type, args, kwds); }


PyTypeObject PyOrDomainTransformerConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.DomainTransformerConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)DomainTransformerConstructor_call,    /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)DomainTransformerConstructor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_DomainTransformerConstructor(PyObject *obj, void *ptr) { if (!PyOrDomainTransformerConstructor_Check(obj)) return 0;      *(GCPtr<TDomainTransformerConstructor> *)(ptr) = PyOrange_AsDomainTransformerConstructor(obj); return 1; }
int ccn_func_DomainTransformerConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TDomainTransformerConstructor> *)(ptr) = GCPtr<TDomainTransformerConstructor>(); return 1; }      if (!PyOrDomainTransformerConstructor_Check(obj)) return 0;      *(GCPtr<TDomainTransformerConstructor> *)(ptr) = PyOrange_AsDomainTransformerConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrDomainTransformerConstructor_Type (PyOrDomainTransformerConstructor_Type_inh, typeid(TDomainTransformerConstructor), 0, cc_DomainTransformerConstructor, ccn_DomainTransformerConstructor, NULL, false, NULL, NULL);



/* -------------- ExampleCluster --------------*/


POrange ExampleCluster_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExampleCluster(), type); }


PyTypeObject PyOrExampleCluster_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.clustering.ExampleCluster",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([left=, right=, distance=, centroid=])",         /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleCluster(PyObject *obj, void *ptr) { if (!PyOrExampleCluster_Check(obj)) return 0;      *(GCPtr<TExampleCluster> *)(ptr) = PyOrange_AsExampleCluster(obj); return 1; }
int ccn_func_ExampleCluster(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleCluster> *)(ptr) = GCPtr<TExampleCluster>(); return 1; }      if (!PyOrExampleCluster_Check(obj)) return 0;      *(GCPtr<TExampleCluster> *)(ptr) = PyOrange_AsExampleCluster(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleCluster_Type (PyOrExampleCluster_Type_inh, typeid(TExampleCluster), ExampleCluster_default_constructor, cc_ExampleCluster, ccn_ExampleCluster, NULL, true, NULL, NULL);



/* -------------- ExampleClusters --------------*/


POrange ExampleClusters_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExampleClusters(), type); }


PyTypeObject PyOrExampleClusters_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.construction.functionDecomposition.ExampleClusters",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([root=, quality=]",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrGeneralExampleClustering_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExampleClusters(PyObject *obj, void *ptr) { if (!PyOrExampleClusters_Check(obj)) return 0;      *(GCPtr<TExampleClusters> *)(ptr) = PyOrange_AsExampleClusters(obj); return 1; }
int ccn_func_ExampleClusters(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExampleClusters> *)(ptr) = GCPtr<TExampleClusters>(); return 1; }      if (!PyOrExampleClusters_Check(obj)) return 0;      *(GCPtr<TExampleClusters> *)(ptr) = PyOrange_AsExampleClusters(obj); return 1; }


ORANGE_API TOrangeType PyOrExampleClusters_Type (PyOrExampleClusters_Type_inh, typeid(TExampleClusters), ExampleClusters_default_constructor, cc_ExampleClusters, ccn_ExampleClusters, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance --------------*/

PyMethodDef ExamplesDistance_methods[] = {
     {"__reduce__", (binaryfunc)ExamplesDistance__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char ExamplesDistance_doc[] = "(example1, example2) -> float";


PyTypeObject PyOrExamplesDistance_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.Distance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ExamplesDistance_call,                /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExamplesDistance_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExamplesDistance_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Check(obj)) return 0;      *(GCPtr<TExamplesDistance> *)(ptr) = PyOrange_AsExamplesDistance(obj); return 1; }
int ccn_func_ExamplesDistance(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance> *)(ptr) = GCPtr<TExamplesDistance>(); return 1; }      if (!PyOrExamplesDistance_Check(obj)) return 0;      *(GCPtr<TExamplesDistance> *)(ptr) = PyOrange_AsExamplesDistance(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Type (PyOrExamplesDistance_Type_inh, typeid(TExamplesDistance), 0, cc_ExamplesDistance, ccn_ExamplesDistance, NULL, false, NULL, NULL);



/* -------------- ExamplesDistanceConstructor --------------*/

PyMethodDef ExamplesDistanceConstructor_methods[] = {
     {"__reduce__", (binaryfunc)ExamplesDistanceConstructor__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char ExamplesDistanceConstructor_doc[] = "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance";


PyTypeObject PyOrExamplesDistanceConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.DistanceConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ExamplesDistanceConstructor_call,     /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExamplesDistanceConstructor_methods,               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExamplesDistanceConstructor_new,          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor> *)(ptr) = PyOrange_AsExamplesDistanceConstructor(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor> *)(ptr) = GCPtr<TExamplesDistanceConstructor>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor> *)(ptr) = PyOrange_AsExamplesDistanceConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Type (PyOrExamplesDistanceConstructor_Type_inh, typeid(TExamplesDistanceConstructor), 0, cc_ExamplesDistanceConstructor, ccn_ExamplesDistanceConstructor, NULL, false, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_DTW --------------*/


POrange ExamplesDistanceConstructor_DTW_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_DTW(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_DTW_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.DTW",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_DTW", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_DTW(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_DTW_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_DTW> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_DTW(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_DTW(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_DTW> *)(ptr) = GCPtr<TExamplesDistanceConstructor_DTW>(); return 1; }      if (!PyOrExamplesDistanceConstructor_DTW_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_DTW> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_DTW(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_DTW_Type (PyOrExamplesDistanceConstructor_DTW_Type_inh, typeid(TExamplesDistanceConstructor_DTW), ExamplesDistanceConstructor_DTW_default_constructor, cc_ExamplesDistanceConstructor_DTW, ccn_ExamplesDistanceConstructor_DTW, NULL, true, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_Euclidean --------------*/


POrange ExamplesDistanceConstructor_Euclidean_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_Euclidean(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_Euclidean_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.Euclidean",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_Euclidean", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_Euclidean(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Euclidean_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Euclidean> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Euclidean(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_Euclidean(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_Euclidean> *)(ptr) = GCPtr<TExamplesDistanceConstructor_Euclidean>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Euclidean_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Euclidean> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Euclidean(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Euclidean_Type (PyOrExamplesDistanceConstructor_Euclidean_Type_inh, typeid(TExamplesDistanceConstructor_Euclidean), ExamplesDistanceConstructor_Euclidean_default_constructor, cc_ExamplesDistanceConstructor_Euclidean, ccn_ExamplesDistanceConstructor_Euclidean, NULL, true, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_Hamming --------------*/


POrange ExamplesDistanceConstructor_Hamming_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_Hamming(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_Hamming_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.Hamming",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_Hamming", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_Hamming(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Hamming_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Hamming> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Hamming(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_Hamming(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_Hamming> *)(ptr) = GCPtr<TExamplesDistanceConstructor_Hamming>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Hamming_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Hamming> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Hamming(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Hamming_Type (PyOrExamplesDistanceConstructor_Hamming_Type_inh, typeid(TExamplesDistanceConstructor_Hamming), ExamplesDistanceConstructor_Hamming_default_constructor, cc_ExamplesDistanceConstructor_Hamming, ccn_ExamplesDistanceConstructor_Hamming, NULL, true, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_Lp --------------*/


POrange ExamplesDistanceConstructor_Lp_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_Lp(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_Lp_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExamplesDistanceConstructor_Lp",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_Lp", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_Lp(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Lp_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Lp> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Lp(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_Lp(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_Lp> *)(ptr) = GCPtr<TExamplesDistanceConstructor_Lp>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Lp_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Lp> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Lp(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Lp_Type (PyOrExamplesDistanceConstructor_Lp_Type_inh, typeid(TExamplesDistanceConstructor_Lp), ExamplesDistanceConstructor_Lp_default_constructor, cc_ExamplesDistanceConstructor_Lp, ccn_ExamplesDistanceConstructor_Lp, NULL, true, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_Manhattan --------------*/


POrange ExamplesDistanceConstructor_Manhattan_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_Manhattan(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_Manhattan_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.Manhattan",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_Manhattan", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_Manhattan(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Manhattan_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Manhattan> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Manhattan(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_Manhattan(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_Manhattan> *)(ptr) = GCPtr<TExamplesDistanceConstructor_Manhattan>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Manhattan_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Manhattan> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Manhattan(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Manhattan_Type (PyOrExamplesDistanceConstructor_Manhattan_Type_inh, typeid(TExamplesDistanceConstructor_Manhattan), ExamplesDistanceConstructor_Manhattan_default_constructor, cc_ExamplesDistanceConstructor_Manhattan, ccn_ExamplesDistanceConstructor_Manhattan, NULL, true, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_Maximal --------------*/


POrange ExamplesDistanceConstructor_Maximal_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_Maximal(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_Maximal_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.Maximal",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_Maximal", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_Maximal(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Maximal_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Maximal> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Maximal(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_Maximal(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_Maximal> *)(ptr) = GCPtr<TExamplesDistanceConstructor_Maximal>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Maximal_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Maximal> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Maximal(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Maximal_Type (PyOrExamplesDistanceConstructor_Maximal_Type_inh, typeid(TExamplesDistanceConstructor_Maximal), ExamplesDistanceConstructor_Maximal_default_constructor, cc_ExamplesDistanceConstructor_Maximal, ccn_ExamplesDistanceConstructor_Maximal, NULL, true, NULL, NULL);



/* -------------- ExamplesDistanceConstructor_Relief --------------*/


POrange ExamplesDistanceConstructor_Relief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistanceConstructor_Relief(), type); }


PyTypeObject PyOrExamplesDistanceConstructor_Relief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.Relief",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, weightID][, DomainDistributions][, DomainBasicAttrStat]) -/-> ExamplesDistance_Relief", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistanceConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistanceConstructor_Relief(PyObject *obj, void *ptr) { if (!PyOrExamplesDistanceConstructor_Relief_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Relief> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Relief(obj); return 1; }
int ccn_func_ExamplesDistanceConstructor_Relief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistanceConstructor_Relief> *)(ptr) = GCPtr<TExamplesDistanceConstructor_Relief>(); return 1; }      if (!PyOrExamplesDistanceConstructor_Relief_Check(obj)) return 0;      *(GCPtr<TExamplesDistanceConstructor_Relief> *)(ptr) = PyOrange_AsExamplesDistanceConstructor_Relief(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistanceConstructor_Relief_Type (PyOrExamplesDistanceConstructor_Relief_Type_inh, typeid(TExamplesDistanceConstructor_Relief), ExamplesDistanceConstructor_Relief_default_constructor, cc_ExamplesDistanceConstructor_Relief, ccn_ExamplesDistanceConstructor_Relief, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_DTW --------------*/

PyMethodDef ExamplesDistance_DTW_methods[] = {
     {"alignment", (binaryfunc)ExamplesDistance_DTW_alignment, METH_VARARGS, "(example1, example2) -> (distance, path)"},
     {NULL, NULL}
};



TNamedConstantsDef ExamplesDistance_DTW_DistanceType_values[] = {{"Euclidean", 0}, {"Derivative", 1}, {0, 0}};
static PyObject *ExamplesDistance_DTW_DistanceType_repr(PyObject *self) { return stringFromList(self, ExamplesDistance_DTW_DistanceType_values); }
PyObject *ExamplesDistance_DTW_DistanceType__reduce__(PyObject *self);
PyMethodDef ExamplesDistance_DTW_DistanceType_methods[] = { {"__reduce__", (binaryfunc)ExamplesDistance_DTW_DistanceType__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyExamplesDistance_DTW_DistanceType_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "ExamplesDistance_DTW.DistanceType", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)ExamplesDistance_DTW_DistanceType_repr, 0, 0, 0, 0, 0, (reprfunc)ExamplesDistance_DTW_DistanceType_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, ExamplesDistance_DTW_DistanceType_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyExamplesDistance_DTW_DistanceType_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyExamplesDistance_DTW_DistanceType_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTExamplesDistance_DTW_DistanceType(void *l) { return PyExamplesDistance_DTW_DistanceType_FromLong(*(int *)l); }
PyObject *ExamplesDistance_DTW_DistanceType__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "ExamplesDistance_DTW_DistanceType", ((PyIntObject *)(self))->ob_ival); }

void ExamplesDistance_DTW_addConstants()
{ PyObject *&dict = PyOrExamplesDistance_DTW_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Euclidean", PyExamplesDistance_DTW_DistanceType_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Derivative", PyExamplesDistance_DTW_DistanceType_FromLong((long)(1)));
}

POrange ExamplesDistance_DTW_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_DTW(), type); }


PyTypeObject PyOrExamplesDistance_DTW_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.DTWDistance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExamplesDistance_DTW_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrExamplesDistance_Normalized_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_DTW(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_DTW_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_DTW> *)(ptr) = PyOrange_AsExamplesDistance_DTW(obj); return 1; }
int ccn_func_ExamplesDistance_DTW(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_DTW> *)(ptr) = GCPtr<TExamplesDistance_DTW>(); return 1; }      if (!PyOrExamplesDistance_DTW_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_DTW> *)(ptr) = PyOrange_AsExamplesDistance_DTW(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_DTW_Type (PyOrExamplesDistance_DTW_Type_inh, typeid(TExamplesDistance_DTW), ExamplesDistance_DTW_default_constructor, cc_ExamplesDistance_DTW, ccn_ExamplesDistance_DTW, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_Euclidean --------------*/


POrange ExamplesDistance_Euclidean_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_Euclidean(), type); }


PyTypeObject PyOrExamplesDistance_Euclidean_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.EuclideanDistance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistance_Normalized_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Euclidean(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Euclidean_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Euclidean> *)(ptr) = PyOrange_AsExamplesDistance_Euclidean(obj); return 1; }
int ccn_func_ExamplesDistance_Euclidean(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Euclidean> *)(ptr) = GCPtr<TExamplesDistance_Euclidean>(); return 1; }      if (!PyOrExamplesDistance_Euclidean_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Euclidean> *)(ptr) = PyOrange_AsExamplesDistance_Euclidean(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Euclidean_Type (PyOrExamplesDistance_Euclidean_Type_inh, typeid(TExamplesDistance_Euclidean), ExamplesDistance_Euclidean_default_constructor, cc_ExamplesDistance_Euclidean, ccn_ExamplesDistance_Euclidean, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_Hamming --------------*/


POrange ExamplesDistance_Hamming_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_Hamming(), type); }


PyTypeObject PyOrExamplesDistance_Hamming_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.HammingDistance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistance_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Hamming(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Hamming_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Hamming> *)(ptr) = PyOrange_AsExamplesDistance_Hamming(obj); return 1; }
int ccn_func_ExamplesDistance_Hamming(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Hamming> *)(ptr) = GCPtr<TExamplesDistance_Hamming>(); return 1; }      if (!PyOrExamplesDistance_Hamming_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Hamming> *)(ptr) = PyOrange_AsExamplesDistance_Hamming(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Hamming_Type (PyOrExamplesDistance_Hamming_Type_inh, typeid(TExamplesDistance_Hamming), ExamplesDistance_Hamming_default_constructor, cc_ExamplesDistance_Hamming, ccn_ExamplesDistance_Hamming, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_Lp --------------*/


POrange ExamplesDistance_Lp_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_Lp(), type); }


PyTypeObject PyOrExamplesDistance_Lp_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ExamplesDistance_Lp",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistance_Normalized_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Lp(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Lp_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Lp> *)(ptr) = PyOrange_AsExamplesDistance_Lp(obj); return 1; }
int ccn_func_ExamplesDistance_Lp(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Lp> *)(ptr) = GCPtr<TExamplesDistance_Lp>(); return 1; }      if (!PyOrExamplesDistance_Lp_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Lp> *)(ptr) = PyOrange_AsExamplesDistance_Lp(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Lp_Type (PyOrExamplesDistance_Lp_Type_inh, typeid(TExamplesDistance_Lp), ExamplesDistance_Lp_default_constructor, cc_ExamplesDistance_Lp, ccn_ExamplesDistance_Lp, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_Manhattan --------------*/


POrange ExamplesDistance_Manhattan_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_Manhattan(), type); }


PyTypeObject PyOrExamplesDistance_Manhattan_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.ManhattanDistance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistance_Normalized_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Manhattan(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Manhattan_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Manhattan> *)(ptr) = PyOrange_AsExamplesDistance_Manhattan(obj); return 1; }
int ccn_func_ExamplesDistance_Manhattan(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Manhattan> *)(ptr) = GCPtr<TExamplesDistance_Manhattan>(); return 1; }      if (!PyOrExamplesDistance_Manhattan_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Manhattan> *)(ptr) = PyOrange_AsExamplesDistance_Manhattan(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Manhattan_Type (PyOrExamplesDistance_Manhattan_Type_inh, typeid(TExamplesDistance_Manhattan), ExamplesDistance_Manhattan_default_constructor, cc_ExamplesDistance_Manhattan, ccn_ExamplesDistance_Manhattan, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_Maximal --------------*/


POrange ExamplesDistance_Maximal_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_Maximal(), type); }


PyTypeObject PyOrExamplesDistance_Maximal_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.MaximalDistance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistance_Normalized_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Maximal(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Maximal_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Maximal> *)(ptr) = PyOrange_AsExamplesDistance_Maximal(obj); return 1; }
int ccn_func_ExamplesDistance_Maximal(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Maximal> *)(ptr) = GCPtr<TExamplesDistance_Maximal>(); return 1; }      if (!PyOrExamplesDistance_Maximal_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Maximal> *)(ptr) = PyOrange_AsExamplesDistance_Maximal(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Maximal_Type (PyOrExamplesDistance_Maximal_Type_inh, typeid(TExamplesDistance_Maximal), ExamplesDistance_Maximal_default_constructor, cc_ExamplesDistance_Maximal, ccn_ExamplesDistance_Maximal, NULL, true, NULL, NULL);



/* -------------- ExamplesDistance_Normalized --------------*/

PyMethodDef ExamplesDistance_Normalized_methods[] = {
     {"attribute_distances", (binaryfunc)ExamplesDistance_Normalized_attributeDistances, METH_VARARGS, "(example1, example2) -> [by-attribute distances as floats]"},
     {NULL, NULL}
};


PyObject *ExamplesDistance_Normalized_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrExamplesDistance_Normalized_Type, type, args, kwds); }


TAttributeAlias ExamplesDistance_Normalized_aliases[] = {
    {"feature_distances", "attribute_distances"},
    {NULL, NULL}};

PyTypeObject PyOrExamplesDistance_Normalized_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.DistanceNormalized",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  ExamplesDistance_Normalized_methods,               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrExamplesDistance_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ExamplesDistance_Normalized_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Normalized(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Normalized_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Normalized> *)(ptr) = PyOrange_AsExamplesDistance_Normalized(obj); return 1; }
int ccn_func_ExamplesDistance_Normalized(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Normalized> *)(ptr) = GCPtr<TExamplesDistance_Normalized>(); return 1; }      if (!PyOrExamplesDistance_Normalized_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Normalized> *)(ptr) = PyOrange_AsExamplesDistance_Normalized(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Normalized_Type (PyOrExamplesDistance_Normalized_Type_inh, typeid(TExamplesDistance_Normalized), 0, cc_ExamplesDistance_Normalized, ccn_ExamplesDistance_Normalized, NULL, false, NULL, ExamplesDistance_Normalized_aliases);



/* -------------- ExamplesDistance_Relief --------------*/


POrange ExamplesDistance_Relief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TExamplesDistance_Relief(), type); }


PyTypeObject PyOrExamplesDistance_Relief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.distance.ReliefDistance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrExamplesDistance_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ExamplesDistance_Relief(PyObject *obj, void *ptr) { if (!PyOrExamplesDistance_Relief_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Relief> *)(ptr) = PyOrange_AsExamplesDistance_Relief(obj); return 1; }
int ccn_func_ExamplesDistance_Relief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TExamplesDistance_Relief> *)(ptr) = GCPtr<TExamplesDistance_Relief>(); return 1; }      if (!PyOrExamplesDistance_Relief_Check(obj)) return 0;      *(GCPtr<TExamplesDistance_Relief> *)(ptr) = PyOrange_AsExamplesDistance_Relief(obj); return 1; }


ORANGE_API TOrangeType PyOrExamplesDistance_Relief_Type (PyOrExamplesDistance_Relief_Type_inh, typeid(TExamplesDistance_Relief), ExamplesDistance_Relief_default_constructor, cc_ExamplesDistance_Relief, ccn_ExamplesDistance_Relief, NULL, true, NULL, NULL);



/* -------------- Filter --------------*/

PyMethodDef Filter_methods[] = {
     {"__reduce__", (binaryfunc)Filter__reduce__, METH_NOARGS, "()"},
     {"count", (binaryfunc)Filter_count, METH_O, "(examples)"},
     {"deep_copy", (binaryfunc)Filter_deepCopy, METH_NOARGS, "() -> filter"},
     {"selection_vector", (binaryfunc)Filter_selectionVector, METH_O, "(examples)"},
     {NULL, NULL}
};



PyTypeObject PyOrFilter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Filter_call,                          /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Filter_methods,                                    /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Filter_new,                               /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter(PyObject *obj, void *ptr) { if (!PyOrFilter_Check(obj)) return 0;      *(GCPtr<TFilter> *)(ptr) = PyOrange_AsFilter(obj); return 1; }
int ccn_func_Filter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter> *)(ptr) = GCPtr<TFilter>(); return 1; }      if (!PyOrFilter_Check(obj)) return 0;      *(GCPtr<TFilter> *)(ptr) = PyOrange_AsFilter(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_Type (PyOrFilter_Type_inh, typeid(TFilter), 0, cc_Filter, ccn_Filter, NULL, false, NULL, NULL);



/* -------------- FilterList --------------*/

PyMethodDef FilterList_methods[] = {
     {"__reduce__", (binaryfunc)FilterList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)FilterList_append, METH_O, "(Filter) -> None"},
     {"count", (binaryfunc)FilterList_count, METH_O, "(Filter) -> int"},
     {"extend", (binaryfunc)FilterList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)FilterList_filter, METH_VARARGS, "([filter-function]) -> FilterList"},
     {"index", (binaryfunc)FilterList_index, METH_O, "(Filter) -> int"},
     {"insert", (binaryfunc)FilterList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)FilterList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)FilterList_pop, METH_VARARGS, "() -> Filter"},
     {"remove", (binaryfunc)FilterList_remove, METH_O, "(Filter) -> None"},
     {"reverse", (binaryfunc)FilterList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)FilterList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods FilterList_as_sequence = {
  (inquiry)FilterList_len_sq,                        /* sq_length */
  (binaryfunc)FilterList_concat,                     /* sq_concat */
  (intargfunc)FilterList_repeat,                     /* sq_repeat */
  (intargfunc)FilterList_getitem_sq,                 /* sq_item */
  (intintargfunc)FilterList_getslice,                /* sq_slice */
  (intobjargproc)FilterList_setitem_sq,              /* sq_ass_item */
  (intintobjargproc)FilterList_setslice,             /* sq_ass_slice */
  (objobjproc)FilterList_contains,                   /* sq_contains */
};

PyTypeObject PyOrFilterList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FilterList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)FilterList_repr,                         /* tp_repr */
  0,
  &FilterList_as_sequence,                           /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)FilterList_str,                          /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Filter>)",                              /* tp_doc */
  0, 0,
  (richcmpfunc)FilterList_richcmp,                   /* tp_richcmp */
  0, 0, 0,
  FilterList_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FilterList_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FilterList(PyObject *obj, void *ptr) { if (!PyOrFilterList_Check(obj)) return 0;      *(GCPtr<TFilterList> *)(ptr) = PyOrange_AsFilterList(obj); return 1; }
int ccn_func_FilterList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilterList> *)(ptr) = GCPtr<TFilterList>(); return 1; }      if (!PyOrFilterList_Check(obj)) return 0;      *(GCPtr<TFilterList> *)(ptr) = PyOrange_AsFilterList(obj); return 1; }


ORANGE_API TOrangeType PyOrFilterList_Type (PyOrFilterList_Type_inh, typeid(TFilterList), 0, cc_FilterList, ccn_FilterList, NULL, true, NULL, NULL);



/* -------------- Filter_conjunction --------------*/



PyTypeObject PyOrFilter_conjunction_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_conjunction",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([filter-list])",                                 /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Filter_conjunction_new,                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_conjunction(PyObject *obj, void *ptr) { if (!PyOrFilter_conjunction_Check(obj)) return 0;      *(GCPtr<TFilter_conjunction> *)(ptr) = PyOrange_AsFilter_conjunction(obj); return 1; }
int ccn_func_Filter_conjunction(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_conjunction> *)(ptr) = GCPtr<TFilter_conjunction>(); return 1; }      if (!PyOrFilter_conjunction_Check(obj)) return 0;      *(GCPtr<TFilter_conjunction> *)(ptr) = PyOrange_AsFilter_conjunction(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_conjunction_Type (PyOrFilter_conjunction_Type_inh, typeid(TFilter_conjunction), 0, cc_Filter_conjunction, ccn_Filter_conjunction, NULL, true, NULL, NULL);



/* -------------- Filter_disjunction --------------*/



PyTypeObject PyOrFilter_disjunction_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_disjunction",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([filter-list])",                                 /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Filter_disjunction_new,                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_disjunction(PyObject *obj, void *ptr) { if (!PyOrFilter_disjunction_Check(obj)) return 0;      *(GCPtr<TFilter_disjunction> *)(ptr) = PyOrange_AsFilter_disjunction(obj); return 1; }
int ccn_func_Filter_disjunction(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_disjunction> *)(ptr) = GCPtr<TFilter_disjunction>(); return 1; }      if (!PyOrFilter_disjunction_Check(obj)) return 0;      *(GCPtr<TFilter_disjunction> *)(ptr) = PyOrange_AsFilter_disjunction(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_disjunction_Type (PyOrFilter_disjunction_Type_inh, typeid(TFilter_disjunction), 0, cc_Filter_disjunction, ccn_Filter_disjunction, NULL, true, NULL, NULL);



/* -------------- Filter_hasClassValue --------------*/


POrange Filter_hasClassValue_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_hasClassValue(), type); }


PyTypeObject PyOrFilter_hasClassValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_hasClassValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [negate=..., domain=...]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_hasClassValue(PyObject *obj, void *ptr) { if (!PyOrFilter_hasClassValue_Check(obj)) return 0;      *(GCPtr<TFilter_hasClassValue> *)(ptr) = PyOrange_AsFilter_hasClassValue(obj); return 1; }
int ccn_func_Filter_hasClassValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_hasClassValue> *)(ptr) = GCPtr<TFilter_hasClassValue>(); return 1; }      if (!PyOrFilter_hasClassValue_Check(obj)) return 0;      *(GCPtr<TFilter_hasClassValue> *)(ptr) = PyOrange_AsFilter_hasClassValue(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_hasClassValue_Type (PyOrFilter_hasClassValue_Type_inh, typeid(TFilter_hasClassValue), Filter_hasClassValue_default_constructor, cc_Filter_hasClassValue, ccn_Filter_hasClassValue, NULL, true, NULL, NULL);



/* -------------- Filter_hasMeta --------------*/


POrange Filter_hasMeta_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_hasMeta(), type); }


PyTypeObject PyOrFilter_hasMeta_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_hasMeta",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [id=...]) -/-> ExampleTable",        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_hasMeta(PyObject *obj, void *ptr) { if (!PyOrFilter_hasMeta_Check(obj)) return 0;      *(GCPtr<TFilter_hasMeta> *)(ptr) = PyOrange_AsFilter_hasMeta(obj); return 1; }
int ccn_func_Filter_hasMeta(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_hasMeta> *)(ptr) = GCPtr<TFilter_hasMeta>(); return 1; }      if (!PyOrFilter_hasMeta_Check(obj)) return 0;      *(GCPtr<TFilter_hasMeta> *)(ptr) = PyOrange_AsFilter_hasMeta(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_hasMeta_Type (PyOrFilter_hasMeta_Type_inh, typeid(TFilter_hasMeta), Filter_hasMeta_default_constructor, cc_Filter_hasMeta, ccn_Filter_hasMeta, NULL, true, NULL, NULL);



/* -------------- Filter_hasSpecial --------------*/


POrange Filter_hasSpecial_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_hasSpecial(), type); }


PyTypeObject PyOrFilter_hasSpecial_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_hasSpecial",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [negate=..., domain=...]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_hasSpecial(PyObject *obj, void *ptr) { if (!PyOrFilter_hasSpecial_Check(obj)) return 0;      *(GCPtr<TFilter_hasSpecial> *)(ptr) = PyOrange_AsFilter_hasSpecial(obj); return 1; }
int ccn_func_Filter_hasSpecial(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_hasSpecial> *)(ptr) = GCPtr<TFilter_hasSpecial>(); return 1; }      if (!PyOrFilter_hasSpecial_Check(obj)) return 0;      *(GCPtr<TFilter_hasSpecial> *)(ptr) = PyOrange_AsFilter_hasSpecial(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_hasSpecial_Type (PyOrFilter_hasSpecial_Type_inh, typeid(TFilter_hasSpecial), Filter_hasSpecial_default_constructor, cc_Filter_hasSpecial, ccn_Filter_hasSpecial, NULL, true, NULL, NULL);



/* -------------- Filter_isDefined --------------*/

PyGetSetDef Filter_isDefined_getset[]=  {
  {"check", NULL, (setter)Filter_isDefined_set_check},
  {NULL}};


POrange Filter_isDefined_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_isDefined(), type); }


PyTypeObject PyOrFilter_isDefined_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_isDefined",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [negate=..., domain=..., check=]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0,
  Filter_isDefined_getset,                           /* tp_getset */
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_isDefined(PyObject *obj, void *ptr) { if (!PyOrFilter_isDefined_Check(obj)) return 0;      *(GCPtr<TFilter_isDefined> *)(ptr) = PyOrange_AsFilter_isDefined(obj); return 1; }
int ccn_func_Filter_isDefined(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_isDefined> *)(ptr) = GCPtr<TFilter_isDefined>(); return 1; }      if (!PyOrFilter_isDefined_Check(obj)) return 0;      *(GCPtr<TFilter_isDefined> *)(ptr) = PyOrange_AsFilter_isDefined(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_isDefined_Type (PyOrFilter_isDefined_Type_inh, typeid(TFilter_isDefined), Filter_isDefined_default_constructor, cc_Filter_isDefined, ccn_Filter_isDefined, NULL, true, NULL, NULL);



/* -------------- Filter_random --------------*/


POrange Filter_random_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_random(), type); }


TAttributeAlias Filter_random_aliases[] = {
    {"random_generator", "randomGenerator"},
    {NULL, NULL}};

PyTypeObject PyOrFilter_random_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_random",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [negate=..., p=...]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_random(PyObject *obj, void *ptr) { if (!PyOrFilter_random_Check(obj)) return 0;      *(GCPtr<TFilter_random> *)(ptr) = PyOrange_AsFilter_random(obj); return 1; }
int ccn_func_Filter_random(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_random> *)(ptr) = GCPtr<TFilter_random>(); return 1; }      if (!PyOrFilter_random_Check(obj)) return 0;      *(GCPtr<TFilter_random> *)(ptr) = PyOrange_AsFilter_random(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_random_Type (PyOrFilter_random_Type_inh, typeid(TFilter_random), Filter_random_default_constructor, cc_Filter_random, ccn_Filter_random, NULL, true, NULL, Filter_random_aliases);



/* -------------- Filter_sameValue --------------*/


POrange Filter_sameValue_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_sameValue(), type); }


PyTypeObject PyOrFilter_sameValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_sameValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [negate=..., domain=..., position=<int>, value=...]) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_sameValue(PyObject *obj, void *ptr) { if (!PyOrFilter_sameValue_Check(obj)) return 0;      *(GCPtr<TFilter_sameValue> *)(ptr) = PyOrange_AsFilter_sameValue(obj); return 1; }
int ccn_func_Filter_sameValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_sameValue> *)(ptr) = GCPtr<TFilter_sameValue>(); return 1; }      if (!PyOrFilter_sameValue_Check(obj)) return 0;      *(GCPtr<TFilter_sameValue> *)(ptr) = PyOrange_AsFilter_sameValue(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_sameValue_Type (PyOrFilter_sameValue_Type_inh, typeid(TFilter_sameValue), Filter_sameValue_default_constructor, cc_Filter_sameValue, ccn_Filter_sameValue, NULL, true, NULL, NULL);



/* -------------- Filter_values --------------*/



TNamedConstantsDef Filter_values_Operator_values[] = {{"None", 0}, {"Equal", 1}, {"NotEqual", 2}, {"Less", 3}, {"LessEqual", 4}, {"Greater", 5}, {"GreaterEqual", 6}, {"Between", 7}, {"Outside", 8}, {"Contains", 9}, {"NotContains", 10}, {"BeginsWith", 11}, {"EndsWith", 12}, {"Listed", 13}, {0, 0}};
static PyObject *Filter_values_Operator_repr(PyObject *self) { return stringFromList(self, Filter_values_Operator_values); }
PyObject *Filter_values_Operator__reduce__(PyObject *self);
PyMethodDef Filter_values_Operator_methods[] = { {"__reduce__", (binaryfunc)Filter_values_Operator__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyFilter_values_Operator_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "Filter_values.Operator", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)Filter_values_Operator_repr, 0, 0, 0, 0, 0, (reprfunc)Filter_values_Operator_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, Filter_values_Operator_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyFilter_values_Operator_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyFilter_values_Operator_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTFilter_values_Operator(void *l) { return PyFilter_values_Operator_FromLong(*(int *)l); }
PyObject *Filter_values_Operator__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "Filter_values_Operator", ((PyIntObject *)(self))->ob_ival); }

void Filter_values_addConstants()
{ PyObject *&dict = PyOrFilter_values_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "NotEqual", PyFilter_values_Operator_FromLong((long)(2)));
  PyDict_SetItemString(dict, "None", PyFilter_values_Operator_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Greater", PyFilter_values_Operator_FromLong((long)(5)));
  PyDict_SetItemString(dict, "Less", PyFilter_values_Operator_FromLong((long)(3)));
  PyDict_SetItemString(dict, "GreaterEqual", PyFilter_values_Operator_FromLong((long)(6)));
  PyDict_SetItemString(dict, "Contains", PyFilter_values_Operator_FromLong((long)(9)));
  PyDict_SetItemString(dict, "Equal", PyFilter_values_Operator_FromLong((long)(1)));
  PyDict_SetItemString(dict, "BeginsWith", PyFilter_values_Operator_FromLong((long)(11)));
  PyDict_SetItemString(dict, "Outside", PyFilter_values_Operator_FromLong((long)(8)));
  PyDict_SetItemString(dict, "Listed", PyFilter_values_Operator_FromLong((long)(13)));
  PyDict_SetItemString(dict, "EndsWith", PyFilter_values_Operator_FromLong((long)(12)));
  PyDict_SetItemString(dict, "Between", PyFilter_values_Operator_FromLong((long)(7)));
  PyDict_SetItemString(dict, "LessEqual", PyFilter_values_Operator_FromLong((long)(4)));
  PyDict_SetItemString(dict, "NotContains", PyFilter_values_Operator_FromLong((long)(10)));
}

POrange Filter_values_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFilter_values(), type); }


PyMappingMethods Filter_values_as_mapping = {
  0,
  (binaryfunc)Filter_values_getitem,                 /* mp_subscript */
  (objobjargproc)Filter_values_setitem,              /* mp_ass_subscript */
};

PyTypeObject PyOrFilter_values_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Filter_values",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  &Filter_values_as_mapping,                         /* tp_as_mapping */
  0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [negate=..., domain=..., values=<see the manual>) -/-> ExampleTable", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFilter_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Filter_values(PyObject *obj, void *ptr) { if (!PyOrFilter_values_Check(obj)) return 0;      *(GCPtr<TFilter_values> *)(ptr) = PyOrange_AsFilter_values(obj); return 1; }
int ccn_func_Filter_values(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFilter_values> *)(ptr) = GCPtr<TFilter_values>(); return 1; }      if (!PyOrFilter_values_Check(obj)) return 0;      *(GCPtr<TFilter_values> *)(ptr) = PyOrange_AsFilter_values(obj); return 1; }


ORANGE_API TOrangeType PyOrFilter_values_Type (PyOrFilter_values_Type_inh, typeid(TFilter_values), Filter_values_default_constructor, cc_Filter_values, ccn_Filter_values, NULL, true, NULL, NULL);



/* -------------- FindNearest --------------*/

char FindNearest_doc[] = "(example, k) -> ExampleTable";

PyObject *FindNearest_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrFindNearest_Type, type, args, kwds); }


PyTypeObject PyOrFindNearest_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FindNearest",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)FindNearest_call,                     /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FindNearest_abstract_constructor,         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FindNearest(PyObject *obj, void *ptr) { if (!PyOrFindNearest_Check(obj)) return 0;      *(GCPtr<TFindNearest> *)(ptr) = PyOrange_AsFindNearest(obj); return 1; }
int ccn_func_FindNearest(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFindNearest> *)(ptr) = GCPtr<TFindNearest>(); return 1; }      if (!PyOrFindNearest_Check(obj)) return 0;      *(GCPtr<TFindNearest> *)(ptr) = PyOrange_AsFindNearest(obj); return 1; }


ORANGE_API TOrangeType PyOrFindNearest_Type (PyOrFindNearest_Type_inh, typeid(TFindNearest), 0, cc_FindNearest, ccn_FindNearest, NULL, false, NULL, NULL);



/* -------------- FindNearestConstructor --------------*/

char FindNearestConstructor_doc[] = "(examples[, weightID[, distanceID]]) -> FindNearest";

PyObject *FindNearestConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrFindNearestConstructor_Type, type, args, kwds); }


PyTypeObject PyOrFindNearestConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.FindNearestConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)FindNearestConstructor_call,          /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)FindNearestConstructor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FindNearestConstructor(PyObject *obj, void *ptr) { if (!PyOrFindNearestConstructor_Check(obj)) return 0;      *(GCPtr<TFindNearestConstructor> *)(ptr) = PyOrange_AsFindNearestConstructor(obj); return 1; }
int ccn_func_FindNearestConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFindNearestConstructor> *)(ptr) = GCPtr<TFindNearestConstructor>(); return 1; }      if (!PyOrFindNearestConstructor_Check(obj)) return 0;      *(GCPtr<TFindNearestConstructor> *)(ptr) = PyOrange_AsFindNearestConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrFindNearestConstructor_Type (PyOrFindNearestConstructor_Type_inh, typeid(TFindNearestConstructor), 0, cc_FindNearestConstructor, ccn_FindNearestConstructor, NULL, false, NULL, NULL);



/* -------------- FindNearestConstructor_BruteForce --------------*/


POrange FindNearestConstructor_BruteForce_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFindNearestConstructor_BruteForce(), type); }


PyTypeObject PyOrFindNearestConstructor_BruteForce_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.knn.FindNearestConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID[, distanceID]], distanceConstructor=, includeSame=]) -/-> FindNearest", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFindNearestConstructor_Type,   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FindNearestConstructor_BruteForce(PyObject *obj, void *ptr) { if (!PyOrFindNearestConstructor_BruteForce_Check(obj)) return 0;      *(GCPtr<TFindNearestConstructor_BruteForce> *)(ptr) = PyOrange_AsFindNearestConstructor_BruteForce(obj); return 1; }
int ccn_func_FindNearestConstructor_BruteForce(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFindNearestConstructor_BruteForce> *)(ptr) = GCPtr<TFindNearestConstructor_BruteForce>(); return 1; }      if (!PyOrFindNearestConstructor_BruteForce_Check(obj)) return 0;      *(GCPtr<TFindNearestConstructor_BruteForce> *)(ptr) = PyOrange_AsFindNearestConstructor_BruteForce(obj); return 1; }


ORANGE_API TOrangeType PyOrFindNearestConstructor_BruteForce_Type (PyOrFindNearestConstructor_BruteForce_Type_inh, typeid(TFindNearestConstructor_BruteForce), FindNearestConstructor_BruteForce_default_constructor, cc_FindNearestConstructor_BruteForce, ccn_FindNearestConstructor_BruteForce, NULL, true, NULL, NULL);



/* -------------- FindNearest_BruteForce --------------*/


POrange FindNearest_BruteForce_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TFindNearest_BruteForce(), type); }


TAttributeAlias FindNearest_BruteForce_aliases[] = {
    {"instances", "examples"},
    {NULL, NULL}};

PyTypeObject PyOrFindNearest_BruteForce_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.knn.FindNearest",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([distance=, distanceID=, includeSame=])",        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrFindNearest_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_FindNearest_BruteForce(PyObject *obj, void *ptr) { if (!PyOrFindNearest_BruteForce_Check(obj)) return 0;      *(GCPtr<TFindNearest_BruteForce> *)(ptr) = PyOrange_AsFindNearest_BruteForce(obj); return 1; }
int ccn_func_FindNearest_BruteForce(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TFindNearest_BruteForce> *)(ptr) = GCPtr<TFindNearest_BruteForce>(); return 1; }      if (!PyOrFindNearest_BruteForce_Check(obj)) return 0;      *(GCPtr<TFindNearest_BruteForce> *)(ptr) = PyOrange_AsFindNearest_BruteForce(obj); return 1; }


ORANGE_API TOrangeType PyOrFindNearest_BruteForce_Type (PyOrFindNearest_BruteForce_Type_inh, typeid(TFindNearest_BruteForce), FindNearest_BruteForce_default_constructor, cc_FindNearest_BruteForce, ccn_FindNearest_BruteForce, NULL, true, NULL, FindNearest_BruteForce_aliases);



/* -------------- GeneralExampleClustering --------------*/

PyMethodDef GeneralExampleClustering_methods[] = {
     {"classifier", (binaryfunc)GeneralExampleClustering_classifier, METH_VARARGS, "([cut=0.0]) -> Classifier"},
     {"example_clusters", (binaryfunc)GeneralExampleClustering_exampleClusters, METH_NOARGS, "() -> ExampleClusters"},
     {"example_sets", (binaryfunc)GeneralExampleClustering_exampleSets, METH_VARARGS, "([cut=0.0]) -> ExampleSets"},
     {"feature", (binaryfunc)GeneralExampleClustering_feature, METH_VARARGS, "([cut=0.0]) -> Variable"},
     {NULL, NULL}
};


PyObject *GeneralExampleClustering_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrGeneralExampleClustering_Type, type, args, kwds); }


PyTypeObject PyOrGeneralExampleClustering_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.construction.functionDecomposition.GeneralExampleClustering",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  GeneralExampleClustering_methods,                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)GeneralExampleClustering_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_GeneralExampleClustering(PyObject *obj, void *ptr) { if (!PyOrGeneralExampleClustering_Check(obj)) return 0;      *(GCPtr<TGeneralExampleClustering> *)(ptr) = PyOrange_AsGeneralExampleClustering(obj); return 1; }
int ccn_func_GeneralExampleClustering(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGeneralExampleClustering> *)(ptr) = GCPtr<TGeneralExampleClustering>(); return 1; }      if (!PyOrGeneralExampleClustering_Check(obj)) return 0;      *(GCPtr<TGeneralExampleClustering> *)(ptr) = PyOrange_AsGeneralExampleClustering(obj); return 1; }


ORANGE_API TOrangeType PyOrGeneralExampleClustering_Type (PyOrGeneralExampleClustering_Type_inh, typeid(TGeneralExampleClustering), 0, cc_GeneralExampleClustering, ccn_GeneralExampleClustering, NULL, false, NULL, NULL);



/* -------------- Graph --------------*/

PyMethodDef Graph_methods[] = {
     {"add_cluster", (binaryfunc)Graph_addCluster, METH_VARARGS, "(vertices) -> None"},
     {"edge_exists", (binaryfunc)Graph_edgeExists, METH_VARARGS, "(v1, v2[, type])"},
     {"get_clustering_coefficient", (binaryfunc)Graph_getClusteringCoefficient, METH_VARARGS, "None -> clustering_coefficient"},
     {"get_clusters", (binaryfunc)Graph_getClusters, METH_VARARGS, "None -> list of clusters"},
     {"get_connected_components", (binaryfunc)Graph_getConnectedComponents, METH_NOARGS, "None -> list of [nodes]"},
     {"get_degree_distribution", (binaryfunc)Graph_getDegreeDistribution, METH_VARARGS, "(distribution)"},
     {"get_degrees", (binaryfunc)Graph_getDegrees, METH_VARARGS, "degrees"},
     {"get_diameter", (binaryfunc)Graph_getDiameter, METH_VARARGS, "None -> diameter"},
     {"get_distance", (binaryfunc)Graph_getDistance, METH_VARARGS, "(u, v) -> distance"},
     {"get_edges", (binaryfunc)Graph_getEdges, METH_VARARGS, "([edgetype]) -> list of (v1, v2, weights)"},
     {"get_edges_from", (binaryfunc)Graph_getEdgesFrom, METH_VARARGS, "(vertex[, edgeType])"},
     {"get_edges_to", (binaryfunc)Graph_getEdgesTo, METH_VARARGS, "(vertex[, edgeType])"},
     {"get_hubs", (binaryfunc)Graph_getHubs, METH_VARARGS, "(n) -> HubList"},
     {"get_largest_full_graphs", (binaryfunc)Graph_getLargestFullGraphs, METH_VARARGS, "None -> list of subgraphs"},
     {"get_neighbours", (binaryfunc)Graph_getNeighbours, METH_VARARGS, "(vertex[, edgeType])"},
     {"get_nodes", (binaryfunc)Graph_getNodes, METH_VARARGS, "neighbours -> list of (v1, v2, weights)"},
     {"get_shortest_paths", (binaryfunc)Graph_getShortestPaths, METH_VARARGS, "(u, v) -> list of [v1, v2, ..., vn]"},
     {"get_sub_graph", (binaryfunc)Graph_getSubGraph, METH_VARARGS, "(vertices) -> list of [v1, v2, ..., vn]"},
     {"get_sub_graph_merge_cluster", (binaryfunc)Graph_getSubGraphMergeCluster, METH_VARARGS, "(vertices) -> list of [v1, v2, ..., vn]"},
     {"get_sub_graph_merge_clusters", (binaryfunc)Graph_getSubGraphMergeClusters, METH_VARARGS, "List of (vertices) -> list of [v1, v2, ..., vn]"},
     {"get_sub_graph_without", (binaryfunc)Graph_getSubGraphWithout, METH_VARARGS, "(vertices) -> list of [v1, v2, ..., vn]"},
     {NULL, NULL}
};


PyObject *Graph_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrGraph_Type, type, args, kwds); }

char *Graph_recognized_attributes[] = {"objects", "forceMapping", "force_mapping", "returnIndices", "return_indices", "objectsOnEdges", "object_on_edges", NULL};

PyMappingMethods Graph_as_mapping = {
  (inquiry)Graph_len,                                /* mp_length */
  (binaryfunc)Graph_getitem,                         /* mp_subscript */
  (objobjargproc)Graph_setitem,                      /* mp_ass_subscript */
};

PyTypeObject PyOrGraph_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.Graph",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  &Graph_as_mapping,                                 /* tp_as_mapping */
  0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Graph_methods,                                     /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Graph_abstract_constructor,               /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Graph(PyObject *obj, void *ptr) { if (!PyOrGraph_Check(obj)) return 0;      *(GCPtr<TGraph> *)(ptr) = PyOrange_AsGraph(obj); return 1; }
int ccn_func_Graph(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGraph> *)(ptr) = GCPtr<TGraph>(); return 1; }      if (!PyOrGraph_Check(obj)) return 0;      *(GCPtr<TGraph> *)(ptr) = PyOrange_AsGraph(obj); return 1; }


ORANGE_API TOrangeType PyOrGraph_Type (PyOrGraph_Type_inh, typeid(TGraph), 0, cc_Graph, ccn_Graph, NULL, false, Graph_recognized_attributes, NULL);



/* -------------- GraphAsList --------------*/

PyMethodDef GraphAsList_methods[] = {
     {"__reduce__", (binaryfunc)GraphAsList__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrGraphAsList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.network.GraphAsList",
  sizeof(TPyOrange), 0,
  (destructor)GraphAsList_dealloc,                   /* tp_dealloc */
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC, /* tp_flags */
  "(nVertices, directed[, nEdgeTypes])",             /* tp_doc */
  (traverseproc)GraphAsList_traverse,                /* tp_traverse */
  (inquiry)GraphAsList_clear,                        /* tp_clear */
  0, 0, 0, 0,
  GraphAsList_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrGraph_Type,                    /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)GraphAsList_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_GraphAsList(PyObject *obj, void *ptr) { if (!PyOrGraphAsList_Check(obj)) return 0;      *(GCPtr<TGraphAsList> *)(ptr) = PyOrange_AsGraphAsList(obj); return 1; }
int ccn_func_GraphAsList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGraphAsList> *)(ptr) = GCPtr<TGraphAsList>(); return 1; }      if (!PyOrGraphAsList_Check(obj)) return 0;      *(GCPtr<TGraphAsList> *)(ptr) = PyOrange_AsGraphAsList(obj); return 1; }


ORANGE_API TOrangeType PyOrGraphAsList_Type (PyOrGraphAsList_Type_inh, typeid(TGraphAsList), 0, cc_GraphAsList, ccn_GraphAsList, NULL, false, NULL, NULL);



/* -------------- GraphAsMatrix --------------*/

PyMethodDef GraphAsMatrix_methods[] = {
     {"__reduce__", (binaryfunc)GraphAsMatrix__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrGraphAsMatrix_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.network.GraphAsMatrix",
  sizeof(TPyOrange), 0,
  (destructor)GraphAsMatrix_dealloc,                 /* tp_dealloc */
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC, /* tp_flags */
  "(nVertices, directed[, nEdgeTypes])",             /* tp_doc */
  (traverseproc)GraphAsMatrix_traverse,              /* tp_traverse */
  (inquiry)GraphAsMatrix_clear,                      /* tp_clear */
  0, 0, 0, 0,
  GraphAsMatrix_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrGraph_Type,                    /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)GraphAsMatrix_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_GraphAsMatrix(PyObject *obj, void *ptr) { if (!PyOrGraphAsMatrix_Check(obj)) return 0;      *(GCPtr<TGraphAsMatrix> *)(ptr) = PyOrange_AsGraphAsMatrix(obj); return 1; }
int ccn_func_GraphAsMatrix(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGraphAsMatrix> *)(ptr) = GCPtr<TGraphAsMatrix>(); return 1; }      if (!PyOrGraphAsMatrix_Check(obj)) return 0;      *(GCPtr<TGraphAsMatrix> *)(ptr) = PyOrange_AsGraphAsMatrix(obj); return 1; }


ORANGE_API TOrangeType PyOrGraphAsMatrix_Type (PyOrGraphAsMatrix_Type_inh, typeid(TGraphAsMatrix), 0, cc_GraphAsMatrix, ccn_GraphAsMatrix, NULL, false, NULL, NULL);



/* -------------- GraphAsTree --------------*/

PyMethodDef GraphAsTree_methods[] = {
     {"__reduce__", (binaryfunc)GraphAsTree__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrGraphAsTree_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.network.GraphAsTree",
  sizeof(TPyOrange), 0,
  (destructor)GraphAsTree_dealloc,                   /* tp_dealloc */
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC, /* tp_flags */
  "(nVertices, directed[, nEdgeTypes])",             /* tp_doc */
  (traverseproc)GraphAsTree_traverse,                /* tp_traverse */
  (inquiry)GraphAsTree_clear,                        /* tp_clear */
  0, 0, 0, 0,
  GraphAsTree_methods,                               /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrGraph_Type,                    /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)GraphAsTree_new,                          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_GraphAsTree(PyObject *obj, void *ptr) { if (!PyOrGraphAsTree_Check(obj)) return 0;      *(GCPtr<TGraphAsTree> *)(ptr) = PyOrange_AsGraphAsTree(obj); return 1; }
int ccn_func_GraphAsTree(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TGraphAsTree> *)(ptr) = GCPtr<TGraphAsTree>(); return 1; }      if (!PyOrGraphAsTree_Check(obj)) return 0;      *(GCPtr<TGraphAsTree> *)(ptr) = PyOrange_AsGraphAsTree(obj); return 1; }


ORANGE_API TOrangeType PyOrGraphAsTree_Type (PyOrGraphAsTree_Type_inh, typeid(TGraphAsTree), 0, cc_GraphAsTree, ccn_GraphAsTree, NULL, false, NULL, NULL);



/* -------------- HierarchicalCluster --------------*/

PyMethodDef HierarchicalCluster_methods[] = {
     {"permute", (binaryfunc)HierarchicalCluster_permute, METH_O, "(permutation) -> None"},
     {"swap", (binaryfunc)HierarchicalCluster_swap, METH_NOARGS, "() -> None; swaps the sub clusters"},
     {NULL, NULL}
};

PyGetSetDef HierarchicalCluster_getset[]=  {
  {"left", (getter)HierarchicalCluster_get_left, (setter)HierarchicalCluster_set_left},
  {"right", (getter)HierarchicalCluster_get_right, (setter)HierarchicalCluster_set_right},
  {NULL}};


POrange HierarchicalCluster_default_constructor(PyTypeObject *type)
{ return POrange(mlnew THierarchicalCluster(), type); }


PySequenceMethods HierarchicalCluster_as_sequence = {
  (inquiry)HierarchicalCluster_len_sq,               /* sq_length */
  0, 0,
  (intargfunc)HierarchicalCluster_getitem_sq,        /* sq_item */
  0, 0, 0, 0,
};

PyTypeObject PyOrHierarchicalCluster_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.clustering.hierarchical.HierarchicalCluster",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0,
  &HierarchicalCluster_as_sequence,                  /* tp_as_sequence */
  0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  HierarchicalCluster_methods,                       /* tp_methods */
  0,
  HierarchicalCluster_getset,                        /* tp_getset */
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_HierarchicalCluster(PyObject *obj, void *ptr) { if (!PyOrHierarchicalCluster_Check(obj)) return 0;      *(GCPtr<THierarchicalCluster> *)(ptr) = PyOrange_AsHierarchicalCluster(obj); return 1; }
int ccn_func_HierarchicalCluster(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THierarchicalCluster> *)(ptr) = GCPtr<THierarchicalCluster>(); return 1; }      if (!PyOrHierarchicalCluster_Check(obj)) return 0;      *(GCPtr<THierarchicalCluster> *)(ptr) = PyOrange_AsHierarchicalCluster(obj); return 1; }


ORANGE_API TOrangeType PyOrHierarchicalCluster_Type (PyOrHierarchicalCluster_Type_inh, typeid(THierarchicalCluster), HierarchicalCluster_default_constructor, cc_HierarchicalCluster, ccn_HierarchicalCluster, NULL, true, NULL, NULL);



/* -------------- HierarchicalClusterList --------------*/

PyMethodDef HierarchicalClusterList_methods[] = {
     {"__reduce__", (binaryfunc)HierarchicalClusterList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)HierarchicalClusterList_append, METH_O, "(HierarchicalCluster) -> None"},
     {"count", (binaryfunc)HierarchicalClusterList_count, METH_O, "(HierarchicalCluster) -> int"},
     {"extend", (binaryfunc)HierarchicalClusterList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)HierarchicalClusterList_filter, METH_VARARGS, "([filter-function]) -> HierarchicalClusterList"},
     {"index", (binaryfunc)HierarchicalClusterList_index, METH_O, "(HierarchicalCluster) -> int"},
     {"insert", (binaryfunc)HierarchicalClusterList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)HierarchicalClusterList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)HierarchicalClusterList_pop, METH_VARARGS, "() -> HierarchicalCluster"},
     {"remove", (binaryfunc)HierarchicalClusterList_remove, METH_O, "(HierarchicalCluster) -> None"},
     {"reverse", (binaryfunc)HierarchicalClusterList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)HierarchicalClusterList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods HierarchicalClusterList_as_sequence = {
  (inquiry)HierarchicalClusterList_len_sq,           /* sq_length */
  (binaryfunc)HierarchicalClusterList_concat,        /* sq_concat */
  (intargfunc)HierarchicalClusterList_repeat,        /* sq_repeat */
  (intargfunc)HierarchicalClusterList_getitem_sq,    /* sq_item */
  (intintargfunc)HierarchicalClusterList_getslice,   /* sq_slice */
  (intobjargproc)HierarchicalClusterList_setitem_sq, /* sq_ass_item */
  (intintobjargproc)HierarchicalClusterList_setslice, /* sq_ass_slice */
  (objobjproc)HierarchicalClusterList_contains,      /* sq_contains */
};

PyTypeObject PyOrHierarchicalClusterList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.clustering.hierarchical.HierarchicalClusterList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)HierarchicalClusterList_repr,            /* tp_repr */
  0,
  &HierarchicalClusterList_as_sequence,              /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)HierarchicalClusterList_str,             /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of HierarchicalCluster>)",                 /* tp_doc */
  0, 0,
  (richcmpfunc)HierarchicalClusterList_richcmp,      /* tp_richcmp */
  0, 0, 0,
  HierarchicalClusterList_methods,                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)HierarchicalClusterList_new,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_HierarchicalClusterList(PyObject *obj, void *ptr) { if (!PyOrHierarchicalClusterList_Check(obj)) return 0;      *(GCPtr<THierarchicalClusterList> *)(ptr) = PyOrange_AsHierarchicalClusterList(obj); return 1; }
int ccn_func_HierarchicalClusterList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THierarchicalClusterList> *)(ptr) = GCPtr<THierarchicalClusterList>(); return 1; }      if (!PyOrHierarchicalClusterList_Check(obj)) return 0;      *(GCPtr<THierarchicalClusterList> *)(ptr) = PyOrange_AsHierarchicalClusterList(obj); return 1; }


ORANGE_API TOrangeType PyOrHierarchicalClusterList_Type (PyOrHierarchicalClusterList_Type_inh, typeid(THierarchicalClusterList), 0, cc_HierarchicalClusterList, ccn_HierarchicalClusterList, NULL, true, NULL, NULL);



/* -------------- HierarchicalClusterOrdering --------------*/


POrange HierarchicalClusterOrdering_default_constructor(PyTypeObject *type)
{ return POrange(mlnew THierarchicalClusterOrdering(), type); }


PyTypeObject PyOrHierarchicalClusterOrdering_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.HierarchicalClusterOrdering",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)HierarchicalClusterOrdering_call,     /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(progressCallback=)",                             /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_HierarchicalClusterOrdering(PyObject *obj, void *ptr) { if (!PyOrHierarchicalClusterOrdering_Check(obj)) return 0;      *(GCPtr<THierarchicalClusterOrdering> *)(ptr) = PyOrange_AsHierarchicalClusterOrdering(obj); return 1; }
int ccn_func_HierarchicalClusterOrdering(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THierarchicalClusterOrdering> *)(ptr) = GCPtr<THierarchicalClusterOrdering>(); return 1; }      if (!PyOrHierarchicalClusterOrdering_Check(obj)) return 0;      *(GCPtr<THierarchicalClusterOrdering> *)(ptr) = PyOrange_AsHierarchicalClusterOrdering(obj); return 1; }


ORANGE_API TOrangeType PyOrHierarchicalClusterOrdering_Type (PyOrHierarchicalClusterOrdering_Type_inh, typeid(THierarchicalClusterOrdering), HierarchicalClusterOrdering_default_constructor, cc_HierarchicalClusterOrdering, ccn_HierarchicalClusterOrdering, NULL, true, NULL, NULL);



/* -------------- HierarchicalClustering --------------*/

char HierarchicalClustering_doc[] = "(distance matrix) -> HierarchicalCluster";


TNamedConstantsDef HierarchicalClustering_Linkage_values[] = {{"Single", 0}, {"Average", 1}, {"Complete", 2}, {"Ward", 3}, {0, 0}};
static PyObject *HierarchicalClustering_Linkage_repr(PyObject *self) { return stringFromList(self, HierarchicalClustering_Linkage_values); }
PyObject *HierarchicalClustering_Linkage__reduce__(PyObject *self);
PyMethodDef HierarchicalClustering_Linkage_methods[] = { {"__reduce__", (binaryfunc)HierarchicalClustering_Linkage__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyHierarchicalClustering_Linkage_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "HierarchicalClustering.Linkage", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)HierarchicalClustering_Linkage_repr, 0, 0, 0, 0, 0, (reprfunc)HierarchicalClustering_Linkage_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, HierarchicalClustering_Linkage_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyHierarchicalClustering_Linkage_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyHierarchicalClustering_Linkage_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTHierarchicalClustering_Linkage(void *l) { return PyHierarchicalClustering_Linkage_FromLong(*(int *)l); }
PyObject *HierarchicalClustering_Linkage__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "HierarchicalClustering_Linkage", ((PyIntObject *)(self))->ob_ival); }

void HierarchicalClustering_addConstants()
{ PyObject *&dict = PyOrHierarchicalClustering_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Single", PyHierarchicalClustering_Linkage_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Ward", PyHierarchicalClustering_Linkage_FromLong((long)(3)));
  PyDict_SetItemString(dict, "Average", PyHierarchicalClustering_Linkage_FromLong((long)(1)));
  PyDict_SetItemString(dict, "Complete", PyHierarchicalClustering_Linkage_FromLong((long)(2)));
}

POrange HierarchicalClustering_default_constructor(PyTypeObject *type)
{ return POrange(mlnew THierarchicalClustering(), type); }


PyTypeObject PyOrHierarchicalClustering_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.clustering.hierarchical.HierarchicalClustering",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)HierarchicalClustering_call,          /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(linkage=)",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_HierarchicalClustering(PyObject *obj, void *ptr) { if (!PyOrHierarchicalClustering_Check(obj)) return 0;      *(GCPtr<THierarchicalClustering> *)(ptr) = PyOrange_AsHierarchicalClustering(obj); return 1; }
int ccn_func_HierarchicalClustering(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<THierarchicalClustering> *)(ptr) = GCPtr<THierarchicalClustering>(); return 1; }      if (!PyOrHierarchicalClustering_Check(obj)) return 0;      *(GCPtr<THierarchicalClustering> *)(ptr) = PyOrange_AsHierarchicalClustering(obj); return 1; }


ORANGE_API TOrangeType PyOrHierarchicalClustering_Type (PyOrHierarchicalClustering_Type_inh, typeid(THierarchicalClustering), HierarchicalClustering_default_constructor, cc_HierarchicalClustering, ccn_HierarchicalClustering, NULL, true, NULL, NULL);



/* -------------- Imputer --------------*/


PyObject *Imputer_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrImputer_Type, type, args, kwds); }


PyTypeObject PyOrImputer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.Imputer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Imputer_call,                         /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Imputer_abstract_constructor,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Imputer(PyObject *obj, void *ptr) { if (!PyOrImputer_Check(obj)) return 0;      *(GCPtr<TImputer> *)(ptr) = PyOrange_AsImputer(obj); return 1; }
int ccn_func_Imputer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputer> *)(ptr) = GCPtr<TImputer>(); return 1; }      if (!PyOrImputer_Check(obj)) return 0;      *(GCPtr<TImputer> *)(ptr) = PyOrange_AsImputer(obj); return 1; }


ORANGE_API TOrangeType PyOrImputer_Type (PyOrImputer_Type_inh, typeid(TImputer), 0, cc_Imputer, ccn_Imputer, NULL, false, NULL, NULL);



/* -------------- ImputerConstructor --------------*/


PyObject *ImputerConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrImputerConstructor_Type, type, args, kwds); }


TAttributeAlias ImputerConstructor_aliases[] = {
    {"impute_class", "imputeClass"},
    {NULL, NULL}};

PyTypeObject PyOrImputerConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.Constructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ImputerConstructor_call,              /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ImputerConstructor_abstract_constructor,  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_Check(obj)) return 0;      *(GCPtr<TImputerConstructor> *)(ptr) = PyOrange_AsImputerConstructor(obj); return 1; }
int ccn_func_ImputerConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor> *)(ptr) = GCPtr<TImputerConstructor>(); return 1; }      if (!PyOrImputerConstructor_Check(obj)) return 0;      *(GCPtr<TImputerConstructor> *)(ptr) = PyOrange_AsImputerConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_Type (PyOrImputerConstructor_Type_inh, typeid(TImputerConstructor), 0, cc_ImputerConstructor, ccn_ImputerConstructor, NULL, false, NULL, ImputerConstructor_aliases);



/* -------------- ImputerConstructor_asValue --------------*/


POrange ImputerConstructor_asValue_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputerConstructor_asValue(), type); }


PyTypeObject PyOrImputerConstructor_asValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.AsValueConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID]) -> Imputer",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputerConstructor_Type,       /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor_asValue(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_asValue_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_asValue> *)(ptr) = PyOrange_AsImputerConstructor_asValue(obj); return 1; }
int ccn_func_ImputerConstructor_asValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor_asValue> *)(ptr) = GCPtr<TImputerConstructor_asValue>(); return 1; }      if (!PyOrImputerConstructor_asValue_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_asValue> *)(ptr) = PyOrange_AsImputerConstructor_asValue(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_asValue_Type (PyOrImputerConstructor_asValue_Type_inh, typeid(TImputerConstructor_asValue), ImputerConstructor_asValue_default_constructor, cc_ImputerConstructor_asValue, ccn_ImputerConstructor_asValue, NULL, true, NULL, NULL);



/* -------------- ImputerConstructor_average --------------*/


POrange ImputerConstructor_average_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputerConstructor_average(), type); }


PyTypeObject PyOrImputerConstructor_average_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.AverageConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID]) -> Imputer",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputerConstructor_Type,       /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor_average(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_average_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_average> *)(ptr) = PyOrange_AsImputerConstructor_average(obj); return 1; }
int ccn_func_ImputerConstructor_average(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor_average> *)(ptr) = GCPtr<TImputerConstructor_average>(); return 1; }      if (!PyOrImputerConstructor_average_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_average> *)(ptr) = PyOrange_AsImputerConstructor_average(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_average_Type (PyOrImputerConstructor_average_Type_inh, typeid(TImputerConstructor_average), ImputerConstructor_average_default_constructor, cc_ImputerConstructor_average, ccn_ImputerConstructor_average, NULL, true, NULL, NULL);



/* -------------- ImputerConstructor_maximal --------------*/


POrange ImputerConstructor_maximal_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputerConstructor_maximal(), type); }


PyTypeObject PyOrImputerConstructor_maximal_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.MaximalConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID]) -> Imputer",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputerConstructor_Type,       /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor_maximal(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_maximal_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_maximal> *)(ptr) = PyOrange_AsImputerConstructor_maximal(obj); return 1; }
int ccn_func_ImputerConstructor_maximal(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor_maximal> *)(ptr) = GCPtr<TImputerConstructor_maximal>(); return 1; }      if (!PyOrImputerConstructor_maximal_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_maximal> *)(ptr) = PyOrange_AsImputerConstructor_maximal(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_maximal_Type (PyOrImputerConstructor_maximal_Type_inh, typeid(TImputerConstructor_maximal), ImputerConstructor_maximal_default_constructor, cc_ImputerConstructor_maximal, ccn_ImputerConstructor_maximal, NULL, true, NULL, NULL);



/* -------------- ImputerConstructor_minimal --------------*/


POrange ImputerConstructor_minimal_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputerConstructor_minimal(), type); }


PyTypeObject PyOrImputerConstructor_minimal_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.MinimalConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID]) -> Imputer",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputerConstructor_Type,       /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor_minimal(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_minimal_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_minimal> *)(ptr) = PyOrange_AsImputerConstructor_minimal(obj); return 1; }
int ccn_func_ImputerConstructor_minimal(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor_minimal> *)(ptr) = GCPtr<TImputerConstructor_minimal>(); return 1; }      if (!PyOrImputerConstructor_minimal_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_minimal> *)(ptr) = PyOrange_AsImputerConstructor_minimal(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_minimal_Type (PyOrImputerConstructor_minimal_Type_inh, typeid(TImputerConstructor_minimal), ImputerConstructor_minimal_default_constructor, cc_ImputerConstructor_minimal, ccn_ImputerConstructor_minimal, NULL, true, NULL, NULL);



/* -------------- ImputerConstructor_model --------------*/


POrange ImputerConstructor_model_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputerConstructor_model(), type); }


PyTypeObject PyOrImputerConstructor_model_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.ModelConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID]) -> Imputer",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputerConstructor_Type,       /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor_model(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_model_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_model> *)(ptr) = PyOrange_AsImputerConstructor_model(obj); return 1; }
int ccn_func_ImputerConstructor_model(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor_model> *)(ptr) = GCPtr<TImputerConstructor_model>(); return 1; }      if (!PyOrImputerConstructor_model_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_model> *)(ptr) = PyOrange_AsImputerConstructor_model(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_model_Type (PyOrImputerConstructor_model_Type_inh, typeid(TImputerConstructor_model), ImputerConstructor_model_default_constructor, cc_ImputerConstructor_model, ccn_ImputerConstructor_model, NULL, true, NULL, NULL);



/* -------------- ImputerConstructor_random --------------*/


POrange ImputerConstructor_random_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputerConstructor_random(), type); }


PyTypeObject PyOrImputerConstructor_random_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.RandomConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples[, weightID]) -> Imputer",               /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputerConstructor_Type,       /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ImputerConstructor_random(PyObject *obj, void *ptr) { if (!PyOrImputerConstructor_random_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_random> *)(ptr) = PyOrange_AsImputerConstructor_random(obj); return 1; }
int ccn_func_ImputerConstructor_random(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputerConstructor_random> *)(ptr) = GCPtr<TImputerConstructor_random>(); return 1; }      if (!PyOrImputerConstructor_random_Check(obj)) return 0;      *(GCPtr<TImputerConstructor_random> *)(ptr) = PyOrange_AsImputerConstructor_random(obj); return 1; }


ORANGE_API TOrangeType PyOrImputerConstructor_random_Type (PyOrImputerConstructor_random_Type_inh, typeid(TImputerConstructor_random), ImputerConstructor_random_default_constructor, cc_ImputerConstructor_random, ccn_ImputerConstructor_random, NULL, true, NULL, NULL);



/* -------------- Imputer_asValue --------------*/


POrange Imputer_asValue_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputer_asValue(), type); }


PyTypeObject PyOrImputer_asValue_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.AsValue",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() -> Imputer_asValue",                           /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputer_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Imputer_asValue(PyObject *obj, void *ptr) { if (!PyOrImputer_asValue_Check(obj)) return 0;      *(GCPtr<TImputer_asValue> *)(ptr) = PyOrange_AsImputer_asValue(obj); return 1; }
int ccn_func_Imputer_asValue(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputer_asValue> *)(ptr) = GCPtr<TImputer_asValue>(); return 1; }      if (!PyOrImputer_asValue_Check(obj)) return 0;      *(GCPtr<TImputer_asValue> *)(ptr) = PyOrange_AsImputer_asValue(obj); return 1; }


ORANGE_API TOrangeType PyOrImputer_asValue_Type (PyOrImputer_asValue_Type_inh, typeid(TImputer_asValue), Imputer_asValue_default_constructor, cc_Imputer_asValue, ccn_Imputer_asValue, NULL, true, NULL, NULL);



/* -------------- Imputer_defaults --------------*/

PyMethodDef Imputer_defaults_methods[] = {
     {"__reduce__", (binaryfunc)Imputer_defaults__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrImputer_defaults_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.Defaults",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(domain | example) -> Imputer_defaults",          /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Imputer_defaults_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrImputer_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)Imputer_defaults_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Imputer_defaults(PyObject *obj, void *ptr) { if (!PyOrImputer_defaults_Check(obj)) return 0;      *(GCPtr<TImputer_defaults> *)(ptr) = PyOrange_AsImputer_defaults(obj); return 1; }
int ccn_func_Imputer_defaults(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputer_defaults> *)(ptr) = GCPtr<TImputer_defaults>(); return 1; }      if (!PyOrImputer_defaults_Check(obj)) return 0;      *(GCPtr<TImputer_defaults> *)(ptr) = PyOrange_AsImputer_defaults(obj); return 1; }


ORANGE_API TOrangeType PyOrImputer_defaults_Type (PyOrImputer_defaults_Type_inh, typeid(TImputer_defaults), 0, cc_Imputer_defaults, ccn_Imputer_defaults, NULL, false, NULL, NULL);



/* -------------- Imputer_model --------------*/


POrange Imputer_model_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputer_model(), type); }


PyTypeObject PyOrImputer_model_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.Model",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() -> Imputer_model",                             /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputer_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Imputer_model(PyObject *obj, void *ptr) { if (!PyOrImputer_model_Check(obj)) return 0;      *(GCPtr<TImputer_model> *)(ptr) = PyOrange_AsImputer_model(obj); return 1; }
int ccn_func_Imputer_model(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputer_model> *)(ptr) = GCPtr<TImputer_model>(); return 1; }      if (!PyOrImputer_model_Check(obj)) return 0;      *(GCPtr<TImputer_model> *)(ptr) = PyOrange_AsImputer_model(obj); return 1; }


ORANGE_API TOrangeType PyOrImputer_model_Type (PyOrImputer_model_Type_inh, typeid(TImputer_model), Imputer_model_default_constructor, cc_Imputer_model, ccn_Imputer_model, NULL, true, NULL, NULL);



/* -------------- Imputer_random --------------*/


POrange Imputer_random_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TImputer_random(), type); }


PyTypeObject PyOrImputer_random_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.imputation.Random",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "() -> Imputer_random",                            /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrImputer_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Imputer_random(PyObject *obj, void *ptr) { if (!PyOrImputer_random_Check(obj)) return 0;      *(GCPtr<TImputer_random> *)(ptr) = PyOrange_AsImputer_random(obj); return 1; }
int ccn_func_Imputer_random(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TImputer_random> *)(ptr) = GCPtr<TImputer_random>(); return 1; }      if (!PyOrImputer_random_Check(obj)) return 0;      *(GCPtr<TImputer_random> *)(ptr) = PyOrange_AsImputer_random(obj); return 1; }


ORANGE_API TOrangeType PyOrImputer_random_Type (PyOrImputer_random_Type_inh, typeid(TImputer_random), Imputer_random_default_constructor, cc_Imputer_random, ccn_Imputer_random, NULL, true, NULL, NULL);



/* -------------- MakeRandomIndices --------------*/



TNamedConstantsDef MakeRandomIndices_Stratification_values[] = {{"StratifiedIfPossible", -1}, {"NotStratified", 0}, {"Stratified", 1}, {0, 0}};
static PyObject *MakeRandomIndices_Stratification_repr(PyObject *self) { return stringFromList(self, MakeRandomIndices_Stratification_values); }
PyObject *MakeRandomIndices_Stratification__reduce__(PyObject *self);
PyMethodDef MakeRandomIndices_Stratification_methods[] = { {"__reduce__", (binaryfunc)MakeRandomIndices_Stratification__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyMakeRandomIndices_Stratification_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "MakeRandomIndices.Stratification", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)MakeRandomIndices_Stratification_repr, 0, 0, 0, 0, 0, (reprfunc)MakeRandomIndices_Stratification_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, MakeRandomIndices_Stratification_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyMakeRandomIndices_Stratification_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyMakeRandomIndices_Stratification_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTMakeRandomIndices_Stratification(void *l) { return PyMakeRandomIndices_Stratification_FromLong(*(int *)l); }
PyObject *MakeRandomIndices_Stratification__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "MakeRandomIndices_Stratification", ((PyIntObject *)(self))->ob_ival); }

void MakeRandomIndices_addConstants()
{ PyObject *&dict = PyOrMakeRandomIndices_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "StratifiedIfPossible", PyMakeRandomIndices_Stratification_FromLong((long)(-1)));
  PyDict_SetItemString(dict, "NotStratified", PyMakeRandomIndices_Stratification_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Stratified", PyMakeRandomIndices_Stratification_FromLong((long)(1)));
}

PyObject *MakeRandomIndices_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrMakeRandomIndices_Type, type, args, kwds); }


PyTypeObject PyOrMakeRandomIndices_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.sample.SubsetIndices",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)MakeRandomIndices_abstract_constructor,   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MakeRandomIndices(PyObject *obj, void *ptr) { if (!PyOrMakeRandomIndices_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndices> *)(ptr) = PyOrange_AsMakeRandomIndices(obj); return 1; }
int ccn_func_MakeRandomIndices(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMakeRandomIndices> *)(ptr) = GCPtr<TMakeRandomIndices>(); return 1; }      if (!PyOrMakeRandomIndices_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndices> *)(ptr) = PyOrange_AsMakeRandomIndices(obj); return 1; }


ORANGE_API TOrangeType PyOrMakeRandomIndices_Type (PyOrMakeRandomIndices_Type_inh, typeid(TMakeRandomIndices), 0, cc_MakeRandomIndices, ccn_MakeRandomIndices, NULL, false, NULL, NULL);



/* -------------- MakeRandomIndices2 --------------*/


POrange MakeRandomIndices2_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMakeRandomIndices2(), type); }


PyTypeObject PyOrMakeRandomIndices2_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.sample.SubsetIndices2",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)MakeRandomIndices2_call,              /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "[n | gen [, p0]], [p0=, stratified=, randseed=] -/-> [int]", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMakeRandomIndices_Type,        /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MakeRandomIndices2(PyObject *obj, void *ptr) { if (!PyOrMakeRandomIndices2_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndices2> *)(ptr) = PyOrange_AsMakeRandomIndices2(obj); return 1; }
int ccn_func_MakeRandomIndices2(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMakeRandomIndices2> *)(ptr) = GCPtr<TMakeRandomIndices2>(); return 1; }      if (!PyOrMakeRandomIndices2_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndices2> *)(ptr) = PyOrange_AsMakeRandomIndices2(obj); return 1; }


ORANGE_API TOrangeType PyOrMakeRandomIndices2_Type (PyOrMakeRandomIndices2_Type_inh, typeid(TMakeRandomIndices2), MakeRandomIndices2_default_constructor, cc_MakeRandomIndices2, ccn_MakeRandomIndices2, NULL, true, NULL, NULL);



/* -------------- MakeRandomIndicesCV --------------*/


POrange MakeRandomIndicesCV_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMakeRandomIndicesCV(), type); }


PyTypeObject PyOrMakeRandomIndicesCV_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.sample.SubsetIndicesCV",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)MakeRandomIndicesCV_call,             /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "[n | gen [, folds]], [folds=, stratified=, randseed=] -/-> [int]", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMakeRandomIndices_Type,        /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MakeRandomIndicesCV(PyObject *obj, void *ptr) { if (!PyOrMakeRandomIndicesCV_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndicesCV> *)(ptr) = PyOrange_AsMakeRandomIndicesCV(obj); return 1; }
int ccn_func_MakeRandomIndicesCV(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMakeRandomIndicesCV> *)(ptr) = GCPtr<TMakeRandomIndicesCV>(); return 1; }      if (!PyOrMakeRandomIndicesCV_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndicesCV> *)(ptr) = PyOrange_AsMakeRandomIndicesCV(obj); return 1; }


ORANGE_API TOrangeType PyOrMakeRandomIndicesCV_Type (PyOrMakeRandomIndicesCV_Type_inh, typeid(TMakeRandomIndicesCV), MakeRandomIndicesCV_default_constructor, cc_MakeRandomIndicesCV, ccn_MakeRandomIndicesCV, NULL, true, NULL, NULL);



/* -------------- MakeRandomIndicesMultiple --------------*/


POrange MakeRandomIndicesMultiple_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMakeRandomIndicesMultiple(), type); }


PyTypeObject PyOrMakeRandomIndicesMultiple_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.sample.SubsetIndicesMultiple",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)MakeRandomIndicesMultiple_call,       /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "[n | gen [, p]], [p=, stratified=, randseed=] -/-> [int]", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMakeRandomIndices_Type,        /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MakeRandomIndicesMultiple(PyObject *obj, void *ptr) { if (!PyOrMakeRandomIndicesMultiple_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndicesMultiple> *)(ptr) = PyOrange_AsMakeRandomIndicesMultiple(obj); return 1; }
int ccn_func_MakeRandomIndicesMultiple(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMakeRandomIndicesMultiple> *)(ptr) = GCPtr<TMakeRandomIndicesMultiple>(); return 1; }      if (!PyOrMakeRandomIndicesMultiple_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndicesMultiple> *)(ptr) = PyOrange_AsMakeRandomIndicesMultiple(obj); return 1; }


ORANGE_API TOrangeType PyOrMakeRandomIndicesMultiple_Type (PyOrMakeRandomIndicesMultiple_Type_inh, typeid(TMakeRandomIndicesMultiple), MakeRandomIndicesMultiple_default_constructor, cc_MakeRandomIndicesMultiple, ccn_MakeRandomIndicesMultiple, NULL, true, NULL, NULL);



/* -------------- MakeRandomIndicesN --------------*/


POrange MakeRandomIndicesN_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMakeRandomIndicesN(), type); }


PyTypeObject PyOrMakeRandomIndicesN_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.data.sample.SubsetIndicesN",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)MakeRandomIndicesN_call,              /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "[n | gen [, p]], [p=, stratified=, randseed=] -/-> [int]", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMakeRandomIndices_Type,        /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MakeRandomIndicesN(PyObject *obj, void *ptr) { if (!PyOrMakeRandomIndicesN_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndicesN> *)(ptr) = PyOrange_AsMakeRandomIndicesN(obj); return 1; }
int ccn_func_MakeRandomIndicesN(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMakeRandomIndicesN> *)(ptr) = GCPtr<TMakeRandomIndicesN>(); return 1; }      if (!PyOrMakeRandomIndicesN_Check(obj)) return 0;      *(GCPtr<TMakeRandomIndicesN> *)(ptr) = PyOrange_AsMakeRandomIndicesN(obj); return 1; }


ORANGE_API TOrangeType PyOrMakeRandomIndicesN_Type (PyOrMakeRandomIndicesN_Type_inh, typeid(TMakeRandomIndicesN), MakeRandomIndicesN_default_constructor, cc_MakeRandomIndicesN, ccn_MakeRandomIndicesN, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute --------------*/

PyMethodDef MeasureAttribute_methods[] = {
     {"__reduce__", (binaryfunc)MeasureAttribute__reduce__, METH_NOARGS, "()"},
     {"best_threshold", (binaryfunc)MeasureAttribute_bestThreshold, METH_VARARGS, "(attr, examples) -> list"},
     {"threshold_function", (binaryfunc)MeasureAttribute_thresholdFunction, METH_VARARGS, "(attr, examples[, weightID]) | (contingency[, distribution]) -> list"},
     {NULL, NULL}
};

char MeasureAttribute_doc[] = "(attr, xmpls[, apr, wght]) | (attr, domcont[, apr]) | (cont, clss-dist [,apr]) -> (float, meas-type)";


TNamedConstantsDef MeasureAttribute_Needs_values[] = {{"Contingency_Class", 0}, {"DomainContingency", 1}, {"Generator", 2}, {0, 0}};
static PyObject *MeasureAttribute_Needs_repr(PyObject *self) { return stringFromList(self, MeasureAttribute_Needs_values); }
PyObject *MeasureAttribute_Needs__reduce__(PyObject *self);
PyMethodDef MeasureAttribute_Needs_methods[] = { {"__reduce__", (binaryfunc)MeasureAttribute_Needs__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyMeasureAttribute_Needs_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "MeasureAttribute.Needs", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)MeasureAttribute_Needs_repr, 0, 0, 0, 0, 0, (reprfunc)MeasureAttribute_Needs_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, MeasureAttribute_Needs_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyMeasureAttribute_Needs_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyMeasureAttribute_Needs_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTMeasureAttribute_Needs(void *l) { return PyMeasureAttribute_Needs_FromLong(*(int *)l); }
PyObject *MeasureAttribute_Needs__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "MeasureAttribute_Needs", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef MeasureAttribute_UnknownsTreatment_values[] = {{"IgnoreUnknowns", 0}, {"ReduceByUnknowns", 1}, {"UnknownsToCommon", 2}, {"UnknownsAsValue", 3}, {0, 0}};
static PyObject *MeasureAttribute_UnknownsTreatment_repr(PyObject *self) { return stringFromList(self, MeasureAttribute_UnknownsTreatment_values); }
PyObject *MeasureAttribute_UnknownsTreatment__reduce__(PyObject *self);
PyMethodDef MeasureAttribute_UnknownsTreatment_methods[] = { {"__reduce__", (binaryfunc)MeasureAttribute_UnknownsTreatment__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyMeasureAttribute_UnknownsTreatment_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "MeasureAttribute.UnknownsTreatment", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)MeasureAttribute_UnknownsTreatment_repr, 0, 0, 0, 0, 0, (reprfunc)MeasureAttribute_UnknownsTreatment_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, MeasureAttribute_UnknownsTreatment_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyMeasureAttribute_UnknownsTreatment_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyMeasureAttribute_UnknownsTreatment_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTMeasureAttribute_UnknownsTreatment(void *l) { return PyMeasureAttribute_UnknownsTreatment_FromLong(*(int *)l); }
PyObject *MeasureAttribute_UnknownsTreatment__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "MeasureAttribute_UnknownsTreatment", ((PyIntObject *)(self))->ob_ival); }

void MeasureAttribute_addConstants()
{ PyObject *&dict = PyOrMeasureAttribute_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Contingency_Class", PyMeasureAttribute_Needs_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Generator", PyMeasureAttribute_Needs_FromLong((long)(2)));
  PyDict_SetItemString(dict, "ReduceByUnknowns", PyMeasureAttribute_UnknownsTreatment_FromLong((long)(1)));
  PyDict_SetItemString(dict, "IgnoreUnknowns", PyMeasureAttribute_UnknownsTreatment_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Rejected", PyFloat_FromDouble((double)(ATTRIBUTE_REJECTED)));
  PyDict_SetItemString(dict, "DomainContingency", PyMeasureAttribute_Needs_FromLong((long)(1)));
  PyDict_SetItemString(dict, "UnknownsAsValue", PyMeasureAttribute_UnknownsTreatment_FromLong((long)(3)));
  PyDict_SetItemString(dict, "UnknownsToCommon", PyMeasureAttribute_UnknownsTreatment_FromLong((long)(2)));
}


PyTypeObject PyOrMeasureAttribute_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.Score",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)MeasureAttribute_call,                /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  MeasureAttribute_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)MeasureAttribute_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute> *)(ptr) = PyOrange_AsMeasureAttribute(obj); return 1; }
int ccn_func_MeasureAttribute(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute> *)(ptr) = GCPtr<TMeasureAttribute>(); return 1; }      if (!PyOrMeasureAttribute_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute> *)(ptr) = PyOrange_AsMeasureAttribute(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_Type (PyOrMeasureAttribute_Type_inh, typeid(TMeasureAttribute), 0, cc_MeasureAttribute, ccn_MeasureAttribute, NULL, false, NULL, NULL);



/* -------------- MeasureAttributeFromProbabilities --------------*/


PyObject *MeasureAttributeFromProbabilities_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrMeasureAttributeFromProbabilities_Type, type, args, kwds); }


PyTypeObject PyOrMeasureAttributeFromProbabilities_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.ScoreFromProbabilities",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttribute_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)MeasureAttributeFromProbabilities_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttributeFromProbabilities(PyObject *obj, void *ptr) { if (!PyOrMeasureAttributeFromProbabilities_Check(obj)) return 0;      *(GCPtr<TMeasureAttributeFromProbabilities> *)(ptr) = PyOrange_AsMeasureAttributeFromProbabilities(obj); return 1; }
int ccn_func_MeasureAttributeFromProbabilities(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttributeFromProbabilities> *)(ptr) = GCPtr<TMeasureAttributeFromProbabilities>(); return 1; }      if (!PyOrMeasureAttributeFromProbabilities_Check(obj)) return 0;      *(GCPtr<TMeasureAttributeFromProbabilities> *)(ptr) = PyOrange_AsMeasureAttributeFromProbabilities(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttributeFromProbabilities_Type (PyOrMeasureAttributeFromProbabilities_Type_inh, typeid(TMeasureAttributeFromProbabilities), 0, cc_MeasureAttributeFromProbabilities, ccn_MeasureAttributeFromProbabilities, NULL, false, NULL, NULL);



/* -------------- MeasureAttribute_MSE --------------*/


POrange MeasureAttribute_MSE_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_MSE(), type); }


PyTypeObject PyOrMeasureAttribute_MSE_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.MSE",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=, m=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori]) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttribute_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_MSE(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_MSE_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_MSE> *)(ptr) = PyOrange_AsMeasureAttribute_MSE(obj); return 1; }
int ccn_func_MeasureAttribute_MSE(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_MSE> *)(ptr) = GCPtr<TMeasureAttribute_MSE>(); return 1; }      if (!PyOrMeasureAttribute_MSE_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_MSE> *)(ptr) = PyOrange_AsMeasureAttribute_MSE(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_MSE_Type (PyOrMeasureAttribute_MSE_Type_inh, typeid(TMeasureAttribute_MSE), MeasureAttribute_MSE_default_constructor, cc_MeasureAttribute_MSE, ccn_MeasureAttribute_MSE, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_chiSquare --------------*/


POrange MeasureAttribute_chiSquare_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_chiSquare(), type); }


PyTypeObject PyOrMeasureAttribute_chiSquare_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.MeasureAttribute_chiSquare",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori]) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_chiSquare(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_chiSquare_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_chiSquare> *)(ptr) = PyOrange_AsMeasureAttribute_chiSquare(obj); return 1; }
int ccn_func_MeasureAttribute_chiSquare(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_chiSquare> *)(ptr) = GCPtr<TMeasureAttribute_chiSquare>(); return 1; }      if (!PyOrMeasureAttribute_chiSquare_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_chiSquare> *)(ptr) = PyOrange_AsMeasureAttribute_chiSquare(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_chiSquare_Type (PyOrMeasureAttribute_chiSquare_Type_inh, typeid(TMeasureAttribute_chiSquare), MeasureAttribute_chiSquare_default_constructor, cc_MeasureAttribute_chiSquare, ccn_MeasureAttribute_chiSquare, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_cost --------------*/


POrange MeasureAttribute_cost_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_cost(), type); }


PyTypeObject PyOrMeasureAttribute_cost_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.Cost",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(cost=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori]) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_cost(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_cost_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_cost> *)(ptr) = PyOrange_AsMeasureAttribute_cost(obj); return 1; }
int ccn_func_MeasureAttribute_cost(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_cost> *)(ptr) = GCPtr<TMeasureAttribute_cost>(); return 1; }      if (!PyOrMeasureAttribute_cost_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_cost> *)(ptr) = PyOrange_AsMeasureAttribute_cost(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_cost_Type (PyOrMeasureAttribute_cost_Type_inh, typeid(TMeasureAttribute_cost), MeasureAttribute_cost_default_constructor, cc_MeasureAttribute_cost, ccn_MeasureAttribute_cost, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_gainRatio --------------*/


POrange MeasureAttribute_gainRatio_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_gainRatio(), type); }


PyTypeObject PyOrMeasureAttribute_gainRatio_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.GainRatio",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_gainRatio(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_gainRatio_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_gainRatio> *)(ptr) = PyOrange_AsMeasureAttribute_gainRatio(obj); return 1; }
int ccn_func_MeasureAttribute_gainRatio(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_gainRatio> *)(ptr) = GCPtr<TMeasureAttribute_gainRatio>(); return 1; }      if (!PyOrMeasureAttribute_gainRatio_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_gainRatio> *)(ptr) = PyOrange_AsMeasureAttribute_gainRatio(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_gainRatio_Type (PyOrMeasureAttribute_gainRatio_Type_inh, typeid(TMeasureAttribute_gainRatio), MeasureAttribute_gainRatio_default_constructor, cc_MeasureAttribute_gainRatio, ccn_MeasureAttribute_gainRatio, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_gainRatioA --------------*/


POrange MeasureAttribute_gainRatioA_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_gainRatioA(), type); }


PyTypeObject PyOrMeasureAttribute_gainRatioA_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.MeasureAttribute_gainRatioA",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_gainRatioA(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_gainRatioA_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_gainRatioA> *)(ptr) = PyOrange_AsMeasureAttribute_gainRatioA(obj); return 1; }
int ccn_func_MeasureAttribute_gainRatioA(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_gainRatioA> *)(ptr) = GCPtr<TMeasureAttribute_gainRatioA>(); return 1; }      if (!PyOrMeasureAttribute_gainRatioA_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_gainRatioA> *)(ptr) = PyOrange_AsMeasureAttribute_gainRatioA(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_gainRatioA_Type (PyOrMeasureAttribute_gainRatioA_Type_inh, typeid(TMeasureAttribute_gainRatioA), MeasureAttribute_gainRatioA_default_constructor, cc_MeasureAttribute_gainRatioA, ccn_MeasureAttribute_gainRatioA, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_gini --------------*/


POrange MeasureAttribute_gini_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_gini(), type); }


PyTypeObject PyOrMeasureAttribute_gini_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.Gini",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_gini(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_gini_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_gini> *)(ptr) = PyOrange_AsMeasureAttribute_gini(obj); return 1; }
int ccn_func_MeasureAttribute_gini(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_gini> *)(ptr) = GCPtr<TMeasureAttribute_gini>(); return 1; }      if (!PyOrMeasureAttribute_gini_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_gini> *)(ptr) = PyOrange_AsMeasureAttribute_gini(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_gini_Type (PyOrMeasureAttribute_gini_Type_inh, typeid(TMeasureAttribute_gini), MeasureAttribute_gini_default_constructor, cc_MeasureAttribute_gini, ccn_MeasureAttribute_gini, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_info --------------*/


POrange MeasureAttribute_info_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_info(), type); }


PyTypeObject PyOrMeasureAttribute_info_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.InfoGain",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_info(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_info_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_info> *)(ptr) = PyOrange_AsMeasureAttribute_info(obj); return 1; }
int ccn_func_MeasureAttribute_info(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_info> *)(ptr) = GCPtr<TMeasureAttribute_info>(); return 1; }      if (!PyOrMeasureAttribute_info_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_info> *)(ptr) = PyOrange_AsMeasureAttribute_info(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_info_Type (PyOrMeasureAttribute_info_Type_inh, typeid(TMeasureAttribute_info), MeasureAttribute_info_default_constructor, cc_MeasureAttribute_info, ccn_MeasureAttribute_info, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_logOddsRatio --------------*/


POrange MeasureAttribute_logOddsRatio_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_logOddsRatio(), type); }


PyTypeObject PyOrMeasureAttribute_logOddsRatio_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.MeasureAttribute_logOddsRatio",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori]) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_logOddsRatio(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_logOddsRatio_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_logOddsRatio> *)(ptr) = PyOrange_AsMeasureAttribute_logOddsRatio(obj); return 1; }
int ccn_func_MeasureAttribute_logOddsRatio(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_logOddsRatio> *)(ptr) = GCPtr<TMeasureAttribute_logOddsRatio>(); return 1; }      if (!PyOrMeasureAttribute_logOddsRatio_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_logOddsRatio> *)(ptr) = PyOrange_AsMeasureAttribute_logOddsRatio(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_logOddsRatio_Type (PyOrMeasureAttribute_logOddsRatio_Type_inh, typeid(TMeasureAttribute_logOddsRatio), MeasureAttribute_logOddsRatio_default_constructor, cc_MeasureAttribute_logOddsRatio, ccn_MeasureAttribute_logOddsRatio, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_relevance --------------*/


POrange MeasureAttribute_relevance_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_relevance(), type); }


PyTypeObject PyOrMeasureAttribute_relevance_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.Relevance",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=) | (attr, examples[, apriori] [,weightID]) | (attrno, domain-cont[, apriori]) | (cont, class dist [,apriori]) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrMeasureAttributeFromProbabilities_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_relevance(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_relevance_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_relevance> *)(ptr) = PyOrange_AsMeasureAttribute_relevance(obj); return 1; }
int ccn_func_MeasureAttribute_relevance(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_relevance> *)(ptr) = GCPtr<TMeasureAttribute_relevance>(); return 1; }      if (!PyOrMeasureAttribute_relevance_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_relevance> *)(ptr) = PyOrange_AsMeasureAttribute_relevance(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_relevance_Type (PyOrMeasureAttribute_relevance_Type_inh, typeid(TMeasureAttribute_relevance), MeasureAttribute_relevance_default_constructor, cc_MeasureAttribute_relevance, ccn_MeasureAttribute_relevance, NULL, true, NULL, NULL);



/* -------------- MeasureAttribute_relief --------------*/

PyMethodDef MeasureAttribute_relief_methods[] = {
     {"gain_matrix", (binaryfunc)MeasureAttribute_relief_gainMatrix, METH_VARARGS, "(attr, examples) -> SymMatrix"},
     {"pair_gains", (binaryfunc)MeasureAttribute_relief_pairGains, METH_VARARGS, "(attr, examples) -> list"},
     {NULL, NULL}
};


POrange MeasureAttribute_relief_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMeasureAttribute_relief(), type); }


PyTypeObject PyOrMeasureAttribute_relief_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.feature.scoring.Relief",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(estimate=, m=, k=) | (attr, examples[, apriori] [,weightID]) -/-> float", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  MeasureAttribute_relief_methods,                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrMeasureAttribute_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MeasureAttribute_relief(PyObject *obj, void *ptr) { if (!PyOrMeasureAttribute_relief_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_relief> *)(ptr) = PyOrange_AsMeasureAttribute_relief(obj); return 1; }
int ccn_func_MeasureAttribute_relief(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMeasureAttribute_relief> *)(ptr) = GCPtr<TMeasureAttribute_relief>(); return 1; }      if (!PyOrMeasureAttribute_relief_Check(obj)) return 0;      *(GCPtr<TMeasureAttribute_relief> *)(ptr) = PyOrange_AsMeasureAttribute_relief(obj); return 1; }


ORANGE_API TOrangeType PyOrMeasureAttribute_relief_Type (PyOrMeasureAttribute_relief_Type_inh, typeid(TMeasureAttribute_relief), MeasureAttribute_relief_default_constructor, cc_MeasureAttribute_relief, ccn_MeasureAttribute_relief, NULL, true, NULL, NULL);



/* -------------- PearsonCorrelation --------------*/



PyTypeObject PyOrPearsonCorrelation_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.PearsonCorrelation",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(var1, var2, examples[, weightID]) -> PearsonCorrelation", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PearsonCorrelation_new,                   /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_PearsonCorrelation(PyObject *obj, void *ptr) { if (!PyOrPearsonCorrelation_Check(obj)) return 0;      *(GCPtr<TPearsonCorrelation> *)(ptr) = PyOrange_AsPearsonCorrelation(obj); return 1; }
int ccn_func_PearsonCorrelation(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TPearsonCorrelation> *)(ptr) = GCPtr<TPearsonCorrelation>(); return 1; }      if (!PyOrPearsonCorrelation_Check(obj)) return 0;      *(GCPtr<TPearsonCorrelation> *)(ptr) = PyOrange_AsPearsonCorrelation(obj); return 1; }


ORANGE_API TOrangeType PyOrPearsonCorrelation_Type (PyOrPearsonCorrelation_Type_inh, typeid(TPearsonCorrelation), 0, cc_PearsonCorrelation, ccn_PearsonCorrelation, NULL, false, NULL, NULL);



/* -------------- ProbabilityEstimator --------------*/

char ProbabilityEstimator_doc[] = "(Value) -> float  |  () -> Distribution";

PyObject *ProbabilityEstimator_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrProbabilityEstimator_Type, type, args, kwds); }


PyTypeObject PyOrProbabilityEstimator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ProbabilityEstimator_call,            /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ProbabilityEstimator_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimator(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimator_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimator> *)(ptr) = PyOrange_AsProbabilityEstimator(obj); return 1; }
int ccn_func_ProbabilityEstimator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimator> *)(ptr) = GCPtr<TProbabilityEstimator>(); return 1; }      if (!PyOrProbabilityEstimator_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimator> *)(ptr) = PyOrange_AsProbabilityEstimator(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimator_Type (PyOrProbabilityEstimator_Type_inh, typeid(TProbabilityEstimator), 0, cc_ProbabilityEstimator, ccn_ProbabilityEstimator, NULL, false, NULL, NULL);



/* -------------- ProbabilityEstimatorConstructor --------------*/

char ProbabilityEstimatorConstructor_doc[] = "([distribution[, apriori]] [example generator[, weight]]) -> ProbabilityEstimator";

PyObject *ProbabilityEstimatorConstructor_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrProbabilityEstimatorConstructor_Type, type, args, kwds); }


PyTypeObject PyOrProbabilityEstimatorConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ProbabilityEstimatorConstructor_call, /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ProbabilityEstimatorConstructor_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorConstructor(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorConstructor_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor(obj); return 1; }
int ccn_func_ProbabilityEstimatorConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorConstructor> *)(ptr) = GCPtr<TProbabilityEstimatorConstructor>(); return 1; }      if (!PyOrProbabilityEstimatorConstructor_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_Type (PyOrProbabilityEstimatorConstructor_Type_inh, typeid(TProbabilityEstimatorConstructor), 0, cc_ProbabilityEstimatorConstructor, ccn_ProbabilityEstimatorConstructor, NULL, false, NULL, NULL);



/* -------------- ProbabilityEstimatorConstructor_Laplace --------------*/


POrange ProbabilityEstimatorConstructor_Laplace_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TProbabilityEstimatorConstructor_Laplace(), type); }


PyTypeObject PyOrProbabilityEstimatorConstructor_Laplace_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorConstructor_Laplace",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ProbabilityEstimator_FromDistribution", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorConstructor_Laplace(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorConstructor_Laplace_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_Laplace> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_Laplace(obj); return 1; }
int ccn_func_ProbabilityEstimatorConstructor_Laplace(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorConstructor_Laplace> *)(ptr) = GCPtr<TProbabilityEstimatorConstructor_Laplace>(); return 1; }      if (!PyOrProbabilityEstimatorConstructor_Laplace_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_Laplace> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_Laplace(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_Laplace_Type (PyOrProbabilityEstimatorConstructor_Laplace_Type_inh, typeid(TProbabilityEstimatorConstructor_Laplace), ProbabilityEstimatorConstructor_Laplace_default_constructor, cc_ProbabilityEstimatorConstructor_Laplace, ccn_ProbabilityEstimatorConstructor_Laplace, NULL, true, NULL, NULL);



/* -------------- ProbabilityEstimatorConstructor_kernel --------------*/


POrange ProbabilityEstimatorConstructor_kernel_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TProbabilityEstimatorConstructor_kernel(), type); }


PyTypeObject PyOrProbabilityEstimatorConstructor_kernel_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorConstructor_kernel",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ProbabilityEstimator_FromCurve", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorConstructor_kernel(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorConstructor_kernel_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_kernel> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_kernel(obj); return 1; }
int ccn_func_ProbabilityEstimatorConstructor_kernel(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorConstructor_kernel> *)(ptr) = GCPtr<TProbabilityEstimatorConstructor_kernel>(); return 1; }      if (!PyOrProbabilityEstimatorConstructor_kernel_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_kernel> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_kernel(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_kernel_Type (PyOrProbabilityEstimatorConstructor_kernel_Type_inh, typeid(TProbabilityEstimatorConstructor_kernel), ProbabilityEstimatorConstructor_kernel_default_constructor, cc_ProbabilityEstimatorConstructor_kernel, ccn_ProbabilityEstimatorConstructor_kernel, NULL, true, NULL, NULL);



/* -------------- ProbabilityEstimatorConstructor_loess --------------*/



TNamedConstantsDef ProbabilityEstimatorConstructor_loess_DistributionMethod_values[] = {{"Minimal", DISTRIBUTE_MINIMAL}, {"Factor", DISTRIBUTE_FACTOR}, {"Fixed", DISTRIBUTE_FIXED}, {"Uniform", DISTRIBUTE_UNIFORM}, {"Maximal", DISTRIBUTE_MAXIMAL}, {0, 0}};
static PyObject *ProbabilityEstimatorConstructor_loess_DistributionMethod_repr(PyObject *self) { return stringFromList(self, ProbabilityEstimatorConstructor_loess_DistributionMethod_values); }
PyObject *ProbabilityEstimatorConstructor_loess_DistributionMethod__reduce__(PyObject *self);
PyMethodDef ProbabilityEstimatorConstructor_loess_DistributionMethod_methods[] = { {"__reduce__", (binaryfunc)ProbabilityEstimatorConstructor_loess_DistributionMethod__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyProbabilityEstimatorConstructor_loess_DistributionMethod_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "ProbabilityEstimatorConstructor_loess.DistributionMethod", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)ProbabilityEstimatorConstructor_loess_DistributionMethod_repr, 0, 0, 0, 0, 0, (reprfunc)ProbabilityEstimatorConstructor_loess_DistributionMethod_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, ProbabilityEstimatorConstructor_loess_DistributionMethod_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyProbabilityEstimatorConstructor_loess_DistributionMethod_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTProbabilityEstimatorConstructor_loess_DistributionMethod(void *l) { return PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong(*(int *)l); }
PyObject *ProbabilityEstimatorConstructor_loess_DistributionMethod__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "ProbabilityEstimatorConstructor_loess_DistributionMethod", ((PyIntObject *)(self))->ob_ival); }

void ProbabilityEstimatorConstructor_loess_addConstants()
{ PyObject *&dict = PyOrProbabilityEstimatorConstructor_loess_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Maximal", PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_MAXIMAL)));
  PyDict_SetItemString(dict, "Fixed", PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_FIXED)));
  PyDict_SetItemString(dict, "Uniform", PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_UNIFORM)));
  PyDict_SetItemString(dict, "Minimal", PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_MINIMAL)));
  PyDict_SetItemString(dict, "Factor", PyProbabilityEstimatorConstructor_loess_DistributionMethod_FromLong((long)(DISTRIBUTE_FACTOR)));
}

POrange ProbabilityEstimatorConstructor_loess_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TProbabilityEstimatorConstructor_loess(), type); }


PyTypeObject PyOrProbabilityEstimatorConstructor_loess_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorConstructor_loess",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ProbabilityEstimator_FromCurve", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorConstructor_loess(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorConstructor_loess_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_loess> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_loess(obj); return 1; }
int ccn_func_ProbabilityEstimatorConstructor_loess(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorConstructor_loess> *)(ptr) = GCPtr<TProbabilityEstimatorConstructor_loess>(); return 1; }      if (!PyOrProbabilityEstimatorConstructor_loess_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_loess> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_loess(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_loess_Type (PyOrProbabilityEstimatorConstructor_loess_Type_inh, typeid(TProbabilityEstimatorConstructor_loess), ProbabilityEstimatorConstructor_loess_default_constructor, cc_ProbabilityEstimatorConstructor_loess, ccn_ProbabilityEstimatorConstructor_loess, NULL, true, NULL, NULL);



/* -------------- ProbabilityEstimatorConstructor_m --------------*/


POrange ProbabilityEstimatorConstructor_m_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TProbabilityEstimatorConstructor_m(), type); }


PyTypeObject PyOrProbabilityEstimatorConstructor_m_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorConstructor_m",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ProbabilityEstimator_FromDistribution", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorConstructor_m(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorConstructor_m_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_m> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_m(obj); return 1; }
int ccn_func_ProbabilityEstimatorConstructor_m(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorConstructor_m> *)(ptr) = GCPtr<TProbabilityEstimatorConstructor_m>(); return 1; }      if (!PyOrProbabilityEstimatorConstructor_m_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_m> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_m(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_m_Type (PyOrProbabilityEstimatorConstructor_m_Type_inh, typeid(TProbabilityEstimatorConstructor_m), ProbabilityEstimatorConstructor_m_default_constructor, cc_ProbabilityEstimatorConstructor_m, ccn_ProbabilityEstimatorConstructor_m, NULL, true, NULL, NULL);



/* -------------- ProbabilityEstimatorConstructor_relative --------------*/


POrange ProbabilityEstimatorConstructor_relative_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TProbabilityEstimatorConstructor_relative(), type); }


PyTypeObject PyOrProbabilityEstimatorConstructor_relative_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorConstructor_relative",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example generator, weight] | [distribution]) -/-> ProbabilityEstimator_FromDistribution", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrProbabilityEstimatorConstructor_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorConstructor_relative(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorConstructor_relative_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_relative> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_relative(obj); return 1; }
int ccn_func_ProbabilityEstimatorConstructor_relative(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorConstructor_relative> *)(ptr) = GCPtr<TProbabilityEstimatorConstructor_relative>(); return 1; }      if (!PyOrProbabilityEstimatorConstructor_relative_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorConstructor_relative> *)(ptr) = PyOrange_AsProbabilityEstimatorConstructor_relative(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorConstructor_relative_Type (PyOrProbabilityEstimatorConstructor_relative_Type_inh, typeid(TProbabilityEstimatorConstructor_relative), ProbabilityEstimatorConstructor_relative_default_constructor, cc_ProbabilityEstimatorConstructor_relative, ccn_ProbabilityEstimatorConstructor_relative, NULL, true, NULL, NULL);



/* -------------- ProbabilityEstimatorList --------------*/

PyMethodDef ProbabilityEstimatorList_methods[] = {
     {"__reduce__", (binaryfunc)ProbabilityEstimatorList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)ProbabilityEstimatorList_append, METH_O, "(ProbabilityEstimator) -> None"},
     {"count", (binaryfunc)ProbabilityEstimatorList_count, METH_O, "(ProbabilityEstimator) -> int"},
     {"extend", (binaryfunc)ProbabilityEstimatorList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)ProbabilityEstimatorList_filter, METH_VARARGS, "([filter-function]) -> ProbabilityEstimatorList"},
     {"index", (binaryfunc)ProbabilityEstimatorList_index, METH_O, "(ProbabilityEstimator) -> int"},
     {"insert", (binaryfunc)ProbabilityEstimatorList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)ProbabilityEstimatorList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)ProbabilityEstimatorList_pop, METH_VARARGS, "() -> ProbabilityEstimator"},
     {"remove", (binaryfunc)ProbabilityEstimatorList_remove, METH_O, "(ProbabilityEstimator) -> None"},
     {"reverse", (binaryfunc)ProbabilityEstimatorList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ProbabilityEstimatorList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods ProbabilityEstimatorList_as_sequence = {
  (inquiry)ProbabilityEstimatorList_len_sq,          /* sq_length */
  (binaryfunc)ProbabilityEstimatorList_concat,       /* sq_concat */
  (intargfunc)ProbabilityEstimatorList_repeat,       /* sq_repeat */
  (intargfunc)ProbabilityEstimatorList_getitem_sq,   /* sq_item */
  (intintargfunc)ProbabilityEstimatorList_getslice,  /* sq_slice */
  (intobjargproc)ProbabilityEstimatorList_setitem_sq, /* sq_ass_item */
  (intintobjargproc)ProbabilityEstimatorList_setslice, /* sq_ass_slice */
  (objobjproc)ProbabilityEstimatorList_contains,     /* sq_contains */
};

PyTypeObject PyOrProbabilityEstimatorList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimatorList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)ProbabilityEstimatorList_repr,           /* tp_repr */
  0,
  &ProbabilityEstimatorList_as_sequence,             /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)ProbabilityEstimatorList_str,            /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of ProbabilityEstimator>)",                /* tp_doc */
  0, 0,
  (richcmpfunc)ProbabilityEstimatorList_richcmp,     /* tp_richcmp */
  0, 0, 0,
  ProbabilityEstimatorList_methods,                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ProbabilityEstimatorList_new,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimatorList(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimatorList_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorList> *)(ptr) = PyOrange_AsProbabilityEstimatorList(obj); return 1; }
int ccn_func_ProbabilityEstimatorList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimatorList> *)(ptr) = GCPtr<TProbabilityEstimatorList>(); return 1; }      if (!PyOrProbabilityEstimatorList_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimatorList> *)(ptr) = PyOrange_AsProbabilityEstimatorList(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimatorList_Type (PyOrProbabilityEstimatorList_Type_inh, typeid(TProbabilityEstimatorList), 0, cc_ProbabilityEstimatorList, ccn_ProbabilityEstimatorList, NULL, true, NULL, NULL);



/* -------------- ProbabilityEstimator_FromDistribution --------------*/


POrange ProbabilityEstimator_FromDistribution_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TProbabilityEstimator_FromDistribution(), type); }


PyTypeObject PyOrProbabilityEstimator_FromDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ProbabilityEstimator_FromDistribution",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrProbabilityEstimator_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ProbabilityEstimator_FromDistribution(PyObject *obj, void *ptr) { if (!PyOrProbabilityEstimator_FromDistribution_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimator_FromDistribution> *)(ptr) = PyOrange_AsProbabilityEstimator_FromDistribution(obj); return 1; }
int ccn_func_ProbabilityEstimator_FromDistribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TProbabilityEstimator_FromDistribution> *)(ptr) = GCPtr<TProbabilityEstimator_FromDistribution>(); return 1; }      if (!PyOrProbabilityEstimator_FromDistribution_Check(obj)) return 0;      *(GCPtr<TProbabilityEstimator_FromDistribution> *)(ptr) = PyOrange_AsProbabilityEstimator_FromDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrProbabilityEstimator_FromDistribution_Type (PyOrProbabilityEstimator_FromDistribution_Type_inh, typeid(TProbabilityEstimator_FromDistribution), ProbabilityEstimator_FromDistribution_default_constructor, cc_ProbabilityEstimator_FromDistribution, ccn_ProbabilityEstimator_FromDistribution, NULL, true, NULL, NULL);



/* -------------- SymMatrix --------------*/

PyMethodDef SymMatrix_methods[] = {
     {"__reduce__", (binaryfunc)SymMatrix__reduce__, METH_NOARGS, "()"},
     {"avg_linkage", (binaryfunc)SymMatrix_avgLinkage, METH_VARARGS, "(Clusters -> SymMatrix)"},
     {"get_KNN", (binaryfunc)SymMatrix_getKNN, METH_VARARGS, "((i, K) -> list of values)"},
     {"get_items", (binaryfunc)SymMatrix_get_items, METH_VARARGS, "(List of items -> SymMatrix)"},
     {"get_values", (binaryfunc)SymMatrix_getValues, METH_NOARGS, "(None -> list of values)"},
     {"invert", (binaryfunc)SymMatrix_invert, METH_VARARGS, "(Invert type -> None)"},
     {"normalize", (binaryfunc)SymMatrix_normalize, METH_VARARGS, "(Normalize type -> None)"},
     {NULL, NULL}
};



TNamedConstantsDef SymMatrix_Shape_values[] = {{"Lower", 0}, {"Upper", 1}, {"Symmetric", 2}, {"LowerFilled", 3}, {"UpperFilled", 4}, {0, 0}};
static PyObject *SymMatrix_Shape_repr(PyObject *self) { return stringFromList(self, SymMatrix_Shape_values); }
PyObject *SymMatrix_Shape__reduce__(PyObject *self);
PyMethodDef SymMatrix_Shape_methods[] = { {"__reduce__", (binaryfunc)SymMatrix_Shape__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PySymMatrix_Shape_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "SymMatrix.Shape", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)SymMatrix_Shape_repr, 0, 0, 0, 0, 0, (reprfunc)SymMatrix_Shape_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, SymMatrix_Shape_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PySymMatrix_Shape_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PySymMatrix_Shape_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTSymMatrix_Shape(void *l) { return PySymMatrix_Shape_FromLong(*(int *)l); }
PyObject *SymMatrix_Shape__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "SymMatrix_Shape", ((PyIntObject *)(self))->ob_ival); }

void SymMatrix_addConstants()
{ PyObject *&dict = PyOrSymMatrix_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Symmetric", PySymMatrix_Shape_FromLong((long)(2)));
  PyDict_SetItemString(dict, "Upper", PySymMatrix_Shape_FromLong((long)(1)));
  PyDict_SetItemString(dict, "Lower", PySymMatrix_Shape_FromLong((long)(0)));
  PyDict_SetItemString(dict, "LowerFilled", PySymMatrix_Shape_FromLong((long)(3)));
  PyDict_SetItemString(dict, "UpperFilled", PySymMatrix_Shape_FromLong((long)(4)));
}


TAttributeAlias SymMatrix_aliases[] = {
    {"getitems", "get_items"},
    {NULL, NULL}};

PySequenceMethods SymMatrix_as_sequence = {
  0, 0, 0,
  (intargfunc)SymMatrix_getitem_sq,                  /* sq_item */
  (intintargfunc)SymMatrix_getslice,                 /* sq_slice */
  0, 0, 0,
};

PyMappingMethods SymMatrix_as_mapping = {
  0,
  (binaryfunc)SymMatrix_getitem,                     /* mp_subscript */
  (objobjargproc)SymMatrix_setitem,                  /* mp_ass_subscript */
};

PyTypeObject PyOrSymMatrix_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.SymMatrix",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)SymMatrix_repr,                          /* tp_repr */
  0,
  &SymMatrix_as_sequence,                            /* tp_as_sequence */
  &SymMatrix_as_mapping,                             /* tp_as_mapping */
  0, 0,
  (reprfunc)SymMatrix_str,                           /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(dimension[, initialElement=0] | a list of lists)", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SymMatrix_methods,                                 /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SymMatrix_new,                            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SymMatrix(PyObject *obj, void *ptr) { if (!PyOrSymMatrix_Check(obj)) return 0;      *(GCPtr<TSymMatrix> *)(ptr) = PyOrange_AsSymMatrix(obj); return 1; }
int ccn_func_SymMatrix(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSymMatrix> *)(ptr) = GCPtr<TSymMatrix>(); return 1; }      if (!PyOrSymMatrix_Check(obj)) return 0;      *(GCPtr<TSymMatrix> *)(ptr) = PyOrange_AsSymMatrix(obj); return 1; }


ORANGE_API TOrangeType PyOrSymMatrix_Type (PyOrSymMatrix_Type_inh, typeid(TSymMatrix), 0, cc_SymMatrix, ccn_SymMatrix, NULL, false, NULL, SymMatrix_aliases);



/* -------------- ThresholdCA --------------*/

char ThresholdCA_doc[] = "(classifier, examples[, weightID, target value]) -> (threshold, optimal CA, list of CAs)";

POrange ThresholdCA_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TThresholdCA(), type); }


PyTypeObject PyOrThresholdCA_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.wrappers.ThresholdCA",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ThresholdCA_call,                     /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([classifier, examples[, weightID, target value]]) -/-> (threshold, optimal CA, list of CAs))", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ThresholdCA(PyObject *obj, void *ptr) { if (!PyOrThresholdCA_Check(obj)) return 0;      *(GCPtr<TThresholdCA> *)(ptr) = PyOrange_AsThresholdCA(obj); return 1; }
int ccn_func_ThresholdCA(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TThresholdCA> *)(ptr) = GCPtr<TThresholdCA>(); return 1; }      if (!PyOrThresholdCA_Check(obj)) return 0;      *(GCPtr<TThresholdCA> *)(ptr) = PyOrange_AsThresholdCA(obj); return 1; }


ORANGE_API TOrangeType PyOrThresholdCA_Type (PyOrThresholdCA_Type_inh, typeid(TThresholdCA), ThresholdCA_default_constructor, cc_ThresholdCA, ccn_ThresholdCA, NULL, true, NULL, NULL);



/* -------------- TransformValue_IsDefined --------------*/


POrange TransformValue_IsDefined_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTransformValue_IsDefined(), type); }


PyTypeObject PyOrTransformValue_IsDefined_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.TransformValue_IsDefined",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([value=])",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTransformValue_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TransformValue_IsDefined(PyObject *obj, void *ptr) { if (!PyOrTransformValue_IsDefined_Check(obj)) return 0;      *(GCPtr<TTransformValue_IsDefined> *)(ptr) = PyOrange_AsTransformValue_IsDefined(obj); return 1; }
int ccn_func_TransformValue_IsDefined(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTransformValue_IsDefined> *)(ptr) = GCPtr<TTransformValue_IsDefined>(); return 1; }      if (!PyOrTransformValue_IsDefined_Check(obj)) return 0;      *(GCPtr<TTransformValue_IsDefined> *)(ptr) = PyOrange_AsTransformValue_IsDefined(obj); return 1; }


ORANGE_API TOrangeType PyOrTransformValue_IsDefined_Type (PyOrTransformValue_IsDefined_Type_inh, typeid(TTransformValue_IsDefined), TransformValue_IsDefined_default_constructor, cc_TransformValue_IsDefined, ccn_TransformValue_IsDefined, NULL, true, NULL, NULL);



/* -------------- ValueFilter --------------*/



TNamedConstantsDef ValueFilter_Operator_values[] = {{"None", 0}, {"Equal", 1}, {"NotEqual", 2}, {"Less", 3}, {"LessEqual", 4}, {"Greater", 5}, {"GreaterEqual", 6}, {"Between", 7}, {"Outside", 8}, {"Contains", 9}, {"NotContains", 10}, {"BeginsWith", 11}, {"EndsWith", 12}, {"Listed", 13}, {0, 0}};
static PyObject *ValueFilter_Operator_repr(PyObject *self) { return stringFromList(self, ValueFilter_Operator_values); }
PyObject *ValueFilter_Operator__reduce__(PyObject *self);
PyMethodDef ValueFilter_Operator_methods[] = { {"__reduce__", (binaryfunc)ValueFilter_Operator__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyValueFilter_Operator_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "ValueFilter.Operator", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)ValueFilter_Operator_repr, 0, 0, 0, 0, 0, (reprfunc)ValueFilter_Operator_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, ValueFilter_Operator_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyValueFilter_Operator_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyValueFilter_Operator_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTValueFilter_Operator(void *l) { return PyValueFilter_Operator_FromLong(*(int *)l); }
PyObject *ValueFilter_Operator__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "ValueFilter_Operator", ((PyIntObject *)(self))->ob_ival); }

void ValueFilter_addConstants()
{ PyObject *&dict = PyOrValueFilter_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "NotEqual", PyValueFilter_Operator_FromLong((long)(2)));
  PyDict_SetItemString(dict, "None", PyValueFilter_Operator_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Greater", PyValueFilter_Operator_FromLong((long)(5)));
  PyDict_SetItemString(dict, "Less", PyValueFilter_Operator_FromLong((long)(3)));
  PyDict_SetItemString(dict, "GreaterEqual", PyValueFilter_Operator_FromLong((long)(6)));
  PyDict_SetItemString(dict, "Contains", PyValueFilter_Operator_FromLong((long)(9)));
  PyDict_SetItemString(dict, "Equal", PyValueFilter_Operator_FromLong((long)(1)));
  PyDict_SetItemString(dict, "BeginsWith", PyValueFilter_Operator_FromLong((long)(11)));
  PyDict_SetItemString(dict, "Outside", PyValueFilter_Operator_FromLong((long)(8)));
  PyDict_SetItemString(dict, "Listed", PyValueFilter_Operator_FromLong((long)(13)));
  PyDict_SetItemString(dict, "EndsWith", PyValueFilter_Operator_FromLong((long)(12)));
  PyDict_SetItemString(dict, "Between", PyValueFilter_Operator_FromLong((long)(7)));
  PyDict_SetItemString(dict, "LessEqual", PyValueFilter_Operator_FromLong((long)(4)));
  PyDict_SetItemString(dict, "NotContains", PyValueFilter_Operator_FromLong((long)(10)));
}

PyObject *ValueFilter_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrValueFilter_Type, type, args, kwds); }


TAttributeAlias ValueFilter_aliases[] = {
    {"accept_special", "acceptSpecial"},
    {NULL, NULL}};

PyTypeObject PyOrValueFilter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueFilter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ValueFilter_abstract_constructor,         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueFilter(PyObject *obj, void *ptr) { if (!PyOrValueFilter_Check(obj)) return 0;      *(GCPtr<TValueFilter> *)(ptr) = PyOrange_AsValueFilter(obj); return 1; }
int ccn_func_ValueFilter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueFilter> *)(ptr) = GCPtr<TValueFilter>(); return 1; }      if (!PyOrValueFilter_Check(obj)) return 0;      *(GCPtr<TValueFilter> *)(ptr) = PyOrange_AsValueFilter(obj); return 1; }


ORANGE_API TOrangeType PyOrValueFilter_Type (PyOrValueFilter_Type_inh, typeid(TValueFilter), 0, cc_ValueFilter, ccn_ValueFilter, NULL, false, NULL, ValueFilter_aliases);



/* -------------- ValueFilterList --------------*/

PyMethodDef ValueFilterList_methods[] = {
     {"__reduce__", (binaryfunc)ValueFilterList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)ValueFilterList_append, METH_O, "(ValueFilter) -> None"},
     {"count", (binaryfunc)ValueFilterList_count, METH_O, "(ValueFilter) -> int"},
     {"extend", (binaryfunc)ValueFilterList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)ValueFilterList_filter, METH_VARARGS, "([filter-function]) -> ValueFilterList"},
     {"index", (binaryfunc)ValueFilterList_index, METH_O, "(ValueFilter) -> int"},
     {"insert", (binaryfunc)ValueFilterList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)ValueFilterList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)ValueFilterList_pop, METH_VARARGS, "() -> ValueFilter"},
     {"remove", (binaryfunc)ValueFilterList_remove, METH_O, "(ValueFilter) -> None"},
     {"reverse", (binaryfunc)ValueFilterList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)ValueFilterList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods ValueFilterList_as_sequence = {
  (inquiry)ValueFilterList_len_sq,                   /* sq_length */
  (binaryfunc)ValueFilterList_concat,                /* sq_concat */
  (intargfunc)ValueFilterList_repeat,                /* sq_repeat */
  (intargfunc)ValueFilterList_getitem_sq,            /* sq_item */
  (intintargfunc)ValueFilterList_getslice,           /* sq_slice */
  (intobjargproc)ValueFilterList_setitem_sq,         /* sq_ass_item */
  (intintobjargproc)ValueFilterList_setslice,        /* sq_ass_slice */
  (objobjproc)ValueFilterList_contains,              /* sq_contains */
};

PyTypeObject PyOrValueFilterList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueFilterList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)ValueFilterList_repr,                    /* tp_repr */
  0,
  &ValueFilterList_as_sequence,                      /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)ValueFilterList_str,                     /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of ValueFilter>)",                         /* tp_doc */
  0, 0,
  (richcmpfunc)ValueFilterList_richcmp,              /* tp_richcmp */
  0, 0, 0,
  ValueFilterList_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ValueFilterList_new,                      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueFilterList(PyObject *obj, void *ptr) { if (!PyOrValueFilterList_Check(obj)) return 0;      *(GCPtr<TValueFilterList> *)(ptr) = PyOrange_AsValueFilterList(obj); return 1; }
int ccn_func_ValueFilterList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueFilterList> *)(ptr) = GCPtr<TValueFilterList>(); return 1; }      if (!PyOrValueFilterList_Check(obj)) return 0;      *(GCPtr<TValueFilterList> *)(ptr) = PyOrange_AsValueFilterList(obj); return 1; }


ORANGE_API TOrangeType PyOrValueFilterList_Type (PyOrValueFilterList_Type_inh, typeid(TValueFilterList), 0, cc_ValueFilterList, ccn_ValueFilterList, NULL, true, NULL, NULL);



/* -------------- ValueFilter_continuous --------------*/


POrange ValueFilter_continuous_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TValueFilter_continuous(), type); }


PyTypeObject PyOrValueFilter_continuous_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueFilter_continuous",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([position=, oper=, min=, max=, acceptSpecial=])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrValueFilter_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueFilter_continuous(PyObject *obj, void *ptr) { if (!PyOrValueFilter_continuous_Check(obj)) return 0;      *(GCPtr<TValueFilter_continuous> *)(ptr) = PyOrange_AsValueFilter_continuous(obj); return 1; }
int ccn_func_ValueFilter_continuous(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueFilter_continuous> *)(ptr) = GCPtr<TValueFilter_continuous>(); return 1; }      if (!PyOrValueFilter_continuous_Check(obj)) return 0;      *(GCPtr<TValueFilter_continuous> *)(ptr) = PyOrange_AsValueFilter_continuous(obj); return 1; }


ORANGE_API TOrangeType PyOrValueFilter_continuous_Type (PyOrValueFilter_continuous_Type_inh, typeid(TValueFilter_continuous), ValueFilter_continuous_default_constructor, cc_ValueFilter_continuous, ccn_ValueFilter_continuous, NULL, true, NULL, NULL);



/* -------------- ValueFilter_discrete --------------*/


POrange ValueFilter_discrete_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TValueFilter_discrete(), type); }


PyTypeObject PyOrValueFilter_discrete_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueFilter_discrete",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([position=, oper=, values=, acceptSpecial=])",   /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrValueFilter_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueFilter_discrete(PyObject *obj, void *ptr) { if (!PyOrValueFilter_discrete_Check(obj)) return 0;      *(GCPtr<TValueFilter_discrete> *)(ptr) = PyOrange_AsValueFilter_discrete(obj); return 1; }
int ccn_func_ValueFilter_discrete(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueFilter_discrete> *)(ptr) = GCPtr<TValueFilter_discrete>(); return 1; }      if (!PyOrValueFilter_discrete_Check(obj)) return 0;      *(GCPtr<TValueFilter_discrete> *)(ptr) = PyOrange_AsValueFilter_discrete(obj); return 1; }


ORANGE_API TOrangeType PyOrValueFilter_discrete_Type (PyOrValueFilter_discrete_Type_inh, typeid(TValueFilter_discrete), ValueFilter_discrete_default_constructor, cc_ValueFilter_discrete, ccn_ValueFilter_discrete, NULL, true, NULL, NULL);



/* -------------- ValueFilter_string --------------*/


POrange ValueFilter_string_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TValueFilter_string(), type); }


PyTypeObject PyOrValueFilter_string_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueFilter_string",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([position=, oper=, min=, max=])",                /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrValueFilter_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueFilter_string(PyObject *obj, void *ptr) { if (!PyOrValueFilter_string_Check(obj)) return 0;      *(GCPtr<TValueFilter_string> *)(ptr) = PyOrange_AsValueFilter_string(obj); return 1; }
int ccn_func_ValueFilter_string(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueFilter_string> *)(ptr) = GCPtr<TValueFilter_string>(); return 1; }      if (!PyOrValueFilter_string_Check(obj)) return 0;      *(GCPtr<TValueFilter_string> *)(ptr) = PyOrange_AsValueFilter_string(obj); return 1; }


ORANGE_API TOrangeType PyOrValueFilter_string_Type (PyOrValueFilter_string_Type_inh, typeid(TValueFilter_string), ValueFilter_string_default_constructor, cc_ValueFilter_string, ccn_ValueFilter_string, NULL, true, NULL, NULL);



/* -------------- ValueFilter_stringList --------------*/


POrange ValueFilter_stringList_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TValueFilter_stringList(), type); }


PyTypeObject PyOrValueFilter_stringList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.ValueFilter_stringList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([position=, oper=, values=])",                   /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrValueFilter_Type,              /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ValueFilter_stringList(PyObject *obj, void *ptr) { if (!PyOrValueFilter_stringList_Check(obj)) return 0;      *(GCPtr<TValueFilter_stringList> *)(ptr) = PyOrange_AsValueFilter_stringList(obj); return 1; }
int ccn_func_ValueFilter_stringList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TValueFilter_stringList> *)(ptr) = GCPtr<TValueFilter_stringList>(); return 1; }      if (!PyOrValueFilter_stringList_Check(obj)) return 0;      *(GCPtr<TValueFilter_stringList> *)(ptr) = PyOrange_AsValueFilter_stringList(obj); return 1; }


ORANGE_API TOrangeType PyOrValueFilter_stringList_Type (PyOrValueFilter_stringList_Type_inh, typeid(TValueFilter_stringList), ValueFilter_stringList_default_constructor, cc_ValueFilter_stringList, ccn_ValueFilter_stringList, NULL, true, NULL, NULL);



