/* This file was generated by pyxtract 
   Do not edit.*/

#include <cstddef>

extern ORANGE_API TOrangeType PyOrClassifier_Type;
extern ORANGE_API TOrangeType PyOrClassifierFD_Type;
extern ORANGE_API TOrangeType PyOrEVDistGetter_Type;
extern ORANGE_API TOrangeType PyOrLearner_Type;
extern ORANGE_API TOrangeType PyOrLogRegFitter_Type;
extern ORANGE_API TOrangeType PyOrOrange_Type;
extern ORANGE_API TOrangeType PyOrRuleBeamCandidateSelector_Type;
extern ORANGE_API TOrangeType PyOrRuleBeamFilter_Type;
extern ORANGE_API TOrangeType PyOrRuleBeamInitializer_Type;
extern ORANGE_API TOrangeType PyOrRuleBeamRefiner_Type;
extern ORANGE_API TOrangeType PyOrRuleClassifier_Type;
extern ORANGE_API TOrangeType PyOrRuleCovererAndRemover_Type;
extern ORANGE_API TOrangeType PyOrRuleDataStoppingCriteria_Type;
extern ORANGE_API TOrangeType PyOrRuleEvaluator_Type;
extern ORANGE_API TOrangeType PyOrRuleFinder_Type;
extern ORANGE_API TOrangeType PyOrRuleStoppingCriteria_Type;
extern ORANGE_API TOrangeType PyOrRuleValidator_Type;
extern ORANGE_API TOrangeType PyOrSVMClassifier_Type;
extern ORANGE_API TOrangeType PyOrSVMLearner_Type;
extern ORANGE_API TOrangeType PyOrTreeDescender_Type;
extern ORANGE_API TOrangeType PyOrTreeExampleSplitter_Type;
extern ORANGE_API TOrangeType PyOrTreePruner_Type;
extern ORANGE_API TOrangeType PyOrTreeSplitConstructor_Type;
extern ORANGE_API TOrangeType PyOrTreeSplitConstructor_Measure_Type;
extern ORANGE_API TOrangeType PyOrTreeStopCriteria_Type;


/* -------------- AssociationClassifier --------------*/


POrange AssociationClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TAssociationClassifier(), type); }


PyTypeObject PyOrAssociationClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.AssociationClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([rules=, voteWeight=])",                         /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssociationClassifier(PyObject *obj, void *ptr) { if (!PyOrAssociationClassifier_Check(obj)) return 0;      *(GCPtr<TAssociationClassifier> *)(ptr) = PyOrange_AsAssociationClassifier(obj); return 1; }
int ccn_func_AssociationClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssociationClassifier> *)(ptr) = GCPtr<TAssociationClassifier>(); return 1; }      if (!PyOrAssociationClassifier_Check(obj)) return 0;      *(GCPtr<TAssociationClassifier> *)(ptr) = PyOrange_AsAssociationClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrAssociationClassifier_Type (PyOrAssociationClassifier_Type_inh, typeid(TAssociationClassifier), AssociationClassifier_default_constructor, cc_AssociationClassifier, ccn_AssociationClassifier, NULL, true, NULL, NULL);



/* -------------- AssociationLearner --------------*/


POrange AssociationLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TAssociationLearner(), type); }


TAttributeAlias AssociationLearner_aliases[] = {
    {"conf", "confidence"},
    {"supp", "support"},
    {NULL, NULL}};

PyTypeObject PyOrAssociationLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.AssociationLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, conf=, supp=, voteWeight=]) -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssociationLearner(PyObject *obj, void *ptr) { if (!PyOrAssociationLearner_Check(obj)) return 0;      *(GCPtr<TAssociationLearner> *)(ptr) = PyOrange_AsAssociationLearner(obj); return 1; }
int ccn_func_AssociationLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssociationLearner> *)(ptr) = GCPtr<TAssociationLearner>(); return 1; }      if (!PyOrAssociationLearner_Check(obj)) return 0;      *(GCPtr<TAssociationLearner> *)(ptr) = PyOrange_AsAssociationLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrAssociationLearner_Type (PyOrAssociationLearner_Type_inh, typeid(TAssociationLearner), AssociationLearner_default_constructor, cc_AssociationLearner, ccn_AssociationLearner, NULL, true, NULL, AssociationLearner_aliases);



/* -------------- AssociationRule --------------*/

PyMethodDef AssociationRule_methods[] = {
     {"__reduce__", (binaryfunc)AssociationRule__reduce__, METH_NOARGS, "()"},
     {"applies_both", (binaryfunc)AssociationRule_appliesBoth, METH_O, "(example) -> bool"},
     {"applies_left", (binaryfunc)AssociationRule_appliesLeft, METH_O, "(example) -> bool"},
     {"applies_right", (binaryfunc)AssociationRule_appliesRight, METH_O, "(example) -> bool"},
     {NULL, NULL}
};



PyTypeObject PyOrAssociationRule_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.associate.AssociationRule",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)AssociationRule_repr,                    /* tp_repr */
  0, 0, 0, 0, 0,
  (reprfunc)AssociationRule_str,                     /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(left, right, support, confidence)",              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  AssociationRule_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)AssociationRule_new,                      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssociationRule(PyObject *obj, void *ptr) { if (!PyOrAssociationRule_Check(obj)) return 0;      *(GCPtr<TAssociationRule> *)(ptr) = PyOrange_AsAssociationRule(obj); return 1; }
int ccn_func_AssociationRule(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssociationRule> *)(ptr) = GCPtr<TAssociationRule>(); return 1; }      if (!PyOrAssociationRule_Check(obj)) return 0;      *(GCPtr<TAssociationRule> *)(ptr) = PyOrange_AsAssociationRule(obj); return 1; }


ORANGE_API TOrangeType PyOrAssociationRule_Type (PyOrAssociationRule_Type_inh, typeid(TAssociationRule), 0, cc_AssociationRule, ccn_AssociationRule, NULL, false, NULL, NULL);



/* -------------- AssociationRules --------------*/

PyMethodDef AssociationRules_methods[] = {
     {"__reduce__", (binaryfunc)AssociationRules__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)AssociationRules_append, METH_O, "(AssociationRule) -> None"},
     {"count", (binaryfunc)AssociationRules_count, METH_O, "(AssociationRule) -> int"},
     {"extend", (binaryfunc)AssociationRules_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)AssociationRules_filter, METH_VARARGS, "([filter-function]) -> AssociationRules"},
     {"index", (binaryfunc)AssociationRules_index, METH_O, "(AssociationRule) -> int"},
     {"insert", (binaryfunc)AssociationRules_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)AssociationRules_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)AssociationRules_pop, METH_VARARGS, "() -> AssociationRule"},
     {"remove", (binaryfunc)AssociationRules_remove, METH_O, "(AssociationRule) -> None"},
     {"reverse", (binaryfunc)AssociationRules_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)AssociationRules_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods AssociationRules_as_sequence = {
  (inquiry)AssociationRules_len_sq,                  /* sq_length */
  (binaryfunc)AssociationRules_concat,               /* sq_concat */
  (intargfunc)AssociationRules_repeat,               /* sq_repeat */
  (intargfunc)AssociationRules_getitem_sq,           /* sq_item */
  (intintargfunc)AssociationRules_getslice,          /* sq_slice */
  (intobjargproc)AssociationRules_setitem_sq,        /* sq_ass_item */
  (intintobjargproc)AssociationRules_setslice,       /* sq_ass_slice */
  (objobjproc)AssociationRules_contains,             /* sq_contains */
};

PyTypeObject PyOrAssociationRules_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.associate.AssociationRules",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)AssociationRules_repr,                   /* tp_repr */
  0,
  &AssociationRules_as_sequence,                     /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)AssociationRules_str,                    /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of AssociationRule>)",                     /* tp_doc */
  0, 0,
  (richcmpfunc)AssociationRules_richcmp,             /* tp_richcmp */
  0, 0, 0,
  AssociationRules_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)AssociationRules_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssociationRules(PyObject *obj, void *ptr) { if (!PyOrAssociationRules_Check(obj)) return 0;      *(GCPtr<TAssociationRules> *)(ptr) = PyOrange_AsAssociationRules(obj); return 1; }
int ccn_func_AssociationRules(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssociationRules> *)(ptr) = GCPtr<TAssociationRules>(); return 1; }      if (!PyOrAssociationRules_Check(obj)) return 0;      *(GCPtr<TAssociationRules> *)(ptr) = PyOrange_AsAssociationRules(obj); return 1; }


ORANGE_API TOrangeType PyOrAssociationRules_Type (PyOrAssociationRules_Type_inh, typeid(TAssociationRules), 0, cc_AssociationRules, ccn_AssociationRules, NULL, true, NULL, NULL);



/* -------------- AssociationRulesInducer --------------*/

PyMethodDef AssociationRulesInducer_methods[] = {
     {"get_itemsets", (binaryfunc)AssociationRulesInducer_getItemsets, METH_VARARGS, "(examples[, weightID]) -> list-of-itemsets"},
     {NULL, NULL}
};

char AssociationRulesInducer_doc[] = "(examples[, weightID]) -> AssociationRules";

POrange AssociationRulesInducer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TAssociationRulesInducer(), type); }


TAttributeAlias AssociationRulesInducer_aliases[] = {
    {"conf", "confidence"},
    {"supp", "support"},
    {NULL, NULL}};

PyTypeObject PyOrAssociationRulesInducer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.associate.AssociationRulesInducer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)AssociationRulesInducer_call,         /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]], confidence=, support=]) -/-> AssociationRules", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  AssociationRulesInducer_methods,                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssociationRulesInducer(PyObject *obj, void *ptr) { if (!PyOrAssociationRulesInducer_Check(obj)) return 0;      *(GCPtr<TAssociationRulesInducer> *)(ptr) = PyOrange_AsAssociationRulesInducer(obj); return 1; }
int ccn_func_AssociationRulesInducer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssociationRulesInducer> *)(ptr) = GCPtr<TAssociationRulesInducer>(); return 1; }      if (!PyOrAssociationRulesInducer_Check(obj)) return 0;      *(GCPtr<TAssociationRulesInducer> *)(ptr) = PyOrange_AsAssociationRulesInducer(obj); return 1; }


ORANGE_API TOrangeType PyOrAssociationRulesInducer_Type (PyOrAssociationRulesInducer_Type_inh, typeid(TAssociationRulesInducer), AssociationRulesInducer_default_constructor, cc_AssociationRulesInducer, ccn_AssociationRulesInducer, NULL, true, NULL, AssociationRulesInducer_aliases);



/* -------------- AssociationRulesSparseInducer --------------*/

PyMethodDef AssociationRulesSparseInducer_methods[] = {
     {"get_itemsets", (binaryfunc)AssociationRulesSparseInducer_getItemsets, METH_VARARGS, "(examples[, weightID]) -> list-of-itemsets"},
     {NULL, NULL}
};

char AssociationRulesSparseInducer_doc[] = "(examples[, weightID]) -> AssociationRules";

POrange AssociationRulesSparseInducer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TAssociationRulesSparseInducer(), type); }


TAttributeAlias AssociationRulesSparseInducer_aliases[] = {
    {"conf", "confidence"},
    {"supp", "support"},
    {NULL, NULL}};

PyTypeObject PyOrAssociationRulesSparseInducer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.associate.AssociationRulesSparseInducer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)AssociationRulesSparseInducer_call,   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]], confidence=, support=]) -/-> AssociationRules", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  AssociationRulesSparseInducer_methods,             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_AssociationRulesSparseInducer(PyObject *obj, void *ptr) { if (!PyOrAssociationRulesSparseInducer_Check(obj)) return 0;      *(GCPtr<TAssociationRulesSparseInducer> *)(ptr) = PyOrange_AsAssociationRulesSparseInducer(obj); return 1; }
int ccn_func_AssociationRulesSparseInducer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TAssociationRulesSparseInducer> *)(ptr) = GCPtr<TAssociationRulesSparseInducer>(); return 1; }      if (!PyOrAssociationRulesSparseInducer_Check(obj)) return 0;      *(GCPtr<TAssociationRulesSparseInducer> *)(ptr) = PyOrange_AsAssociationRulesSparseInducer(obj); return 1; }


ORANGE_API TOrangeType PyOrAssociationRulesSparseInducer_Type (PyOrAssociationRulesSparseInducer_Type_inh, typeid(TAssociationRulesSparseInducer), AssociationRulesSparseInducer_default_constructor, cc_AssociationRulesSparseInducer, ccn_AssociationRulesSparseInducer, NULL, true, NULL, AssociationRulesSparseInducer_aliases);



/* -------------- BayesClassifier --------------*/

PyMethodDef BayesClassifier_methods[] = {
     {"p", (binaryfunc)BayesClassifier_p, METH_VARARGS, "(class, example) -> float"},
     {NULL, NULL}
};


POrange BayesClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TBayesClassifier(), type); }


PyTypeObject PyOrBayesClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.bayes._BayesClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([probabilities=])",                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  BayesClassifier_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_BayesClassifier(PyObject *obj, void *ptr) { if (!PyOrBayesClassifier_Check(obj)) return 0;      *(GCPtr<TBayesClassifier> *)(ptr) = PyOrange_AsBayesClassifier(obj); return 1; }
int ccn_func_BayesClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TBayesClassifier> *)(ptr) = GCPtr<TBayesClassifier>(); return 1; }      if (!PyOrBayesClassifier_Check(obj)) return 0;      *(GCPtr<TBayesClassifier> *)(ptr) = PyOrange_AsBayesClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrBayesClassifier_Type (PyOrBayesClassifier_Type_inh, typeid(TBayesClassifier), BayesClassifier_default_constructor, cc_BayesClassifier, ccn_BayesClassifier, NULL, true, NULL, NULL);



/* -------------- BayesLearner --------------*/


POrange BayesLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TBayesLearner(), type); }


PyTypeObject PyOrBayesLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.bayes._BayesLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [weight=, estimate=] -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_BayesLearner(PyObject *obj, void *ptr) { if (!PyOrBayesLearner_Check(obj)) return 0;      *(GCPtr<TBayesLearner> *)(ptr) = PyOrange_AsBayesLearner(obj); return 1; }
int ccn_func_BayesLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TBayesLearner> *)(ptr) = GCPtr<TBayesLearner>(); return 1; }      if (!PyOrBayesLearner_Check(obj)) return 0;      *(GCPtr<TBayesLearner> *)(ptr) = PyOrange_AsBayesLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrBayesLearner_Type (PyOrBayesLearner_Type_inh, typeid(TBayesLearner), BayesLearner_default_constructor, cc_BayesLearner, ccn_BayesLearner, NULL, true, NULL, NULL);



/* -------------- C45Classifier --------------*/


POrange C45Classifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TC45Classifier(), type); }


PyTypeObject PyOrC45Classifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree._C45Classifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_C45Classifier(PyObject *obj, void *ptr) { if (!PyOrC45Classifier_Check(obj)) return 0;      *(GCPtr<TC45Classifier> *)(ptr) = PyOrange_AsC45Classifier(obj); return 1; }
int ccn_func_C45Classifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TC45Classifier> *)(ptr) = GCPtr<TC45Classifier>(); return 1; }      if (!PyOrC45Classifier_Check(obj)) return 0;      *(GCPtr<TC45Classifier> *)(ptr) = PyOrange_AsC45Classifier(obj); return 1; }


ORANGE_API TOrangeType PyOrC45Classifier_Type (PyOrC45Classifier_Type_inh, typeid(TC45Classifier), C45Classifier_default_constructor, cc_C45Classifier, ccn_C45Classifier, NULL, true, NULL, NULL);



/* -------------- C45Learner --------------*/

PyMethodDef C45Learner_methods[] = {
     {"command_line", (binaryfunc)C45Learner_command_line, METH_VARARGS, "(line) -> None"},
     {NULL, NULL}
};


POrange C45Learner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TC45Learner(), type); }


TAttributeAlias C45Learner_aliases[] = {
    {"commandline", "command_line"},
    {NULL, NULL}};

PyTypeObject PyOrC45Learner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree._C45Learner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, gainRatio=, subset=, batch=, probThresh=, minObjs=, window=, increment=, cf=, trials=]) -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  C45Learner_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_C45Learner(PyObject *obj, void *ptr) { if (!PyOrC45Learner_Check(obj)) return 0;      *(GCPtr<TC45Learner> *)(ptr) = PyOrange_AsC45Learner(obj); return 1; }
int ccn_func_C45Learner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TC45Learner> *)(ptr) = GCPtr<TC45Learner>(); return 1; }      if (!PyOrC45Learner_Check(obj)) return 0;      *(GCPtr<TC45Learner> *)(ptr) = PyOrange_AsC45Learner(obj); return 1; }


ORANGE_API TOrangeType PyOrC45Learner_Type (PyOrC45Learner_Type_inh, typeid(TC45Learner), C45Learner_default_constructor, cc_C45Learner, ccn_C45Learner, NULL, true, NULL, C45Learner_aliases);



/* -------------- C45TreeNode --------------*/



TNamedConstantsDef C45TreeNode_NodeType_values[] = {{"Leaf", 0}, {"Branch", 1}, {"Cut", 2}, {"Subset", 3}, {0, 0}};
static PyObject *C45TreeNode_NodeType_repr(PyObject *self) { return stringFromList(self, C45TreeNode_NodeType_values); }
PyObject *C45TreeNode_NodeType__reduce__(PyObject *self);
PyMethodDef C45TreeNode_NodeType_methods[] = { {"__reduce__", (binaryfunc)C45TreeNode_NodeType__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyC45TreeNode_NodeType_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "C45TreeNode.NodeType", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)C45TreeNode_NodeType_repr, 0, 0, 0, 0, 0, (reprfunc)C45TreeNode_NodeType_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, C45TreeNode_NodeType_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyC45TreeNode_NodeType_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyC45TreeNode_NodeType_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTC45TreeNode_NodeType(void *l) { return PyC45TreeNode_NodeType_FromLong(*(int *)l); }
PyObject *C45TreeNode_NodeType__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "C45TreeNode_NodeType", ((PyIntObject *)(self))->ob_ival); }

void C45TreeNode_addConstants()
{ PyObject *&dict = PyOrC45TreeNode_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Subset", PyC45TreeNode_NodeType_FromLong((long)(3)));
  PyDict_SetItemString(dict, "Cut", PyC45TreeNode_NodeType_FromLong((long)(2)));
  PyDict_SetItemString(dict, "Leaf", PyC45TreeNode_NodeType_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Branch", PyC45TreeNode_NodeType_FromLong((long)(1)));
}

POrange C45TreeNode_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TC45TreeNode(), type); }


PyTypeObject PyOrC45TreeNode_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.C45Node",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "",                                                /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_C45TreeNode(PyObject *obj, void *ptr) { if (!PyOrC45TreeNode_Check(obj)) return 0;      *(GCPtr<TC45TreeNode> *)(ptr) = PyOrange_AsC45TreeNode(obj); return 1; }
int ccn_func_C45TreeNode(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TC45TreeNode> *)(ptr) = GCPtr<TC45TreeNode>(); return 1; }      if (!PyOrC45TreeNode_Check(obj)) return 0;      *(GCPtr<TC45TreeNode> *)(ptr) = PyOrange_AsC45TreeNode(obj); return 1; }


ORANGE_API TOrangeType PyOrC45TreeNode_Type (PyOrC45TreeNode_Type_inh, typeid(TC45TreeNode), C45TreeNode_default_constructor, cc_C45TreeNode, ccn_C45TreeNode, NULL, true, NULL, NULL);



/* -------------- C45TreeNodeList --------------*/

PyMethodDef C45TreeNodeList_methods[] = {
     {"__reduce__", (binaryfunc)C45TreeNodeList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)C45TreeNodeList_append, METH_O, "(C45TreeNode) -> None"},
     {"count", (binaryfunc)C45TreeNodeList_count, METH_O, "(C45TreeNode) -> int"},
     {"extend", (binaryfunc)C45TreeNodeList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)C45TreeNodeList_filter, METH_VARARGS, "([filter-function]) -> C45TreeNodeList"},
     {"index", (binaryfunc)C45TreeNodeList_index, METH_O, "(C45TreeNode) -> int"},
     {"insert", (binaryfunc)C45TreeNodeList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)C45TreeNodeList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)C45TreeNodeList_pop, METH_VARARGS, "() -> C45TreeNode"},
     {"remove", (binaryfunc)C45TreeNodeList_remove, METH_O, "(C45TreeNode) -> None"},
     {"reverse", (binaryfunc)C45TreeNodeList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)C45TreeNodeList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods C45TreeNodeList_as_sequence = {
  (inquiry)C45TreeNodeList_len_sq,                   /* sq_length */
  (binaryfunc)C45TreeNodeList_concat,                /* sq_concat */
  (intargfunc)C45TreeNodeList_repeat,                /* sq_repeat */
  (intargfunc)C45TreeNodeList_getitem_sq,            /* sq_item */
  (intintargfunc)C45TreeNodeList_getslice,           /* sq_slice */
  (intobjargproc)C45TreeNodeList_setitem_sq,         /* sq_ass_item */
  (intintobjargproc)C45TreeNodeList_setslice,        /* sq_ass_slice */
  (objobjproc)C45TreeNodeList_contains,              /* sq_contains */
};

PyTypeObject PyOrC45TreeNodeList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.C45NodeList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)C45TreeNodeList_repr,                    /* tp_repr */
  0,
  &C45TreeNodeList_as_sequence,                      /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)C45TreeNodeList_str,                     /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of C45TreeNode>)",                         /* tp_doc */
  0, 0,
  (richcmpfunc)C45TreeNodeList_richcmp,              /* tp_richcmp */
  0, 0, 0,
  C45TreeNodeList_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)C45TreeNodeList_new,                      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_C45TreeNodeList(PyObject *obj, void *ptr) { if (!PyOrC45TreeNodeList_Check(obj)) return 0;      *(GCPtr<TC45TreeNodeList> *)(ptr) = PyOrange_AsC45TreeNodeList(obj); return 1; }
int ccn_func_C45TreeNodeList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TC45TreeNodeList> *)(ptr) = GCPtr<TC45TreeNodeList>(); return 1; }      if (!PyOrC45TreeNodeList_Check(obj)) return 0;      *(GCPtr<TC45TreeNodeList> *)(ptr) = PyOrange_AsC45TreeNodeList(obj); return 1; }


ORANGE_API TOrangeType PyOrC45TreeNodeList_Type (PyOrC45TreeNodeList_Type_inh, typeid(TC45TreeNodeList), 0, cc_C45TreeNodeList, ccn_C45TreeNodeList, NULL, true, NULL, NULL);



/* -------------- CostLearner --------------*/


POrange CostLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TCostLearner(), type); }


PyTypeObject PyOrCostLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.wrappers.CostLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, estimate=, costs=]) -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_CostLearner(PyObject *obj, void *ptr) { if (!PyOrCostLearner_Check(obj)) return 0;      *(GCPtr<TCostLearner> *)(ptr) = PyOrange_AsCostLearner(obj); return 1; }
int ccn_func_CostLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TCostLearner> *)(ptr) = GCPtr<TCostLearner>(); return 1; }      if (!PyOrCostLearner_Check(obj)) return 0;      *(GCPtr<TCostLearner> *)(ptr) = PyOrange_AsCostLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrCostLearner_Type (PyOrCostLearner_Type_inh, typeid(TCostLearner), CostLearner_default_constructor, cc_CostLearner, ccn_CostLearner, NULL, true, NULL, NULL);



/* -------------- CostWrapperClassifier --------------*/


POrange CostWrapperClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TCostWrapperClassifier(), type); }


PyTypeObject PyOrCostWrapperClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.wrappers.CostWrapperClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([classifier=, costs=])",                         /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_CostWrapperClassifier(PyObject *obj, void *ptr) { if (!PyOrCostWrapperClassifier_Check(obj)) return 0;      *(GCPtr<TCostWrapperClassifier> *)(ptr) = PyOrange_AsCostWrapperClassifier(obj); return 1; }
int ccn_func_CostWrapperClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TCostWrapperClassifier> *)(ptr) = GCPtr<TCostWrapperClassifier>(); return 1; }      if (!PyOrCostWrapperClassifier_Check(obj)) return 0;      *(GCPtr<TCostWrapperClassifier> *)(ptr) = PyOrange_AsCostWrapperClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrCostWrapperClassifier_Type (PyOrCostWrapperClassifier_Type_inh, typeid(TCostWrapperClassifier), CostWrapperClassifier_default_constructor, cc_CostWrapperClassifier, ccn_CostWrapperClassifier, NULL, true, NULL, NULL);



/* -------------- CostWrapperLearner --------------*/


POrange CostWrapperLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TCostWrapperLearner(), type); }


PyTypeObject PyOrCostWrapperLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.wrappers.CostWrapperLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, costs=]) -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_CostWrapperLearner(PyObject *obj, void *ptr) { if (!PyOrCostWrapperLearner_Check(obj)) return 0;      *(GCPtr<TCostWrapperLearner> *)(ptr) = PyOrange_AsCostWrapperLearner(obj); return 1; }
int ccn_func_CostWrapperLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TCostWrapperLearner> *)(ptr) = GCPtr<TCostWrapperLearner>(); return 1; }      if (!PyOrCostWrapperLearner_Check(obj)) return 0;      *(GCPtr<TCostWrapperLearner> *)(ptr) = PyOrange_AsCostWrapperLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrCostWrapperLearner_Type (PyOrCostWrapperLearner_Type_inh, typeid(TCostWrapperLearner), CostWrapperLearner_default_constructor, cc_CostWrapperLearner, ccn_CostWrapperLearner, NULL, true, NULL, NULL);



/* -------------- EVDist --------------*/


POrange EVDist_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEVDist(), type); }


PyTypeObject PyOrEVDist_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EVDist",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EVDist(PyObject *obj, void *ptr) { if (!PyOrEVDist_Check(obj)) return 0;      *(GCPtr<TEVDist> *)(ptr) = PyOrange_AsEVDist(obj); return 1; }
int ccn_func_EVDist(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEVDist> *)(ptr) = GCPtr<TEVDist>(); return 1; }      if (!PyOrEVDist_Check(obj)) return 0;      *(GCPtr<TEVDist> *)(ptr) = PyOrange_AsEVDist(obj); return 1; }


ORANGE_API TOrangeType PyOrEVDist_Type (PyOrEVDist_Type_inh, typeid(TEVDist), EVDist_default_constructor, cc_EVDist, ccn_EVDist, NULL, true, NULL, NULL);



/* -------------- EVDistGetter --------------*/

PyMethodDef EVDistGetter_methods[] = {
     {"__reduce__", (binaryfunc)EVDistGetter__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char EVDistGetter_doc[] = "(rule, length) -/-> (EVdist)";


PyTypeObject PyOrEVDistGetter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EVDistGetter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)EVDistGetter_call,                    /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  EVDistGetter_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)EVDistGetter_new,                         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EVDistGetter(PyObject *obj, void *ptr) { if (!PyOrEVDistGetter_Check(obj)) return 0;      *(GCPtr<TEVDistGetter> *)(ptr) = PyOrange_AsEVDistGetter(obj); return 1; }
int ccn_func_EVDistGetter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEVDistGetter> *)(ptr) = GCPtr<TEVDistGetter>(); return 1; }      if (!PyOrEVDistGetter_Check(obj)) return 0;      *(GCPtr<TEVDistGetter> *)(ptr) = PyOrange_AsEVDistGetter(obj); return 1; }


ORANGE_API TOrangeType PyOrEVDistGetter_Type (PyOrEVDistGetter_Type_inh, typeid(TEVDistGetter), 0, cc_EVDistGetter, ccn_EVDistGetter, NULL, false, NULL, NULL);



/* -------------- EVDistGetter_Standard --------------*/


POrange EVDistGetter_Standard_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEVDistGetter_Standard(), type); }


PyTypeObject PyOrEVDistGetter_Standard_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EVDistGetter_Standard",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrEVDistGetter_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EVDistGetter_Standard(PyObject *obj, void *ptr) { if (!PyOrEVDistGetter_Standard_Check(obj)) return 0;      *(GCPtr<TEVDistGetter_Standard> *)(ptr) = PyOrange_AsEVDistGetter_Standard(obj); return 1; }
int ccn_func_EVDistGetter_Standard(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEVDistGetter_Standard> *)(ptr) = GCPtr<TEVDistGetter_Standard>(); return 1; }      if (!PyOrEVDistGetter_Standard_Check(obj)) return 0;      *(GCPtr<TEVDistGetter_Standard> *)(ptr) = PyOrange_AsEVDistGetter_Standard(obj); return 1; }


ORANGE_API TOrangeType PyOrEVDistGetter_Standard_Type (PyOrEVDistGetter_Standard_Type_inh, typeid(TEVDistGetter_Standard), EVDistGetter_Standard_default_constructor, cc_EVDistGetter_Standard, ccn_EVDistGetter_Standard, NULL, true, NULL, NULL);



/* -------------- EVDistList --------------*/

PyMethodDef EVDistList_methods[] = {
     {"__reduce__", (binaryfunc)EVDistList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)EVDistList_append, METH_O, "(EVDist) -> None"},
     {"count", (binaryfunc)EVDistList_count, METH_O, "(EVDist) -> int"},
     {"extend", (binaryfunc)EVDistList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)EVDistList_filter, METH_VARARGS, "([filter-function]) -> EVDistList"},
     {"index", (binaryfunc)EVDistList_index, METH_O, "(EVDist) -> int"},
     {"insert", (binaryfunc)EVDistList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)EVDistList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)EVDistList_pop, METH_VARARGS, "() -> EVDist"},
     {"remove", (binaryfunc)EVDistList_remove, METH_O, "(EVDist) -> None"},
     {"reverse", (binaryfunc)EVDistList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)EVDistList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods EVDistList_as_sequence = {
  (inquiry)EVDistList_len_sq,                        /* sq_length */
  (binaryfunc)EVDistList_concat,                     /* sq_concat */
  (intargfunc)EVDistList_repeat,                     /* sq_repeat */
  (intargfunc)EVDistList_getitem_sq,                 /* sq_item */
  (intintargfunc)EVDistList_getslice,                /* sq_slice */
  (intobjargproc)EVDistList_setitem_sq,              /* sq_ass_item */
  (intintobjargproc)EVDistList_setslice,             /* sq_ass_slice */
  (objobjproc)EVDistList_contains,                   /* sq_contains */
};

PyTypeObject PyOrEVDistList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EVDistList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)EVDistList_repr,                         /* tp_repr */
  0,
  &EVDistList_as_sequence,                           /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)EVDistList_str,                          /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of EVDist>)",                              /* tp_doc */
  0, 0,
  (richcmpfunc)EVDistList_richcmp,                   /* tp_richcmp */
  0, 0, 0,
  EVDistList_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)EVDistList_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EVDistList(PyObject *obj, void *ptr) { if (!PyOrEVDistList_Check(obj)) return 0;      *(GCPtr<TEVDistList> *)(ptr) = PyOrange_AsEVDistList(obj); return 1; }
int ccn_func_EVDistList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEVDistList> *)(ptr) = GCPtr<TEVDistList>(); return 1; }      if (!PyOrEVDistList_Check(obj)) return 0;      *(GCPtr<TEVDistList> *)(ptr) = PyOrange_AsEVDistList(obj); return 1; }


ORANGE_API TOrangeType PyOrEVDistList_Type (PyOrEVDistList_Type_inh, typeid(TEVDistList), 0, cc_EVDistList, ccn_EVDistList, NULL, true, NULL, NULL);



/* -------------- EarthClassifier --------------*/

PyMethodDef EarthClassifier_methods[] = {
     {"__reduce__", (binaryfunc)EarthClassifier__reduce__, METH_NOARGS, "()"},
     {"format_earth", (binaryfunc)EarthClassifier_formatEarth, METH_VARARGS, "() -> None"},
     {NULL, NULL}
};


POrange EarthClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEarthClassifier(), type); }


PyTypeObject PyOrEarthClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EarthClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  " ",                                               /* tp_doc */
  0, 0, 0, 0, 0, 0,
  EarthClassifier_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EarthClassifier(PyObject *obj, void *ptr) { if (!PyOrEarthClassifier_Check(obj)) return 0;      *(GCPtr<TEarthClassifier> *)(ptr) = PyOrange_AsEarthClassifier(obj); return 1; }
int ccn_func_EarthClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEarthClassifier> *)(ptr) = GCPtr<TEarthClassifier>(); return 1; }      if (!PyOrEarthClassifier_Check(obj)) return 0;      *(GCPtr<TEarthClassifier> *)(ptr) = PyOrange_AsEarthClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrEarthClassifier_Type (PyOrEarthClassifier_Type_inh, typeid(TEarthClassifier), EarthClassifier_default_constructor, cc_EarthClassifier, ccn_EarthClassifier, NULL, true, NULL, NULL);



/* -------------- EarthLearner --------------*/


POrange EarthLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TEarthLearner(), type); }


PyTypeObject PyOrEarthLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.EarthLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [weight=] -/-> Classifier)",         /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_EarthLearner(PyObject *obj, void *ptr) { if (!PyOrEarthLearner_Check(obj)) return 0;      *(GCPtr<TEarthLearner> *)(ptr) = PyOrange_AsEarthLearner(obj); return 1; }
int ccn_func_EarthLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TEarthLearner> *)(ptr) = GCPtr<TEarthLearner>(); return 1; }      if (!PyOrEarthLearner_Check(obj)) return 0;      *(GCPtr<TEarthLearner> *)(ptr) = PyOrange_AsEarthLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrEarthLearner_Type (PyOrEarthLearner_Type_inh, typeid(TEarthLearner), EarthLearner_default_constructor, cc_EarthLearner, ccn_EarthLearner, NULL, true, NULL, NULL);



/* -------------- ItemsetNodeProxy --------------*/

PyGetSetDef ItemsetNodeProxy_getset[]=  {
  {"children", (getter)ItemsetNodeProxy_get_children, NULL},
  {"examples", (getter)ItemsetNodeProxy_get_examples, NULL},
  {"item_id", (getter)ItemsetNodeProxy_get_itemId, NULL},
  {"support", (getter)ItemsetNodeProxy_get_support, NULL},
  {NULL}};


PyObject *ItemsetNodeProxy_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrItemsetNodeProxy_Type, type, args, kwds); }


PyTypeObject PyOrItemsetNodeProxy_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.associate.ItemsetNodeProxy",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC, /* tp_flags */
  "()",                                              /* tp_doc */
  (traverseproc)ItemsetNodeProxy_traverse,           /* tp_traverse */
  (inquiry)ItemsetNodeProxy_clear,                   /* tp_clear */
  0, 0, 0, 0, 0, 0,
  ItemsetNodeProxy_getset,                           /* tp_getset */
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)ItemsetNodeProxy_abstract_constructor,    /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ItemsetNodeProxy(PyObject *obj, void *ptr) { if (!PyOrItemsetNodeProxy_Check(obj)) return 0;      *(GCPtr<TItemsetNodeProxy> *)(ptr) = PyOrange_AsItemsetNodeProxy(obj); return 1; }
int ccn_func_ItemsetNodeProxy(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TItemsetNodeProxy> *)(ptr) = GCPtr<TItemsetNodeProxy>(); return 1; }      if (!PyOrItemsetNodeProxy_Check(obj)) return 0;      *(GCPtr<TItemsetNodeProxy> *)(ptr) = PyOrange_AsItemsetNodeProxy(obj); return 1; }


ORANGE_API TOrangeType PyOrItemsetNodeProxy_Type (PyOrItemsetNodeProxy_Type_inh, typeid(TItemsetNodeProxy), 0, cc_ItemsetNodeProxy, ccn_ItemsetNodeProxy, NULL, false, NULL, NULL);



/* -------------- ItemsetsSparseInducer --------------*/

char ItemsetsSparseInducer_doc[] = "(examples[, weightID]) -> AssociationRules";

POrange ItemsetsSparseInducer_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TItemsetsSparseInducer(), type); }


PyTypeObject PyOrItemsetsSparseInducer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.associate.ItemsetsSparseInducer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)ItemsetsSparseInducer_call,           /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]], support=]) -/-> AssociationRules", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_ItemsetsSparseInducer(PyObject *obj, void *ptr) { if (!PyOrItemsetsSparseInducer_Check(obj)) return 0;      *(GCPtr<TItemsetsSparseInducer> *)(ptr) = PyOrange_AsItemsetsSparseInducer(obj); return 1; }
int ccn_func_ItemsetsSparseInducer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TItemsetsSparseInducer> *)(ptr) = GCPtr<TItemsetsSparseInducer>(); return 1; }      if (!PyOrItemsetsSparseInducer_Check(obj)) return 0;      *(GCPtr<TItemsetsSparseInducer> *)(ptr) = PyOrange_AsItemsetsSparseInducer(obj); return 1; }


ORANGE_API TOrangeType PyOrItemsetsSparseInducer_Type (PyOrItemsetsSparseInducer_Type_inh, typeid(TItemsetsSparseInducer), ItemsetsSparseInducer_default_constructor, cc_ItemsetsSparseInducer, ccn_ItemsetsSparseInducer, NULL, true, NULL, NULL);



/* -------------- KernelFunc --------------*/

PyMethodDef KernelFunc_methods[] = {
     {"__reduce__", (binaryfunc)KernelFunc__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char KernelFunc_doc[] = "(Example, Example) -> float";


PyTypeObject PyOrKernelFunc_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.svm.kernels.KernelFunc",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)KernelFunc_call,                      /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  KernelFunc_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)KernelFunc_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_KernelFunc(PyObject *obj, void *ptr) { if (!PyOrKernelFunc_Check(obj)) return 0;      *(GCPtr<TKernelFunc> *)(ptr) = PyOrange_AsKernelFunc(obj); return 1; }
int ccn_func_KernelFunc(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TKernelFunc> *)(ptr) = GCPtr<TKernelFunc>(); return 1; }      if (!PyOrKernelFunc_Check(obj)) return 0;      *(GCPtr<TKernelFunc> *)(ptr) = PyOrange_AsKernelFunc(obj); return 1; }


ORANGE_API TOrangeType PyOrKernelFunc_Type (PyOrKernelFunc_Type_inh, typeid(TKernelFunc), 0, cc_KernelFunc, ccn_KernelFunc, NULL, false, NULL, NULL);



/* -------------- LinearClassifier --------------*/

PyMethodDef LinearClassifier_methods[] = {
     {"__reduce__", (binaryfunc)LinearClassifier__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};


POrange LinearClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TLinearClassifier(), type); }


PyTypeObject PyOrLinearClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.svm.LinearClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  " ",                                               /* tp_doc */
  0, 0, 0, 0, 0, 0,
  LinearClassifier_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LinearClassifier(PyObject *obj, void *ptr) { if (!PyOrLinearClassifier_Check(obj)) return 0;      *(GCPtr<TLinearClassifier> *)(ptr) = PyOrange_AsLinearClassifier(obj); return 1; }
int ccn_func_LinearClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLinearClassifier> *)(ptr) = GCPtr<TLinearClassifier>(); return 1; }      if (!PyOrLinearClassifier_Check(obj)) return 0;      *(GCPtr<TLinearClassifier> *)(ptr) = PyOrange_AsLinearClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrLinearClassifier_Type (PyOrLinearClassifier_Type_inh, typeid(TLinearClassifier), LinearClassifier_default_constructor, cc_LinearClassifier, ccn_LinearClassifier, NULL, true, NULL, NULL);



/* -------------- LinearLearner --------------*/



TNamedConstantsDef LinearLearner_LIBLINEAR_VERSION_values[] = {{"VERSION", 180}, {0, 0}};
static PyObject *LinearLearner_LIBLINEAR_VERSION_repr(PyObject *self) { return stringFromList(self, LinearLearner_LIBLINEAR_VERSION_values); }
PyObject *LinearLearner_LIBLINEAR_VERSION__reduce__(PyObject *self);
PyMethodDef LinearLearner_LIBLINEAR_VERSION_methods[] = { {"__reduce__", (binaryfunc)LinearLearner_LIBLINEAR_VERSION__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyLinearLearner_LIBLINEAR_VERSION_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "LinearLearner.LIBLINEAR_VERSION", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)LinearLearner_LIBLINEAR_VERSION_repr, 0, 0, 0, 0, 0, (reprfunc)LinearLearner_LIBLINEAR_VERSION_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, LinearLearner_LIBLINEAR_VERSION_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyLinearLearner_LIBLINEAR_VERSION_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyLinearLearner_LIBLINEAR_VERSION_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTLinearLearner_LIBLINEAR_VERSION(void *l) { return PyLinearLearner_LIBLINEAR_VERSION_FromLong(*(int *)l); }
PyObject *LinearLearner_LIBLINEAR_VERSION__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "LinearLearner_LIBLINEAR_VERSION", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef LinearLearner_Lossfunction1_values[] = {{"L2R_LR", 0}, {"L2R_L2Loss_SVC_Dual", 1}, {"L2R_L2Loss_SVC", 2}, {"L2R_L1Loss_SVC_Dual", 3}, {"MCSVM_CS", 4}, {"L1R_L2Loss_SVC", 5}, {"L1R_LR", 6}, {"L2R_LR_Dual", 7}, {0, 0}};
static PyObject *LinearLearner_Lossfunction1_repr(PyObject *self) { return stringFromList(self, LinearLearner_Lossfunction1_values); }
PyObject *LinearLearner_Lossfunction1__reduce__(PyObject *self);
PyMethodDef LinearLearner_Lossfunction1_methods[] = { {"__reduce__", (binaryfunc)LinearLearner_Lossfunction1__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyLinearLearner_Lossfunction1_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "LinearLearner.Lossfunction1", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)LinearLearner_Lossfunction1_repr, 0, 0, 0, 0, 0, (reprfunc)LinearLearner_Lossfunction1_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, LinearLearner_Lossfunction1_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyLinearLearner_Lossfunction1_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyLinearLearner_Lossfunction1_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTLinearLearner_Lossfunction1(void *l) { return PyLinearLearner_Lossfunction1_FromLong(*(int *)l); }
PyObject *LinearLearner_Lossfunction1__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "LinearLearner_Lossfunction1", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef LinearLearner_Lossfunction1_old__values[] = {{"L2_LR", 0}, {"L2Loss_SVM_Dual", 1}, {"L2Loss_SVM", 2}, {"L1Loss_SVM_Dual", 3}, {0, 0}};
static PyObject *LinearLearner_Lossfunction1_old__repr(PyObject *self) { return stringFromList(self, LinearLearner_Lossfunction1_old__values); }
PyObject *LinearLearner_Lossfunction1_old___reduce__(PyObject *self);
PyMethodDef LinearLearner_Lossfunction1_old__methods[] = { {"__reduce__", (binaryfunc)LinearLearner_Lossfunction1_old___reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyLinearLearner_Lossfunction1_old__Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "LinearLearner.Lossfunction1_old_", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)LinearLearner_Lossfunction1_old__repr, 0, 0, 0, 0, 0, (reprfunc)LinearLearner_Lossfunction1_old__repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, LinearLearner_Lossfunction1_old__methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyLinearLearner_Lossfunction1_old__FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyLinearLearner_Lossfunction1_old__Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTLinearLearner_Lossfunction1_old_(void *l) { return PyLinearLearner_Lossfunction1_old__FromLong(*(int *)l); }
PyObject *LinearLearner_Lossfunction1_old___reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "LinearLearner_Lossfunction1_old_", ((PyIntObject *)(self))->ob_ival); }

void LinearLearner_addConstants()
{ PyObject *&dict = PyOrLinearLearner_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "L1Loss_SVM_Dual", PyLinearLearner_Lossfunction1_old__FromLong((long)(3)));
  PyDict_SetItemString(dict, "L2R_L1Loss_SVC_Dual", PyLinearLearner_Lossfunction1_FromLong((long)(3)));
  PyDict_SetItemString(dict, "L2R_L2Loss_SVC_Dual", PyLinearLearner_Lossfunction1_FromLong((long)(1)));
  PyDict_SetItemString(dict, "L2_LR", PyLinearLearner_Lossfunction1_old__FromLong((long)(0)));
  PyDict_SetItemString(dict, "L1R_L2Loss_SVC", PyLinearLearner_Lossfunction1_FromLong((long)(5)));
  PyDict_SetItemString(dict, "MCSVM_CS", PyLinearLearner_Lossfunction1_FromLong((long)(4)));
  PyDict_SetItemString(dict, "L2R_L2Loss_SVC", PyLinearLearner_Lossfunction1_FromLong((long)(2)));
  PyDict_SetItemString(dict, "VERSION", PyLinearLearner_LIBLINEAR_VERSION_FromLong((long)(180)));
  PyDict_SetItemString(dict, "L2Loss_SVM_Dual", PyLinearLearner_Lossfunction1_old__FromLong((long)(1)));
  PyDict_SetItemString(dict, "L2R_LR", PyLinearLearner_Lossfunction1_FromLong((long)(0)));
  PyDict_SetItemString(dict, "L1R_LR", PyLinearLearner_Lossfunction1_FromLong((long)(6)));
  PyDict_SetItemString(dict, "L2Loss_SVM", PyLinearLearner_Lossfunction1_old__FromLong((long)(2)));
  PyDict_SetItemString(dict, "L2R_LR_Dual", PyLinearLearner_Lossfunction1_FromLong((long)(7)));
}

POrange LinearLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TLinearLearner(), type); }


PyTypeObject PyOrLinearLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.LinearLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] -/-> Classifier)",                    /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LinearLearner(PyObject *obj, void *ptr) { if (!PyOrLinearLearner_Check(obj)) return 0;      *(GCPtr<TLinearLearner> *)(ptr) = PyOrange_AsLinearLearner(obj); return 1; }
int ccn_func_LinearLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLinearLearner> *)(ptr) = GCPtr<TLinearLearner>(); return 1; }      if (!PyOrLinearLearner_Check(obj)) return 0;      *(GCPtr<TLinearLearner> *)(ptr) = PyOrange_AsLinearLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrLinearLearner_Type (PyOrLinearLearner_Type_inh, typeid(TLinearLearner), LinearLearner_default_constructor, cc_LinearLearner, ccn_LinearLearner, NULL, true, NULL, NULL);



/* -------------- LogRegClassifier --------------*/


POrange LogRegClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TLogRegClassifier(), type); }


PyTypeObject PyOrLogRegClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.logreg.LogRegClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([probabilities=])",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LogRegClassifier(PyObject *obj, void *ptr) { if (!PyOrLogRegClassifier_Check(obj)) return 0;      *(GCPtr<TLogRegClassifier> *)(ptr) = PyOrange_AsLogRegClassifier(obj); return 1; }
int ccn_func_LogRegClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLogRegClassifier> *)(ptr) = GCPtr<TLogRegClassifier>(); return 1; }      if (!PyOrLogRegClassifier_Check(obj)) return 0;      *(GCPtr<TLogRegClassifier> *)(ptr) = PyOrange_AsLogRegClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrLogRegClassifier_Type (PyOrLogRegClassifier_Type_inh, typeid(TLogRegClassifier), LogRegClassifier_default_constructor, cc_LogRegClassifier, ccn_LogRegClassifier, NULL, true, NULL, NULL);



/* -------------- LogRegFitter --------------*/

PyMethodDef LogRegFitter_methods[] = {
     {"__reduce__", (binaryfunc)LogRegFitter__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char LogRegFitter_doc[] = "(examples[, weightID]) -/-> (status, beta, beta_se, likelihood) | (status, attribute)";


TNamedConstantsDef LogRegFitter_ErrorCode_values[] = {{"OK", 0}, {"Infinity", 1}, {"Divergence", 2}, {"Constant", 3}, {"Singularity", 4}, {0, 0}};
static PyObject *LogRegFitter_ErrorCode_repr(PyObject *self) { return stringFromList(self, LogRegFitter_ErrorCode_values); }
PyObject *LogRegFitter_ErrorCode__reduce__(PyObject *self);
PyMethodDef LogRegFitter_ErrorCode_methods[] = { {"__reduce__", (binaryfunc)LogRegFitter_ErrorCode__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PyLogRegFitter_ErrorCode_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "LogRegFitter.ErrorCode", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)LogRegFitter_ErrorCode_repr, 0, 0, 0, 0, 0, (reprfunc)LogRegFitter_ErrorCode_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, LogRegFitter_ErrorCode_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PyLogRegFitter_ErrorCode_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PyLogRegFitter_ErrorCode_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTLogRegFitter_ErrorCode(void *l) { return PyLogRegFitter_ErrorCode_FromLong(*(int *)l); }
PyObject *LogRegFitter_ErrorCode__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "LogRegFitter_ErrorCode", ((PyIntObject *)(self))->ob_ival); }

void LogRegFitter_addConstants()
{ PyObject *&dict = PyOrLogRegFitter_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Infinity", PyLogRegFitter_ErrorCode_FromLong((long)(1)));
  PyDict_SetItemString(dict, "Singularity", PyLogRegFitter_ErrorCode_FromLong((long)(4)));
  PyDict_SetItemString(dict, "OK", PyLogRegFitter_ErrorCode_FromLong((long)(0)));
  PyDict_SetItemString(dict, "Constant", PyLogRegFitter_ErrorCode_FromLong((long)(3)));
  PyDict_SetItemString(dict, "Divergence", PyLogRegFitter_ErrorCode_FromLong((long)(2)));
}


PyTypeObject PyOrLogRegFitter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.logreg.LogRegFitter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)LogRegFitter_call,                    /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  LogRegFitter_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)LogRegFitter_new,                         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LogRegFitter(PyObject *obj, void *ptr) { if (!PyOrLogRegFitter_Check(obj)) return 0;      *(GCPtr<TLogRegFitter> *)(ptr) = PyOrange_AsLogRegFitter(obj); return 1; }
int ccn_func_LogRegFitter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLogRegFitter> *)(ptr) = GCPtr<TLogRegFitter>(); return 1; }      if (!PyOrLogRegFitter_Check(obj)) return 0;      *(GCPtr<TLogRegFitter> *)(ptr) = PyOrange_AsLogRegFitter(obj); return 1; }


ORANGE_API TOrangeType PyOrLogRegFitter_Type (PyOrLogRegFitter_Type_inh, typeid(TLogRegFitter), 0, cc_LogRegFitter, ccn_LogRegFitter, NULL, false, NULL, NULL);



/* -------------- LogRegFitter_Cholesky --------------*/


POrange LogRegFitter_Cholesky_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TLogRegFitter_Cholesky(), type); }


PyTypeObject PyOrLogRegFitter_Cholesky_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.logreg.LogRegFitter_Cholesky",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([example[, weightID]]) -/-> (status, beta, beta_se, likelihood) | (status, attribute)", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLogRegFitter_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LogRegFitter_Cholesky(PyObject *obj, void *ptr) { if (!PyOrLogRegFitter_Cholesky_Check(obj)) return 0;      *(GCPtr<TLogRegFitter_Cholesky> *)(ptr) = PyOrange_AsLogRegFitter_Cholesky(obj); return 1; }
int ccn_func_LogRegFitter_Cholesky(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLogRegFitter_Cholesky> *)(ptr) = GCPtr<TLogRegFitter_Cholesky>(); return 1; }      if (!PyOrLogRegFitter_Cholesky_Check(obj)) return 0;      *(GCPtr<TLogRegFitter_Cholesky> *)(ptr) = PyOrange_AsLogRegFitter_Cholesky(obj); return 1; }


ORANGE_API TOrangeType PyOrLogRegFitter_Cholesky_Type (PyOrLogRegFitter_Cholesky_Type_inh, typeid(TLogRegFitter_Cholesky), LogRegFitter_Cholesky_default_constructor, cc_LogRegFitter_Cholesky, ccn_LogRegFitter_Cholesky, NULL, true, NULL, NULL);



/* -------------- LogRegLearner --------------*/

PyMethodDef LogRegLearner_methods[] = {
     {"fit_model", (binaryfunc)LogRegLearner_fitModel, METH_VARARGS, "(examples[, weight])"},
     {NULL, NULL}
};


POrange LogRegLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TLogRegLearner(), type); }


PyTypeObject PyOrLogRegLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.LogRegLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weight=]]) -/-> Classifier",         /* tp_doc */
  0, 0, 0, 0, 0, 0,
  LogRegLearner_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_LogRegLearner(PyObject *obj, void *ptr) { if (!PyOrLogRegLearner_Check(obj)) return 0;      *(GCPtr<TLogRegLearner> *)(ptr) = PyOrange_AsLogRegLearner(obj); return 1; }
int ccn_func_LogRegLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TLogRegLearner> *)(ptr) = GCPtr<TLogRegLearner>(); return 1; }      if (!PyOrLogRegLearner_Check(obj)) return 0;      *(GCPtr<TLogRegLearner> *)(ptr) = PyOrange_AsLogRegLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrLogRegLearner_Type (PyOrLogRegLearner_Type_inh, typeid(TLogRegLearner), LogRegLearner_default_constructor, cc_LogRegLearner, ccn_LogRegLearner, NULL, true, NULL, NULL);



/* -------------- MajorityLearner --------------*/


POrange MajorityLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TMajorityLearner(), type); }


PyTypeObject PyOrMajorityLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.majority.MajorityLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, estimate=]) -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_MajorityLearner(PyObject *obj, void *ptr) { if (!PyOrMajorityLearner_Check(obj)) return 0;      *(GCPtr<TMajorityLearner> *)(ptr) = PyOrange_AsMajorityLearner(obj); return 1; }
int ccn_func_MajorityLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TMajorityLearner> *)(ptr) = GCPtr<TMajorityLearner>(); return 1; }      if (!PyOrMajorityLearner_Check(obj)) return 0;      *(GCPtr<TMajorityLearner> *)(ptr) = PyOrange_AsMajorityLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrMajorityLearner_Type (PyOrMajorityLearner_Type_inh, typeid(TMajorityLearner), MajorityLearner_default_constructor, cc_MajorityLearner, ccn_MajorityLearner, NULL, true, NULL, NULL);



/* -------------- P2NN --------------*/

PyMethodDef P2NN_methods[] = {
     {"__reduce__", (binaryfunc)P2NN__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};



PyTypeObject PyOrP2NN_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.knn.P2NN",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(examples, anchors[, domain]) -> PNN",            /* tp_doc */
  0, 0, 0, 0, 0, 0,
  P2NN_methods,                                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)P2NN_new,                                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_P2NN(PyObject *obj, void *ptr) { if (!PyOrP2NN_Check(obj)) return 0;      *(GCPtr<TP2NN> *)(ptr) = PyOrange_AsP2NN(obj); return 1; }
int ccn_func_P2NN(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TP2NN> *)(ptr) = GCPtr<TP2NN>(); return 1; }      if (!PyOrP2NN_Check(obj)) return 0;      *(GCPtr<TP2NN> *)(ptr) = PyOrange_AsP2NN(obj); return 1; }


ORANGE_API TOrangeType PyOrP2NN_Type (PyOrP2NN_Type_inh, typeid(TP2NN), 0, cc_P2NN, ccn_P2NN, NULL, false, NULL, NULL);



/* -------------- Rule --------------*/

PyMethodDef Rule_methods[] = {
     {"filter_and_store", (binaryfunc)Rule_filterAndStore, METH_VARARGS, "(examples, weightID, targetClass)"},
     {NULL, NULL}
};


POrange Rule_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRule(), type); }


TAttributeAlias Rule_aliases[] = {
    {"instances", "examples"},
    {NULL, NULL}};

PyTypeObject PyOrRule_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Rule",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)Rule_call,                            /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  Rule_methods,                                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_Rule(PyObject *obj, void *ptr) { if (!PyOrRule_Check(obj)) return 0;      *(GCPtr<TRule> *)(ptr) = PyOrange_AsRule(obj); return 1; }
int ccn_func_Rule(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRule> *)(ptr) = GCPtr<TRule>(); return 1; }      if (!PyOrRule_Check(obj)) return 0;      *(GCPtr<TRule> *)(ptr) = PyOrange_AsRule(obj); return 1; }


ORANGE_API TOrangeType PyOrRule_Type (PyOrRule_Type_inh, typeid(TRule), Rule_default_constructor, cc_Rule, ccn_Rule, NULL, true, NULL, Rule_aliases);



/* -------------- RuleBeamCandidateSelector --------------*/

PyMethodDef RuleBeamCandidateSelector_methods[] = {
     {"__reduce__", (binaryfunc)RuleBeamCandidateSelector__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleBeamCandidateSelector_doc[] = "(existingRules, table, weightID) -/-> (candidates, remainingRules)";


PyTypeObject PyOrRuleBeamCandidateSelector_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamCandidateSelector",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleBeamCandidateSelector_call,       /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleBeamCandidateSelector_methods,                 /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleBeamCandidateSelector_new,            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamCandidateSelector(PyObject *obj, void *ptr) { if (!PyOrRuleBeamCandidateSelector_Check(obj)) return 0;      *(GCPtr<TRuleBeamCandidateSelector> *)(ptr) = PyOrange_AsRuleBeamCandidateSelector(obj); return 1; }
int ccn_func_RuleBeamCandidateSelector(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamCandidateSelector> *)(ptr) = GCPtr<TRuleBeamCandidateSelector>(); return 1; }      if (!PyOrRuleBeamCandidateSelector_Check(obj)) return 0;      *(GCPtr<TRuleBeamCandidateSelector> *)(ptr) = PyOrange_AsRuleBeamCandidateSelector(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamCandidateSelector_Type (PyOrRuleBeamCandidateSelector_Type_inh, typeid(TRuleBeamCandidateSelector), 0, cc_RuleBeamCandidateSelector, ccn_RuleBeamCandidateSelector, NULL, false, NULL, NULL);



/* -------------- RuleBeamCandidateSelector_TakeAll --------------*/


POrange RuleBeamCandidateSelector_TakeAll_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleBeamCandidateSelector_TakeAll(), type); }


PyTypeObject PyOrRuleBeamCandidateSelector_TakeAll_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamCandidateSelector_TakeAll",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleBeamCandidateSelector_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamCandidateSelector_TakeAll(PyObject *obj, void *ptr) { if (!PyOrRuleBeamCandidateSelector_TakeAll_Check(obj)) return 0;      *(GCPtr<TRuleBeamCandidateSelector_TakeAll> *)(ptr) = PyOrange_AsRuleBeamCandidateSelector_TakeAll(obj); return 1; }
int ccn_func_RuleBeamCandidateSelector_TakeAll(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamCandidateSelector_TakeAll> *)(ptr) = GCPtr<TRuleBeamCandidateSelector_TakeAll>(); return 1; }      if (!PyOrRuleBeamCandidateSelector_TakeAll_Check(obj)) return 0;      *(GCPtr<TRuleBeamCandidateSelector_TakeAll> *)(ptr) = PyOrange_AsRuleBeamCandidateSelector_TakeAll(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamCandidateSelector_TakeAll_Type (PyOrRuleBeamCandidateSelector_TakeAll_Type_inh, typeid(TRuleBeamCandidateSelector_TakeAll), RuleBeamCandidateSelector_TakeAll_default_constructor, cc_RuleBeamCandidateSelector_TakeAll, ccn_RuleBeamCandidateSelector_TakeAll, NULL, true, NULL, NULL);



/* -------------- RuleBeamFilter --------------*/

PyMethodDef RuleBeamFilter_methods[] = {
     {"__reduce__", (binaryfunc)RuleBeamFilter__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleBeamFilter_doc[] = "(rules, table, weightID) -/-> (rules)";


PyTypeObject PyOrRuleBeamFilter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamFilter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleBeamFilter_call,                  /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleBeamFilter_methods,                            /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleBeamFilter_new,                       /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamFilter(PyObject *obj, void *ptr) { if (!PyOrRuleBeamFilter_Check(obj)) return 0;      *(GCPtr<TRuleBeamFilter> *)(ptr) = PyOrange_AsRuleBeamFilter(obj); return 1; }
int ccn_func_RuleBeamFilter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamFilter> *)(ptr) = GCPtr<TRuleBeamFilter>(); return 1; }      if (!PyOrRuleBeamFilter_Check(obj)) return 0;      *(GCPtr<TRuleBeamFilter> *)(ptr) = PyOrange_AsRuleBeamFilter(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamFilter_Type (PyOrRuleBeamFilter_Type_inh, typeid(TRuleBeamFilter), 0, cc_RuleBeamFilter, ccn_RuleBeamFilter, NULL, false, NULL, NULL);



/* -------------- RuleBeamFilter_Width --------------*/


POrange RuleBeamFilter_Width_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleBeamFilter_Width(), type); }


PyTypeObject PyOrRuleBeamFilter_Width_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamFilter_Width",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([width=5])",                                     /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleBeamFilter_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamFilter_Width(PyObject *obj, void *ptr) { if (!PyOrRuleBeamFilter_Width_Check(obj)) return 0;      *(GCPtr<TRuleBeamFilter_Width> *)(ptr) = PyOrange_AsRuleBeamFilter_Width(obj); return 1; }
int ccn_func_RuleBeamFilter_Width(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamFilter_Width> *)(ptr) = GCPtr<TRuleBeamFilter_Width>(); return 1; }      if (!PyOrRuleBeamFilter_Width_Check(obj)) return 0;      *(GCPtr<TRuleBeamFilter_Width> *)(ptr) = PyOrange_AsRuleBeamFilter_Width(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamFilter_Width_Type (PyOrRuleBeamFilter_Width_Type_inh, typeid(TRuleBeamFilter_Width), RuleBeamFilter_Width_default_constructor, cc_RuleBeamFilter_Width, ccn_RuleBeamFilter_Width, NULL, true, NULL, NULL);



/* -------------- RuleBeamFinder --------------*/


POrange RuleBeamFinder_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleBeamFinder(), type); }


PyTypeObject PyOrRuleBeamFinder_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamFinder",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([validator=, evaluator=, initializer=, refiner=, candidateSelector=, ruleFilter=])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleFinder_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamFinder(PyObject *obj, void *ptr) { if (!PyOrRuleBeamFinder_Check(obj)) return 0;      *(GCPtr<TRuleBeamFinder> *)(ptr) = PyOrange_AsRuleBeamFinder(obj); return 1; }
int ccn_func_RuleBeamFinder(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamFinder> *)(ptr) = GCPtr<TRuleBeamFinder>(); return 1; }      if (!PyOrRuleBeamFinder_Check(obj)) return 0;      *(GCPtr<TRuleBeamFinder> *)(ptr) = PyOrange_AsRuleBeamFinder(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamFinder_Type (PyOrRuleBeamFinder_Type_inh, typeid(TRuleBeamFinder), RuleBeamFinder_default_constructor, cc_RuleBeamFinder, ccn_RuleBeamFinder, NULL, true, NULL, NULL);



/* -------------- RuleBeamInitializer --------------*/

PyMethodDef RuleBeamInitializer_methods[] = {
     {"__reduce__", (binaryfunc)RuleBeamInitializer__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleBeamInitializer_doc[] = "(table, weightID, targetClass, baseRules, evaluator, prior) -/-> (rules, bestRule)";


PyTypeObject PyOrRuleBeamInitializer_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamInitializer",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleBeamInitializer_call,             /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleBeamInitializer_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleBeamInitializer_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamInitializer(PyObject *obj, void *ptr) { if (!PyOrRuleBeamInitializer_Check(obj)) return 0;      *(GCPtr<TRuleBeamInitializer> *)(ptr) = PyOrange_AsRuleBeamInitializer(obj); return 1; }
int ccn_func_RuleBeamInitializer(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamInitializer> *)(ptr) = GCPtr<TRuleBeamInitializer>(); return 1; }      if (!PyOrRuleBeamInitializer_Check(obj)) return 0;      *(GCPtr<TRuleBeamInitializer> *)(ptr) = PyOrange_AsRuleBeamInitializer(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamInitializer_Type (PyOrRuleBeamInitializer_Type_inh, typeid(TRuleBeamInitializer), 0, cc_RuleBeamInitializer, ccn_RuleBeamInitializer, NULL, false, NULL, NULL);



/* -------------- RuleBeamInitializer_Default --------------*/


POrange RuleBeamInitializer_Default_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleBeamInitializer_Default(), type); }


PyTypeObject PyOrRuleBeamInitializer_Default_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamInitializer_Default",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleBeamInitializer_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamInitializer_Default(PyObject *obj, void *ptr) { if (!PyOrRuleBeamInitializer_Default_Check(obj)) return 0;      *(GCPtr<TRuleBeamInitializer_Default> *)(ptr) = PyOrange_AsRuleBeamInitializer_Default(obj); return 1; }
int ccn_func_RuleBeamInitializer_Default(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamInitializer_Default> *)(ptr) = GCPtr<TRuleBeamInitializer_Default>(); return 1; }      if (!PyOrRuleBeamInitializer_Default_Check(obj)) return 0;      *(GCPtr<TRuleBeamInitializer_Default> *)(ptr) = PyOrange_AsRuleBeamInitializer_Default(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamInitializer_Default_Type (PyOrRuleBeamInitializer_Default_Type_inh, typeid(TRuleBeamInitializer_Default), RuleBeamInitializer_Default_default_constructor, cc_RuleBeamInitializer_Default, ccn_RuleBeamInitializer_Default, NULL, true, NULL, NULL);



/* -------------- RuleBeamRefiner --------------*/

PyMethodDef RuleBeamRefiner_methods[] = {
     {"__reduce__", (binaryfunc)RuleBeamRefiner__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleBeamRefiner_doc[] = "(rule, table, weightID, targetClass) -/-> (rules)";


PyTypeObject PyOrRuleBeamRefiner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamRefiner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleBeamRefiner_call,                 /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleBeamRefiner_methods,                           /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleBeamRefiner_new,                      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamRefiner(PyObject *obj, void *ptr) { if (!PyOrRuleBeamRefiner_Check(obj)) return 0;      *(GCPtr<TRuleBeamRefiner> *)(ptr) = PyOrange_AsRuleBeamRefiner(obj); return 1; }
int ccn_func_RuleBeamRefiner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamRefiner> *)(ptr) = GCPtr<TRuleBeamRefiner>(); return 1; }      if (!PyOrRuleBeamRefiner_Check(obj)) return 0;      *(GCPtr<TRuleBeamRefiner> *)(ptr) = PyOrange_AsRuleBeamRefiner(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamRefiner_Type (PyOrRuleBeamRefiner_Type_inh, typeid(TRuleBeamRefiner), 0, cc_RuleBeamRefiner, ccn_RuleBeamRefiner, NULL, false, NULL, NULL);



/* -------------- RuleBeamRefiner_Selector --------------*/


POrange RuleBeamRefiner_Selector_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleBeamRefiner_Selector(), type); }


PyTypeObject PyOrRuleBeamRefiner_Selector_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.BeamRefiner_Selector",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([discretization=])",                             /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleBeamRefiner_Type,          /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleBeamRefiner_Selector(PyObject *obj, void *ptr) { if (!PyOrRuleBeamRefiner_Selector_Check(obj)) return 0;      *(GCPtr<TRuleBeamRefiner_Selector> *)(ptr) = PyOrange_AsRuleBeamRefiner_Selector(obj); return 1; }
int ccn_func_RuleBeamRefiner_Selector(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleBeamRefiner_Selector> *)(ptr) = GCPtr<TRuleBeamRefiner_Selector>(); return 1; }      if (!PyOrRuleBeamRefiner_Selector_Check(obj)) return 0;      *(GCPtr<TRuleBeamRefiner_Selector> *)(ptr) = PyOrange_AsRuleBeamRefiner_Selector(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleBeamRefiner_Selector_Type (PyOrRuleBeamRefiner_Selector_Type_inh, typeid(TRuleBeamRefiner_Selector), RuleBeamRefiner_Selector_default_constructor, cc_RuleBeamRefiner_Selector, ccn_RuleBeamRefiner_Selector, NULL, true, NULL, NULL);



/* -------------- RuleClassifier --------------*/


PyObject *RuleClassifier_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrRuleClassifier_Type, type, args, kwds); }


PyTypeObject PyOrRuleClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.RuleClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleClassifier_abstract_constructor,      /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleClassifier(PyObject *obj, void *ptr) { if (!PyOrRuleClassifier_Check(obj)) return 0;      *(GCPtr<TRuleClassifier> *)(ptr) = PyOrange_AsRuleClassifier(obj); return 1; }
int ccn_func_RuleClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleClassifier> *)(ptr) = GCPtr<TRuleClassifier>(); return 1; }      if (!PyOrRuleClassifier_Check(obj)) return 0;      *(GCPtr<TRuleClassifier> *)(ptr) = PyOrange_AsRuleClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleClassifier_Type (PyOrRuleClassifier_Type_inh, typeid(TRuleClassifier), 0, cc_RuleClassifier, ccn_RuleClassifier, NULL, false, NULL, NULL);



/* -------------- RuleClassifierConstructor --------------*/

PyMethodDef RuleClassifierConstructor_methods[] = {
     {"__reduce__", (binaryfunc)RuleClassifierConstructor__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleClassifierConstructor_doc[] = "(rules, examples[, weight]) -> (RuleClassifier)";


PyTypeObject PyOrRuleClassifierConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.ClassifierConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleClassifierConstructor_call,       /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleClassifierConstructor_methods,                 /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleClassifierConstructor_new,            /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleClassifierConstructor(PyObject *obj, void *ptr) { if (!PyOrRuleClassifierConstructor_Check(obj)) return 0;      *(GCPtr<TRuleClassifierConstructor> *)(ptr) = PyOrange_AsRuleClassifierConstructor(obj); return 1; }
int ccn_func_RuleClassifierConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleClassifierConstructor> *)(ptr) = GCPtr<TRuleClassifierConstructor>(); return 1; }      if (!PyOrRuleClassifierConstructor_Check(obj)) return 0;      *(GCPtr<TRuleClassifierConstructor> *)(ptr) = PyOrange_AsRuleClassifierConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleClassifierConstructor_Type (PyOrRuleClassifierConstructor_Type_inh, typeid(TRuleClassifierConstructor), 0, cc_RuleClassifierConstructor, ccn_RuleClassifierConstructor, NULL, false, NULL, NULL);



/* -------------- RuleClassifier_firstRule --------------*/


POrange RuleClassifier_firstRule_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleClassifier_firstRule(), type); }


PyTypeObject PyOrRuleClassifier_firstRule_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.RuleClassifier_firstRule",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([rules,examples[,weightID]])",                   /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleClassifier_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleClassifier_firstRule(PyObject *obj, void *ptr) { if (!PyOrRuleClassifier_firstRule_Check(obj)) return 0;      *(GCPtr<TRuleClassifier_firstRule> *)(ptr) = PyOrange_AsRuleClassifier_firstRule(obj); return 1; }
int ccn_func_RuleClassifier_firstRule(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleClassifier_firstRule> *)(ptr) = GCPtr<TRuleClassifier_firstRule>(); return 1; }      if (!PyOrRuleClassifier_firstRule_Check(obj)) return 0;      *(GCPtr<TRuleClassifier_firstRule> *)(ptr) = PyOrange_AsRuleClassifier_firstRule(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleClassifier_firstRule_Type (PyOrRuleClassifier_firstRule_Type_inh, typeid(TRuleClassifier_firstRule), RuleClassifier_firstRule_default_constructor, cc_RuleClassifier_firstRule, ccn_RuleClassifier_firstRule, NULL, true, NULL, NULL);



/* -------------- RuleClassifier_logit --------------*/


POrange RuleClassifier_logit_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleClassifier_logit(), type); }


PyTypeObject PyOrRuleClassifier_logit_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.RuleClassifier_logit",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([rules,minSig,minBeta,examples[,weightID]])",    /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleClassifier_Type,           /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleClassifier_logit_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleClassifier_logit(PyObject *obj, void *ptr) { if (!PyOrRuleClassifier_logit_Check(obj)) return 0;      *(GCPtr<TRuleClassifier_logit> *)(ptr) = PyOrange_AsRuleClassifier_logit(obj); return 1; }
int ccn_func_RuleClassifier_logit(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleClassifier_logit> *)(ptr) = GCPtr<TRuleClassifier_logit>(); return 1; }      if (!PyOrRuleClassifier_logit_Check(obj)) return 0;      *(GCPtr<TRuleClassifier_logit> *)(ptr) = PyOrange_AsRuleClassifier_logit(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleClassifier_logit_Type (PyOrRuleClassifier_logit_Type_inh, typeid(TRuleClassifier_logit), RuleClassifier_logit_default_constructor, cc_RuleClassifier_logit, ccn_RuleClassifier_logit, NULL, true, NULL, NULL);



/* -------------- RuleCovererAndRemover --------------*/

PyMethodDef RuleCovererAndRemover_methods[] = {
     {"__reduce__", (binaryfunc)RuleCovererAndRemover__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleCovererAndRemover_doc[] = "(rule, table, weightID, targetClass) -/-> (table,newWeight)";


PyTypeObject PyOrRuleCovererAndRemover_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.CovererAndRemover",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleCovererAndRemover_call,           /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleCovererAndRemover_methods,                     /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleCovererAndRemover_new,                /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleCovererAndRemover(PyObject *obj, void *ptr) { if (!PyOrRuleCovererAndRemover_Check(obj)) return 0;      *(GCPtr<TRuleCovererAndRemover> *)(ptr) = PyOrange_AsRuleCovererAndRemover(obj); return 1; }
int ccn_func_RuleCovererAndRemover(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleCovererAndRemover> *)(ptr) = GCPtr<TRuleCovererAndRemover>(); return 1; }      if (!PyOrRuleCovererAndRemover_Check(obj)) return 0;      *(GCPtr<TRuleCovererAndRemover> *)(ptr) = PyOrange_AsRuleCovererAndRemover(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleCovererAndRemover_Type (PyOrRuleCovererAndRemover_Type_inh, typeid(TRuleCovererAndRemover), 0, cc_RuleCovererAndRemover, ccn_RuleCovererAndRemover, NULL, false, NULL, NULL);



/* -------------- RuleCovererAndRemover_Default --------------*/


POrange RuleCovererAndRemover_Default_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleCovererAndRemover_Default(), type); }


PyTypeObject PyOrRuleCovererAndRemover_Default_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.CovererAndRemover_Default",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleCovererAndRemover_Type,    /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleCovererAndRemover_Default(PyObject *obj, void *ptr) { if (!PyOrRuleCovererAndRemover_Default_Check(obj)) return 0;      *(GCPtr<TRuleCovererAndRemover_Default> *)(ptr) = PyOrange_AsRuleCovererAndRemover_Default(obj); return 1; }
int ccn_func_RuleCovererAndRemover_Default(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleCovererAndRemover_Default> *)(ptr) = GCPtr<TRuleCovererAndRemover_Default>(); return 1; }      if (!PyOrRuleCovererAndRemover_Default_Check(obj)) return 0;      *(GCPtr<TRuleCovererAndRemover_Default> *)(ptr) = PyOrange_AsRuleCovererAndRemover_Default(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleCovererAndRemover_Default_Type (PyOrRuleCovererAndRemover_Default_Type_inh, typeid(TRuleCovererAndRemover_Default), RuleCovererAndRemover_Default_default_constructor, cc_RuleCovererAndRemover_Default, ccn_RuleCovererAndRemover_Default, NULL, true, NULL, NULL);



/* -------------- RuleDataStoppingCriteria --------------*/

PyMethodDef RuleDataStoppingCriteria_methods[] = {
     {"__reduce__", (binaryfunc)RuleDataStoppingCriteria__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleDataStoppingCriteria_doc[] = "(table, weightID, targetClass) -/-> (table)";


PyTypeObject PyOrRuleDataStoppingCriteria_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.DataStoppingCriteria",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleDataStoppingCriteria_call,        /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleDataStoppingCriteria_methods,                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleDataStoppingCriteria_new,             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleDataStoppingCriteria(PyObject *obj, void *ptr) { if (!PyOrRuleDataStoppingCriteria_Check(obj)) return 0;      *(GCPtr<TRuleDataStoppingCriteria> *)(ptr) = PyOrange_AsRuleDataStoppingCriteria(obj); return 1; }
int ccn_func_RuleDataStoppingCriteria(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleDataStoppingCriteria> *)(ptr) = GCPtr<TRuleDataStoppingCriteria>(); return 1; }      if (!PyOrRuleDataStoppingCriteria_Check(obj)) return 0;      *(GCPtr<TRuleDataStoppingCriteria> *)(ptr) = PyOrange_AsRuleDataStoppingCriteria(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleDataStoppingCriteria_Type (PyOrRuleDataStoppingCriteria_Type_inh, typeid(TRuleDataStoppingCriteria), 0, cc_RuleDataStoppingCriteria, ccn_RuleDataStoppingCriteria, NULL, false, NULL, NULL);



/* -------------- RuleDataStoppingCriteria_NoPositives --------------*/


POrange RuleDataStoppingCriteria_NoPositives_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleDataStoppingCriteria_NoPositives(), type); }


PyTypeObject PyOrRuleDataStoppingCriteria_NoPositives_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.DataStoppingCriteria_NoPositives",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleDataStoppingCriteria_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleDataStoppingCriteria_NoPositives(PyObject *obj, void *ptr) { if (!PyOrRuleDataStoppingCriteria_NoPositives_Check(obj)) return 0;      *(GCPtr<TRuleDataStoppingCriteria_NoPositives> *)(ptr) = PyOrange_AsRuleDataStoppingCriteria_NoPositives(obj); return 1; }
int ccn_func_RuleDataStoppingCriteria_NoPositives(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleDataStoppingCriteria_NoPositives> *)(ptr) = GCPtr<TRuleDataStoppingCriteria_NoPositives>(); return 1; }      if (!PyOrRuleDataStoppingCriteria_NoPositives_Check(obj)) return 0;      *(GCPtr<TRuleDataStoppingCriteria_NoPositives> *)(ptr) = PyOrange_AsRuleDataStoppingCriteria_NoPositives(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleDataStoppingCriteria_NoPositives_Type (PyOrRuleDataStoppingCriteria_NoPositives_Type_inh, typeid(TRuleDataStoppingCriteria_NoPositives), RuleDataStoppingCriteria_NoPositives_default_constructor, cc_RuleDataStoppingCriteria_NoPositives, ccn_RuleDataStoppingCriteria_NoPositives, NULL, true, NULL, NULL);



/* -------------- RuleEvaluator --------------*/

PyMethodDef RuleEvaluator_methods[] = {
     {"__reduce__", (binaryfunc)RuleEvaluator__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleEvaluator_doc[] = "(rule, table, weightID, targetClass, apriori) -/-> (quality)";


PyTypeObject PyOrRuleEvaluator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Evaluator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleEvaluator_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleEvaluator_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleEvaluator_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleEvaluator(PyObject *obj, void *ptr) { if (!PyOrRuleEvaluator_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator> *)(ptr) = PyOrange_AsRuleEvaluator(obj); return 1; }
int ccn_func_RuleEvaluator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleEvaluator> *)(ptr) = GCPtr<TRuleEvaluator>(); return 1; }      if (!PyOrRuleEvaluator_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator> *)(ptr) = PyOrange_AsRuleEvaluator(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleEvaluator_Type (PyOrRuleEvaluator_Type_inh, typeid(TRuleEvaluator), 0, cc_RuleEvaluator, ccn_RuleEvaluator, NULL, false, NULL, NULL);



/* -------------- RuleEvaluator_Entropy --------------*/


POrange RuleEvaluator_Entropy_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleEvaluator_Entropy(), type); }


PyTypeObject PyOrRuleEvaluator_Entropy_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Evaluator_Entropy",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleEvaluator_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleEvaluator_Entropy(PyObject *obj, void *ptr) { if (!PyOrRuleEvaluator_Entropy_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_Entropy> *)(ptr) = PyOrange_AsRuleEvaluator_Entropy(obj); return 1; }
int ccn_func_RuleEvaluator_Entropy(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleEvaluator_Entropy> *)(ptr) = GCPtr<TRuleEvaluator_Entropy>(); return 1; }      if (!PyOrRuleEvaluator_Entropy_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_Entropy> *)(ptr) = PyOrange_AsRuleEvaluator_Entropy(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleEvaluator_Entropy_Type (PyOrRuleEvaluator_Entropy_Type_inh, typeid(TRuleEvaluator_Entropy), RuleEvaluator_Entropy_default_constructor, cc_RuleEvaluator_Entropy, ccn_RuleEvaluator_Entropy, NULL, true, NULL, NULL);



/* -------------- RuleEvaluator_LRS --------------*/


POrange RuleEvaluator_LRS_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleEvaluator_LRS(), type); }


PyTypeObject PyOrRuleEvaluator_LRS_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Evaluator_LRS",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleEvaluator_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleEvaluator_LRS(PyObject *obj, void *ptr) { if (!PyOrRuleEvaluator_LRS_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_LRS> *)(ptr) = PyOrange_AsRuleEvaluator_LRS(obj); return 1; }
int ccn_func_RuleEvaluator_LRS(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleEvaluator_LRS> *)(ptr) = GCPtr<TRuleEvaluator_LRS>(); return 1; }      if (!PyOrRuleEvaluator_LRS_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_LRS> *)(ptr) = PyOrange_AsRuleEvaluator_LRS(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleEvaluator_LRS_Type (PyOrRuleEvaluator_LRS_Type_inh, typeid(TRuleEvaluator_LRS), RuleEvaluator_LRS_default_constructor, cc_RuleEvaluator_LRS, ccn_RuleEvaluator_LRS, NULL, true, NULL, NULL);



/* -------------- RuleEvaluator_Laplace --------------*/


POrange RuleEvaluator_Laplace_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleEvaluator_Laplace(), type); }


PyTypeObject PyOrRuleEvaluator_Laplace_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Evaluator_Laplace",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleEvaluator_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleEvaluator_Laplace(PyObject *obj, void *ptr) { if (!PyOrRuleEvaluator_Laplace_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_Laplace> *)(ptr) = PyOrange_AsRuleEvaluator_Laplace(obj); return 1; }
int ccn_func_RuleEvaluator_Laplace(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleEvaluator_Laplace> *)(ptr) = GCPtr<TRuleEvaluator_Laplace>(); return 1; }      if (!PyOrRuleEvaluator_Laplace_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_Laplace> *)(ptr) = PyOrange_AsRuleEvaluator_Laplace(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleEvaluator_Laplace_Type (PyOrRuleEvaluator_Laplace_Type_inh, typeid(TRuleEvaluator_Laplace), RuleEvaluator_Laplace_default_constructor, cc_RuleEvaluator_Laplace, ccn_RuleEvaluator_Laplace, NULL, true, NULL, NULL);



/* -------------- RuleEvaluator_mEVC --------------*/


POrange RuleEvaluator_mEVC_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleEvaluator_mEVC(), type); }


PyTypeObject PyOrRuleEvaluator_mEVC_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Evaluator_mEVC",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(ruleAlpha=1.0,attributeAlpha=1.0)",              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleEvaluator_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleEvaluator_mEVC(PyObject *obj, void *ptr) { if (!PyOrRuleEvaluator_mEVC_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_mEVC> *)(ptr) = PyOrange_AsRuleEvaluator_mEVC(obj); return 1; }
int ccn_func_RuleEvaluator_mEVC(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleEvaluator_mEVC> *)(ptr) = GCPtr<TRuleEvaluator_mEVC>(); return 1; }      if (!PyOrRuleEvaluator_mEVC_Check(obj)) return 0;      *(GCPtr<TRuleEvaluator_mEVC> *)(ptr) = PyOrange_AsRuleEvaluator_mEVC(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleEvaluator_mEVC_Type (PyOrRuleEvaluator_mEVC_Type_inh, typeid(TRuleEvaluator_mEVC), RuleEvaluator_mEVC_default_constructor, cc_RuleEvaluator_mEVC, ccn_RuleEvaluator_mEVC, NULL, true, NULL, NULL);



/* -------------- RuleFinder --------------*/

PyMethodDef RuleFinder_methods[] = {
     {"__reduce__", (binaryfunc)RuleFinder__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleFinder_doc[] = "(table, weightID, targetClass, baseRules) -/-> (rule)";


PyTypeObject PyOrRuleFinder_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Finder",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleFinder_call,                      /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleFinder_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleFinder_new,                           /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleFinder(PyObject *obj, void *ptr) { if (!PyOrRuleFinder_Check(obj)) return 0;      *(GCPtr<TRuleFinder> *)(ptr) = PyOrange_AsRuleFinder(obj); return 1; }
int ccn_func_RuleFinder(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleFinder> *)(ptr) = GCPtr<TRuleFinder>(); return 1; }      if (!PyOrRuleFinder_Check(obj)) return 0;      *(GCPtr<TRuleFinder> *)(ptr) = PyOrange_AsRuleFinder(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleFinder_Type (PyOrRuleFinder_Type_inh, typeid(TRuleFinder), 0, cc_RuleFinder, ccn_RuleFinder, NULL, false, NULL, NULL);



/* -------------- RuleLearner --------------*/


POrange RuleLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleLearner(), type); }


PyTypeObject PyOrRuleLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.RuleLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples[, weightID]]) -/-> Classifier",        /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleLearner(PyObject *obj, void *ptr) { if (!PyOrRuleLearner_Check(obj)) return 0;      *(GCPtr<TRuleLearner> *)(ptr) = PyOrange_AsRuleLearner(obj); return 1; }
int ccn_func_RuleLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleLearner> *)(ptr) = GCPtr<TRuleLearner>(); return 1; }      if (!PyOrRuleLearner_Check(obj)) return 0;      *(GCPtr<TRuleLearner> *)(ptr) = PyOrange_AsRuleLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleLearner_Type (PyOrRuleLearner_Type_inh, typeid(TRuleLearner), RuleLearner_default_constructor, cc_RuleLearner, ccn_RuleLearner, NULL, true, NULL, NULL);



/* -------------- RuleList --------------*/

PyMethodDef RuleList_methods[] = {
     {"__reduce__", (binaryfunc)RuleList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)RuleList_append, METH_O, "(Rule) -> None"},
     {"count", (binaryfunc)RuleList_count, METH_O, "(Rule) -> int"},
     {"extend", (binaryfunc)RuleList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)RuleList_filter, METH_VARARGS, "([filter-function]) -> RuleList"},
     {"index", (binaryfunc)RuleList_index, METH_O, "(Rule) -> int"},
     {"insert", (binaryfunc)RuleList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)RuleList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)RuleList_pop, METH_VARARGS, "() -> Rule"},
     {"remove", (binaryfunc)RuleList_remove, METH_O, "(Rule) -> None"},
     {"reverse", (binaryfunc)RuleList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)RuleList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods RuleList_as_sequence = {
  (inquiry)RuleList_len_sq,                          /* sq_length */
  (binaryfunc)RuleList_concat,                       /* sq_concat */
  (intargfunc)RuleList_repeat,                       /* sq_repeat */
  (intargfunc)RuleList_getitem_sq,                   /* sq_item */
  (intintargfunc)RuleList_getslice,                  /* sq_slice */
  (intobjargproc)RuleList_setitem_sq,                /* sq_ass_item */
  (intintobjargproc)RuleList_setslice,               /* sq_ass_slice */
  (objobjproc)RuleList_contains,                     /* sq_contains */
};

PyTypeObject PyOrRuleList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.core.RuleList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)RuleList_repr,                           /* tp_repr */
  0,
  &RuleList_as_sequence,                             /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)RuleList_str,                            /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of Rule>)",                                /* tp_doc */
  0, 0,
  (richcmpfunc)RuleList_richcmp,                     /* tp_richcmp */
  0, 0, 0,
  RuleList_methods,                                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleList_new,                             /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleList(PyObject *obj, void *ptr) { if (!PyOrRuleList_Check(obj)) return 0;      *(GCPtr<TRuleList> *)(ptr) = PyOrange_AsRuleList(obj); return 1; }
int ccn_func_RuleList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleList> *)(ptr) = GCPtr<TRuleList>(); return 1; }      if (!PyOrRuleList_Check(obj)) return 0;      *(GCPtr<TRuleList> *)(ptr) = PyOrange_AsRuleList(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleList_Type (PyOrRuleList_Type_inh, typeid(TRuleList), 0, cc_RuleList, ccn_RuleList, NULL, true, NULL, NULL);



/* -------------- RuleStoppingCriteria --------------*/

PyMethodDef RuleStoppingCriteria_methods[] = {
     {"__reduce__", (binaryfunc)RuleStoppingCriteria__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleStoppingCriteria_doc[] = "(rulelist, rule, table, weightID) -/-> (table)";


PyTypeObject PyOrRuleStoppingCriteria_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.StoppingCriteria",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleStoppingCriteria_call,            /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleStoppingCriteria_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleStoppingCriteria_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleStoppingCriteria(PyObject *obj, void *ptr) { if (!PyOrRuleStoppingCriteria_Check(obj)) return 0;      *(GCPtr<TRuleStoppingCriteria> *)(ptr) = PyOrange_AsRuleStoppingCriteria(obj); return 1; }
int ccn_func_RuleStoppingCriteria(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleStoppingCriteria> *)(ptr) = GCPtr<TRuleStoppingCriteria>(); return 1; }      if (!PyOrRuleStoppingCriteria_Check(obj)) return 0;      *(GCPtr<TRuleStoppingCriteria> *)(ptr) = PyOrange_AsRuleStoppingCriteria(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleStoppingCriteria_Type (PyOrRuleStoppingCriteria_Type_inh, typeid(TRuleStoppingCriteria), 0, cc_RuleStoppingCriteria, ccn_RuleStoppingCriteria, NULL, false, NULL, NULL);



/* -------------- RuleStoppingCriteria_NegativeDistribution --------------*/


POrange RuleStoppingCriteria_NegativeDistribution_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleStoppingCriteria_NegativeDistribution(), type); }


PyTypeObject PyOrRuleStoppingCriteria_NegativeDistribution_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.StoppingCriteria_NegativeDistribution",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleStoppingCriteria_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleStoppingCriteria_NegativeDistribution(PyObject *obj, void *ptr) { if (!PyOrRuleStoppingCriteria_NegativeDistribution_Check(obj)) return 0;      *(GCPtr<TRuleStoppingCriteria_NegativeDistribution> *)(ptr) = PyOrange_AsRuleStoppingCriteria_NegativeDistribution(obj); return 1; }
int ccn_func_RuleStoppingCriteria_NegativeDistribution(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleStoppingCriteria_NegativeDistribution> *)(ptr) = GCPtr<TRuleStoppingCriteria_NegativeDistribution>(); return 1; }      if (!PyOrRuleStoppingCriteria_NegativeDistribution_Check(obj)) return 0;      *(GCPtr<TRuleStoppingCriteria_NegativeDistribution> *)(ptr) = PyOrange_AsRuleStoppingCriteria_NegativeDistribution(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleStoppingCriteria_NegativeDistribution_Type (PyOrRuleStoppingCriteria_NegativeDistribution_Type_inh, typeid(TRuleStoppingCriteria_NegativeDistribution), RuleStoppingCriteria_NegativeDistribution_default_constructor, cc_RuleStoppingCriteria_NegativeDistribution, ccn_RuleStoppingCriteria_NegativeDistribution, NULL, true, NULL, NULL);



/* -------------- RuleValidator --------------*/

PyMethodDef RuleValidator_methods[] = {
     {"__reduce__", (binaryfunc)RuleValidator__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char RuleValidator_doc[] = "(rule, table, weightID, targetClass, apriori) -/-> (quality)";


PyTypeObject PyOrRuleValidator_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Validator",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)RuleValidator_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  RuleValidator_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)RuleValidator_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleValidator(PyObject *obj, void *ptr) { if (!PyOrRuleValidator_Check(obj)) return 0;      *(GCPtr<TRuleValidator> *)(ptr) = PyOrange_AsRuleValidator(obj); return 1; }
int ccn_func_RuleValidator(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleValidator> *)(ptr) = GCPtr<TRuleValidator>(); return 1; }      if (!PyOrRuleValidator_Check(obj)) return 0;      *(GCPtr<TRuleValidator> *)(ptr) = PyOrange_AsRuleValidator(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleValidator_Type (PyOrRuleValidator_Type_inh, typeid(TRuleValidator), 0, cc_RuleValidator, ccn_RuleValidator, NULL, false, NULL, NULL);



/* -------------- RuleValidator_LRS --------------*/


POrange RuleValidator_LRS_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TRuleValidator_LRS(), type); }


PyTypeObject PyOrRuleValidator_LRS_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.rules.Validator_LRS",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([alpha=0.05,min_coverage=0,max_rule_complexity=0,min_quality=numeric_limits<float>::min()])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrRuleValidator_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_RuleValidator_LRS(PyObject *obj, void *ptr) { if (!PyOrRuleValidator_LRS_Check(obj)) return 0;      *(GCPtr<TRuleValidator_LRS> *)(ptr) = PyOrange_AsRuleValidator_LRS(obj); return 1; }
int ccn_func_RuleValidator_LRS(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TRuleValidator_LRS> *)(ptr) = GCPtr<TRuleValidator_LRS>(); return 1; }      if (!PyOrRuleValidator_LRS_Check(obj)) return 0;      *(GCPtr<TRuleValidator_LRS> *)(ptr) = PyOrange_AsRuleValidator_LRS(obj); return 1; }


ORANGE_API TOrangeType PyOrRuleValidator_LRS_Type (PyOrRuleValidator_LRS_Type_inh, typeid(TRuleValidator_LRS), RuleValidator_LRS_default_constructor, cc_RuleValidator_LRS, ccn_RuleValidator_LRS, NULL, true, NULL, NULL);



/* -------------- SVMClassifier --------------*/

PyMethodDef SVMClassifier_methods[] = {
     {"__reduce__", (binaryfunc)SVMClassifier__reduce__, METH_NOARGS, "()"},
     {"get_decision_values", (binaryfunc)SVMClassifier_getDecisionValues, METH_VARARGS, "(Example) -> list of floats"},
     {"get_model", (binaryfunc)SVMClassifier_getModel, METH_VARARGS, "() -> string"},
     {NULL, NULL}
};


POrange SVMClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSVMClassifier(), type); }


PyTypeObject PyOrSVMClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.svm.SVMClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  " ",                                               /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SVMClassifier_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SVMClassifier_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SVMClassifier(PyObject *obj, void *ptr) { if (!PyOrSVMClassifier_Check(obj)) return 0;      *(GCPtr<TSVMClassifier> *)(ptr) = PyOrange_AsSVMClassifier(obj); return 1; }
int ccn_func_SVMClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSVMClassifier> *)(ptr) = GCPtr<TSVMClassifier>(); return 1; }      if (!PyOrSVMClassifier_Check(obj)) return 0;      *(GCPtr<TSVMClassifier> *)(ptr) = PyOrange_AsSVMClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrSVMClassifier_Type (PyOrSVMClassifier_Type_inh, typeid(TSVMClassifier), SVMClassifier_default_constructor, cc_SVMClassifier, ccn_SVMClassifier, NULL, true, NULL, NULL);



/* -------------- SVMClassifierSparse --------------*/

PyMethodDef SVMClassifierSparse_methods[] = {
     {"__reduce__", (binaryfunc)SVMClassifierSparse__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};


POrange SVMClassifierSparse_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSVMClassifierSparse(), type); }


PyTypeObject PyOrSVMClassifierSparse_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.svm.SVMClassifierSparse",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  " ",                                               /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SVMClassifierSparse_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrSVMClassifier_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)SVMClassifierSparse_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SVMClassifierSparse(PyObject *obj, void *ptr) { if (!PyOrSVMClassifierSparse_Check(obj)) return 0;      *(GCPtr<TSVMClassifierSparse> *)(ptr) = PyOrange_AsSVMClassifierSparse(obj); return 1; }
int ccn_func_SVMClassifierSparse(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSVMClassifierSparse> *)(ptr) = GCPtr<TSVMClassifierSparse>(); return 1; }      if (!PyOrSVMClassifierSparse_Check(obj)) return 0;      *(GCPtr<TSVMClassifierSparse> *)(ptr) = PyOrange_AsSVMClassifierSparse(obj); return 1; }


ORANGE_API TOrangeType PyOrSVMClassifierSparse_Type (PyOrSVMClassifierSparse_Type_inh, typeid(TSVMClassifierSparse), SVMClassifierSparse_default_constructor, cc_SVMClassifierSparse, ccn_SVMClassifierSparse, NULL, true, NULL, NULL);



/* -------------- SVMLearner --------------*/

PyMethodDef SVMLearner_methods[] = {
     {"set_weights", (binaryfunc)SVMLearner_setWeights, METH_VARARGS, "['list of tuple pairs'] -> None"},
     {NULL, NULL}
};



TNamedConstantsDef SVMLearner_Kernel_values[] = {{"Linear", LINEAR}, {"Polynomial", POLY}, {"RBF", RBF}, {"Sigmoid", SIGMOID}, {"Custom", PRECOMPUTED}, {0, 0}};
static PyObject *SVMLearner_Kernel_repr(PyObject *self) { return stringFromList(self, SVMLearner_Kernel_values); }
PyObject *SVMLearner_Kernel__reduce__(PyObject *self);
PyMethodDef SVMLearner_Kernel_methods[] = { {"__reduce__", (binaryfunc)SVMLearner_Kernel__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PySVMLearner_Kernel_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "SVMLearner.Kernel", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)SVMLearner_Kernel_repr, 0, 0, 0, 0, 0, (reprfunc)SVMLearner_Kernel_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, SVMLearner_Kernel_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PySVMLearner_Kernel_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PySVMLearner_Kernel_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTSVMLearner_Kernel(void *l) { return PySVMLearner_Kernel_FromLong(*(int *)l); }
PyObject *SVMLearner_Kernel__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "SVMLearner_Kernel", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef SVMLearner_LIBSVM_VERSION_values[] = {{"VERSION", LIBSVM_VERSION}, {0, 0}};
static PyObject *SVMLearner_LIBSVM_VERSION_repr(PyObject *self) { return stringFromList(self, SVMLearner_LIBSVM_VERSION_values); }
PyObject *SVMLearner_LIBSVM_VERSION__reduce__(PyObject *self);
PyMethodDef SVMLearner_LIBSVM_VERSION_methods[] = { {"__reduce__", (binaryfunc)SVMLearner_LIBSVM_VERSION__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PySVMLearner_LIBSVM_VERSION_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "SVMLearner.LIBSVM_VERSION", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)SVMLearner_LIBSVM_VERSION_repr, 0, 0, 0, 0, 0, (reprfunc)SVMLearner_LIBSVM_VERSION_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, SVMLearner_LIBSVM_VERSION_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PySVMLearner_LIBSVM_VERSION_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PySVMLearner_LIBSVM_VERSION_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTSVMLearner_LIBSVM_VERSION(void *l) { return PySVMLearner_LIBSVM_VERSION_FromLong(*(int *)l); }
PyObject *SVMLearner_LIBSVM_VERSION__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "SVMLearner_LIBSVM_VERSION", ((PyIntObject *)(self))->ob_ival); }


TNamedConstantsDef SVMLearner_SVMType_values[] = {{"C_SVC", C_SVC}, {"Nu_SVC", NU_SVC}, {"OneClass", ONE_CLASS}, {"Epsilon_SVR", EPSILON_SVR}, {"Nu_SVR", NU_SVR}, {0, 0}};
static PyObject *SVMLearner_SVMType_repr(PyObject *self) { return stringFromList(self, SVMLearner_SVMType_values); }
PyObject *SVMLearner_SVMType__reduce__(PyObject *self);
PyMethodDef SVMLearner_SVMType_methods[] = { {"__reduce__", (binaryfunc)SVMLearner_SVMType__reduce__, METH_NOARGS, "reduce"}, {NULL, NULL}};
PyTypeObject PySVMLearner_SVMType_Type = {PyObject_HEAD_INIT(&PyType_Type) 0, "SVMLearner.SVMType", sizeof(PyIntObject), 0, 0, 0, 0, 0, 0, (reprfunc)SVMLearner_SVMType_repr, 0, 0, 0, 0, 0, (reprfunc)SVMLearner_SVMType_repr, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES, 0, 0, 0, 0, 0, 0, 0, SVMLearner_SVMType_methods, 0, 0, &PyInt_Type, 0, 0, 0, 0, 0, 0, 0, PyObject_Del};
PyObject *PySVMLearner_SVMType_FromLong(long ok) { PyIntObject *r = PyObject_New(PyIntObject, &PySVMLearner_SVMType_Type); r->ob_ival = ok; return (PyObject *)r; }
void *PTSVMLearner_SVMType(void *l) { return PySVMLearner_SVMType_FromLong(*(int *)l); }
PyObject *SVMLearner_SVMType__reduce__(PyObject *self) { return Py_BuildValue("O(s(i))", getExportedFunction("__pickleLoaderNamedConstants"), "SVMLearner_SVMType", ((PyIntObject *)(self))->ob_ival); }

void SVMLearner_addConstants()
{ PyObject *&dict = PyOrSVMLearner_Type.ot_inherited.tp_dict;
  if (!dict) dict = PyDict_New();
  PyDict_SetItemString(dict, "Linear", PySVMLearner_Kernel_FromLong((long)(LINEAR)));
  PyDict_SetItemString(dict, "Sigmoid", PySVMLearner_Kernel_FromLong((long)(SIGMOID)));
  PyDict_SetItemString(dict, "C_SVC", PySVMLearner_SVMType_FromLong((long)(C_SVC)));
  PyDict_SetItemString(dict, "Custom", PySVMLearner_Kernel_FromLong((long)(PRECOMPUTED)));
  PyDict_SetItemString(dict, "VERSION", PySVMLearner_LIBSVM_VERSION_FromLong((long)(LIBSVM_VERSION)));
  PyDict_SetItemString(dict, "Nu_SVR", PySVMLearner_SVMType_FromLong((long)(NU_SVR)));
  PyDict_SetItemString(dict, "Polynomial", PySVMLearner_Kernel_FromLong((long)(POLY)));
  PyDict_SetItemString(dict, "RBF", PySVMLearner_Kernel_FromLong((long)(RBF)));
  PyDict_SetItemString(dict, "Epsilon_SVR", PySVMLearner_SVMType_FromLong((long)(EPSILON_SVR)));
  PyDict_SetItemString(dict, "OneClass", PySVMLearner_SVMType_FromLong((long)(ONE_CLASS)));
  PyDict_SetItemString(dict, "Nu_SVC", PySVMLearner_SVMType_FromLong((long)(NU_SVC)));
}

POrange SVMLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSVMLearner(), type); }


PyTypeObject PyOrSVMLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.svm._SVMLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] -/-> Classifier)",                    /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SVMLearner_methods,                                /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SVMLearner(PyObject *obj, void *ptr) { if (!PyOrSVMLearner_Check(obj)) return 0;      *(GCPtr<TSVMLearner> *)(ptr) = PyOrange_AsSVMLearner(obj); return 1; }
int ccn_func_SVMLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSVMLearner> *)(ptr) = GCPtr<TSVMLearner>(); return 1; }      if (!PyOrSVMLearner_Check(obj)) return 0;      *(GCPtr<TSVMLearner> *)(ptr) = PyOrange_AsSVMLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrSVMLearner_Type (PyOrSVMLearner_Type_inh, typeid(TSVMLearner), SVMLearner_default_constructor, cc_SVMLearner, ccn_SVMLearner, NULL, true, NULL, NULL);



/* -------------- SVMLearnerSparse --------------*/


POrange SVMLearnerSparse_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSVMLearnerSparse(), type); }


PyTypeObject PyOrSVMLearnerSparse_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.svm._SVMLearnerSparse",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] -/-> Classifier)",                    /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrSVMLearner_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SVMLearnerSparse(PyObject *obj, void *ptr) { if (!PyOrSVMLearnerSparse_Check(obj)) return 0;      *(GCPtr<TSVMLearnerSparse> *)(ptr) = PyOrange_AsSVMLearnerSparse(obj); return 1; }
int ccn_func_SVMLearnerSparse(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSVMLearnerSparse> *)(ptr) = GCPtr<TSVMLearnerSparse>(); return 1; }      if (!PyOrSVMLearnerSparse_Check(obj)) return 0;      *(GCPtr<TSVMLearnerSparse> *)(ptr) = PyOrange_AsSVMLearnerSparse(obj); return 1; }


ORANGE_API TOrangeType PyOrSVMLearnerSparse_Type (PyOrSVMLearnerSparse_Type_inh, typeid(TSVMLearnerSparse), SVMLearnerSparse_default_constructor, cc_SVMLearnerSparse, ccn_SVMLearnerSparse, NULL, true, NULL, NULL);



/* -------------- SimpleTreeClassifier --------------*/

PyMethodDef SimpleTreeClassifier_methods[] = {
     {"__reduce__", (binaryfunc)SimpleTreeClassifier__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};


POrange SimpleTreeClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSimpleTreeClassifier(), type); }


PyTypeObject PyOrSimpleTreeClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SimpleTreeClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  SimpleTreeClassifier_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifier_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SimpleTreeClassifier(PyObject *obj, void *ptr) { if (!PyOrSimpleTreeClassifier_Check(obj)) return 0;      *(GCPtr<TSimpleTreeClassifier> *)(ptr) = PyOrange_AsSimpleTreeClassifier(obj); return 1; }
int ccn_func_SimpleTreeClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSimpleTreeClassifier> *)(ptr) = GCPtr<TSimpleTreeClassifier>(); return 1; }      if (!PyOrSimpleTreeClassifier_Check(obj)) return 0;      *(GCPtr<TSimpleTreeClassifier> *)(ptr) = PyOrange_AsSimpleTreeClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrSimpleTreeClassifier_Type (PyOrSimpleTreeClassifier_Type_inh, typeid(TSimpleTreeClassifier), SimpleTreeClassifier_default_constructor, cc_SimpleTreeClassifier, ccn_SimpleTreeClassifier, NULL, true, NULL, NULL);



/* -------------- SimpleTreeLearner --------------*/


POrange SimpleTreeLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TSimpleTreeLearner(), type); }


PyTypeObject PyOrSimpleTreeLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SimpleTreeLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples], [maxMajority=, minExamples=, maxDepth=])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_SimpleTreeLearner(PyObject *obj, void *ptr) { if (!PyOrSimpleTreeLearner_Check(obj)) return 0;      *(GCPtr<TSimpleTreeLearner> *)(ptr) = PyOrange_AsSimpleTreeLearner(obj); return 1; }
int ccn_func_SimpleTreeLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TSimpleTreeLearner> *)(ptr) = GCPtr<TSimpleTreeLearner>(); return 1; }      if (!PyOrSimpleTreeLearner_Check(obj)) return 0;      *(GCPtr<TSimpleTreeLearner> *)(ptr) = PyOrange_AsSimpleTreeLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrSimpleTreeLearner_Type (PyOrSimpleTreeLearner_Type_inh, typeid(TSimpleTreeLearner), SimpleTreeLearner_default_constructor, cc_SimpleTreeLearner, ccn_SimpleTreeLearner, NULL, true, NULL, NULL);



/* -------------- TreeClassifier --------------*/

PyMethodDef TreeClassifier_methods[] = {
     {"treesize", (binaryfunc)TreeClassifier_treesize, METH_NOARGS, "() -> size"},
     {NULL, NULL}
};


POrange TreeClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeClassifier(), type); }


TAttributeAlias TreeClassifier_aliases[] = {
    {"treesize", "tree_size"},
    {NULL, NULL}};

PyTypeObject PyOrTreeClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree._TreeClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([domain=, tree=, descender=])",                  /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeClassifier_methods,                            /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeClassifier(PyObject *obj, void *ptr) { if (!PyOrTreeClassifier_Check(obj)) return 0;      *(GCPtr<TTreeClassifier> *)(ptr) = PyOrange_AsTreeClassifier(obj); return 1; }
int ccn_func_TreeClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeClassifier> *)(ptr) = GCPtr<TTreeClassifier>(); return 1; }      if (!PyOrTreeClassifier_Check(obj)) return 0;      *(GCPtr<TTreeClassifier> *)(ptr) = PyOrange_AsTreeClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeClassifier_Type (PyOrTreeClassifier_Type_inh, typeid(TTreeClassifier), TreeClassifier_default_constructor, cc_TreeClassifier, ccn_TreeClassifier, NULL, true, NULL, TreeClassifier_aliases);



/* -------------- TreeDescender --------------*/

PyMethodDef TreeDescender_methods[] = {
     {"__reduce__", (binaryfunc)TreeDescender__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char TreeDescender_doc[] = "(node, example) -/-> (node, {distribution | None})";


PyTypeObject PyOrTreeDescender_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Descender",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TreeDescender_call,                   /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeDescender_methods,                             /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeDescender_new,                        /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeDescender(PyObject *obj, void *ptr) { if (!PyOrTreeDescender_Check(obj)) return 0;      *(GCPtr<TTreeDescender> *)(ptr) = PyOrange_AsTreeDescender(obj); return 1; }
int ccn_func_TreeDescender(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeDescender> *)(ptr) = GCPtr<TTreeDescender>(); return 1; }      if (!PyOrTreeDescender_Check(obj)) return 0;      *(GCPtr<TTreeDescender> *)(ptr) = PyOrange_AsTreeDescender(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeDescender_Type (PyOrTreeDescender_Type_inh, typeid(TTreeDescender), 0, cc_TreeDescender, ccn_TreeDescender, NULL, false, NULL, NULL);



/* -------------- TreeDescender_UnknownMergeAsBranchSizes --------------*/


POrange TreeDescender_UnknownMergeAsBranchSizes_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeDescender_UnknownMergeAsBranchSizes(), type); }


PyTypeObject PyOrTreeDescender_UnknownMergeAsBranchSizes_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Descender_UnknownMergeAsBranchSizes",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(node, example) -/-> (node, {distribution | None})", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeDescender_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeDescender_UnknownMergeAsBranchSizes(PyObject *obj, void *ptr) { if (!PyOrTreeDescender_UnknownMergeAsBranchSizes_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownMergeAsBranchSizes> *)(ptr) = PyOrange_AsTreeDescender_UnknownMergeAsBranchSizes(obj); return 1; }
int ccn_func_TreeDescender_UnknownMergeAsBranchSizes(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeDescender_UnknownMergeAsBranchSizes> *)(ptr) = GCPtr<TTreeDescender_UnknownMergeAsBranchSizes>(); return 1; }      if (!PyOrTreeDescender_UnknownMergeAsBranchSizes_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownMergeAsBranchSizes> *)(ptr) = PyOrange_AsTreeDescender_UnknownMergeAsBranchSizes(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeDescender_UnknownMergeAsBranchSizes_Type (PyOrTreeDescender_UnknownMergeAsBranchSizes_Type_inh, typeid(TTreeDescender_UnknownMergeAsBranchSizes), TreeDescender_UnknownMergeAsBranchSizes_default_constructor, cc_TreeDescender_UnknownMergeAsBranchSizes, ccn_TreeDescender_UnknownMergeAsBranchSizes, NULL, true, NULL, NULL);



/* -------------- TreeDescender_UnknownMergeAsSelector --------------*/


POrange TreeDescender_UnknownMergeAsSelector_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeDescender_UnknownMergeAsSelector(), type); }


PyTypeObject PyOrTreeDescender_UnknownMergeAsSelector_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Descender_UnknownMergeAsSelector",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(node, example) -/-> (node, {distribution | None})", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeDescender_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeDescender_UnknownMergeAsSelector(PyObject *obj, void *ptr) { if (!PyOrTreeDescender_UnknownMergeAsSelector_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownMergeAsSelector> *)(ptr) = PyOrange_AsTreeDescender_UnknownMergeAsSelector(obj); return 1; }
int ccn_func_TreeDescender_UnknownMergeAsSelector(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeDescender_UnknownMergeAsSelector> *)(ptr) = GCPtr<TTreeDescender_UnknownMergeAsSelector>(); return 1; }      if (!PyOrTreeDescender_UnknownMergeAsSelector_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownMergeAsSelector> *)(ptr) = PyOrange_AsTreeDescender_UnknownMergeAsSelector(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeDescender_UnknownMergeAsSelector_Type (PyOrTreeDescender_UnknownMergeAsSelector_Type_inh, typeid(TTreeDescender_UnknownMergeAsSelector), TreeDescender_UnknownMergeAsSelector_default_constructor, cc_TreeDescender_UnknownMergeAsSelector, ccn_TreeDescender_UnknownMergeAsSelector, NULL, true, NULL, NULL);



/* -------------- TreeDescender_UnknownToBranch --------------*/


POrange TreeDescender_UnknownToBranch_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeDescender_UnknownToBranch(), type); }


PyTypeObject PyOrTreeDescender_UnknownToBranch_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Descender_UnknownToBranch",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(node, example) -/-> (node, {distribution | None})", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeDescender_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeDescender_UnknownToBranch(PyObject *obj, void *ptr) { if (!PyOrTreeDescender_UnknownToBranch_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownToBranch> *)(ptr) = PyOrange_AsTreeDescender_UnknownToBranch(obj); return 1; }
int ccn_func_TreeDescender_UnknownToBranch(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeDescender_UnknownToBranch> *)(ptr) = GCPtr<TTreeDescender_UnknownToBranch>(); return 1; }      if (!PyOrTreeDescender_UnknownToBranch_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownToBranch> *)(ptr) = PyOrange_AsTreeDescender_UnknownToBranch(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeDescender_UnknownToBranch_Type (PyOrTreeDescender_UnknownToBranch_Type_inh, typeid(TTreeDescender_UnknownToBranch), TreeDescender_UnknownToBranch_default_constructor, cc_TreeDescender_UnknownToBranch, ccn_TreeDescender_UnknownToBranch, NULL, true, NULL, NULL);



/* -------------- TreeDescender_UnknownToCommonBranch --------------*/


POrange TreeDescender_UnknownToCommonBranch_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeDescender_UnknownToCommonBranch(), type); }


PyTypeObject PyOrTreeDescender_UnknownToCommonBranch_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Descender_UnknownToCommonBranch",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(node, example) -/-> (node, {distribution | None})", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeDescender_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeDescender_UnknownToCommonBranch(PyObject *obj, void *ptr) { if (!PyOrTreeDescender_UnknownToCommonBranch_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownToCommonBranch> *)(ptr) = PyOrange_AsTreeDescender_UnknownToCommonBranch(obj); return 1; }
int ccn_func_TreeDescender_UnknownToCommonBranch(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeDescender_UnknownToCommonBranch> *)(ptr) = GCPtr<TTreeDescender_UnknownToCommonBranch>(); return 1; }      if (!PyOrTreeDescender_UnknownToCommonBranch_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownToCommonBranch> *)(ptr) = PyOrange_AsTreeDescender_UnknownToCommonBranch(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeDescender_UnknownToCommonBranch_Type (PyOrTreeDescender_UnknownToCommonBranch_Type_inh, typeid(TTreeDescender_UnknownToCommonBranch), TreeDescender_UnknownToCommonBranch_default_constructor, cc_TreeDescender_UnknownToCommonBranch, ccn_TreeDescender_UnknownToCommonBranch, NULL, true, NULL, NULL);



/* -------------- TreeDescender_UnknownToCommonSelector --------------*/


POrange TreeDescender_UnknownToCommonSelector_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeDescender_UnknownToCommonSelector(), type); }


PyTypeObject PyOrTreeDescender_UnknownToCommonSelector_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Descender_UnknownToCommonSelector",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(node, example) -/-> (node, {distribution | None})", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeDescender_Type,            /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeDescender_UnknownToCommonSelector(PyObject *obj, void *ptr) { if (!PyOrTreeDescender_UnknownToCommonSelector_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownToCommonSelector> *)(ptr) = PyOrange_AsTreeDescender_UnknownToCommonSelector(obj); return 1; }
int ccn_func_TreeDescender_UnknownToCommonSelector(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeDescender_UnknownToCommonSelector> *)(ptr) = GCPtr<TTreeDescender_UnknownToCommonSelector>(); return 1; }      if (!PyOrTreeDescender_UnknownToCommonSelector_Check(obj)) return 0;      *(GCPtr<TTreeDescender_UnknownToCommonSelector> *)(ptr) = PyOrange_AsTreeDescender_UnknownToCommonSelector(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeDescender_UnknownToCommonSelector_Type (PyOrTreeDescender_UnknownToCommonSelector_Type_inh, typeid(TTreeDescender_UnknownToCommonSelector), TreeDescender_UnknownToCommonSelector_default_constructor, cc_TreeDescender_UnknownToCommonSelector, ccn_TreeDescender_UnknownToCommonSelector, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter --------------*/

PyMethodDef TreeExampleSplitter_methods[] = {
     {"__reduce__", (binaryfunc)TreeExampleSplitter__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char TreeExampleSplitter_doc[] = "(node, examples[, weight]) -/-> (ExampleGeneratorList, list of weight ID's";


PyTypeObject PyOrTreeExampleSplitter_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TreeExampleSplitter_call,             /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeExampleSplitter_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeExampleSplitter_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter> *)(ptr) = PyOrange_AsTreeExampleSplitter(obj); return 1; }
int ccn_func_TreeExampleSplitter(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter> *)(ptr) = GCPtr<TTreeExampleSplitter>(); return 1; }      if (!PyOrTreeExampleSplitter_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter> *)(ptr) = PyOrange_AsTreeExampleSplitter(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_Type (PyOrTreeExampleSplitter_Type_inh, typeid(TTreeExampleSplitter), 0, cc_TreeExampleSplitter, ccn_TreeExampleSplitter, NULL, false, NULL, NULL);



/* -------------- TreeExampleSplitter_IgnoreUnknowns --------------*/


POrange TreeExampleSplitter_IgnoreUnknowns_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_IgnoreUnknowns(), type); }


PyTypeObject PyOrTreeExampleSplitter_IgnoreUnknowns_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_IgnoreUnknowns",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([node, examples[, weight]]) -/-> (ExampleGeneratorList, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_IgnoreUnknowns(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_IgnoreUnknowns_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_IgnoreUnknowns> *)(ptr) = PyOrange_AsTreeExampleSplitter_IgnoreUnknowns(obj); return 1; }
int ccn_func_TreeExampleSplitter_IgnoreUnknowns(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_IgnoreUnknowns> *)(ptr) = GCPtr<TTreeExampleSplitter_IgnoreUnknowns>(); return 1; }      if (!PyOrTreeExampleSplitter_IgnoreUnknowns_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_IgnoreUnknowns> *)(ptr) = PyOrange_AsTreeExampleSplitter_IgnoreUnknowns(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_IgnoreUnknowns_Type (PyOrTreeExampleSplitter_IgnoreUnknowns_Type_inh, typeid(TTreeExampleSplitter_IgnoreUnknowns), TreeExampleSplitter_IgnoreUnknowns_default_constructor, cc_TreeExampleSplitter_IgnoreUnknowns, ccn_TreeExampleSplitter_IgnoreUnknowns, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter_UnknownsAsBranchSizes --------------*/


POrange TreeExampleSplitter_UnknownsAsBranchSizes_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_UnknownsAsBranchSizes(), type); }


PyTypeObject PyOrTreeExampleSplitter_UnknownsAsBranchSizes_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_UnknownsAsBranchSizes",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([branchIndex, node, examples[, weight]]) -/-> (ExampleGenerator, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_UnknownsAsBranchSizes(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_UnknownsAsBranchSizes_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsAsBranchSizes> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsAsBranchSizes(obj); return 1; }
int ccn_func_TreeExampleSplitter_UnknownsAsBranchSizes(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_UnknownsAsBranchSizes> *)(ptr) = GCPtr<TTreeExampleSplitter_UnknownsAsBranchSizes>(); return 1; }      if (!PyOrTreeExampleSplitter_UnknownsAsBranchSizes_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsAsBranchSizes> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsAsBranchSizes(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_UnknownsAsBranchSizes_Type (PyOrTreeExampleSplitter_UnknownsAsBranchSizes_Type_inh, typeid(TTreeExampleSplitter_UnknownsAsBranchSizes), TreeExampleSplitter_UnknownsAsBranchSizes_default_constructor, cc_TreeExampleSplitter_UnknownsAsBranchSizes, ccn_TreeExampleSplitter_UnknownsAsBranchSizes, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter_UnknownsAsSelector --------------*/


POrange TreeExampleSplitter_UnknownsAsSelector_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_UnknownsAsSelector(), type); }


PyTypeObject PyOrTreeExampleSplitter_UnknownsAsSelector_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_UnknownsAsSelector",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([branchIndex, node, examples[, weight]]) -/-> (ExampleGenerator, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_UnknownsAsSelector(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_UnknownsAsSelector_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsAsSelector> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsAsSelector(obj); return 1; }
int ccn_func_TreeExampleSplitter_UnknownsAsSelector(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_UnknownsAsSelector> *)(ptr) = GCPtr<TTreeExampleSplitter_UnknownsAsSelector>(); return 1; }      if (!PyOrTreeExampleSplitter_UnknownsAsSelector_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsAsSelector> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsAsSelector(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_UnknownsAsSelector_Type (PyOrTreeExampleSplitter_UnknownsAsSelector_Type_inh, typeid(TTreeExampleSplitter_UnknownsAsSelector), TreeExampleSplitter_UnknownsAsSelector_default_constructor, cc_TreeExampleSplitter_UnknownsAsSelector, ccn_TreeExampleSplitter_UnknownsAsSelector, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter_UnknownsToAll --------------*/


POrange TreeExampleSplitter_UnknownsToAll_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_UnknownsToAll(), type); }


PyTypeObject PyOrTreeExampleSplitter_UnknownsToAll_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_UnknownsToAll",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([node, examples[, weight]]) -/-> (ExampleGeneratorList, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_UnknownsToAll(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_UnknownsToAll_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToAll> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToAll(obj); return 1; }
int ccn_func_TreeExampleSplitter_UnknownsToAll(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_UnknownsToAll> *)(ptr) = GCPtr<TTreeExampleSplitter_UnknownsToAll>(); return 1; }      if (!PyOrTreeExampleSplitter_UnknownsToAll_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToAll> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToAll(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_UnknownsToAll_Type (PyOrTreeExampleSplitter_UnknownsToAll_Type_inh, typeid(TTreeExampleSplitter_UnknownsToAll), TreeExampleSplitter_UnknownsToAll_default_constructor, cc_TreeExampleSplitter_UnknownsToAll, ccn_TreeExampleSplitter_UnknownsToAll, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter_UnknownsToBranch --------------*/


POrange TreeExampleSplitter_UnknownsToBranch_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_UnknownsToBranch(), type); }


PyTypeObject PyOrTreeExampleSplitter_UnknownsToBranch_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_UnknownsToBranch",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([node, examples[, weight]]) -/-> (ExampleGeneratorList, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_UnknownsToBranch(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_UnknownsToBranch_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToBranch> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToBranch(obj); return 1; }
int ccn_func_TreeExampleSplitter_UnknownsToBranch(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_UnknownsToBranch> *)(ptr) = GCPtr<TTreeExampleSplitter_UnknownsToBranch>(); return 1; }      if (!PyOrTreeExampleSplitter_UnknownsToBranch_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToBranch> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToBranch(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_UnknownsToBranch_Type (PyOrTreeExampleSplitter_UnknownsToBranch_Type_inh, typeid(TTreeExampleSplitter_UnknownsToBranch), TreeExampleSplitter_UnknownsToBranch_default_constructor, cc_TreeExampleSplitter_UnknownsToBranch, ccn_TreeExampleSplitter_UnknownsToBranch, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter_UnknownsToCommon --------------*/


POrange TreeExampleSplitter_UnknownsToCommon_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_UnknownsToCommon(), type); }


PyTypeObject PyOrTreeExampleSplitter_UnknownsToCommon_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_UnknownsToCommon",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([node, examples[, weight]]) -/-> (ExampleGeneratorList, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_UnknownsToCommon(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_UnknownsToCommon_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToCommon> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToCommon(obj); return 1; }
int ccn_func_TreeExampleSplitter_UnknownsToCommon(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_UnknownsToCommon> *)(ptr) = GCPtr<TTreeExampleSplitter_UnknownsToCommon>(); return 1; }      if (!PyOrTreeExampleSplitter_UnknownsToCommon_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToCommon> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToCommon(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_UnknownsToCommon_Type (PyOrTreeExampleSplitter_UnknownsToCommon_Type_inh, typeid(TTreeExampleSplitter_UnknownsToCommon), TreeExampleSplitter_UnknownsToCommon_default_constructor, cc_TreeExampleSplitter_UnknownsToCommon, ccn_TreeExampleSplitter_UnknownsToCommon, NULL, true, NULL, NULL);



/* -------------- TreeExampleSplitter_UnknownsToRandom --------------*/


POrange TreeExampleSplitter_UnknownsToRandom_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeExampleSplitter_UnknownsToRandom(), type); }


PyTypeObject PyOrTreeExampleSplitter_UnknownsToRandom_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Splitter_UnknownsToRandom",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([node, examples[, weight]]) -/-> (ExampleGeneratorList, [list of weight ID's])", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeExampleSplitter_Type,      /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeExampleSplitter_UnknownsToRandom(PyObject *obj, void *ptr) { if (!PyOrTreeExampleSplitter_UnknownsToRandom_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToRandom> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToRandom(obj); return 1; }
int ccn_func_TreeExampleSplitter_UnknownsToRandom(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeExampleSplitter_UnknownsToRandom> *)(ptr) = GCPtr<TTreeExampleSplitter_UnknownsToRandom>(); return 1; }      if (!PyOrTreeExampleSplitter_UnknownsToRandom_Check(obj)) return 0;      *(GCPtr<TTreeExampleSplitter_UnknownsToRandom> *)(ptr) = PyOrange_AsTreeExampleSplitter_UnknownsToRandom(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeExampleSplitter_UnknownsToRandom_Type (PyOrTreeExampleSplitter_UnknownsToRandom_Type_inh, typeid(TTreeExampleSplitter_UnknownsToRandom), TreeExampleSplitter_UnknownsToRandom_default_constructor, cc_TreeExampleSplitter_UnknownsToRandom, ccn_TreeExampleSplitter_UnknownsToRandom, NULL, true, NULL, NULL);



/* -------------- TreeLearner --------------*/


POrange TreeLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeLearner(), type); }


PyTypeObject PyOrTreeLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree._TreeLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, split=, stop=, nodeLearner=, lookDownOnUnknown=]) -/-> Classifier", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeLearner(PyObject *obj, void *ptr) { if (!PyOrTreeLearner_Check(obj)) return 0;      *(GCPtr<TTreeLearner> *)(ptr) = PyOrange_AsTreeLearner(obj); return 1; }
int ccn_func_TreeLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeLearner> *)(ptr) = GCPtr<TTreeLearner>(); return 1; }      if (!PyOrTreeLearner_Check(obj)) return 0;      *(GCPtr<TTreeLearner> *)(ptr) = PyOrange_AsTreeLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeLearner_Type (PyOrTreeLearner_Type_inh, typeid(TTreeLearner), TreeLearner_default_constructor, cc_TreeLearner, ccn_TreeLearner, NULL, true, NULL, NULL);



/* -------------- TreeNode --------------*/

PyMethodDef TreeNode_methods[] = {
     {"remove_stored_info", (binaryfunc)TreeNode_remove_stored_info, METH_NOARGS, "() -> None"},
     {"tree_size", (binaryfunc)TreeNode_tree_size, METH_NOARGS, "() -> int"},
     {NULL, NULL}
};


POrange TreeNode_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeNode(), type); }


TAttributeAlias TreeNode_aliases[] = {
    {"treesize", "tree_size"},
    {"removestoredinfo", "remove_stored_info"},
    {"instances", "examples"},
    {NULL, NULL}};

PyTypeObject PyOrTreeNode_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Node",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([lookDownOnUnknown=, branchSelector=, nodeClassifier=, branches=, contingency=])", /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeNode_methods,                                  /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeNode(PyObject *obj, void *ptr) { if (!PyOrTreeNode_Check(obj)) return 0;      *(GCPtr<TTreeNode> *)(ptr) = PyOrange_AsTreeNode(obj); return 1; }
int ccn_func_TreeNode(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeNode> *)(ptr) = GCPtr<TTreeNode>(); return 1; }      if (!PyOrTreeNode_Check(obj)) return 0;      *(GCPtr<TTreeNode> *)(ptr) = PyOrange_AsTreeNode(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeNode_Type (PyOrTreeNode_Type_inh, typeid(TTreeNode), TreeNode_default_constructor, cc_TreeNode, ccn_TreeNode, NULL, true, NULL, TreeNode_aliases);



/* -------------- TreeNodeList --------------*/

PyMethodDef TreeNodeList_methods[] = {
     {"__reduce__", (binaryfunc)TreeNodeList__reduce__, METH_NOARGS, "()"},
     {"append", (binaryfunc)TreeNodeList_append, METH_O, "(TreeNode) -> None"},
     {"count", (binaryfunc)TreeNodeList_count, METH_O, "(TreeNode) -> int"},
     {"extend", (binaryfunc)TreeNodeList_extend, METH_O, "(sequence) -> None"},
     {"filter", (binaryfunc)TreeNodeList_filter, METH_VARARGS, "([filter-function]) -> TreeNodeList"},
     {"index", (binaryfunc)TreeNodeList_index, METH_O, "(TreeNode) -> int"},
     {"insert", (binaryfunc)TreeNodeList_insert, METH_VARARGS, "(index, item) -> None"},
     {"native", (binaryfunc)TreeNodeList_native, METH_NOARGS, "() -> list"},
     {"pop", (binaryfunc)TreeNodeList_pop, METH_VARARGS, "() -> TreeNode"},
     {"remove", (binaryfunc)TreeNodeList_remove, METH_O, "(TreeNode) -> None"},
     {"reverse", (binaryfunc)TreeNodeList_reverse, METH_NOARGS, "() -> None"},
     {"sort", (binaryfunc)TreeNodeList_sort, METH_VARARGS, "([cmp-func]) -> None"},
     {NULL, NULL}
};



PySequenceMethods TreeNodeList_as_sequence = {
  (inquiry)TreeNodeList_len_sq,                      /* sq_length */
  (binaryfunc)TreeNodeList_concat,                   /* sq_concat */
  (intargfunc)TreeNodeList_repeat,                   /* sq_repeat */
  (intargfunc)TreeNodeList_getitem_sq,               /* sq_item */
  (intintargfunc)TreeNodeList_getslice,              /* sq_slice */
  (intobjargproc)TreeNodeList_setitem_sq,            /* sq_ass_item */
  (intintobjargproc)TreeNodeList_setslice,           /* sq_ass_slice */
  (objobjproc)TreeNodeList_contains,                 /* sq_contains */
};

PyTypeObject PyOrTreeNodeList_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.NodeList",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0,
  (reprfunc)TreeNodeList_repr,                       /* tp_repr */
  0,
  &TreeNodeList_as_sequence,                         /* tp_as_sequence */
  0, 0, 0,
  (reprfunc)TreeNodeList_str,                        /* tp_str */
  0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(<list of TreeNode>)",                            /* tp_doc */
  0, 0,
  (richcmpfunc)TreeNodeList_richcmp,                 /* tp_richcmp */
  0, 0, 0,
  TreeNodeList_methods,                              /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeNodeList_new,                         /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeNodeList(PyObject *obj, void *ptr) { if (!PyOrTreeNodeList_Check(obj)) return 0;      *(GCPtr<TTreeNodeList> *)(ptr) = PyOrange_AsTreeNodeList(obj); return 1; }
int ccn_func_TreeNodeList(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeNodeList> *)(ptr) = GCPtr<TTreeNodeList>(); return 1; }      if (!PyOrTreeNodeList_Check(obj)) return 0;      *(GCPtr<TTreeNodeList> *)(ptr) = PyOrange_AsTreeNodeList(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeNodeList_Type (PyOrTreeNodeList_Type_inh, typeid(TTreeNodeList), 0, cc_TreeNodeList, ccn_TreeNodeList, NULL, true, NULL, NULL);



/* -------------- TreePruner --------------*/

char TreePruner_doc[] = "(tree) -> tree";

PyObject *TreePruner_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrTreePruner_Type, type, args, kwds); }


PyTypeObject PyOrTreePruner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Pruner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TreePruner_call,                      /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreePruner_abstract_constructor,          /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreePruner(PyObject *obj, void *ptr) { if (!PyOrTreePruner_Check(obj)) return 0;      *(GCPtr<TTreePruner> *)(ptr) = PyOrange_AsTreePruner(obj); return 1; }
int ccn_func_TreePruner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreePruner> *)(ptr) = GCPtr<TTreePruner>(); return 1; }      if (!PyOrTreePruner_Check(obj)) return 0;      *(GCPtr<TTreePruner> *)(ptr) = PyOrange_AsTreePruner(obj); return 1; }


ORANGE_API TOrangeType PyOrTreePruner_Type (PyOrTreePruner_Type_inh, typeid(TTreePruner), 0, cc_TreePruner, ccn_TreePruner, NULL, false, NULL, NULL);



/* -------------- TreePruner_SameMajority --------------*/


POrange TreePruner_SameMajority_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreePruner_SameMajority(), type); }


PyTypeObject PyOrTreePruner_SameMajority_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Pruner_SameMajority",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([tree]) -/-> tree",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreePruner_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreePruner_SameMajority(PyObject *obj, void *ptr) { if (!PyOrTreePruner_SameMajority_Check(obj)) return 0;      *(GCPtr<TTreePruner_SameMajority> *)(ptr) = PyOrange_AsTreePruner_SameMajority(obj); return 1; }
int ccn_func_TreePruner_SameMajority(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreePruner_SameMajority> *)(ptr) = GCPtr<TTreePruner_SameMajority>(); return 1; }      if (!PyOrTreePruner_SameMajority_Check(obj)) return 0;      *(GCPtr<TTreePruner_SameMajority> *)(ptr) = PyOrange_AsTreePruner_SameMajority(obj); return 1; }


ORANGE_API TOrangeType PyOrTreePruner_SameMajority_Type (PyOrTreePruner_SameMajority_Type_inh, typeid(TTreePruner_SameMajority), TreePruner_SameMajority_default_constructor, cc_TreePruner_SameMajority, ccn_TreePruner_SameMajority, NULL, true, NULL, NULL);



/* -------------- TreePruner_m --------------*/


POrange TreePruner_m_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreePruner_m(), type); }


PyTypeObject PyOrTreePruner_m_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.Pruner_m",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([tree]) -/-> tree",                              /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreePruner_Type,               /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreePruner_m(PyObject *obj, void *ptr) { if (!PyOrTreePruner_m_Check(obj)) return 0;      *(GCPtr<TTreePruner_m> *)(ptr) = PyOrange_AsTreePruner_m(obj); return 1; }
int ccn_func_TreePruner_m(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreePruner_m> *)(ptr) = GCPtr<TTreePruner_m>(); return 1; }      if (!PyOrTreePruner_m_Check(obj)) return 0;      *(GCPtr<TTreePruner_m> *)(ptr) = PyOrange_AsTreePruner_m(obj); return 1; }


ORANGE_API TOrangeType PyOrTreePruner_m_Type (PyOrTreePruner_m_Type_inh, typeid(TTreePruner_m), TreePruner_m_default_constructor, cc_TreePruner_m, ccn_TreePruner_m, NULL, true, NULL, NULL);



/* -------------- TreeSplitConstructor --------------*/

PyMethodDef TreeSplitConstructor_methods[] = {
     {"__reduce__", (binaryfunc)TreeSplitConstructor__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char TreeSplitConstructor_doc[] = "(examples[, weight, contingency, apriori class distribution, candidates, nodeClassifier]) -> (Classifier, descriptions, sizes, quality)";


PyTypeObject PyOrTreeSplitConstructor_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TreeSplitConstructor_call,            /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeSplitConstructor_methods,                      /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeSplitConstructor_new,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor> *)(ptr) = PyOrange_AsTreeSplitConstructor(obj); return 1; }
int ccn_func_TreeSplitConstructor(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor> *)(ptr) = GCPtr<TTreeSplitConstructor>(); return 1; }      if (!PyOrTreeSplitConstructor_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor> *)(ptr) = PyOrange_AsTreeSplitConstructor(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_Type (PyOrTreeSplitConstructor_Type_inh, typeid(TTreeSplitConstructor), 0, cc_TreeSplitConstructor, ccn_TreeSplitConstructor, NULL, false, NULL, NULL);



/* -------------- TreeSplitConstructor_Attribute --------------*/


POrange TreeSplitConstructor_Attribute_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeSplitConstructor_Attribute(), type); }


PyTypeObject PyOrTreeSplitConstructor_Attribute_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor_Feature",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([measure=, worstAcceptable=, minSubset=])",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeSplitConstructor_Measure_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor_Attribute(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_Attribute_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Attribute> *)(ptr) = PyOrange_AsTreeSplitConstructor_Attribute(obj); return 1; }
int ccn_func_TreeSplitConstructor_Attribute(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor_Attribute> *)(ptr) = GCPtr<TTreeSplitConstructor_Attribute>(); return 1; }      if (!PyOrTreeSplitConstructor_Attribute_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Attribute> *)(ptr) = PyOrange_AsTreeSplitConstructor_Attribute(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_Attribute_Type (PyOrTreeSplitConstructor_Attribute_Type_inh, typeid(TTreeSplitConstructor_Attribute), TreeSplitConstructor_Attribute_default_constructor, cc_TreeSplitConstructor_Attribute, ccn_TreeSplitConstructor_Attribute, NULL, true, NULL, NULL);



/* -------------- TreeSplitConstructor_Combined --------------*/


POrange TreeSplitConstructor_Combined_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeSplitConstructor_Combined(), type); }


PyTypeObject PyOrTreeSplitConstructor_Combined_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor_Combined",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples, [weight, domainContingency, apriorClass, candidates] [discreteTreeSplitConstructor=, continuousTreeSplitConstructor=]) -/-> (Classifier, descriptions, sizes, quality)", /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeSplitConstructor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor_Combined(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_Combined_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Combined> *)(ptr) = PyOrange_AsTreeSplitConstructor_Combined(obj); return 1; }
int ccn_func_TreeSplitConstructor_Combined(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor_Combined> *)(ptr) = GCPtr<TTreeSplitConstructor_Combined>(); return 1; }      if (!PyOrTreeSplitConstructor_Combined_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Combined> *)(ptr) = PyOrange_AsTreeSplitConstructor_Combined(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_Combined_Type (PyOrTreeSplitConstructor_Combined_Type_inh, typeid(TTreeSplitConstructor_Combined), TreeSplitConstructor_Combined_default_constructor, cc_TreeSplitConstructor_Combined, ccn_TreeSplitConstructor_Combined, NULL, true, NULL, NULL);



/* -------------- TreeSplitConstructor_ExhaustiveBinary --------------*/


POrange TreeSplitConstructor_ExhaustiveBinary_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeSplitConstructor_ExhaustiveBinary(), type); }


PyTypeObject PyOrTreeSplitConstructor_ExhaustiveBinary_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor_ExhaustiveBinary",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([measure=, worstAcceptable=, minSubset=])",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeSplitConstructor_Measure_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor_ExhaustiveBinary(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_ExhaustiveBinary_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_ExhaustiveBinary> *)(ptr) = PyOrange_AsTreeSplitConstructor_ExhaustiveBinary(obj); return 1; }
int ccn_func_TreeSplitConstructor_ExhaustiveBinary(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor_ExhaustiveBinary> *)(ptr) = GCPtr<TTreeSplitConstructor_ExhaustiveBinary>(); return 1; }      if (!PyOrTreeSplitConstructor_ExhaustiveBinary_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_ExhaustiveBinary> *)(ptr) = PyOrange_AsTreeSplitConstructor_ExhaustiveBinary(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_ExhaustiveBinary_Type (PyOrTreeSplitConstructor_ExhaustiveBinary_Type_inh, typeid(TTreeSplitConstructor_ExhaustiveBinary), TreeSplitConstructor_ExhaustiveBinary_default_constructor, cc_TreeSplitConstructor_ExhaustiveBinary, ccn_TreeSplitConstructor_ExhaustiveBinary, NULL, true, NULL, NULL);



/* -------------- TreeSplitConstructor_Measure --------------*/


PyObject *TreeSplitConstructor_Measure_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrTreeSplitConstructor_Measure_Type, type, args, kwds); }


PyTypeObject PyOrTreeSplitConstructor_Measure_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor_Score",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "<abstract>",                                      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeSplitConstructor_Type,     /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeSplitConstructor_Measure_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor_Measure(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_Measure_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Measure> *)(ptr) = PyOrange_AsTreeSplitConstructor_Measure(obj); return 1; }
int ccn_func_TreeSplitConstructor_Measure(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor_Measure> *)(ptr) = GCPtr<TTreeSplitConstructor_Measure>(); return 1; }      if (!PyOrTreeSplitConstructor_Measure_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Measure> *)(ptr) = PyOrange_AsTreeSplitConstructor_Measure(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_Measure_Type (PyOrTreeSplitConstructor_Measure_Type_inh, typeid(TTreeSplitConstructor_Measure), 0, cc_TreeSplitConstructor_Measure, ccn_TreeSplitConstructor_Measure, NULL, false, NULL, NULL);



/* -------------- TreeSplitConstructor_OneAgainstOthers --------------*/


POrange TreeSplitConstructor_OneAgainstOthers_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeSplitConstructor_OneAgainstOthers(), type); }


PyTypeObject PyOrTreeSplitConstructor_OneAgainstOthers_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor_OneAgainstOthers",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([measure=, worstAcceptable=, minSubset=])",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeSplitConstructor_Measure_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor_OneAgainstOthers(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_OneAgainstOthers_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_OneAgainstOthers> *)(ptr) = PyOrange_AsTreeSplitConstructor_OneAgainstOthers(obj); return 1; }
int ccn_func_TreeSplitConstructor_OneAgainstOthers(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor_OneAgainstOthers> *)(ptr) = GCPtr<TTreeSplitConstructor_OneAgainstOthers>(); return 1; }      if (!PyOrTreeSplitConstructor_OneAgainstOthers_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_OneAgainstOthers> *)(ptr) = PyOrange_AsTreeSplitConstructor_OneAgainstOthers(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_OneAgainstOthers_Type (PyOrTreeSplitConstructor_OneAgainstOthers_Type_inh, typeid(TTreeSplitConstructor_OneAgainstOthers), TreeSplitConstructor_OneAgainstOthers_default_constructor, cc_TreeSplitConstructor_OneAgainstOthers, ccn_TreeSplitConstructor_OneAgainstOthers, NULL, true, NULL, NULL);



/* -------------- TreeSplitConstructor_Threshold --------------*/


POrange TreeSplitConstructor_Threshold_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeSplitConstructor_Threshold(), type); }


PyTypeObject PyOrTreeSplitConstructor_Threshold_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.SplitConstructor_Threshold",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([measure=, worstAcceptable=, minSubset=])",      /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeSplitConstructor_Measure_Type, /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeSplitConstructor_Threshold(PyObject *obj, void *ptr) { if (!PyOrTreeSplitConstructor_Threshold_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Threshold> *)(ptr) = PyOrange_AsTreeSplitConstructor_Threshold(obj); return 1; }
int ccn_func_TreeSplitConstructor_Threshold(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeSplitConstructor_Threshold> *)(ptr) = GCPtr<TTreeSplitConstructor_Threshold>(); return 1; }      if (!PyOrTreeSplitConstructor_Threshold_Check(obj)) return 0;      *(GCPtr<TTreeSplitConstructor_Threshold> *)(ptr) = PyOrange_AsTreeSplitConstructor_Threshold(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeSplitConstructor_Threshold_Type (PyOrTreeSplitConstructor_Threshold_Type_inh, typeid(TTreeSplitConstructor_Threshold), TreeSplitConstructor_Threshold_default_constructor, cc_TreeSplitConstructor_Threshold, ccn_TreeSplitConstructor_Threshold, NULL, true, NULL, NULL);



/* -------------- TreeStopCriteria --------------*/

PyMethodDef TreeStopCriteria_methods[] = {
     {"__reduce__", (binaryfunc)TreeStopCriteria__reduce__, METH_NOARGS, "()"},
     {NULL, NULL}
};

char TreeStopCriteria_doc[] = "([examples, [weight, domainContingency]) -> bool";


PyTypeObject PyOrTreeStopCriteria_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.StopCriteria",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TreeStopCriteria_call,                /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeStopCriteria_methods,                          /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeStopCriteria_new,                     /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeStopCriteria(PyObject *obj, void *ptr) { if (!PyOrTreeStopCriteria_Check(obj)) return 0;      *(GCPtr<TTreeStopCriteria> *)(ptr) = PyOrange_AsTreeStopCriteria(obj); return 1; }
int ccn_func_TreeStopCriteria(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeStopCriteria> *)(ptr) = GCPtr<TTreeStopCriteria>(); return 1; }      if (!PyOrTreeStopCriteria_Check(obj)) return 0;      *(GCPtr<TTreeStopCriteria> *)(ptr) = PyOrange_AsTreeStopCriteria(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeStopCriteria_Type (PyOrTreeStopCriteria_Type_inh, typeid(TTreeStopCriteria), 0, cc_TreeStopCriteria, ccn_TreeStopCriteria, NULL, false, NULL, NULL);



/* -------------- TreeStopCriteria_Python --------------*/

PyMethodDef TreeStopCriteria_Python_methods[] = {
     {"__reduce__", (binaryfunc)yieldNoPickleError, METH_NOARGS},
     {NULL, NULL}
};

char TreeStopCriteria_Python_doc[] = "([examples, [weight, domainContingency, apriorClass, candidates]) -/-> (Classifier, descriptions, sizes, quality)";

PyObject *TreeStopCriteria_Python_abstract_constructor(PyTypeObject *type, PyObject *args, PyObject *kwds)
{ return PyOrType_GenericAbstract((PyTypeObject *)&PyOrTreeStopCriteria_Python_Type, type, args, kwds); }


PyTypeObject PyOrTreeStopCriteria_Python_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.StopCriteria_Python",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  (ternaryfunc)TreeStopCriteria_Python_call,         /* tp_call */
  0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "()",                                              /* tp_doc */
  0, 0, 0, 0, 0, 0,
  TreeStopCriteria_Python_methods,                   /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrTreeStopCriteria_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)TreeStopCriteria_Python_abstract_constructor, /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeStopCriteria_Python(PyObject *obj, void *ptr) { if (!PyOrTreeStopCriteria_Python_Check(obj)) return 0;      *(GCPtr<TTreeStopCriteria_Python> *)(ptr) = PyOrange_AsTreeStopCriteria_Python(obj); return 1; }
int ccn_func_TreeStopCriteria_Python(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeStopCriteria_Python> *)(ptr) = GCPtr<TTreeStopCriteria_Python>(); return 1; }      if (!PyOrTreeStopCriteria_Python_Check(obj)) return 0;      *(GCPtr<TTreeStopCriteria_Python> *)(ptr) = PyOrange_AsTreeStopCriteria_Python(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeStopCriteria_Python_Type (PyOrTreeStopCriteria_Python_Type_inh, typeid(TTreeStopCriteria_Python), 0, cc_TreeStopCriteria_Python, ccn_TreeStopCriteria_Python, NULL, false, NULL, NULL);



/* -------------- TreeStopCriteria_common --------------*/


POrange TreeStopCriteria_common_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TTreeStopCriteria_common(), type); }


TAttributeAlias TreeStopCriteria_common_aliases[] = {
    {"min_instances", "min_examples"},
    {NULL, NULL}};

PyTypeObject PyOrTreeStopCriteria_common_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.tree.StopCriteria_common",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([maxMajority=, minExamples=])",                  /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrTreeStopCriteria_Type,         /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_TreeStopCriteria_common(PyObject *obj, void *ptr) { if (!PyOrTreeStopCriteria_common_Check(obj)) return 0;      *(GCPtr<TTreeStopCriteria_common> *)(ptr) = PyOrange_AsTreeStopCriteria_common(obj); return 1; }
int ccn_func_TreeStopCriteria_common(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TTreeStopCriteria_common> *)(ptr) = GCPtr<TTreeStopCriteria_common>(); return 1; }      if (!PyOrTreeStopCriteria_common_Check(obj)) return 0;      *(GCPtr<TTreeStopCriteria_common> *)(ptr) = PyOrange_AsTreeStopCriteria_common(obj); return 1; }


ORANGE_API TOrangeType PyOrTreeStopCriteria_common_Type (PyOrTreeStopCriteria_common_Type_inh, typeid(TTreeStopCriteria_common), TreeStopCriteria_common_default_constructor, cc_TreeStopCriteria_common, ccn_TreeStopCriteria_common, NULL, true, NULL, TreeStopCriteria_common_aliases);



/* -------------- kNNClassifier --------------*/


POrange kNNClassifier_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TkNNClassifier(), type); }


PyTypeObject PyOrkNNClassifier_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.knn.kNNClassifier",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([k=, weightID=, findNearest=])",                 /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrClassifierFD_Type,             /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericNamedNew,                 /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_kNNClassifier(PyObject *obj, void *ptr) { if (!PyOrkNNClassifier_Check(obj)) return 0;      *(GCPtr<TkNNClassifier> *)(ptr) = PyOrange_AskNNClassifier(obj); return 1; }
int ccn_func_kNNClassifier(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TkNNClassifier> *)(ptr) = GCPtr<TkNNClassifier>(); return 1; }      if (!PyOrkNNClassifier_Check(obj)) return 0;      *(GCPtr<TkNNClassifier> *)(ptr) = PyOrange_AskNNClassifier(obj); return 1; }


ORANGE_API TOrangeType PyOrkNNClassifier_Type (PyOrkNNClassifier_Type_inh, typeid(TkNNClassifier), kNNClassifier_default_constructor, cc_kNNClassifier, ccn_kNNClassifier, NULL, true, NULL, NULL);



/* -------------- kNNLearner --------------*/


POrange kNNLearner_default_constructor(PyTypeObject *type)
{ return POrange(mlnew TkNNLearner(), type); }


PyTypeObject PyOrkNNLearner_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "Orange.classification.knn.kNNLearner",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "([examples] [, weight=, k=] -/-> Classifier",     /* tp_doc */
  0, 0, 0, 0, 0, 0, 0, 0, 0,
  (_typeobject *)&PyOrLearner_Type,                  /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)PyOrType_GenericCallableNew,              /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_kNNLearner(PyObject *obj, void *ptr) { if (!PyOrkNNLearner_Check(obj)) return 0;      *(GCPtr<TkNNLearner> *)(ptr) = PyOrange_AskNNLearner(obj); return 1; }
int ccn_func_kNNLearner(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TkNNLearner> *)(ptr) = GCPtr<TkNNLearner>(); return 1; }      if (!PyOrkNNLearner_Check(obj)) return 0;      *(GCPtr<TkNNLearner> *)(ptr) = PyOrange_AskNNLearner(obj); return 1; }


ORANGE_API TOrangeType PyOrkNNLearner_Type (PyOrkNNLearner_Type_inh, typeid(TkNNLearner), kNNLearner_default_constructor, cc_kNNLearner, ccn_kNNLearner, NULL, true, NULL, NULL);



