 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../minimal_complexity.hpp"
#include <cstddef>



/****** TIG *****/


TPropertyDescription TIG_properties[] = {
  {NULL}
};

size_t const TIG_components[] = { 0};
TClassDescription TIG::st_classDescription = { "TIG", &typeid(TIG), &TOrange::st_classDescription, TIG_properties, TIG_components };
TClassDescription const *TIG::classDescription() const { return &TIG::st_classDescription; }
TOrange *TIG::clone() const { return mlnew TIG(*this); }


/****** TIGConstructor *****/


TPropertyDescription TIGConstructor_properties[] = {
  {NULL}
};

size_t const TIGConstructor_components[] = { 0};
TClassDescription TIGConstructor::st_classDescription = { "TIGConstructor", &typeid(TIGConstructor), &TOrange::st_classDescription, TIGConstructor_properties, TIGConstructor_components };
TClassDescription const *TIGConstructor::classDescription() const { return &TIGConstructor::st_classDescription; }


/****** TIGByIM *****/


TPropertyDescription TIGByIM_properties[] = {
  {"IMconstructor", "IM constructor", &typeid(POrange), &TIMConstructor::st_classDescription, offsetof(TIGByIM, IMconstructor), false, false, 0},
  {NULL}
};

size_t const TIGByIM_components[] = { offsetof(TIGByIM, IMconstructor), 0};
TClassDescription TIGByIM::st_classDescription = { "TIGByIM", &typeid(TIGByIM), &TIGConstructor::st_classDescription, TIGByIM_properties, TIGByIM_components };
TClassDescription const *TIGByIM::classDescription() const { return &TIGByIM::st_classDescription; }
TOrange *TIGByIM::clone() const { return mlnew TIGByIM(*this); }


/****** TIGBySorting *****/


TPropertyDescription TIGBySorting_properties[] = {
  {NULL}
};

size_t const TIGBySorting_components[] = { 0};
TClassDescription TIGBySorting::st_classDescription = { "TIGBySorting", &typeid(TIGBySorting), &TIGConstructor::st_classDescription, TIGBySorting_properties, TIGBySorting_components };
TClassDescription const *TIGBySorting::classDescription() const { return &TIGBySorting::st_classDescription; }
TOrange *TIGBySorting::clone() const { return mlnew TIGBySorting(*this); }


/****** TColoredIG *****/


TPropertyDescription TColoredIG_properties[] = {
  {"ig", "incompatibility graph", &typeid(POrange), &TIG::st_classDescription, offsetof(TColoredIG, ig), false, false, 0},
  {"colors", "colors (one element corresponding to each ig node)", &typeid(POrange), &TIntList::st_classDescription, offsetof(TColoredIG, colors), false, false, 0},
  {NULL}
};

size_t const TColoredIG_components[] = { offsetof(TColoredIG, ig), offsetof(TColoredIG, colors), 0};
TClassDescription TColoredIG::st_classDescription = { "TColoredIG", &typeid(TColoredIG), &TGeneralExampleClustering::st_classDescription, TColoredIG_properties, TColoredIG_components };
TClassDescription const *TColoredIG::classDescription() const { return &TColoredIG::st_classDescription; }
TOrange *TColoredIG::clone() const { return mlnew TColoredIG(*this); }


/****** TColorIG *****/


TPropertyDescription TColorIG_properties[] = {
  {NULL}
};

size_t const TColorIG_components[] = { 0};
TClassDescription TColorIG::st_classDescription = { "TColorIG", &typeid(TColorIG), &TOrange::st_classDescription, TColorIG_properties, TColorIG_components };
TClassDescription const *TColorIG::classDescription() const { return &TColorIG::st_classDescription; }


/****** TColorIG_MCF *****/


TPropertyDescription TColorIG_MCF_properties[] = {
  {NULL}
};

size_t const TColorIG_MCF_components[] = { 0};
TClassDescription TColorIG_MCF::st_classDescription = { "TColorIG_MCF", &typeid(TColorIG_MCF), &TColorIG::st_classDescription, TColorIG_MCF_properties, TColorIG_MCF_components };
TClassDescription const *TColorIG_MCF::classDescription() const { return &TColorIG_MCF::st_classDescription; }
TOrange *TColorIG_MCF::clone() const { return mlnew TColorIG_MCF(*this); }


/****** TFeatureByMinComplexity *****/

void *PTFeatureByMinComplexity_Completion(void *);

TPropertyDescription TFeatureByMinComplexity_properties[] = {
  {"color_IG", "graph coloring algorithm", &typeid(POrange), &TColorIG::st_classDescription, offsetof(TFeatureByMinComplexity, colorIG), false, false, 0},
  {"completion", " decides how to determine the class for points not covered by any cluster", &typeid(int), NULL, offsetof(TFeatureByMinComplexity, completion), false, false, PTFeatureByMinComplexity_Completion},
  {NULL}
};

size_t const TFeatureByMinComplexity_components[] = { offsetof(TFeatureByMinComplexity, colorIG), 0};
TClassDescription TFeatureByMinComplexity::st_classDescription = { "TFeatureByMinComplexity", &typeid(TFeatureByMinComplexity), &TFeatureInducer::st_classDescription, TFeatureByMinComplexity_properties, TFeatureByMinComplexity_components };
TClassDescription const *TFeatureByMinComplexity::classDescription() const { return &TFeatureByMinComplexity::st_classDescription; }
TOrange *TFeatureByMinComplexity::clone() const { return mlnew TFeatureByMinComplexity(*this); }
