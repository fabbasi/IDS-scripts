 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../pnn.hpp"
#include <cstddef>



/****** TPNN *****/


TPropertyDescription TPNN_properties[] = {
  {"dimensions", "the number of dimensions", &typeid(int), NULL, offsetof(TPNN, dimensions), true, false, 0},
  {"offsets", "offsets to subtract from the attribute values", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TPNN, offsets), false, false, 0},
  {"normalizers", "number to divide the values by", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TPNN, normalizers), false, false, 0},
  {"averages", "numbers to use instead of the missing", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TPNN, averages), false, false, 0},
  {"normalize_examples", "if true, attribute values are divided to sum up to 1", &typeid(bool), NULL, offsetof(TPNN, normalizeExamples), false, false, 0},
  {"n_examples", "the number of examples", &typeid(int), NULL, offsetof(TPNN, nExamples), true, false, 0},
  {"law", "law", &typeid(int), NULL, offsetof(TPNN, law), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TPNN, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TPNN, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TPNN, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TPNN_components[] = { offsetof(TPNN, offsets), offsetof(TPNN, normalizers), offsetof(TPNN, averages), offsetof(TPNN, domain), offsetof(TPNN, classVar), 0};
TClassDescription TPNN::st_classDescription = { "TPNN", &typeid(TPNN), &TClassifierFD::st_classDescription, TPNN_properties, TPNN_components };
TClassDescription const *TPNN::classDescription() const { return &TPNN::st_classDescription; }
TOrange *TPNN::clone() const { return mlnew TPNN(*this); }


/****** TP2NN *****/


TPropertyDescription TP2NN_properties[] = {
  {"dimensions", "the number of dimensions", &typeid(int), NULL, offsetof(TP2NN, dimensions), true, false, 0},
  {"offsets", "offsets to subtract from the attribute values", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TP2NN, offsets), false, false, 0},
  {"normalizers", "number to divide the values by", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TP2NN, normalizers), false, false, 0},
  {"averages", "numbers to use instead of the missing", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TP2NN, averages), false, false, 0},
  {"normalize_examples", "if true, attribute values are divided to sum up to 1", &typeid(bool), NULL, offsetof(TP2NN, normalizeExamples), false, false, 0},
  {"n_examples", "the number of examples", &typeid(int), NULL, offsetof(TP2NN, nExamples), true, false, 0},
  {"law", "law", &typeid(int), NULL, offsetof(TP2NN, law), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TP2NN, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TP2NN, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TP2NN, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TP2NN_components[] = { offsetof(TP2NN, offsets), offsetof(TP2NN, normalizers), offsetof(TP2NN, averages), offsetof(TP2NN, domain), offsetof(TP2NN, classVar), 0};
TClassDescription TP2NN::st_classDescription = { "TP2NN", &typeid(TP2NN), &TPNN::st_classDescription, TP2NN_properties, TP2NN_components };
TClassDescription const *TP2NN::classDescription() const { return &TP2NN::st_classDescription; }
TOrange *TP2NN::clone() const { return mlnew TP2NN(*this); }
