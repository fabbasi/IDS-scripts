 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../distvars.hpp"
#include <cstddef>



/****** TDistribution *****/


TPropertyDescription TDistribution_properties[] = {
  {"variable", "attribute descriptor (optional)", &typeid(POrange), &TVariable::st_classDescription, offsetof(TDistribution, variable), false, false, 0},
  {"unknowns", "number of unknown values", &typeid(float), NULL, offsetof(TDistribution, unknowns), false, false, 0},
  {"abs", "sum of frequencies (not including unknown values!)", &typeid(float), NULL, offsetof(TDistribution, abs), false, false, 0},
  {"cases", "number of cases; as abs, but doesn't change at *= and normalize()", &typeid(float), NULL, offsetof(TDistribution, cases), false, false, 0},
  {"normalized", "distribution is normalized", &typeid(bool), NULL, offsetof(TDistribution, normalized), false, false, 0},
  {"supports_discrete", "distribution supports discrete interface", &typeid(bool), NULL, offsetof(TDistribution, supportsDiscrete), true, false, 0},
  {"supports_continuous", "distribution supports continuous interface", &typeid(bool), NULL, offsetof(TDistribution, supportsContinuous), true, false, 0},
  {"random_generator", "random generator; initialized when needed, if not given earlier", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TDistribution, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TDistribution_components[] = { offsetof(TDistribution, variable), offsetof(TDistribution, randomGenerator), 0};
TClassDescription TDistribution::st_classDescription = { "TDistribution", &typeid(TDistribution), &TSomeValue::st_classDescription, TDistribution_properties, TDistribution_components };
TClassDescription const *TDistribution::classDescription() const { return &TDistribution::st_classDescription; }


/****** TDiscDistribution *****/


TPropertyDescription TDiscDistribution_properties[] = {
  {"variances", "variances", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TDiscDistribution, variances), false, false, 0},
  {"variable", "attribute descriptor (optional)", &typeid(POrange), &TVariable::st_classDescription, offsetof(TDiscDistribution, variable), false, false, 0},
  {"unknowns", "number of unknown values", &typeid(float), NULL, offsetof(TDiscDistribution, unknowns), false, false, 0},
  {"abs", "sum of frequencies (not including unknown values!)", &typeid(float), NULL, offsetof(TDiscDistribution, abs), false, false, 0},
  {"cases", "number of cases; as abs, but doesn't change at *= and normalize()", &typeid(float), NULL, offsetof(TDiscDistribution, cases), false, false, 0},
  {"normalized", "distribution is normalized", &typeid(bool), NULL, offsetof(TDiscDistribution, normalized), false, false, 0},
  {"supports_discrete", "distribution supports discrete interface", &typeid(bool), NULL, offsetof(TDiscDistribution, supportsDiscrete), true, false, 0},
  {"supports_continuous", "distribution supports continuous interface", &typeid(bool), NULL, offsetof(TDiscDistribution, supportsContinuous), true, false, 0},
  {"random_generator", "random generator; initialized when needed, if not given earlier", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TDiscDistribution, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TDiscDistribution_components[] = { offsetof(TDiscDistribution, variances), offsetof(TDiscDistribution, variable), offsetof(TDiscDistribution, randomGenerator), 0};
TClassDescription TDiscDistribution::st_classDescription = { "TDiscDistribution", &typeid(TDiscDistribution), &TDistribution::st_classDescription, TDiscDistribution_properties, TDiscDistribution_components };
TClassDescription const *TDiscDistribution::classDescription() const { return &TDiscDistribution::st_classDescription; }
TOrange *TDiscDistribution::clone() const { return mlnew TDiscDistribution(*this); }


/****** TContDistribution *****/


TPropertyDescription TContDistribution_properties[] = {
  {"variances", "variances", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TContDistribution, variances), false, false, 0},
  {"sum", "weighted sum of elements (i.e. N*average)", &typeid(float), NULL, offsetof(TContDistribution, sum), true, false, 0},
  {"sum2", "weighted sum of squares of elements", &typeid(float), NULL, offsetof(TContDistribution, sum2), true, false, 0},
  {"variable", "attribute descriptor (optional)", &typeid(POrange), &TVariable::st_classDescription, offsetof(TContDistribution, variable), false, false, 0},
  {"unknowns", "number of unknown values", &typeid(float), NULL, offsetof(TContDistribution, unknowns), false, false, 0},
  {"abs", "sum of frequencies (not including unknown values!)", &typeid(float), NULL, offsetof(TContDistribution, abs), false, false, 0},
  {"cases", "number of cases; as abs, but doesn't change at *= and normalize()", &typeid(float), NULL, offsetof(TContDistribution, cases), false, false, 0},
  {"normalized", "distribution is normalized", &typeid(bool), NULL, offsetof(TContDistribution, normalized), false, false, 0},
  {"supports_discrete", "distribution supports discrete interface", &typeid(bool), NULL, offsetof(TContDistribution, supportsDiscrete), true, false, 0},
  {"supports_continuous", "distribution supports continuous interface", &typeid(bool), NULL, offsetof(TContDistribution, supportsContinuous), true, false, 0},
  {"random_generator", "random generator; initialized when needed, if not given earlier", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TContDistribution, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TContDistribution_components[] = { offsetof(TContDistribution, variances), offsetof(TContDistribution, variable), offsetof(TContDistribution, randomGenerator), 0};
TClassDescription TContDistribution::st_classDescription = { "TContDistribution", &typeid(TContDistribution), &TDistribution::st_classDescription, TContDistribution_properties, TContDistribution_components };
TClassDescription const *TContDistribution::classDescription() const { return &TContDistribution::st_classDescription; }
TOrange *TContDistribution::clone() const { return mlnew TContDistribution(*this); }


/****** TGaussianDistribution *****/


TPropertyDescription TGaussianDistribution_properties[] = {
  {"mean", "mu", &typeid(float), NULL, offsetof(TGaussianDistribution, mean), false, false, 0},
  {"sigma", "sigma", &typeid(float), NULL, offsetof(TGaussianDistribution, sigma), false, false, 0},
  {"variable", "attribute descriptor (optional)", &typeid(POrange), &TVariable::st_classDescription, offsetof(TGaussianDistribution, variable), false, false, 0},
  {"unknowns", "number of unknown values", &typeid(float), NULL, offsetof(TGaussianDistribution, unknowns), false, false, 0},
  {"abs", "sum of frequencies (not including unknown values!)", &typeid(float), NULL, offsetof(TGaussianDistribution, abs), false, false, 0},
  {"cases", "number of cases; as abs, but doesn't change at *= and normalize()", &typeid(float), NULL, offsetof(TGaussianDistribution, cases), false, false, 0},
  {"normalized", "distribution is normalized", &typeid(bool), NULL, offsetof(TGaussianDistribution, normalized), false, false, 0},
  {"supports_discrete", "distribution supports discrete interface", &typeid(bool), NULL, offsetof(TGaussianDistribution, supportsDiscrete), true, false, 0},
  {"supports_continuous", "distribution supports continuous interface", &typeid(bool), NULL, offsetof(TGaussianDistribution, supportsContinuous), true, false, 0},
  {"random_generator", "random generator; initialized when needed, if not given earlier", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TGaussianDistribution, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TGaussianDistribution_components[] = { offsetof(TGaussianDistribution, variable), offsetof(TGaussianDistribution, randomGenerator), 0};
TClassDescription TGaussianDistribution::st_classDescription = { "TGaussianDistribution", &typeid(TGaussianDistribution), &TDistribution::st_classDescription, TGaussianDistribution_properties, TGaussianDistribution_components };
TClassDescription const *TGaussianDistribution::classDescription() const { return &TGaussianDistribution::st_classDescription; }
TOrange *TGaussianDistribution::clone() const { return mlnew TGaussianDistribution(*this); }


/****** TDomainDistributions *****/


TPropertyDescription TDomainDistributions_properties[] = {
  {NULL}
};

size_t const TDomainDistributions_components[] = { 0};
TClassDescription TDomainDistributions::st_classDescription = { "TDomainDistributions", &typeid(TDomainDistributions), &TOrange::st_classDescription, TDomainDistributions_properties, TDomainDistributions_components };
TClassDescription const *TDomainDistributions::classDescription() const { return &TDomainDistributions::st_classDescription; }
TOrange *TDomainDistributions::clone() const { return mlnew TDomainDistributions(*this); }
