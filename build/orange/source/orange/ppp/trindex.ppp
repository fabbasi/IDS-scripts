 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../trindex.hpp"
#include <cstddef>



/****** TMakeRandomIndices *****/

void *PTMakeRandomIndices_Stratification(void *);

TPropertyDescription TMakeRandomIndices_properties[] = {
  {"stratified", " requests stratified distributions", &typeid(int), NULL, offsetof(TMakeRandomIndices, stratified), false, false, PTMakeRandomIndices_Stratification},
  {"randseed", "a seed for random generator", &typeid(int), NULL, offsetof(TMakeRandomIndices, randseed), false, false, 0},
  {"random_generator", "a random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TMakeRandomIndices, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TMakeRandomIndices_components[] = { offsetof(TMakeRandomIndices, randomGenerator), 0};
TClassDescription TMakeRandomIndices::st_classDescription = { "TMakeRandomIndices", &typeid(TMakeRandomIndices), &TOrange::st_classDescription, TMakeRandomIndices_properties, TMakeRandomIndices_components };
TClassDescription const *TMakeRandomIndices::classDescription() const { return &TMakeRandomIndices::st_classDescription; }
TOrange *TMakeRandomIndices::clone() const { return mlnew TMakeRandomIndices(*this); }


/****** TMakeRandomIndices2 *****/

void *PTMakeRandomIndices_Stratification(void *);

TPropertyDescription TMakeRandomIndices2_properties[] = {
  {"p0", "a proportion or a number of 0's", &typeid(float), NULL, offsetof(TMakeRandomIndices2, p0), false, false, 0},
  {"stratified", " requests stratified distributions", &typeid(int), NULL, offsetof(TMakeRandomIndices2, stratified), false, false, PTMakeRandomIndices_Stratification},
  {"randseed", "a seed for random generator", &typeid(int), NULL, offsetof(TMakeRandomIndices2, randseed), false, false, 0},
  {"random_generator", "a random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TMakeRandomIndices2, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TMakeRandomIndices2_components[] = { offsetof(TMakeRandomIndices2, randomGenerator), 0};
TClassDescription TMakeRandomIndices2::st_classDescription = { "TMakeRandomIndices2", &typeid(TMakeRandomIndices2), &TMakeRandomIndices::st_classDescription, TMakeRandomIndices2_properties, TMakeRandomIndices2_components };
TClassDescription const *TMakeRandomIndices2::classDescription() const { return &TMakeRandomIndices2::st_classDescription; }
TOrange *TMakeRandomIndices2::clone() const { return mlnew TMakeRandomIndices2(*this); }


/****** TMakeRandomIndicesN *****/

void *PTMakeRandomIndices_Stratification(void *);

TPropertyDescription TMakeRandomIndicesN_properties[] = {
  {"p", "probabilities of indices (last is 1-sum(p))", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TMakeRandomIndicesN, p), false, false, 0},
  {"stratified", " requests stratified distributions", &typeid(int), NULL, offsetof(TMakeRandomIndicesN, stratified), false, false, PTMakeRandomIndices_Stratification},
  {"randseed", "a seed for random generator", &typeid(int), NULL, offsetof(TMakeRandomIndicesN, randseed), false, false, 0},
  {"random_generator", "a random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TMakeRandomIndicesN, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TMakeRandomIndicesN_components[] = { offsetof(TMakeRandomIndicesN, p), offsetof(TMakeRandomIndicesN, randomGenerator), 0};
TClassDescription TMakeRandomIndicesN::st_classDescription = { "TMakeRandomIndicesN", &typeid(TMakeRandomIndicesN), &TMakeRandomIndices::st_classDescription, TMakeRandomIndicesN_properties, TMakeRandomIndicesN_components };
TClassDescription const *TMakeRandomIndicesN::classDescription() const { return &TMakeRandomIndicesN::st_classDescription; }
TOrange *TMakeRandomIndicesN::clone() const { return mlnew TMakeRandomIndicesN(*this); }


/****** TMakeRandomIndicesCV *****/

void *PTMakeRandomIndices_Stratification(void *);

TPropertyDescription TMakeRandomIndicesCV_properties[] = {
  {"folds", "number of folds", &typeid(int), NULL, offsetof(TMakeRandomIndicesCV, folds), false, false, 0},
  {"stratified", " requests stratified distributions", &typeid(int), NULL, offsetof(TMakeRandomIndicesCV, stratified), false, false, PTMakeRandomIndices_Stratification},
  {"randseed", "a seed for random generator", &typeid(int), NULL, offsetof(TMakeRandomIndicesCV, randseed), false, false, 0},
  {"random_generator", "a random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TMakeRandomIndicesCV, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TMakeRandomIndicesCV_components[] = { offsetof(TMakeRandomIndicesCV, randomGenerator), 0};
TClassDescription TMakeRandomIndicesCV::st_classDescription = { "TMakeRandomIndicesCV", &typeid(TMakeRandomIndicesCV), &TMakeRandomIndices::st_classDescription, TMakeRandomIndicesCV_properties, TMakeRandomIndicesCV_components };
TClassDescription const *TMakeRandomIndicesCV::classDescription() const { return &TMakeRandomIndicesCV::st_classDescription; }
TOrange *TMakeRandomIndicesCV::clone() const { return mlnew TMakeRandomIndicesCV(*this); }


/****** TMakeRandomIndicesMultiple *****/

void *PTMakeRandomIndices_Stratification(void *);

TPropertyDescription TMakeRandomIndicesMultiple_properties[] = {
  {"stratified", " requests stratified distributions", &typeid(int), NULL, offsetof(TMakeRandomIndicesMultiple, stratified), false, false, PTMakeRandomIndices_Stratification},
  {"randseed", "a seed for random generator", &typeid(int), NULL, offsetof(TMakeRandomIndicesMultiple, randseed), false, false, 0},
  {"random_generator", "a random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TMakeRandomIndicesMultiple, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TMakeRandomIndicesMultiple_components[] = { offsetof(TMakeRandomIndicesMultiple, randomGenerator), 0};
TClassDescription TMakeRandomIndicesMultiple::st_classDescription = { "TMakeRandomIndicesMultiple", &typeid(TMakeRandomIndicesMultiple), &TMakeRandomIndices::st_classDescription, TMakeRandomIndicesMultiple_properties, TMakeRandomIndicesMultiple_components };
TClassDescription const *TMakeRandomIndicesMultiple::classDescription() const { return &TMakeRandomIndicesMultiple::st_classDescription; }
TOrange *TMakeRandomIndicesMultiple::clone() const { return mlnew TMakeRandomIndicesMultiple(*this); }
