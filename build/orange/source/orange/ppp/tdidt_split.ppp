 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../tdidt_split.hpp"
#include <cstddef>



/****** TTreeSplitConstructor *****/


TPropertyDescription TTreeSplitConstructor_properties[] = {
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_components[] = { 0};
TClassDescription TTreeSplitConstructor::st_classDescription = { "TTreeSplitConstructor", &typeid(TTreeSplitConstructor), &TOrange::st_classDescription, TTreeSplitConstructor_properties, TTreeSplitConstructor_components };
TClassDescription const *TTreeSplitConstructor::classDescription() const { return &TTreeSplitConstructor::st_classDescription; }


/****** TTreeSplitConstructor_Measure *****/


TPropertyDescription TTreeSplitConstructor_Measure_properties[] = {
  {"measure", "attribute quality measure", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TTreeSplitConstructor_Measure, measure), false, false, 0},
  {"worst_acceptable", "the worst acceptable quality of the attribute", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Measure, worstAcceptable), false, false, 0},
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Measure, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_Measure_components[] = { offsetof(TTreeSplitConstructor_Measure, measure), 0};
TClassDescription TTreeSplitConstructor_Measure::st_classDescription = { "TTreeSplitConstructor_Measure", &typeid(TTreeSplitConstructor_Measure), &TTreeSplitConstructor::st_classDescription, TTreeSplitConstructor_Measure_properties, TTreeSplitConstructor_Measure_components };
TClassDescription const *TTreeSplitConstructor_Measure::classDescription() const { return &TTreeSplitConstructor_Measure::st_classDescription; }


/****** TTreeSplitConstructor_Combined *****/


TPropertyDescription TTreeSplitConstructor_Combined_properties[] = {
  {"discrete_split_constructor", "split constructor for discrete attributes", &typeid(POrange), &TTreeSplitConstructor::st_classDescription, offsetof(TTreeSplitConstructor_Combined, discreteSplitConstructor), false, false, 0},
  {"continuous_split_constructor", "split constructor for continuous attributes", &typeid(POrange), &TTreeSplitConstructor::st_classDescription, offsetof(TTreeSplitConstructor_Combined, continuousSplitConstructor), false, false, 0},
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Combined, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_Combined_components[] = { offsetof(TTreeSplitConstructor_Combined, discreteSplitConstructor), offsetof(TTreeSplitConstructor_Combined, continuousSplitConstructor), 0};
TClassDescription TTreeSplitConstructor_Combined::st_classDescription = { "TTreeSplitConstructor_Combined", &typeid(TTreeSplitConstructor_Combined), &TTreeSplitConstructor::st_classDescription, TTreeSplitConstructor_Combined_properties, TTreeSplitConstructor_Combined_components };
TClassDescription const *TTreeSplitConstructor_Combined::classDescription() const { return &TTreeSplitConstructor_Combined::st_classDescription; }
TOrange *TTreeSplitConstructor_Combined::clone() const { return mlnew TTreeSplitConstructor_Combined(*this); }


/****** TTreeSplitConstructor_Attribute *****/


TPropertyDescription TTreeSplitConstructor_Attribute_properties[] = {
  {"measure", "attribute quality measure", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TTreeSplitConstructor_Attribute, measure), false, false, 0},
  {"worst_acceptable", "the worst acceptable quality of the attribute", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Attribute, worstAcceptable), false, false, 0},
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Attribute, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_Attribute_components[] = { offsetof(TTreeSplitConstructor_Attribute, measure), 0};
TClassDescription TTreeSplitConstructor_Attribute::st_classDescription = { "TTreeSplitConstructor_Attribute", &typeid(TTreeSplitConstructor_Attribute), &TTreeSplitConstructor_Measure::st_classDescription, TTreeSplitConstructor_Attribute_properties, TTreeSplitConstructor_Attribute_components };
TClassDescription const *TTreeSplitConstructor_Attribute::classDescription() const { return &TTreeSplitConstructor_Attribute::st_classDescription; }
TOrange *TTreeSplitConstructor_Attribute::clone() const { return mlnew TTreeSplitConstructor_Attribute(*this); }


/****** TTreeSplitConstructor_ExhaustiveBinary *****/


TPropertyDescription TTreeSplitConstructor_ExhaustiveBinary_properties[] = {
  {"measure", "attribute quality measure", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TTreeSplitConstructor_ExhaustiveBinary, measure), false, false, 0},
  {"worst_acceptable", "the worst acceptable quality of the attribute", &typeid(float), NULL, offsetof(TTreeSplitConstructor_ExhaustiveBinary, worstAcceptable), false, false, 0},
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor_ExhaustiveBinary, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_ExhaustiveBinary_components[] = { offsetof(TTreeSplitConstructor_ExhaustiveBinary, measure), 0};
TClassDescription TTreeSplitConstructor_ExhaustiveBinary::st_classDescription = { "TTreeSplitConstructor_ExhaustiveBinary", &typeid(TTreeSplitConstructor_ExhaustiveBinary), &TTreeSplitConstructor_Measure::st_classDescription, TTreeSplitConstructor_ExhaustiveBinary_properties, TTreeSplitConstructor_ExhaustiveBinary_components };
TClassDescription const *TTreeSplitConstructor_ExhaustiveBinary::classDescription() const { return &TTreeSplitConstructor_ExhaustiveBinary::st_classDescription; }
TOrange *TTreeSplitConstructor_ExhaustiveBinary::clone() const { return mlnew TTreeSplitConstructor_ExhaustiveBinary(*this); }


/****** TTreeSplitConstructor_OneAgainstOthers *****/


TPropertyDescription TTreeSplitConstructor_OneAgainstOthers_properties[] = {
  {"measure", "attribute quality measure", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TTreeSplitConstructor_OneAgainstOthers, measure), false, false, 0},
  {"worst_acceptable", "the worst acceptable quality of the attribute", &typeid(float), NULL, offsetof(TTreeSplitConstructor_OneAgainstOthers, worstAcceptable), false, false, 0},
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor_OneAgainstOthers, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_OneAgainstOthers_components[] = { offsetof(TTreeSplitConstructor_OneAgainstOthers, measure), 0};
TClassDescription TTreeSplitConstructor_OneAgainstOthers::st_classDescription = { "TTreeSplitConstructor_OneAgainstOthers", &typeid(TTreeSplitConstructor_OneAgainstOthers), &TTreeSplitConstructor_Measure::st_classDescription, TTreeSplitConstructor_OneAgainstOthers_properties, TTreeSplitConstructor_OneAgainstOthers_components };
TClassDescription const *TTreeSplitConstructor_OneAgainstOthers::classDescription() const { return &TTreeSplitConstructor_OneAgainstOthers::st_classDescription; }
TOrange *TTreeSplitConstructor_OneAgainstOthers::clone() const { return mlnew TTreeSplitConstructor_OneAgainstOthers(*this); }


/****** TTreeSplitConstructor_Threshold *****/


TPropertyDescription TTreeSplitConstructor_Threshold_properties[] = {
  {"measure", "attribute quality measure", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TTreeSplitConstructor_Threshold, measure), false, false, 0},
  {"worst_acceptable", "the worst acceptable quality of the attribute", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Threshold, worstAcceptable), false, false, 0},
  {"min_subset", "minimal number of examples in a subset", &typeid(float), NULL, offsetof(TTreeSplitConstructor_Threshold, minSubset), false, false, 0},
  {NULL}
};

size_t const TTreeSplitConstructor_Threshold_components[] = { offsetof(TTreeSplitConstructor_Threshold, measure), 0};
TClassDescription TTreeSplitConstructor_Threshold::st_classDescription = { "TTreeSplitConstructor_Threshold", &typeid(TTreeSplitConstructor_Threshold), &TTreeSplitConstructor_Measure::st_classDescription, TTreeSplitConstructor_Threshold_properties, TTreeSplitConstructor_Threshold_components };
TClassDescription const *TTreeSplitConstructor_Threshold::classDescription() const { return &TTreeSplitConstructor_Threshold::st_classDescription; }
TOrange *TTreeSplitConstructor_Threshold::clone() const { return mlnew TTreeSplitConstructor_Threshold(*this); }


/****** TTreeExampleSplitter *****/


TPropertyDescription TTreeExampleSplitter_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_components[] = { 0};
TClassDescription TTreeExampleSplitter::st_classDescription = { "TTreeExampleSplitter", &typeid(TTreeExampleSplitter), &TOrange::st_classDescription, TTreeExampleSplitter_properties, TTreeExampleSplitter_components };
TClassDescription const *TTreeExampleSplitter::classDescription() const { return &TTreeExampleSplitter::st_classDescription; }


/****** TTreeExampleSplitter_IgnoreUnknowns *****/


TPropertyDescription TTreeExampleSplitter_IgnoreUnknowns_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_IgnoreUnknowns_components[] = { 0};
TClassDescription TTreeExampleSplitter_IgnoreUnknowns::st_classDescription = { "TTreeExampleSplitter_IgnoreUnknowns", &typeid(TTreeExampleSplitter_IgnoreUnknowns), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_IgnoreUnknowns_properties, TTreeExampleSplitter_IgnoreUnknowns_components };
TClassDescription const *TTreeExampleSplitter_IgnoreUnknowns::classDescription() const { return &TTreeExampleSplitter_IgnoreUnknowns::st_classDescription; }
TOrange *TTreeExampleSplitter_IgnoreUnknowns::clone() const { return mlnew TTreeExampleSplitter_IgnoreUnknowns(*this); }


/****** TTreeExampleSplitter_UnknownsToCommon *****/


TPropertyDescription TTreeExampleSplitter_UnknownsToCommon_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_UnknownsToCommon_components[] = { 0};
TClassDescription TTreeExampleSplitter_UnknownsToCommon::st_classDescription = { "TTreeExampleSplitter_UnknownsToCommon", &typeid(TTreeExampleSplitter_UnknownsToCommon), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_UnknownsToCommon_properties, TTreeExampleSplitter_UnknownsToCommon_components };
TClassDescription const *TTreeExampleSplitter_UnknownsToCommon::classDescription() const { return &TTreeExampleSplitter_UnknownsToCommon::st_classDescription; }
TOrange *TTreeExampleSplitter_UnknownsToCommon::clone() const { return mlnew TTreeExampleSplitter_UnknownsToCommon(*this); }


/****** TTreeExampleSplitter_UnknownsToAll *****/


TPropertyDescription TTreeExampleSplitter_UnknownsToAll_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_UnknownsToAll_components[] = { 0};
TClassDescription TTreeExampleSplitter_UnknownsToAll::st_classDescription = { "TTreeExampleSplitter_UnknownsToAll", &typeid(TTreeExampleSplitter_UnknownsToAll), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_UnknownsToAll_properties, TTreeExampleSplitter_UnknownsToAll_components };
TClassDescription const *TTreeExampleSplitter_UnknownsToAll::classDescription() const { return &TTreeExampleSplitter_UnknownsToAll::st_classDescription; }
TOrange *TTreeExampleSplitter_UnknownsToAll::clone() const { return mlnew TTreeExampleSplitter_UnknownsToAll(*this); }


/****** TTreeExampleSplitter_UnknownsToRandom *****/


TPropertyDescription TTreeExampleSplitter_UnknownsToRandom_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_UnknownsToRandom_components[] = { 0};
TClassDescription TTreeExampleSplitter_UnknownsToRandom::st_classDescription = { "TTreeExampleSplitter_UnknownsToRandom", &typeid(TTreeExampleSplitter_UnknownsToRandom), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_UnknownsToRandom_properties, TTreeExampleSplitter_UnknownsToRandom_components };
TClassDescription const *TTreeExampleSplitter_UnknownsToRandom::classDescription() const { return &TTreeExampleSplitter_UnknownsToRandom::st_classDescription; }
TOrange *TTreeExampleSplitter_UnknownsToRandom::clone() const { return mlnew TTreeExampleSplitter_UnknownsToRandom(*this); }


/****** TTreeExampleSplitter_UnknownsToBranch *****/


TPropertyDescription TTreeExampleSplitter_UnknownsToBranch_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_UnknownsToBranch_components[] = { 0};
TClassDescription TTreeExampleSplitter_UnknownsToBranch::st_classDescription = { "TTreeExampleSplitter_UnknownsToBranch", &typeid(TTreeExampleSplitter_UnknownsToBranch), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_UnknownsToBranch_properties, TTreeExampleSplitter_UnknownsToBranch_components };
TClassDescription const *TTreeExampleSplitter_UnknownsToBranch::classDescription() const { return &TTreeExampleSplitter_UnknownsToBranch::st_classDescription; }
TOrange *TTreeExampleSplitter_UnknownsToBranch::clone() const { return mlnew TTreeExampleSplitter_UnknownsToBranch(*this); }


/****** TTreeExampleSplitter_UnknownsAsBranchSizes *****/


TPropertyDescription TTreeExampleSplitter_UnknownsAsBranchSizes_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_UnknownsAsBranchSizes_components[] = { 0};
TClassDescription TTreeExampleSplitter_UnknownsAsBranchSizes::st_classDescription = { "TTreeExampleSplitter_UnknownsAsBranchSizes", &typeid(TTreeExampleSplitter_UnknownsAsBranchSizes), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_UnknownsAsBranchSizes_properties, TTreeExampleSplitter_UnknownsAsBranchSizes_components };
TClassDescription const *TTreeExampleSplitter_UnknownsAsBranchSizes::classDescription() const { return &TTreeExampleSplitter_UnknownsAsBranchSizes::st_classDescription; }
TOrange *TTreeExampleSplitter_UnknownsAsBranchSizes::clone() const { return mlnew TTreeExampleSplitter_UnknownsAsBranchSizes(*this); }


/****** TTreeExampleSplitter_UnknownsAsSelector *****/


TPropertyDescription TTreeExampleSplitter_UnknownsAsSelector_properties[] = {
  {NULL}
};

size_t const TTreeExampleSplitter_UnknownsAsSelector_components[] = { 0};
TClassDescription TTreeExampleSplitter_UnknownsAsSelector::st_classDescription = { "TTreeExampleSplitter_UnknownsAsSelector", &typeid(TTreeExampleSplitter_UnknownsAsSelector), &TTreeExampleSplitter::st_classDescription, TTreeExampleSplitter_UnknownsAsSelector_properties, TTreeExampleSplitter_UnknownsAsSelector_components };
TClassDescription const *TTreeExampleSplitter_UnknownsAsSelector::classDescription() const { return &TTreeExampleSplitter_UnknownsAsSelector::st_classDescription; }
TOrange *TTreeExampleSplitter_UnknownsAsSelector::clone() const { return mlnew TTreeExampleSplitter_UnknownsAsSelector(*this); }
