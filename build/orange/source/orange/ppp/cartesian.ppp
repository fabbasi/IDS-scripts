 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../cartesian.hpp"
#include <cstddef>



/****** TCartesianClassifier *****/


TPropertyDescription TCartesianClassifier_properties[] = {
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TCartesianClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TCartesianClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TCartesianClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TCartesianClassifier_components[] = { offsetof(TCartesianClassifier, domain), offsetof(TCartesianClassifier, classVar), 0};
TClassDescription TCartesianClassifier::st_classDescription = { "TCartesianClassifier", &typeid(TCartesianClassifier), &TClassifierFD::st_classDescription, TCartesianClassifier_properties, TCartesianClassifier_components };
TClassDescription const *TCartesianClassifier::classDescription() const { return &TCartesianClassifier::st_classDescription; }
TOrange *TCartesianClassifier::clone() const { return mlnew TCartesianClassifier(*this); }
