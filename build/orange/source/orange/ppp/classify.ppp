 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../classify.hpp"
#include <cstddef>



/****** TClassifier *****/


TPropertyDescription TClassifier_properties[] = {
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifier_components[] = { offsetof(TClassifier, classVar), 0};
TClassDescription TClassifier::st_classDescription = { "TClassifier", &typeid(TClassifier), &TOrange::st_classDescription, TClassifier_properties, TClassifier_components };
TClassDescription const *TClassifier::classDescription() const { return &TClassifier::st_classDescription; }
TOrange *TClassifier::clone() const { return mlnew TClassifier(*this); }


/****** TClassifierFD *****/


TPropertyDescription TClassifierFD_properties[] = {
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TClassifierFD, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierFD, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierFD, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierFD_components[] = { offsetof(TClassifierFD, domain), offsetof(TClassifierFD, classVar), 0};
TClassDescription TClassifierFD::st_classDescription = { "TClassifierFD", &typeid(TClassifierFD), &TClassifier::st_classDescription, TClassifierFD_properties, TClassifierFD_components };
TClassDescription const *TClassifierFD::classDescription() const { return &TClassifierFD::st_classDescription; }
TOrange *TClassifierFD::clone() const { return mlnew TClassifierFD(*this); }


/****** TDefaultClassifier *****/


TPropertyDescription TDefaultClassifier_properties[] = {
  {"default_val", "default prediction", &typeid(TValue), NULL, offsetof(TDefaultClassifier, defaultVal), false, false, 0},
  {"default_distribution", "default distribution", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TDefaultClassifier, defaultDistribution), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TDefaultClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TDefaultClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TDefaultClassifier_components[] = { offsetof(TDefaultClassifier, defaultDistribution), offsetof(TDefaultClassifier, classVar), 0};
TClassDescription TDefaultClassifier::st_classDescription = { "TDefaultClassifier", &typeid(TDefaultClassifier), &TClassifier::st_classDescription, TDefaultClassifier_properties, TDefaultClassifier_components };
TClassDescription const *TDefaultClassifier::classDescription() const { return &TDefaultClassifier::st_classDescription; }
TOrange *TDefaultClassifier::clone() const { return mlnew TDefaultClassifier(*this); }


/****** TRandomClassifier *****/


TPropertyDescription TRandomClassifier_properties[] = {
  {"probabilities", "probabilities of predictions", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TRandomClassifier, probabilities), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TRandomClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TRandomClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TRandomClassifier_components[] = { offsetof(TRandomClassifier, probabilities), offsetof(TRandomClassifier, classVar), 0};
TClassDescription TRandomClassifier::st_classDescription = { "TRandomClassifier", &typeid(TRandomClassifier), &TClassifier::st_classDescription, TRandomClassifier_properties, TRandomClassifier_components };
TClassDescription const *TRandomClassifier::classDescription() const { return &TRandomClassifier::st_classDescription; }
TOrange *TRandomClassifier::clone() const { return mlnew TRandomClassifier(*this); }


/****** TEFMDataDescription *****/


TPropertyDescription TEFMDataDescription_properties[] = {
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TEFMDataDescription, domain), true, false, 0},
  {NULL}
};

size_t const TEFMDataDescription_components[] = { offsetof(TEFMDataDescription, domain), offsetof(TEFMDataDescription, domainDistributions), 0};
TClassDescription TEFMDataDescription::st_classDescription = { "TEFMDataDescription", &typeid(TEFMDataDescription), &TOrange::st_classDescription, TEFMDataDescription_properties, TEFMDataDescription_components };
TClassDescription const *TEFMDataDescription::classDescription() const { return &TEFMDataDescription::st_classDescription; }
TOrange *TEFMDataDescription::clone() const { return mlnew TEFMDataDescription(*this); }


/****** TExampleForMissing *****/


TPropertyDescription TExampleForMissing_properties[] = {
  {"data_description", "data description", &typeid(POrange), &TEFMDataDescription::st_classDescription, offsetof(TExampleForMissing, dataDescription), false, false, 0},
  {"domain", "Example's domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TExampleForMissing, domain), true, false, 0},
  {"id", "", &typeid(int), NULL, offsetof(TExampleForMissing, id), false, false, 0},
  {NULL}
};

size_t const TExampleForMissing_components[] = { offsetof(TExampleForMissing, dataDescription), offsetof(TExampleForMissing, domain), 0};
TClassDescription TExampleForMissing::st_classDescription = { "TExampleForMissing", &typeid(TExampleForMissing), &TExample::st_classDescription, TExampleForMissing_properties, TExampleForMissing_components };
TClassDescription const *TExampleForMissing::classDescription() const { return &TExampleForMissing::st_classDescription; }
TOrange *TExampleForMissing::clone() const { return mlnew TExampleForMissing(*this); }
