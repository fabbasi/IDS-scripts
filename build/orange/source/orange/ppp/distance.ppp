 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../distance.hpp"
#include <cstddef>



/****** TExamplesDistance *****/


TPropertyDescription TExamplesDistance_properties[] = {
  {NULL}
};

size_t const TExamplesDistance_components[] = { 0};
TClassDescription TExamplesDistance::st_classDescription = { "TExamplesDistance", &typeid(TExamplesDistance), &TOrange::st_classDescription, TExamplesDistance_properties, TExamplesDistance_components };
TClassDescription const *TExamplesDistance::classDescription() const { return &TExamplesDistance::st_classDescription; }


/****** TExamplesDistanceConstructor *****/


TPropertyDescription TExamplesDistanceConstructor_properties[] = {
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_components[] = { 0};
TClassDescription TExamplesDistanceConstructor::st_classDescription = { "TExamplesDistanceConstructor", &typeid(TExamplesDistanceConstructor), &TOrange::st_classDescription, TExamplesDistanceConstructor_properties, TExamplesDistanceConstructor_components };
TClassDescription const *TExamplesDistanceConstructor::classDescription() const { return &TExamplesDistanceConstructor::st_classDescription; }


/****** TExamplesDistance_Hamming *****/


TPropertyDescription TExamplesDistance_Hamming_properties[] = {
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistance_Hamming, ignoreClass), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_Hamming, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Hamming_components[] = { 0};
TClassDescription TExamplesDistance_Hamming::st_classDescription = { "TExamplesDistance_Hamming", &typeid(TExamplesDistance_Hamming), &TExamplesDistance::st_classDescription, TExamplesDistance_Hamming_properties, TExamplesDistance_Hamming_components };
TClassDescription const *TExamplesDistance_Hamming::classDescription() const { return &TExamplesDistance_Hamming::st_classDescription; }
TOrange *TExamplesDistance_Hamming::clone() const { return mlnew TExamplesDistance_Hamming(*this); }


/****** TExamplesDistanceConstructor_Hamming *****/


TPropertyDescription TExamplesDistanceConstructor_Hamming_properties[] = {
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Hamming, ignoreClass), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Hamming, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Hamming, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Hamming_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Hamming::st_classDescription = { "TExamplesDistanceConstructor_Hamming", &typeid(TExamplesDistanceConstructor_Hamming), &TExamplesDistanceConstructor::st_classDescription, TExamplesDistanceConstructor_Hamming_properties, TExamplesDistanceConstructor_Hamming_components };
TClassDescription const *TExamplesDistanceConstructor_Hamming::classDescription() const { return &TExamplesDistanceConstructor_Hamming::st_classDescription; }
TOrange *TExamplesDistanceConstructor_Hamming::clone() const { return mlnew TExamplesDistanceConstructor_Hamming(*this); }


/****** TExamplesDistance_Normalized *****/


TPropertyDescription TExamplesDistance_Normalized_properties[] = {
  {"normalizers", "normalizing factors for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Normalized, normalizers), false, false, 0},
  {"bases", "lowest values for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Normalized, bases), false, false, 0},
  {"averages", "average values for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Normalized, averages), false, false, 0},
  {"variances", "variations for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Normalized, variances), false, false, 0},
  {"domain_version", "version of domain on which the ranges were computed", &typeid(int), NULL, offsetof(TExamplesDistance_Normalized, domainVersion), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistance_Normalized, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_Normalized, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Normalized_components[] = { offsetof(TExamplesDistance_Normalized, normalizers), offsetof(TExamplesDistance_Normalized, bases), offsetof(TExamplesDistance_Normalized, averages), offsetof(TExamplesDistance_Normalized, variances), 0};
TClassDescription TExamplesDistance_Normalized::st_classDescription = { "TExamplesDistance_Normalized", &typeid(TExamplesDistance_Normalized), &TExamplesDistance::st_classDescription, TExamplesDistance_Normalized_properties, TExamplesDistance_Normalized_components };
TClassDescription const *TExamplesDistance_Normalized::classDescription() const { return &TExamplesDistance_Normalized::st_classDescription; }


/****** TExamplesDistanceConstructor_Normalized *****/


TPropertyDescription TExamplesDistanceConstructor_Normalized_properties[] = {
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Normalized, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Normalized, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Normalized, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Normalized_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Normalized::st_classDescription = { "TExamplesDistanceConstructor_Normalized", &typeid(TExamplesDistanceConstructor_Normalized), &TExamplesDistanceConstructor::st_classDescription, TExamplesDistanceConstructor_Normalized_properties, TExamplesDistanceConstructor_Normalized_components };
TClassDescription const *TExamplesDistanceConstructor_Normalized::classDescription() const { return &TExamplesDistanceConstructor_Normalized::st_classDescription; }


/****** TExamplesDistance_Maximal *****/


TPropertyDescription TExamplesDistance_Maximal_properties[] = {
  {"normalizers", "normalizing factors for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Maximal, normalizers), false, false, 0},
  {"bases", "lowest values for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Maximal, bases), false, false, 0},
  {"averages", "average values for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Maximal, averages), false, false, 0},
  {"variances", "variations for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Maximal, variances), false, false, 0},
  {"domain_version", "version of domain on which the ranges were computed", &typeid(int), NULL, offsetof(TExamplesDistance_Maximal, domainVersion), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistance_Maximal, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_Maximal, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Maximal_components[] = { offsetof(TExamplesDistance_Maximal, normalizers), offsetof(TExamplesDistance_Maximal, bases), offsetof(TExamplesDistance_Maximal, averages), offsetof(TExamplesDistance_Maximal, variances), 0};
TClassDescription TExamplesDistance_Maximal::st_classDescription = { "TExamplesDistance_Maximal", &typeid(TExamplesDistance_Maximal), &TExamplesDistance_Normalized::st_classDescription, TExamplesDistance_Maximal_properties, TExamplesDistance_Maximal_components };
TClassDescription const *TExamplesDistance_Maximal::classDescription() const { return &TExamplesDistance_Maximal::st_classDescription; }
TOrange *TExamplesDistance_Maximal::clone() const { return mlnew TExamplesDistance_Maximal(*this); }


/****** TExamplesDistanceConstructor_Maximal *****/


TPropertyDescription TExamplesDistanceConstructor_Maximal_properties[] = {
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Maximal, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Maximal, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Maximal, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Maximal_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Maximal::st_classDescription = { "TExamplesDistanceConstructor_Maximal", &typeid(TExamplesDistanceConstructor_Maximal), &TExamplesDistanceConstructor_Normalized::st_classDescription, TExamplesDistanceConstructor_Maximal_properties, TExamplesDistanceConstructor_Maximal_components };
TClassDescription const *TExamplesDistanceConstructor_Maximal::classDescription() const { return &TExamplesDistanceConstructor_Maximal::st_classDescription; }
TOrange *TExamplesDistanceConstructor_Maximal::clone() const { return mlnew TExamplesDistanceConstructor_Maximal(*this); }


/****** TExamplesDistance_Manhattan *****/


TPropertyDescription TExamplesDistance_Manhattan_properties[] = {
  {"normalizers", "normalizing factors for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Manhattan, normalizers), false, false, 0},
  {"bases", "lowest values for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Manhattan, bases), false, false, 0},
  {"averages", "average values for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Manhattan, averages), false, false, 0},
  {"variances", "variations for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Manhattan, variances), false, false, 0},
  {"domain_version", "version of domain on which the ranges were computed", &typeid(int), NULL, offsetof(TExamplesDistance_Manhattan, domainVersion), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistance_Manhattan, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_Manhattan, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Manhattan_components[] = { offsetof(TExamplesDistance_Manhattan, normalizers), offsetof(TExamplesDistance_Manhattan, bases), offsetof(TExamplesDistance_Manhattan, averages), offsetof(TExamplesDistance_Manhattan, variances), 0};
TClassDescription TExamplesDistance_Manhattan::st_classDescription = { "TExamplesDistance_Manhattan", &typeid(TExamplesDistance_Manhattan), &TExamplesDistance_Normalized::st_classDescription, TExamplesDistance_Manhattan_properties, TExamplesDistance_Manhattan_components };
TClassDescription const *TExamplesDistance_Manhattan::classDescription() const { return &TExamplesDistance_Manhattan::st_classDescription; }
TOrange *TExamplesDistance_Manhattan::clone() const { return mlnew TExamplesDistance_Manhattan(*this); }


/****** TExamplesDistanceConstructor_Manhattan *****/


TPropertyDescription TExamplesDistanceConstructor_Manhattan_properties[] = {
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Manhattan, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Manhattan, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Manhattan, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Manhattan_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Manhattan::st_classDescription = { "TExamplesDistanceConstructor_Manhattan", &typeid(TExamplesDistanceConstructor_Manhattan), &TExamplesDistanceConstructor_Normalized::st_classDescription, TExamplesDistanceConstructor_Manhattan_properties, TExamplesDistanceConstructor_Manhattan_components };
TClassDescription const *TExamplesDistanceConstructor_Manhattan::classDescription() const { return &TExamplesDistanceConstructor_Manhattan::st_classDescription; }
TOrange *TExamplesDistanceConstructor_Manhattan::clone() const { return mlnew TExamplesDistanceConstructor_Manhattan(*this); }


/****** TExamplesDistance_Euclidean *****/


TPropertyDescription TExamplesDistance_Euclidean_properties[] = {
  {"distributions", "distributions (of discrete attributes only)", &typeid(POrange), &TDomainDistributions::st_classDescription, offsetof(TExamplesDistance_Euclidean, distributions), false, false, 0},
  {"both_special_dist", "distances between discrete attributes if both values are unknown", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Euclidean, bothSpecialDist), false, false, 0},
  {"normalizers", "normalizing factors for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Euclidean, normalizers), false, false, 0},
  {"bases", "lowest values for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Euclidean, bases), false, false, 0},
  {"averages", "average values for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Euclidean, averages), false, false, 0},
  {"variances", "variations for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Euclidean, variances), false, false, 0},
  {"domain_version", "version of domain on which the ranges were computed", &typeid(int), NULL, offsetof(TExamplesDistance_Euclidean, domainVersion), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistance_Euclidean, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_Euclidean, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Euclidean_components[] = { offsetof(TExamplesDistance_Euclidean, distributions), offsetof(TExamplesDistance_Euclidean, bothSpecialDist), offsetof(TExamplesDistance_Euclidean, normalizers), offsetof(TExamplesDistance_Euclidean, bases), offsetof(TExamplesDistance_Euclidean, averages), offsetof(TExamplesDistance_Euclidean, variances), 0};
TClassDescription TExamplesDistance_Euclidean::st_classDescription = { "TExamplesDistance_Euclidean", &typeid(TExamplesDistance_Euclidean), &TExamplesDistance_Normalized::st_classDescription, TExamplesDistance_Euclidean_properties, TExamplesDistance_Euclidean_components };
TClassDescription const *TExamplesDistance_Euclidean::classDescription() const { return &TExamplesDistance_Euclidean::st_classDescription; }
TOrange *TExamplesDistance_Euclidean::clone() const { return mlnew TExamplesDistance_Euclidean(*this); }


/****** TExamplesDistanceConstructor_Euclidean *****/


TPropertyDescription TExamplesDistanceConstructor_Euclidean_properties[] = {
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Euclidean, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Euclidean, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Euclidean, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Euclidean_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Euclidean::st_classDescription = { "TExamplesDistanceConstructor_Euclidean", &typeid(TExamplesDistanceConstructor_Euclidean), &TExamplesDistanceConstructor_Normalized::st_classDescription, TExamplesDistanceConstructor_Euclidean_properties, TExamplesDistanceConstructor_Euclidean_components };
TClassDescription const *TExamplesDistanceConstructor_Euclidean::classDescription() const { return &TExamplesDistanceConstructor_Euclidean::st_classDescription; }
TOrange *TExamplesDistanceConstructor_Euclidean::clone() const { return mlnew TExamplesDistanceConstructor_Euclidean(*this); }


/****** TExamplesDistance_Lp *****/


TPropertyDescription TExamplesDistance_Lp_properties[] = {
  {"p", "p", &typeid(float), NULL, offsetof(TExamplesDistance_Lp, p), true, false, 0},
  {"normalizers", "normalizing factors for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Lp, normalizers), false, false, 0},
  {"bases", "lowest values for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Lp, bases), false, false, 0},
  {"averages", "average values for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Lp, averages), false, false, 0},
  {"variances", "variations for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Lp, variances), false, false, 0},
  {"domain_version", "version of domain on which the ranges were computed", &typeid(int), NULL, offsetof(TExamplesDistance_Lp, domainVersion), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistance_Lp, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_Lp, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Lp_components[] = { offsetof(TExamplesDistance_Lp, normalizers), offsetof(TExamplesDistance_Lp, bases), offsetof(TExamplesDistance_Lp, averages), offsetof(TExamplesDistance_Lp, variances), 0};
TClassDescription TExamplesDistance_Lp::st_classDescription = { "TExamplesDistance_Lp", &typeid(TExamplesDistance_Lp), &TExamplesDistance_Normalized::st_classDescription, TExamplesDistance_Lp_properties, TExamplesDistance_Lp_components };
TClassDescription const *TExamplesDistance_Lp::classDescription() const { return &TExamplesDistance_Lp::st_classDescription; }
TOrange *TExamplesDistance_Lp::clone() const { return mlnew TExamplesDistance_Lp(*this); }


/****** TExamplesDistanceConstructor_Lp *****/


TPropertyDescription TExamplesDistanceConstructor_Lp_properties[] = {
  {"p", "p", &typeid(float), NULL, offsetof(TExamplesDistanceConstructor_Lp, p), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Lp, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Lp, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Lp, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Lp_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Lp::st_classDescription = { "TExamplesDistanceConstructor_Lp", &typeid(TExamplesDistanceConstructor_Lp), &TExamplesDistanceConstructor_Normalized::st_classDescription, TExamplesDistanceConstructor_Lp_properties, TExamplesDistanceConstructor_Lp_components };
TClassDescription const *TExamplesDistanceConstructor_Lp::classDescription() const { return &TExamplesDistanceConstructor_Lp::st_classDescription; }
TOrange *TExamplesDistanceConstructor_Lp::clone() const { return mlnew TExamplesDistanceConstructor_Lp(*this); }


/****** TExamplesDistance_Relief *****/


TPropertyDescription TExamplesDistance_Relief_properties[] = {
  {"distributions", "distributions of attributes' values", &typeid(POrange), &TDomainDistributions::st_classDescription, offsetof(TExamplesDistance_Relief, distributions), false, false, 0},
  {"averages", "average values of attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Relief, averages), false, false, 0},
  {"normalizations", "ranges of attributes' values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Relief, normalizations), false, false, 0},
  {"both_special", "distance if both values of both attributes are undefined", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_Relief, bothSpecial), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_Relief_components[] = { offsetof(TExamplesDistance_Relief, distributions), offsetof(TExamplesDistance_Relief, averages), offsetof(TExamplesDistance_Relief, normalizations), offsetof(TExamplesDistance_Relief, bothSpecial), 0};
TClassDescription TExamplesDistance_Relief::st_classDescription = { "TExamplesDistance_Relief", &typeid(TExamplesDistance_Relief), &TExamplesDistance::st_classDescription, TExamplesDistance_Relief_properties, TExamplesDistance_Relief_components };
TClassDescription const *TExamplesDistance_Relief::classDescription() const { return &TExamplesDistance_Relief::st_classDescription; }
TOrange *TExamplesDistance_Relief::clone() const { return mlnew TExamplesDistance_Relief(*this); }


/****** TExamplesDistanceConstructor_Relief *****/


TPropertyDescription TExamplesDistanceConstructor_Relief_properties[] = {
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_Relief, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_Relief_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_Relief::st_classDescription = { "TExamplesDistanceConstructor_Relief", &typeid(TExamplesDistanceConstructor_Relief), &TExamplesDistanceConstructor::st_classDescription, TExamplesDistanceConstructor_Relief_properties, TExamplesDistanceConstructor_Relief_components };
TClassDescription const *TExamplesDistanceConstructor_Relief::classDescription() const { return &TExamplesDistanceConstructor_Relief::st_classDescription; }
TOrange *TExamplesDistanceConstructor_Relief::clone() const { return mlnew TExamplesDistanceConstructor_Relief(*this); }
