 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../tdidt.hpp"
#include <cstddef>



/****** TTreeNode *****/


TPropertyDescription TTreeNode_properties[] = {
  {"node_classifier", "classifies an example", &typeid(POrange), &TClassifier::st_classDescription, offsetof(TTreeNode, nodeClassifier), false, false, 0},
  {"distribution", "distribution of classes in the node", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TTreeNode, distribution), false, false, 0},
  {"contingency", "domain contingency for examples in the node", &typeid(POrange), &TDomainContingency::st_classDescription, offsetof(TTreeNode, contingency), false, false, 0},
  {"examples", "learning examples (if stored)", &typeid(POrange), &TExampleGenerator::st_classDescription, offsetof(TTreeNode, examples), false, false, 0},
  {"weight_ID", "weightID used to construct this node", &typeid(int), NULL, offsetof(TTreeNode, weightID), false, false, 0},
  {"branch_selector", "classifier that select a branch for an example", &typeid(POrange), &TClassifier::st_classDescription, offsetof(TTreeNode, branchSelector), false, false, 0},
  {"branches", "classifiers presenting the branches", &typeid(POrange), &TTreeNodeList::st_classDescription, offsetof(TTreeNode, branches), false, false, 0},
  {"branch_descriptions", "descriptions of branches", &typeid(POrange), &TStringList::st_classDescription, offsetof(TTreeNode, branchDescriptions), false, false, 0},
  {"branch_sizes", "numbers of examples in branches", &typeid(POrange), &TDiscDistribution::st_classDescription, offsetof(TTreeNode, branchSizes), false, false, 0},
  {NULL}
};

size_t const TTreeNode_components[] = { offsetof(TTreeNode, nodeClassifier), offsetof(TTreeNode, distribution), offsetof(TTreeNode, contingency), offsetof(TTreeNode, examples), offsetof(TTreeNode, branchSelector), offsetof(TTreeNode, branches), offsetof(TTreeNode, branchDescriptions), offsetof(TTreeNode, branchSizes), 0};
TClassDescription TTreeNode::st_classDescription = { "TTreeNode", &typeid(TTreeNode), &TOrange::st_classDescription, TTreeNode_properties, TTreeNode_components };
TClassDescription const *TTreeNode::classDescription() const { return &TTreeNode::st_classDescription; }
TOrange *TTreeNode::clone() const { return mlnew TTreeNode(*this); }


/****** TTreeLearner *****/


TPropertyDescription TTreeLearner_properties[] = {
  {"split", "split criterion", &typeid(POrange), &TTreeSplitConstructor::st_classDescription, offsetof(TTreeLearner, split), false, false, 0},
  {"stop", "stop criterion", &typeid(POrange), &TTreeStopCriteria::st_classDescription, offsetof(TTreeLearner, stop), false, false, 0},
  {"contingency_computer", "computes contingency matrix", &typeid(POrange), &TComputeDomainContingency::st_classDescription, offsetof(TTreeLearner, contingencyComputer), false, false, 0},
  {"node_learner", "node learner", &typeid(POrange), &TLearner::st_classDescription, offsetof(TTreeLearner, nodeLearner), false, false, 0},
  {"example_splitter", "splits examples to branches", &typeid(POrange), &TTreeExampleSplitter::st_classDescription, offsetof(TTreeLearner, exampleSplitter), false, false, 0},
  {"max_depth", "maximal tree depth (0 = root only, -1 = no limit)", &typeid(int), NULL, offsetof(TTreeLearner, maxDepth), false, false, 0},
  {"store_examples", "if true (default: false), learning examples in nodes are stored", &typeid(bool), NULL, offsetof(TTreeLearner, storeExamples), false, false, 0},
  {"store_distributions", "if true (default), class distributions of learning examples in nodes are stored", &typeid(bool), NULL, offsetof(TTreeLearner, storeDistributions), false, false, 0},
  {"store_contingencies", "if true (default), contingency matrices for examples are stored", &typeid(bool), NULL, offsetof(TTreeLearner, storeContingencies), false, false, 0},
  {"store_node_classifier", "if true (default), the internal nodes have classifiers; needed for pruning", &typeid(bool), NULL, offsetof(TTreeLearner, storeNodeClassifier), false, false, 0},
  {"descender", "descends down the tree", &typeid(POrange), &TTreeDescender::st_classDescription, offsetof(TTreeLearner, descender), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TTreeLearner, needs), true, false, 0},
  {NULL}
};

size_t const TTreeLearner_components[] = { offsetof(TTreeLearner, split), offsetof(TTreeLearner, stop), offsetof(TTreeLearner, contingencyComputer), offsetof(TTreeLearner, nodeLearner), offsetof(TTreeLearner, exampleSplitter), offsetof(TTreeLearner, descender), 0};
TClassDescription TTreeLearner::st_classDescription = { "TTreeLearner", &typeid(TTreeLearner), &TLearner::st_classDescription, TTreeLearner_properties, TTreeLearner_components };
TClassDescription const *TTreeLearner::classDescription() const { return &TTreeLearner::st_classDescription; }
TOrange *TTreeLearner::clone() const { return mlnew TTreeLearner(*this); }


/****** TTreeDescender *****/


TPropertyDescription TTreeDescender_properties[] = {
  {NULL}
};

size_t const TTreeDescender_components[] = { 0};
TClassDescription TTreeDescender::st_classDescription = { "TTreeDescender", &typeid(TTreeDescender), &TOrange::st_classDescription, TTreeDescender_properties, TTreeDescender_components };
TClassDescription const *TTreeDescender::classDescription() const { return &TTreeDescender::st_classDescription; }


/****** TTreeDescender_UnknownToNode *****/


TPropertyDescription TTreeDescender_UnknownToNode_properties[] = {
  {NULL}
};

size_t const TTreeDescender_UnknownToNode_components[] = { 0};
TClassDescription TTreeDescender_UnknownToNode::st_classDescription = { "TTreeDescender_UnknownToNode", &typeid(TTreeDescender_UnknownToNode), &TTreeDescender::st_classDescription, TTreeDescender_UnknownToNode_properties, TTreeDescender_UnknownToNode_components };
TClassDescription const *TTreeDescender_UnknownToNode::classDescription() const { return &TTreeDescender_UnknownToNode::st_classDescription; }
TOrange *TTreeDescender_UnknownToNode::clone() const { return mlnew TTreeDescender_UnknownToNode(*this); }


/****** TTreeDescender_UnknownToBranch *****/


TPropertyDescription TTreeDescender_UnknownToBranch_properties[] = {
  {NULL}
};

size_t const TTreeDescender_UnknownToBranch_components[] = { 0};
TClassDescription TTreeDescender_UnknownToBranch::st_classDescription = { "TTreeDescender_UnknownToBranch", &typeid(TTreeDescender_UnknownToBranch), &TTreeDescender::st_classDescription, TTreeDescender_UnknownToBranch_properties, TTreeDescender_UnknownToBranch_components };
TClassDescription const *TTreeDescender_UnknownToBranch::classDescription() const { return &TTreeDescender_UnknownToBranch::st_classDescription; }
TOrange *TTreeDescender_UnknownToBranch::clone() const { return mlnew TTreeDescender_UnknownToBranch(*this); }


/****** TTreeDescender_UnknownToCommonBranch *****/


TPropertyDescription TTreeDescender_UnknownToCommonBranch_properties[] = {
  {NULL}
};

size_t const TTreeDescender_UnknownToCommonBranch_components[] = { 0};
TClassDescription TTreeDescender_UnknownToCommonBranch::st_classDescription = { "TTreeDescender_UnknownToCommonBranch", &typeid(TTreeDescender_UnknownToCommonBranch), &TTreeDescender::st_classDescription, TTreeDescender_UnknownToCommonBranch_properties, TTreeDescender_UnknownToCommonBranch_components };
TClassDescription const *TTreeDescender_UnknownToCommonBranch::classDescription() const { return &TTreeDescender_UnknownToCommonBranch::st_classDescription; }
TOrange *TTreeDescender_UnknownToCommonBranch::clone() const { return mlnew TTreeDescender_UnknownToCommonBranch(*this); }


/****** TTreeDescender_UnknownToCommonSelector *****/


TPropertyDescription TTreeDescender_UnknownToCommonSelector_properties[] = {
  {NULL}
};

size_t const TTreeDescender_UnknownToCommonSelector_components[] = { 0};
TClassDescription TTreeDescender_UnknownToCommonSelector::st_classDescription = { "TTreeDescender_UnknownToCommonSelector", &typeid(TTreeDescender_UnknownToCommonSelector), &TTreeDescender::st_classDescription, TTreeDescender_UnknownToCommonSelector_properties, TTreeDescender_UnknownToCommonSelector_components };
TClassDescription const *TTreeDescender_UnknownToCommonSelector::classDescription() const { return &TTreeDescender_UnknownToCommonSelector::st_classDescription; }
TOrange *TTreeDescender_UnknownToCommonSelector::clone() const { return mlnew TTreeDescender_UnknownToCommonSelector(*this); }


/****** TTreeDescender_UnknownMergeAsBranchSizes *****/


TPropertyDescription TTreeDescender_UnknownMergeAsBranchSizes_properties[] = {
  {NULL}
};

size_t const TTreeDescender_UnknownMergeAsBranchSizes_components[] = { 0};
TClassDescription TTreeDescender_UnknownMergeAsBranchSizes::st_classDescription = { "TTreeDescender_UnknownMergeAsBranchSizes", &typeid(TTreeDescender_UnknownMergeAsBranchSizes), &TTreeDescender::st_classDescription, TTreeDescender_UnknownMergeAsBranchSizes_properties, TTreeDescender_UnknownMergeAsBranchSizes_components };
TClassDescription const *TTreeDescender_UnknownMergeAsBranchSizes::classDescription() const { return &TTreeDescender_UnknownMergeAsBranchSizes::st_classDescription; }
TOrange *TTreeDescender_UnknownMergeAsBranchSizes::clone() const { return mlnew TTreeDescender_UnknownMergeAsBranchSizes(*this); }


/****** TTreeDescender_UnknownMergeAsSelector *****/


TPropertyDescription TTreeDescender_UnknownMergeAsSelector_properties[] = {
  {NULL}
};

size_t const TTreeDescender_UnknownMergeAsSelector_components[] = { 0};
TClassDescription TTreeDescender_UnknownMergeAsSelector::st_classDescription = { "TTreeDescender_UnknownMergeAsSelector", &typeid(TTreeDescender_UnknownMergeAsSelector), &TTreeDescender::st_classDescription, TTreeDescender_UnknownMergeAsSelector_properties, TTreeDescender_UnknownMergeAsSelector_components };
TClassDescription const *TTreeDescender_UnknownMergeAsSelector::classDescription() const { return &TTreeDescender_UnknownMergeAsSelector::st_classDescription; }
TOrange *TTreeDescender_UnknownMergeAsSelector::clone() const { return mlnew TTreeDescender_UnknownMergeAsSelector(*this); }


/****** TTreeClassifier *****/


TPropertyDescription TTreeClassifier_properties[] = {
  {"tree", "decision tree", &typeid(POrange), &TTreeNode::st_classDescription, offsetof(TTreeClassifier, tree), false, false, 0},
  {"descender", "object that descends down the tree", &typeid(POrange), &TTreeDescender::st_classDescription, offsetof(TTreeClassifier, descender), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TTreeClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TTreeClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TTreeClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TTreeClassifier_components[] = { offsetof(TTreeClassifier, tree), offsetof(TTreeClassifier, descender), offsetof(TTreeClassifier, domain), offsetof(TTreeClassifier, classVar), 0};
TClassDescription TTreeClassifier::st_classDescription = { "TTreeClassifier", &typeid(TTreeClassifier), &TClassifierFD::st_classDescription, TTreeClassifier_properties, TTreeClassifier_components };
TClassDescription const *TTreeClassifier::classDescription() const { return &TTreeClassifier::st_classDescription; }
TOrange *TTreeClassifier::clone() const { return mlnew TTreeClassifier(*this); }


/****** TTreePruner *****/


TPropertyDescription TTreePruner_properties[] = {
  {NULL}
};

size_t const TTreePruner_components[] = { 0};
TClassDescription TTreePruner::st_classDescription = { "TTreePruner", &typeid(TTreePruner), &TOrange::st_classDescription, TTreePruner_properties, TTreePruner_components };
TClassDescription const *TTreePruner::classDescription() const { return &TTreePruner::st_classDescription; }


/****** TTreePruner_SameMajority *****/


TPropertyDescription TTreePruner_SameMajority_properties[] = {
  {NULL}
};

size_t const TTreePruner_SameMajority_components[] = { 0};
TClassDescription TTreePruner_SameMajority::st_classDescription = { "TTreePruner_SameMajority", &typeid(TTreePruner_SameMajority), &TTreePruner::st_classDescription, TTreePruner_SameMajority_properties, TTreePruner_SameMajority_components };
TClassDescription const *TTreePruner_SameMajority::classDescription() const { return &TTreePruner_SameMajority::st_classDescription; }
TOrange *TTreePruner_SameMajority::clone() const { return mlnew TTreePruner_SameMajority(*this); }


/****** TTreePruner_m *****/


TPropertyDescription TTreePruner_m_properties[] = {
  {"m", "m for m-estimate", &typeid(float), NULL, offsetof(TTreePruner_m, m), false, false, 0},
  {NULL}
};

size_t const TTreePruner_m_components[] = { 0};
TClassDescription TTreePruner_m::st_classDescription = { "TTreePruner_m", &typeid(TTreePruner_m), &TTreePruner::st_classDescription, TTreePruner_m_properties, TTreePruner_m_components };
TClassDescription const *TTreePruner_m::classDescription() const { return &TTreePruner_m::st_classDescription; }
TOrange *TTreePruner_m::clone() const { return mlnew TTreePruner_m(*this); }
