 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../liblinear_interface.hpp"
#include <cstddef>



/****** TLinearLearner *****/

void *PTLinearLearner_Lossfunction1(void *);

TPropertyDescription TLinearLearner_properties[] = {
  {"solver_type", " Solver type (loss function1)", &typeid(int), NULL, offsetof(TLinearLearner, solver_type), false, false, PTLinearLearner_Lossfunction1},
  {"eps", "Stopping criteria", &typeid(float), NULL, offsetof(TLinearLearner, eps), false, false, 0},
  {"C", "Regularization parameter", &typeid(float), NULL, offsetof(TLinearLearner, C), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TLinearLearner, needs), true, false, 0},
  {NULL}
};

size_t const TLinearLearner_components[] = { 0};
TClassDescription TLinearLearner::st_classDescription = { "TLinearLearner", &typeid(TLinearLearner), &TLearner::st_classDescription, TLinearLearner_properties, TLinearLearner_components };
TClassDescription const *TLinearLearner::classDescription() const { return &TLinearLearner::st_classDescription; }
TOrange *TLinearLearner::clone() const { return mlnew TLinearLearner(*this); }


/****** TLinearClassifier *****/


TPropertyDescription TLinearClassifier_properties[] = {
  {"weights", "Computed feature weights", &typeid(POrange), &TFloatListList::st_classDescription, offsetof(TLinearClassifier, weights), false, false, 0},
  {"examples", "Examples used to train the classifier", &typeid(POrange), &TExampleTable::st_classDescription, offsetof(TLinearClassifier, examples), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TLinearClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TLinearClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TLinearClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TLinearClassifier_components[] = { offsetof(TLinearClassifier, weights), offsetof(TLinearClassifier, examples), offsetof(TLinearClassifier, domain), offsetof(TLinearClassifier, classVar), 0};
TClassDescription TLinearClassifier::st_classDescription = { "TLinearClassifier", &typeid(TLinearClassifier), &TClassifierFD::st_classDescription, TLinearClassifier_properties, TLinearClassifier_components };
TClassDescription const *TLinearClassifier::classDescription() const { return &TLinearClassifier::st_classDescription; }
TOrange *TLinearClassifier::clone() const { return mlnew TLinearClassifier(*this); }
