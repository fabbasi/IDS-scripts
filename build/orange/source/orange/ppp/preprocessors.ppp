 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../preprocessors.hpp"
#include <cstddef>



/****** TPreprocessor *****/


TPropertyDescription TPreprocessor_properties[] = {
  {NULL}
};

size_t const TPreprocessor_components[] = { 0};
TClassDescription TPreprocessor::st_classDescription = { "TPreprocessor", &typeid(TPreprocessor), &TOrange::st_classDescription, TPreprocessor_properties, TPreprocessor_components };
TClassDescription const *TPreprocessor::classDescription() const { return &TPreprocessor::st_classDescription; }


/****** TPreprocessor_ignore *****/


TPropertyDescription TPreprocessor_ignore_properties[] = {
  {"attributes", "tells which attributes to remove", &typeid(POrange), &TVarList::st_classDescription, offsetof(TPreprocessor_ignore, attributes), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_ignore_components[] = { offsetof(TPreprocessor_ignore, attributes), 0};
TClassDescription TPreprocessor_ignore::st_classDescription = { "TPreprocessor_ignore", &typeid(TPreprocessor_ignore), &TPreprocessor::st_classDescription, TPreprocessor_ignore_properties, TPreprocessor_ignore_components };
TClassDescription const *TPreprocessor_ignore::classDescription() const { return &TPreprocessor_ignore::st_classDescription; }
TOrange *TPreprocessor_ignore::clone() const { return mlnew TPreprocessor_ignore(*this); }


/****** TPreprocessor_select *****/


TPropertyDescription TPreprocessor_select_properties[] = {
  {"attributes", "tells which attributes to select", &typeid(POrange), &TVarList::st_classDescription, offsetof(TPreprocessor_select, attributes), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_select_components[] = { offsetof(TPreprocessor_select, attributes), 0};
TClassDescription TPreprocessor_select::st_classDescription = { "TPreprocessor_select", &typeid(TPreprocessor_select), &TPreprocessor::st_classDescription, TPreprocessor_select_properties, TPreprocessor_select_components };
TClassDescription const *TPreprocessor_select::classDescription() const { return &TPreprocessor_select::st_classDescription; }
TOrange *TPreprocessor_select::clone() const { return mlnew TPreprocessor_select(*this); }


/****** TPreprocessor_drop *****/


TPropertyDescription TPreprocessor_drop_properties[] = {
  {"values", "variable-filter pairs", &typeid(POrange), &TVariableFilterMap::st_classDescription, offsetof(TPreprocessor_drop, values), false, false, 0},
  {"conjunction", "decides whether to take conjunction or disjunction of values", &typeid(bool), NULL, offsetof(TPreprocessor_drop, conjunction), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_drop_components[] = { offsetof(TPreprocessor_drop, values), 0};
TClassDescription TPreprocessor_drop::st_classDescription = { "TPreprocessor_drop", &typeid(TPreprocessor_drop), &TPreprocessor::st_classDescription, TPreprocessor_drop_properties, TPreprocessor_drop_components };
TClassDescription const *TPreprocessor_drop::classDescription() const { return &TPreprocessor_drop::st_classDescription; }
TOrange *TPreprocessor_drop::clone() const { return mlnew TPreprocessor_drop(*this); }


/****** TPreprocessor_take *****/


TPropertyDescription TPreprocessor_take_properties[] = {
  {"values", "variable-filter pairs", &typeid(POrange), &TVariableFilterMap::st_classDescription, offsetof(TPreprocessor_take, values), false, false, 0},
  {"conjunction", "decides whether to take conjunction or disjunction of values", &typeid(bool), NULL, offsetof(TPreprocessor_take, conjunction), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_take_components[] = { offsetof(TPreprocessor_take, values), 0};
TClassDescription TPreprocessor_take::st_classDescription = { "TPreprocessor_take", &typeid(TPreprocessor_take), &TPreprocessor::st_classDescription, TPreprocessor_take_properties, TPreprocessor_take_components };
TClassDescription const *TPreprocessor_take::classDescription() const { return &TPreprocessor_take::st_classDescription; }
TOrange *TPreprocessor_take::clone() const { return mlnew TPreprocessor_take(*this); }


/****** TPreprocessor_removeDuplicates *****/


TPropertyDescription TPreprocessor_removeDuplicates_properties[] = {
  {NULL}
};

size_t const TPreprocessor_removeDuplicates_components[] = { 0};
TClassDescription TPreprocessor_removeDuplicates::st_classDescription = { "TPreprocessor_removeDuplicates", &typeid(TPreprocessor_removeDuplicates), &TPreprocessor::st_classDescription, TPreprocessor_removeDuplicates_properties, TPreprocessor_removeDuplicates_components };
TClassDescription const *TPreprocessor_removeDuplicates::classDescription() const { return &TPreprocessor_removeDuplicates::st_classDescription; }
TOrange *TPreprocessor_removeDuplicates::clone() const { return mlnew TPreprocessor_removeDuplicates(*this); }


/****** TPreprocessor_dropMissing *****/


TPropertyDescription TPreprocessor_dropMissing_properties[] = {
  {NULL}
};

size_t const TPreprocessor_dropMissing_components[] = { 0};
TClassDescription TPreprocessor_dropMissing::st_classDescription = { "TPreprocessor_dropMissing", &typeid(TPreprocessor_dropMissing), &TPreprocessor::st_classDescription, TPreprocessor_dropMissing_properties, TPreprocessor_dropMissing_components };
TClassDescription const *TPreprocessor_dropMissing::classDescription() const { return &TPreprocessor_dropMissing::st_classDescription; }
TOrange *TPreprocessor_dropMissing::clone() const { return mlnew TPreprocessor_dropMissing(*this); }


/****** TPreprocessor_takeMissing *****/


TPropertyDescription TPreprocessor_takeMissing_properties[] = {
  {NULL}
};

size_t const TPreprocessor_takeMissing_components[] = { 0};
TClassDescription TPreprocessor_takeMissing::st_classDescription = { "TPreprocessor_takeMissing", &typeid(TPreprocessor_takeMissing), &TPreprocessor::st_classDescription, TPreprocessor_takeMissing_properties, TPreprocessor_takeMissing_components };
TClassDescription const *TPreprocessor_takeMissing::classDescription() const { return &TPreprocessor_takeMissing::st_classDescription; }
TOrange *TPreprocessor_takeMissing::clone() const { return mlnew TPreprocessor_takeMissing(*this); }


/****** TPreprocessor_dropMissingClasses *****/


TPropertyDescription TPreprocessor_dropMissingClasses_properties[] = {
  {NULL}
};

size_t const TPreprocessor_dropMissingClasses_components[] = { 0};
TClassDescription TPreprocessor_dropMissingClasses::st_classDescription = { "TPreprocessor_dropMissingClasses", &typeid(TPreprocessor_dropMissingClasses), &TPreprocessor::st_classDescription, TPreprocessor_dropMissingClasses_properties, TPreprocessor_dropMissingClasses_components };
TClassDescription const *TPreprocessor_dropMissingClasses::classDescription() const { return &TPreprocessor_dropMissingClasses::st_classDescription; }
TOrange *TPreprocessor_dropMissingClasses::clone() const { return mlnew TPreprocessor_dropMissingClasses(*this); }


/****** TPreprocessor_takeMissingClasses *****/


TPropertyDescription TPreprocessor_takeMissingClasses_properties[] = {
  {NULL}
};

size_t const TPreprocessor_takeMissingClasses_components[] = { 0};
TClassDescription TPreprocessor_takeMissingClasses::st_classDescription = { "TPreprocessor_takeMissingClasses", &typeid(TPreprocessor_takeMissingClasses), &TPreprocessor::st_classDescription, TPreprocessor_takeMissingClasses_properties, TPreprocessor_takeMissingClasses_components };
TClassDescription const *TPreprocessor_takeMissingClasses::classDescription() const { return &TPreprocessor_takeMissingClasses::st_classDescription; }
TOrange *TPreprocessor_takeMissingClasses::clone() const { return mlnew TPreprocessor_takeMissingClasses(*this); }


/****** TPreprocessor_shuffle *****/


TPropertyDescription TPreprocessor_shuffle_properties[] = {
  {"attributes", "tells which attributes to shuffle", &typeid(POrange), &TVarList::st_classDescription, offsetof(TPreprocessor_shuffle, attributes), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_shuffle, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_shuffle_components[] = { offsetof(TPreprocessor_shuffle, attributes), offsetof(TPreprocessor_shuffle, randomGenerator), 0};
TClassDescription TPreprocessor_shuffle::st_classDescription = { "TPreprocessor_shuffle", &typeid(TPreprocessor_shuffle), &TPreprocessor::st_classDescription, TPreprocessor_shuffle_properties, TPreprocessor_shuffle_components };
TClassDescription const *TPreprocessor_shuffle::classDescription() const { return &TPreprocessor_shuffle::st_classDescription; }
TOrange *TPreprocessor_shuffle::clone() const { return mlnew TPreprocessor_shuffle(*this); }


/****** TPreprocessor_addNoise *****/


TPropertyDescription TPreprocessor_addNoise_properties[] = {
  {"proportions", "proportion of changed values for individual attributes", &typeid(POrange), &TVariableFloatMap::st_classDescription, offsetof(TPreprocessor_addNoise, proportions), false, false, 0},
  {"default_proportion", "default proportion of changed values (for attributes not specified above)", &typeid(float), NULL, offsetof(TPreprocessor_addNoise, defaultProportion), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addNoise, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addNoise_components[] = { offsetof(TPreprocessor_addNoise, proportions), offsetof(TPreprocessor_addNoise, randomGenerator), 0};
TClassDescription TPreprocessor_addNoise::st_classDescription = { "TPreprocessor_addNoise", &typeid(TPreprocessor_addNoise), &TPreprocessor::st_classDescription, TPreprocessor_addNoise_properties, TPreprocessor_addNoise_components };
TClassDescription const *TPreprocessor_addNoise::classDescription() const { return &TPreprocessor_addNoise::st_classDescription; }
TOrange *TPreprocessor_addNoise::clone() const { return mlnew TPreprocessor_addNoise(*this); }


/****** TPreprocessor_addGaussianNoise *****/


TPropertyDescription TPreprocessor_addGaussianNoise_properties[] = {
  {"deviations", "deviations individual attribute values", &typeid(POrange), &TVariableFloatMap::st_classDescription, offsetof(TPreprocessor_addGaussianNoise, deviations), false, false, 0},
  {"default_deviation", "default deviation", &typeid(float), NULL, offsetof(TPreprocessor_addGaussianNoise, defaultDeviation), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addGaussianNoise, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addGaussianNoise_components[] = { offsetof(TPreprocessor_addGaussianNoise, deviations), offsetof(TPreprocessor_addGaussianNoise, randomGenerator), 0};
TClassDescription TPreprocessor_addGaussianNoise::st_classDescription = { "TPreprocessor_addGaussianNoise", &typeid(TPreprocessor_addGaussianNoise), &TPreprocessor::st_classDescription, TPreprocessor_addGaussianNoise_properties, TPreprocessor_addGaussianNoise_components };
TClassDescription const *TPreprocessor_addGaussianNoise::classDescription() const { return &TPreprocessor_addGaussianNoise::st_classDescription; }
TOrange *TPreprocessor_addGaussianNoise::clone() const { return mlnew TPreprocessor_addGaussianNoise(*this); }


/****** TPreprocessor_addMissing *****/


TPropertyDescription TPreprocessor_addMissing_properties[] = {
  {"proportions", "proportion of removed values for individual values", &typeid(POrange), &TVariableFloatMap::st_classDescription, offsetof(TPreprocessor_addMissing, proportions), false, false, 0},
  {"default_proportion", "default proportion of removed values (for attributes not specified above)", &typeid(float), NULL, offsetof(TPreprocessor_addMissing, defaultProportion), false, false, 0},
  {"special_type", "special value type (1=DC, 2=DK)", &typeid(int), NULL, offsetof(TPreprocessor_addMissing, specialType), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addMissing, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addMissing_components[] = { offsetof(TPreprocessor_addMissing, proportions), offsetof(TPreprocessor_addMissing, randomGenerator), 0};
TClassDescription TPreprocessor_addMissing::st_classDescription = { "TPreprocessor_addMissing", &typeid(TPreprocessor_addMissing), &TPreprocessor::st_classDescription, TPreprocessor_addMissing_properties, TPreprocessor_addMissing_components };
TClassDescription const *TPreprocessor_addMissing::classDescription() const { return &TPreprocessor_addMissing::st_classDescription; }
TOrange *TPreprocessor_addMissing::clone() const { return mlnew TPreprocessor_addMissing(*this); }


/****** TPreprocessor_addMissingClasses *****/


TPropertyDescription TPreprocessor_addMissingClasses_properties[] = {
  {"proportion", "proportion of removed class values", &typeid(float), NULL, offsetof(TPreprocessor_addMissingClasses, proportion), false, false, 0},
  {"special_type", "special value type (1=DC, 2=DK)", &typeid(int), NULL, offsetof(TPreprocessor_addMissingClasses, specialType), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addMissingClasses, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addMissingClasses_components[] = { offsetof(TPreprocessor_addMissingClasses, randomGenerator), 0};
TClassDescription TPreprocessor_addMissingClasses::st_classDescription = { "TPreprocessor_addMissingClasses", &typeid(TPreprocessor_addMissingClasses), &TPreprocessor::st_classDescription, TPreprocessor_addMissingClasses_properties, TPreprocessor_addMissingClasses_components };
TClassDescription const *TPreprocessor_addMissingClasses::classDescription() const { return &TPreprocessor_addMissingClasses::st_classDescription; }
TOrange *TPreprocessor_addMissingClasses::clone() const { return mlnew TPreprocessor_addMissingClasses(*this); }


/****** TPreprocessor_addClassNoise *****/


TPropertyDescription TPreprocessor_addClassNoise_properties[] = {
  {"proportion", "proportion of changed class values", &typeid(float), NULL, offsetof(TPreprocessor_addClassNoise, proportion), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addClassNoise, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addClassNoise_components[] = { offsetof(TPreprocessor_addClassNoise, randomGenerator), 0};
TClassDescription TPreprocessor_addClassNoise::st_classDescription = { "TPreprocessor_addClassNoise", &typeid(TPreprocessor_addClassNoise), &TPreprocessor::st_classDescription, TPreprocessor_addClassNoise_properties, TPreprocessor_addClassNoise_components };
TClassDescription const *TPreprocessor_addClassNoise::classDescription() const { return &TPreprocessor_addClassNoise::st_classDescription; }
TOrange *TPreprocessor_addClassNoise::clone() const { return mlnew TPreprocessor_addClassNoise(*this); }


/****** TPreprocessor_addGaussianClassNoise *****/


TPropertyDescription TPreprocessor_addGaussianClassNoise_properties[] = {
  {"deviation", "class deviation", &typeid(float), NULL, offsetof(TPreprocessor_addGaussianClassNoise, deviation), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addGaussianClassNoise, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addGaussianClassNoise_components[] = { offsetof(TPreprocessor_addGaussianClassNoise, randomGenerator), 0};
TClassDescription TPreprocessor_addGaussianClassNoise::st_classDescription = { "TPreprocessor_addGaussianClassNoise", &typeid(TPreprocessor_addGaussianClassNoise), &TPreprocessor::st_classDescription, TPreprocessor_addGaussianClassNoise_properties, TPreprocessor_addGaussianClassNoise_components };
TClassDescription const *TPreprocessor_addGaussianClassNoise::classDescription() const { return &TPreprocessor_addGaussianClassNoise::st_classDescription; }
TOrange *TPreprocessor_addGaussianClassNoise::clone() const { return mlnew TPreprocessor_addGaussianClassNoise(*this); }


/****** TPreprocessor_addClassWeight *****/


TPropertyDescription TPreprocessor_addClassWeight_properties[] = {
  {"class_weights", "weights of examples of particular classes", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TPreprocessor_addClassWeight, classWeights), false, false, 0},
  {"equalize", "reweight examples to equalize class proportions", &typeid(bool), NULL, offsetof(TPreprocessor_addClassWeight, equalize), false, false, 0},
  {"random_generator", "random number generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPreprocessor_addClassWeight, randomGenerator), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addClassWeight_components[] = { offsetof(TPreprocessor_addClassWeight, classWeights), offsetof(TPreprocessor_addClassWeight, randomGenerator), 0};
TClassDescription TPreprocessor_addClassWeight::st_classDescription = { "TPreprocessor_addClassWeight", &typeid(TPreprocessor_addClassWeight), &TPreprocessor::st_classDescription, TPreprocessor_addClassWeight_properties, TPreprocessor_addClassWeight_components };
TClassDescription const *TPreprocessor_addClassWeight::classDescription() const { return &TPreprocessor_addClassWeight::st_classDescription; }
TOrange *TPreprocessor_addClassWeight::clone() const { return mlnew TPreprocessor_addClassWeight(*this); }


/****** TPreprocessor_addCensorWeight *****/

void *PTPreprocessor_addCensorWeight_Method(void *);

TPropertyDescription TPreprocessor_addCensorWeight_properties[] = {
  {"outcome_var", "outcome variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TPreprocessor_addCensorWeight, outcomeVar), false, false, 0},
  {"time_var", "time variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TPreprocessor_addCensorWeight, timeVar), false, false, 0},
  {"event_value", "event (fail) value", &typeid(TValue), NULL, offsetof(TPreprocessor_addCensorWeight, eventValue), false, false, 0},
  {"method", " weighting method", &typeid(int), NULL, offsetof(TPreprocessor_addCensorWeight, method), false, false, PTPreprocessor_addCensorWeight_Method},
  {"max_time", "maximal time", &typeid(float), NULL, offsetof(TPreprocessor_addCensorWeight, maxTime), false, false, 0},
  {"add_complementary", "if true (default is false), complementary examples are added for censored examples", &typeid(bool), NULL, offsetof(TPreprocessor_addCensorWeight, addComplementary), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_addCensorWeight_components[] = { offsetof(TPreprocessor_addCensorWeight, outcomeVar), offsetof(TPreprocessor_addCensorWeight, timeVar), 0};
TClassDescription TPreprocessor_addCensorWeight::st_classDescription = { "TPreprocessor_addCensorWeight", &typeid(TPreprocessor_addCensorWeight), &TPreprocessor::st_classDescription, TPreprocessor_addCensorWeight_properties, TPreprocessor_addCensorWeight_components };
TClassDescription const *TPreprocessor_addCensorWeight::classDescription() const { return &TPreprocessor_addCensorWeight::st_classDescription; }
TOrange *TPreprocessor_addCensorWeight::clone() const { return mlnew TPreprocessor_addCensorWeight(*this); }


/****** TPreprocessor_discretize *****/


TPropertyDescription TPreprocessor_discretize_properties[] = {
  {"attributes", "attributes to be discretized (all, if not defined or empty)", &typeid(POrange), &TVarList::st_classDescription, offsetof(TPreprocessor_discretize, attributes), false, false, 0},
  {"discretize_class", "also discretize the class attribute (default: false)", &typeid(bool), NULL, offsetof(TPreprocessor_discretize, discretizeClass), false, false, 0},
  {"method", "discretization method", &typeid(POrange), &TDiscretization::st_classDescription, offsetof(TPreprocessor_discretize, method), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_discretize_components[] = { offsetof(TPreprocessor_discretize, attributes), offsetof(TPreprocessor_discretize, method), 0};
TClassDescription TPreprocessor_discretize::st_classDescription = { "TPreprocessor_discretize", &typeid(TPreprocessor_discretize), &TPreprocessor::st_classDescription, TPreprocessor_discretize_properties, TPreprocessor_discretize_components };
TClassDescription const *TPreprocessor_discretize::classDescription() const { return &TPreprocessor_discretize::st_classDescription; }
TOrange *TPreprocessor_discretize::clone() const { return mlnew TPreprocessor_discretize(*this); }


/****** TImputeClassifier *****/


TPropertyDescription TImputeClassifier_properties[] = {
  {"classifier_from_var", "ClassifierFromVar that is used to retrieve defined values", &typeid(POrange), &TClassifierFromVar::st_classDescription, offsetof(TImputeClassifier, classifierFromVar), false, false, 0},
  {"imputer", "classifier that is used to determine the missing values ", &typeid(POrange), &TClassifier::st_classDescription, offsetof(TImputeClassifier, imputer), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TImputeClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TImputeClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TImputeClassifier_components[] = { offsetof(TImputeClassifier, classifierFromVar), offsetof(TImputeClassifier, imputer), offsetof(TImputeClassifier, classVar), 0};
TClassDescription TImputeClassifier::st_classDescription = { "TImputeClassifier", &typeid(TImputeClassifier), &TClassifier::st_classDescription, TImputeClassifier_properties, TImputeClassifier_components };
TClassDescription const *TImputeClassifier::classDescription() const { return &TImputeClassifier::st_classDescription; }
TOrange *TImputeClassifier::clone() const { return mlnew TImputeClassifier(*this); }


/****** TPreprocessor_imputeByLearner *****/


TPropertyDescription TPreprocessor_imputeByLearner_properties[] = {
  {"learner", "learner used for inducing a model for imputation", &typeid(POrange), &TLearner::st_classDescription, offsetof(TPreprocessor_imputeByLearner, learner), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_imputeByLearner_components[] = { offsetof(TPreprocessor_imputeByLearner, learner), 0};
TClassDescription TPreprocessor_imputeByLearner::st_classDescription = { "TPreprocessor_imputeByLearner", &typeid(TPreprocessor_imputeByLearner), &TPreprocessor::st_classDescription, TPreprocessor_imputeByLearner_properties, TPreprocessor_imputeByLearner_components };
TClassDescription const *TPreprocessor_imputeByLearner::classDescription() const { return &TPreprocessor_imputeByLearner::st_classDescription; }
TOrange *TPreprocessor_imputeByLearner::clone() const { return mlnew TPreprocessor_imputeByLearner(*this); }


/****** TPreprocessor_filter *****/


TPropertyDescription TPreprocessor_filter_properties[] = {
  {"filter", "filter", &typeid(POrange), &TFilter::st_classDescription, offsetof(TPreprocessor_filter, filter), false, false, 0},
  {NULL}
};

size_t const TPreprocessor_filter_components[] = { offsetof(TPreprocessor_filter, filter), 0};
TClassDescription TPreprocessor_filter::st_classDescription = { "TPreprocessor_filter", &typeid(TPreprocessor_filter), &TPreprocessor::st_classDescription, TPreprocessor_filter_properties, TPreprocessor_filter_components };
TClassDescription const *TPreprocessor_filter::classDescription() const { return &TPreprocessor_filter::st_classDescription; }
TOrange *TPreprocessor_filter::clone() const { return mlnew TPreprocessor_filter(*this); }


/****** TTableAverager *****/


TPropertyDescription TTableAverager_properties[] = {
  {NULL}
};

size_t const TTableAverager_components[] = { 0};
TClassDescription TTableAverager::st_classDescription = { "TTableAverager", &typeid(TTableAverager), &TOrange::st_classDescription, TTableAverager_properties, TTableAverager_components };
TClassDescription const *TTableAverager::classDescription() const { return &TTableAverager::st_classDescription; }
TOrange *TTableAverager::clone() const { return mlnew TTableAverager(*this); }
