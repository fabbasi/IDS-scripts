 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../distance_dtw.hpp"
#include <cstddef>



/****** TExamplesDistance_DTW *****/

void *PTExamplesDistance_DTW_DistanceType(void *);

TPropertyDescription TExamplesDistance_DTW_properties[] = {
  {"dtw_distance", " distance measure between individual attributes (default: square of difference)", &typeid(int), NULL, offsetof(TExamplesDistance_DTW, dtwDistance), false, false, PTExamplesDistance_DTW_DistanceType},
  {"normalizers", "normalizing factors for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_DTW, normalizers), false, false, 0},
  {"bases", "lowest values for attributes", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_DTW, bases), false, false, 0},
  {"averages", "average values for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_DTW, averages), false, false, 0},
  {"variances", "variations for continuous attribute values", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TExamplesDistance_DTW, variances), false, false, 0},
  {"domain_version", "version of domain on which the ranges were computed", &typeid(int), NULL, offsetof(TExamplesDistance_DTW, domainVersion), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistance_DTW, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistance_DTW, ignoreUnknowns), false, false, 0},
  {NULL}
};

size_t const TExamplesDistance_DTW_components[] = { offsetof(TExamplesDistance_DTW, normalizers), offsetof(TExamplesDistance_DTW, bases), offsetof(TExamplesDistance_DTW, averages), offsetof(TExamplesDistance_DTW, variances), 0};
TClassDescription TExamplesDistance_DTW::st_classDescription = { "TExamplesDistance_DTW", &typeid(TExamplesDistance_DTW), &TExamplesDistance_Normalized::st_classDescription, TExamplesDistance_DTW_properties, TExamplesDistance_DTW_components };
TClassDescription const *TExamplesDistance_DTW::classDescription() const { return &TExamplesDistance_DTW::st_classDescription; }
TOrange *TExamplesDistance_DTW::clone() const { return mlnew TExamplesDistance_DTW(*this); }


/****** TExamplesDistanceConstructor_DTW *****/


TPropertyDescription TExamplesDistanceConstructor_DTW_properties[] = {
  {"dtw_distance", "distance measure between individual attributes (default: square of difference)", &typeid(int), NULL, offsetof(TExamplesDistanceConstructor_DTW, dtwDistance), false, false, 0},
  {"normalize", "tells whether to normalize distances between attributes", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_DTW, normalize), false, false, 0},
  {"ignore_unknowns", "if true (default: false) unknown values are ignored in computation", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_DTW, ignoreUnknowns), false, false, 0},
  {"ignore_class", "if true (default), class value is ignored when computing distances", &typeid(bool), NULL, offsetof(TExamplesDistanceConstructor_DTW, ignoreClass), false, false, 0},
  {NULL}
};

size_t const TExamplesDistanceConstructor_DTW_components[] = { 0};
TClassDescription TExamplesDistanceConstructor_DTW::st_classDescription = { "TExamplesDistanceConstructor_DTW", &typeid(TExamplesDistanceConstructor_DTW), &TExamplesDistanceConstructor_Normalized::st_classDescription, TExamplesDistanceConstructor_DTW_properties, TExamplesDistanceConstructor_DTW_components };
TClassDescription const *TExamplesDistanceConstructor_DTW::classDescription() const { return &TExamplesDistanceConstructor_DTW::st_classDescription; }
TOrange *TExamplesDistanceConstructor_DTW::clone() const { return mlnew TExamplesDistanceConstructor_DTW(*this); }
