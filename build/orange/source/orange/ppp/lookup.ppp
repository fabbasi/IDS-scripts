 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../lookup.hpp"
#include <cstddef>



/****** TClassifierByLookupTable *****/


TPropertyDescription TClassifierByLookupTable_properties[] = {
  {"lookup_table", "a list of class values, one for each attribute value", &typeid(POrange), &TValueList::st_classDescription, offsetof(TClassifierByLookupTable, lookupTable), true, false, 0},
  {"distributions", "a list of class distributions, one for each attribute value", &typeid(POrange), &TDistributionList::st_classDescription, offsetof(TClassifierByLookupTable, distributions), true, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierByLookupTable, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierByLookupTable_components[] = { offsetof(TClassifierByLookupTable, lookupTable), offsetof(TClassifierByLookupTable, distributions), offsetof(TClassifierByLookupTable, classVar), 0};
TClassDescription TClassifierByLookupTable::st_classDescription = { "TClassifierByLookupTable", &typeid(TClassifierByLookupTable), &TClassifier::st_classDescription, TClassifierByLookupTable_properties, TClassifierByLookupTable_components };
TClassDescription const *TClassifierByLookupTable::classDescription() const { return &TClassifierByLookupTable::st_classDescription; }


/****** TClassifierByLookupTable1 *****/


TPropertyDescription TClassifierByLookupTable1_properties[] = {
  {"variable1", " attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable1, variable1), true, false, 0},
  {"variable", " attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable1, variable1), true, false, 0},
  {"lookup_table", "a list of class values, one for each attribute value", &typeid(POrange), &TValueList::st_classDescription, offsetof(TClassifierByLookupTable1, lookupTable), true, false, 0},
  {"distributions", "a list of class distributions, one for each attribute value", &typeid(POrange), &TDistributionList::st_classDescription, offsetof(TClassifierByLookupTable1, distributions), true, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable1, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierByLookupTable1, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierByLookupTable1_components[] = { offsetof(TClassifierByLookupTable1, variable1), offsetof(TClassifierByLookupTable1, lookupTable), offsetof(TClassifierByLookupTable1, distributions), offsetof(TClassifierByLookupTable1, classVar), 0};
TClassDescription TClassifierByLookupTable1::st_classDescription = { "TClassifierByLookupTable1", &typeid(TClassifierByLookupTable1), &TClassifierByLookupTable::st_classDescription, TClassifierByLookupTable1_properties, TClassifierByLookupTable1_components };
TClassDescription const *TClassifierByLookupTable1::classDescription() const { return &TClassifierByLookupTable1::st_classDescription; }
TOrange *TClassifierByLookupTable1::clone() const { return mlnew TClassifierByLookupTable1(*this); }


/****** TClassifierByLookupTable2 *****/


TPropertyDescription TClassifierByLookupTable2_properties[] = {
  {"variable1", "the first attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable2, variable1), true, false, 0},
  {"variable2", "the second attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable2, variable2), true, false, 0},
  {"no_of_values1", "number of values of the first attribute", &typeid(int), NULL, offsetof(TClassifierByLookupTable2, noOfValues1), true, false, 0},
  {"no_of_values2", "number of values of the second attribute", &typeid(int), NULL, offsetof(TClassifierByLookupTable2, noOfValues2), true, false, 0},
  {"data_description", "data description", &typeid(POrange), &TEFMDataDescription::st_classDescription, offsetof(TClassifierByLookupTable2, dataDescription), false, false, 0},
  {"lookup_table", "a list of class values, one for each attribute value", &typeid(POrange), &TValueList::st_classDescription, offsetof(TClassifierByLookupTable2, lookupTable), true, false, 0},
  {"distributions", "a list of class distributions, one for each attribute value", &typeid(POrange), &TDistributionList::st_classDescription, offsetof(TClassifierByLookupTable2, distributions), true, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable2, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierByLookupTable2, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierByLookupTable2_components[] = { offsetof(TClassifierByLookupTable2, variable1), offsetof(TClassifierByLookupTable2, variable2), offsetof(TClassifierByLookupTable2, dataDescription), offsetof(TClassifierByLookupTable2, lookupTable), offsetof(TClassifierByLookupTable2, distributions), offsetof(TClassifierByLookupTable2, classVar), 0};
TClassDescription TClassifierByLookupTable2::st_classDescription = { "TClassifierByLookupTable2", &typeid(TClassifierByLookupTable2), &TClassifierByLookupTable::st_classDescription, TClassifierByLookupTable2_properties, TClassifierByLookupTable2_components };
TClassDescription const *TClassifierByLookupTable2::classDescription() const { return &TClassifierByLookupTable2::st_classDescription; }
TOrange *TClassifierByLookupTable2::clone() const { return mlnew TClassifierByLookupTable2(*this); }


/****** TClassifierByLookupTable3 *****/


TPropertyDescription TClassifierByLookupTable3_properties[] = {
  {"variable1", "the first attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable3, variable1), true, false, 0},
  {"variable2", "the second attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable3, variable2), true, false, 0},
  {"variable3", "the third attribute used for classification", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable3, variable3), true, false, 0},
  {"no_of_values1", "number of values of the first attribute", &typeid(int), NULL, offsetof(TClassifierByLookupTable3, noOfValues1), true, false, 0},
  {"no_of_values2", "number of values of the second attribute", &typeid(int), NULL, offsetof(TClassifierByLookupTable3, noOfValues2), true, false, 0},
  {"no_of_values3", "number of values of the third attribute", &typeid(int), NULL, offsetof(TClassifierByLookupTable3, noOfValues3), true, false, 0},
  {"data_description", "data description", &typeid(POrange), &TEFMDataDescription::st_classDescription, offsetof(TClassifierByLookupTable3, dataDescription), false, false, 0},
  {"lookup_table", "a list of class values, one for each attribute value", &typeid(POrange), &TValueList::st_classDescription, offsetof(TClassifierByLookupTable3, lookupTable), true, false, 0},
  {"distributions", "a list of class distributions, one for each attribute value", &typeid(POrange), &TDistributionList::st_classDescription, offsetof(TClassifierByLookupTable3, distributions), true, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTable3, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierByLookupTable3, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierByLookupTable3_components[] = { offsetof(TClassifierByLookupTable3, variable1), offsetof(TClassifierByLookupTable3, variable2), offsetof(TClassifierByLookupTable3, variable3), offsetof(TClassifierByLookupTable3, dataDescription), offsetof(TClassifierByLookupTable3, lookupTable), offsetof(TClassifierByLookupTable3, distributions), offsetof(TClassifierByLookupTable3, classVar), 0};
TClassDescription TClassifierByLookupTable3::st_classDescription = { "TClassifierByLookupTable3", &typeid(TClassifierByLookupTable3), &TClassifierByLookupTable::st_classDescription, TClassifierByLookupTable3_properties, TClassifierByLookupTable3_components };
TClassDescription const *TClassifierByLookupTable3::classDescription() const { return &TClassifierByLookupTable3::st_classDescription; }
TOrange *TClassifierByLookupTable3::clone() const { return mlnew TClassifierByLookupTable3(*this); }


/****** TClassifierByLookupTableN *****/


TPropertyDescription TClassifierByLookupTableN_properties[] = {
  {"variables", "attributes", &typeid(POrange), &TVarList::st_classDescription, offsetof(TClassifierByLookupTableN, variables), true, false, 0},
  {"no_of_values", "number of values for each attribute", &typeid(POrange), &TIntList::st_classDescription, offsetof(TClassifierByLookupTableN, noOfValues), true, false, 0},
  {"data_description", "data description", &typeid(POrange), &TEFMDataDescription::st_classDescription, offsetof(TClassifierByLookupTableN, dataDescription), false, false, 0},
  {"lookup_table", "a list of class values, one for each attribute value", &typeid(POrange), &TValueList::st_classDescription, offsetof(TClassifierByLookupTableN, lookupTable), true, false, 0},
  {"distributions", "a list of class distributions, one for each attribute value", &typeid(POrange), &TDistributionList::st_classDescription, offsetof(TClassifierByLookupTableN, distributions), true, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByLookupTableN, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierByLookupTableN, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierByLookupTableN_components[] = { offsetof(TClassifierByLookupTableN, variables), offsetof(TClassifierByLookupTableN, noOfValues), offsetof(TClassifierByLookupTableN, dataDescription), offsetof(TClassifierByLookupTableN, lookupTable), offsetof(TClassifierByLookupTableN, distributions), offsetof(TClassifierByLookupTableN, classVar), 0};
TClassDescription TClassifierByLookupTableN::st_classDescription = { "TClassifierByLookupTableN", &typeid(TClassifierByLookupTableN), &TClassifierByLookupTable::st_classDescription, TClassifierByLookupTableN_properties, TClassifierByLookupTableN_components };
TClassDescription const *TClassifierByLookupTableN::classDescription() const { return &TClassifierByLookupTableN::st_classDescription; }
TOrange *TClassifierByLookupTableN::clone() const { return mlnew TClassifierByLookupTableN(*this); }


/****** TLookupLearner *****/


TPropertyDescription TLookupLearner_properties[] = {
  {"learner_for_unknown", "a learner for classifying cases not found in the table", &typeid(POrange), &TLearner::st_classDescription, offsetof(TLookupLearner, learnerForUnknown), false, false, 0},
  {"allow_fast_lookups", "if true, it constructs LookupClassifiers for <=3 attributes", &typeid(bool), NULL, offsetof(TLookupLearner, allowFastLookups), false, false, 0},
  {"unknowns_handling", "0 omit examples with unknowns, 1 distribute them, 2 keep them in table", &typeid(int), NULL, offsetof(TLookupLearner, unknownsHandling), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TLookupLearner, needs), true, false, 0},
  {NULL}
};

size_t const TLookupLearner_components[] = { offsetof(TLookupLearner, learnerForUnknown), 0};
TClassDescription TLookupLearner::st_classDescription = { "TLookupLearner", &typeid(TLookupLearner), &TLearner::st_classDescription, TLookupLearner_properties, TLookupLearner_components };
TClassDescription const *TLookupLearner::classDescription() const { return &TLookupLearner::st_classDescription; }
TOrange *TLookupLearner::clone() const { return mlnew TLookupLearner(*this); }


/****** TClassifierByExampleTable *****/


TPropertyDescription TClassifierByExampleTable_properties[] = {
  {"sorted_examples", "a table of examples", &typeid(POrange), &TExampleTable::st_classDescription, offsetof(TClassifierByExampleTable, sortedExamples), false, false, 0},
  {"contains_unknowns", "if true, the table contains unknown values", &typeid(bool), NULL, offsetof(TClassifierByExampleTable, containsUnknowns), false, false, 0},
  {"classifier_for_unknown", "a classifier for unknown cases", &typeid(POrange), &TClassifier::st_classDescription, offsetof(TClassifierByExampleTable, classifierForUnknown), false, false, 0},
  {"data_description", "data description", &typeid(POrange), &TEFMDataDescription::st_classDescription, offsetof(TClassifierByExampleTable, dataDescription), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TClassifierByExampleTable, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierByExampleTable, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierByExampleTable, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierByExampleTable_components[] = { offsetof(TClassifierByExampleTable, sortedExamples), offsetof(TClassifierByExampleTable, classifierForUnknown), offsetof(TClassifierByExampleTable, dataDescription), offsetof(TClassifierByExampleTable, domain), offsetof(TClassifierByExampleTable, classVar), 0};
TClassDescription TClassifierByExampleTable::st_classDescription = { "TClassifierByExampleTable", &typeid(TClassifierByExampleTable), &TClassifierFD::st_classDescription, TClassifierByExampleTable_properties, TClassifierByExampleTable_components };
TClassDescription const *TClassifierByExampleTable::classDescription() const { return &TClassifierByExampleTable::st_classDescription; }
TOrange *TClassifierByExampleTable::clone() const { return mlnew TClassifierByExampleTable(*this); }
