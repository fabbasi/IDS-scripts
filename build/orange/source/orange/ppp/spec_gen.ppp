 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../spec_gen.hpp"
#include <cstddef>



/****** TAdapterGenerator *****/


TPropertyDescription TAdapterGenerator_properties[] = {
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TAdapterGenerator, domain), false, false, 0},
  {"version", "unique version identifier", &typeid(int), NULL, offsetof(TAdapterGenerator, version), true, false, 0},
  {NULL}
};

size_t const TAdapterGenerator_components[] = { offsetof(TAdapterGenerator, domain), 0};
TClassDescription TAdapterGenerator::st_classDescription = { "TAdapterGenerator", &typeid(TAdapterGenerator), &TExampleGenerator::st_classDescription, TAdapterGenerator_properties, TAdapterGenerator_components };
TClassDescription const *TAdapterGenerator::classDescription() const { return &TAdapterGenerator::st_classDescription; }
TOrange *TAdapterGenerator::clone() const { return mlnew TAdapterGenerator(*this); }


/****** TFilteredGenerator *****/


TPropertyDescription TFilteredGenerator_properties[] = {
  {"filter", "decides which examples are skipped", &typeid(POrange), &TFilter::st_classDescription, offsetof(TFilteredGenerator, filter), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilteredGenerator, domain), false, false, 0},
  {"version", "unique version identifier", &typeid(int), NULL, offsetof(TFilteredGenerator, version), true, false, 0},
  {NULL}
};

size_t const TFilteredGenerator_components[] = { offsetof(TFilteredGenerator, filter), offsetof(TFilteredGenerator, domain), 0};
TClassDescription TFilteredGenerator::st_classDescription = { "TFilteredGenerator", &typeid(TFilteredGenerator), &TAdapterGenerator::st_classDescription, TFilteredGenerator_properties, TFilteredGenerator_components };
TClassDescription const *TFilteredGenerator::classDescription() const { return &TFilteredGenerator::st_classDescription; }
TOrange *TFilteredGenerator::clone() const { return mlnew TFilteredGenerator(*this); }


/****** TChangeExampleGenerator *****/


TPropertyDescription TChangeExampleGenerator_properties[] = {
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TChangeExampleGenerator, domain), false, false, 0},
  {"version", "unique version identifier", &typeid(int), NULL, offsetof(TChangeExampleGenerator, version), true, false, 0},
  {NULL}
};

size_t const TChangeExampleGenerator_components[] = { offsetof(TChangeExampleGenerator, domain), 0};
TClassDescription TChangeExampleGenerator::st_classDescription = { "TChangeExampleGenerator", &typeid(TChangeExampleGenerator), &TAdapterGenerator::st_classDescription, TChangeExampleGenerator_properties, TChangeExampleGenerator_components };
TClassDescription const *TChangeExampleGenerator::classDescription() const { return &TChangeExampleGenerator::st_classDescription; }


/****** TMissValuesGenerator *****/


TPropertyDescription TMissValuesGenerator_properties[] = {
  {"replace_probabilities", "probabilities for replacing attributes' values", &typeid(POrange), &TIntFloatList::st_classDescription, offsetof(TMissValuesGenerator, replaceProbabilities), false, false, 0},
  {"random_generator", "random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TMissValuesGenerator, randomGenerator), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TMissValuesGenerator, domain), false, false, 0},
  {"version", "unique version identifier", &typeid(int), NULL, offsetof(TMissValuesGenerator, version), true, false, 0},
  {NULL}
};

size_t const TMissValuesGenerator_components[] = { offsetof(TMissValuesGenerator, replaceProbabilities), offsetof(TMissValuesGenerator, randomGenerator), offsetof(TMissValuesGenerator, domain), 0};
TClassDescription TMissValuesGenerator::st_classDescription = { "TMissValuesGenerator", &typeid(TMissValuesGenerator), &TChangeExampleGenerator::st_classDescription, TMissValuesGenerator_properties, TMissValuesGenerator_components };
TClassDescription const *TMissValuesGenerator::classDescription() const { return &TMissValuesGenerator::st_classDescription; }
TOrange *TMissValuesGenerator::clone() const { return mlnew TMissValuesGenerator(*this); }


/****** TNoiseValuesGenerator *****/


TPropertyDescription TNoiseValuesGenerator_properties[] = {
  {"replace_probabilities", "probabilities for replacing attributes' values", &typeid(POrange), &TIntFloatList::st_classDescription, offsetof(TNoiseValuesGenerator, replaceProbabilities), false, false, 0},
  {"random_generator", "random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TNoiseValuesGenerator, randomGenerator), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TNoiseValuesGenerator, domain), false, false, 0},
  {"version", "unique version identifier", &typeid(int), NULL, offsetof(TNoiseValuesGenerator, version), true, false, 0},
  {NULL}
};

size_t const TNoiseValuesGenerator_components[] = { offsetof(TNoiseValuesGenerator, replaceProbabilities), offsetof(TNoiseValuesGenerator, randomGenerator), offsetof(TNoiseValuesGenerator, domain), 0};
TClassDescription TNoiseValuesGenerator::st_classDescription = { "TNoiseValuesGenerator", &typeid(TNoiseValuesGenerator), &TChangeExampleGenerator::st_classDescription, TNoiseValuesGenerator_properties, TNoiseValuesGenerator_components };
TClassDescription const *TNoiseValuesGenerator::classDescription() const { return &TNoiseValuesGenerator::st_classDescription; }
TOrange *TNoiseValuesGenerator::clone() const { return mlnew TNoiseValuesGenerator(*this); }


/****** TGaussianNoiseGenerator *****/


TPropertyDescription TGaussianNoiseGenerator_properties[] = {
  {"deviations", "deviations for attributes' values", &typeid(POrange), &TIntFloatList::st_classDescription, offsetof(TGaussianNoiseGenerator, deviations), false, false, 0},
  {"random_generator", "random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TGaussianNoiseGenerator, randomGenerator), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TGaussianNoiseGenerator, domain), false, false, 0},
  {"version", "unique version identifier", &typeid(int), NULL, offsetof(TGaussianNoiseGenerator, version), true, false, 0},
  {NULL}
};

size_t const TGaussianNoiseGenerator_components[] = { offsetof(TGaussianNoiseGenerator, deviations), offsetof(TGaussianNoiseGenerator, randomGenerator), offsetof(TGaussianNoiseGenerator, domain), 0};
TClassDescription TGaussianNoiseGenerator::st_classDescription = { "TGaussianNoiseGenerator", &typeid(TGaussianNoiseGenerator), &TChangeExampleGenerator::st_classDescription, TGaussianNoiseGenerator_properties, TGaussianNoiseGenerator_components };
TClassDescription const *TGaussianNoiseGenerator::classDescription() const { return &TGaussianNoiseGenerator::st_classDescription; }
TOrange *TGaussianNoiseGenerator::clone() const { return mlnew TGaussianNoiseGenerator(*this); }
