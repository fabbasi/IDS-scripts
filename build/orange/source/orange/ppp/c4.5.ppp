 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../c4.5.hpp"
#include <cstddef>



/****** TC45Learner *****/


TPropertyDescription TC45Learner_properties[] = {
  {"gainRatio", " use gain ratio (instead of information gain)", &typeid(bool), NULL, offsetof(TC45Learner, gainRatio), false, false, 0},
  {"g", " use gain ratio (instead of information gain)", &typeid(bool), NULL, offsetof(TC45Learner, gainRatio), false, false, 0},
  {"subset", " use subsetting", &typeid(bool), NULL, offsetof(TC45Learner, subset), false, false, 0},
  {"s", " use subsetting", &typeid(bool), NULL, offsetof(TC45Learner, subset), false, false, 0},
  {"batch", " batch", &typeid(bool), NULL, offsetof(TC45Learner, batch), false, false, 0},
  {"b", " batch", &typeid(bool), NULL, offsetof(TC45Learner, batch), false, false, 0},
  {"probThresh", " probability threshold", &typeid(bool), NULL, offsetof(TC45Learner, probThresh), false, false, 0},
  {"p", " probability threshold", &typeid(bool), NULL, offsetof(TC45Learner, probThresh), false, false, 0},
  {"minObjs", " minimal number of objects (examples) in leaves", &typeid(int), NULL, offsetof(TC45Learner, minObjs), false, false, 0},
  {"m", " minimal number of objects (examples) in leaves", &typeid(int), NULL, offsetof(TC45Learner, minObjs), false, false, 0},
  {"window", " window", &typeid(int), NULL, offsetof(TC45Learner, window), false, false, 0},
  {"w", " window", &typeid(int), NULL, offsetof(TC45Learner, window), false, false, 0},
  {"increment", " increment", &typeid(int), NULL, offsetof(TC45Learner, increment), false, false, 0},
  {"i", " increment", &typeid(int), NULL, offsetof(TC45Learner, increment), false, false, 0},
  {"cf", " cf", &typeid(float), NULL, offsetof(TC45Learner, cf), false, false, 0},
  {"c", " cf", &typeid(float), NULL, offsetof(TC45Learner, cf), false, false, 0},
  {"trials", " trials", &typeid(int), NULL, offsetof(TC45Learner, trials), false, false, 0},
  {"t", " trials", &typeid(int), NULL, offsetof(TC45Learner, trials), false, false, 0},
  {"prune", "return pruned tree", &typeid(bool), NULL, offsetof(TC45Learner, prune), false, false, 0},
  {"convert_to_orange", "return TreeClassifier instead of C45TreeClassifier", &typeid(bool), NULL, offsetof(TC45Learner, convertToOrange), false, false, 0},
  {"store_examples", "stores examples when (if) converting to TreeClassifier", &typeid(bool), NULL, offsetof(TC45Learner, storeExamples), false, false, 0},
  {"store_contingencies", "stores contingencies when (if) converting to TreeClassifier", &typeid(bool), NULL, offsetof(TC45Learner, storeContingencies), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TC45Learner, needs), true, false, 0},
  {NULL}
};

size_t const TC45Learner_components[] = { 0};
TClassDescription TC45Learner::st_classDescription = { "TC45Learner", &typeid(TC45Learner), &TLearner::st_classDescription, TC45Learner_properties, TC45Learner_components };
TClassDescription const *TC45Learner::classDescription() const { return &TC45Learner::st_classDescription; }
TOrange *TC45Learner::clone() const { return mlnew TC45Learner(*this); }


/****** TC45TreeNode *****/

void *PTC45TreeNode_NodeType(void *);

TPropertyDescription TC45TreeNode_properties[] = {
  {"node_type", " 0 = leaf,  1 = branch,  2 = cut,  3 = subset", &typeid(int), NULL, offsetof(TC45TreeNode, nodeType), false, false, PTC45TreeNode_NodeType},
  {"leaf", "most frequent class at this node", &typeid(TValue), NULL, offsetof(TC45TreeNode, leaf), false, false, 0},
  {"items", "no of items at this node", &typeid(float), NULL, offsetof(TC45TreeNode, items), false, false, 0},
  {"class_dist", "class distribution of items", &typeid(POrange), &TDiscDistribution::st_classDescription, offsetof(TC45TreeNode, classDist), false, false, 0},
  {"tested", "attribute referenced in test", &typeid(POrange), &TVariable::st_classDescription, offsetof(TC45TreeNode, tested), false, false, 0},
  {"cut", "threshold for continuous attribute", &typeid(float), NULL, offsetof(TC45TreeNode, cut), false, false, 0},
  {"lower", "lower limit of soft threshold", &typeid(float), NULL, offsetof(TC45TreeNode, lower), false, false, 0},
  {"upper", "upper limit of soft threshold", &typeid(float), NULL, offsetof(TC45TreeNode, upper), false, false, 0},
  {"mapping", "mapping for discrete value", &typeid(POrange), &TIntList::st_classDescription, offsetof(TC45TreeNode, mapping), false, false, 0},
  {"branch", "branch[x] = (sub)tree for outcome x */", &typeid(POrange), &TC45TreeNodeList::st_classDescription, offsetof(TC45TreeNode, branch), false, false, 0},
  {NULL}
};

size_t const TC45TreeNode_components[] = { offsetof(TC45TreeNode, classDist), offsetof(TC45TreeNode, tested), offsetof(TC45TreeNode, mapping), offsetof(TC45TreeNode, branch), 0};
TClassDescription TC45TreeNode::st_classDescription = { "TC45TreeNode", &typeid(TC45TreeNode), &TOrange::st_classDescription, TC45TreeNode_properties, TC45TreeNode_components };
TClassDescription const *TC45TreeNode::classDescription() const { return &TC45TreeNode::st_classDescription; }
TOrange *TC45TreeNode::clone() const { return mlnew TC45TreeNode(*this); }


/****** TC45Classifier *****/


TPropertyDescription TC45Classifier_properties[] = {
  {"tree", "tree", &typeid(POrange), &TC45TreeNode::st_classDescription, offsetof(TC45Classifier, tree), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TC45Classifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TC45Classifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TC45Classifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TC45Classifier_components[] = { offsetof(TC45Classifier, tree), offsetof(TC45Classifier, domain), offsetof(TC45Classifier, classVar), 0};
TClassDescription TC45Classifier::st_classDescription = { "TC45Classifier", &typeid(TC45Classifier), &TClassifierFD::st_classDescription, TC45Classifier_properties, TC45Classifier_components };
TClassDescription const *TC45Classifier::classDescription() const { return &TC45Classifier::st_classDescription; }
TOrange *TC45Classifier::clone() const { return mlnew TC45Classifier(*this); }
