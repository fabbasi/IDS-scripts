 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../logistic.hpp"
#include <cstddef>



/****** TLogRegLearner *****/


TPropertyDescription TLogRegLearner_properties[] = {
  {"fitter", "fits beta coefficients and calculates beta errors.", &typeid(POrange), &TLogRegFitter::st_classDescription, offsetof(TLogRegLearner, fitter), false, false, 0},
  {"imputer_constructor", "if present, it constructs an imputer for unknown values", &typeid(POrange), &TImputerConstructor::st_classDescription, offsetof(TLogRegLearner, imputerConstructor), false, false, 0},
  {"domain_continuizer", "if present, it constructs continuous domain if needed; if absent, default is used", &typeid(POrange), &TDomainContinuizer::st_classDescription, offsetof(TLogRegLearner, domainContinuizer), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TLogRegLearner, needs), true, false, 0},
  {NULL}
};

size_t const TLogRegLearner_components[] = { offsetof(TLogRegLearner, fitter), offsetof(TLogRegLearner, imputerConstructor), offsetof(TLogRegLearner, domainContinuizer), 0};
TClassDescription TLogRegLearner::st_classDescription = { "TLogRegLearner", &typeid(TLogRegLearner), &TLearner::st_classDescription, TLogRegLearner_properties, TLogRegLearner_components };
TClassDescription const *TLogRegLearner::classDescription() const { return &TLogRegLearner::st_classDescription; }
TOrange *TLogRegLearner::clone() const { return mlnew TLogRegLearner(*this); }


/****** TLogRegClassifier *****/


TPropertyDescription TLogRegClassifier_properties[] = {
  {"continuized_domain", "if absent, there is no continuous attributes in original domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TLogRegClassifier, continuizedDomain), false, false, 0},
  {"data_description", "Data needed for classification in presence of undefined values", &typeid(POrange), &TEFMDataDescription::st_classDescription, offsetof(TLogRegClassifier, dataDescription), false, false, 0},
  {"beta", "estimated beta coefficients for logistic regression", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TLogRegClassifier, beta), false, false, 0},
  {"beta_se", "estimated standard errors for beta coefficients", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TLogRegClassifier, beta_se), false, false, 0},
  {"wald_Z", "Wald Z statstic for beta coefficients", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TLogRegClassifier, wald_Z), false, false, 0},
  {"P", "estimated significances for beta coefficients", &typeid(POrange), &TAttributedFloatList::st_classDescription, offsetof(TLogRegClassifier, P), false, false, 0},
  {"likelihood", "Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. ", &typeid(float), NULL, offsetof(TLogRegClassifier, likelihood), false, false, 0},
  {"fit_status", "Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence).", &typeid(int), NULL, offsetof(TLogRegClassifier, fit_status), false, false, 0},
  {"imputer", "if present, it imputes unknown values", &typeid(POrange), &TImputer::st_classDescription, offsetof(TLogRegClassifier, imputer), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TLogRegClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TLogRegClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TLogRegClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TLogRegClassifier_components[] = { offsetof(TLogRegClassifier, continuizedDomain), offsetof(TLogRegClassifier, dataDescription), offsetof(TLogRegClassifier, beta), offsetof(TLogRegClassifier, beta_se), offsetof(TLogRegClassifier, wald_Z), offsetof(TLogRegClassifier, P), offsetof(TLogRegClassifier, imputer), offsetof(TLogRegClassifier, domain), offsetof(TLogRegClassifier, classVar), 0};
TClassDescription TLogRegClassifier::st_classDescription = { "TLogRegClassifier", &typeid(TLogRegClassifier), &TClassifierFD::st_classDescription, TLogRegClassifier_properties, TLogRegClassifier_components };
TClassDescription const *TLogRegClassifier::classDescription() const { return &TLogRegClassifier::st_classDescription; }
TOrange *TLogRegClassifier::clone() const { return mlnew TLogRegClassifier(*this); }
