 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../spec_contingency.hpp"
#include <cstddef>



/****** TComputeDomainContingency_DomainTransformation *****/


TPropertyDescription TComputeDomainContingency_DomainTransformation_properties[] = {
  {"domain_transformer_constructor", "constructs a domain in which each attribute corresponds one of originals", &typeid(POrange), &TDomainTransformerConstructor::st_classDescription, offsetof(TComputeDomainContingency_DomainTransformation, domainTransformerConstructor), false, false, 0},
  {"result_in_original_domain", "tells whether the resulting DomainContingency should consist of original attributes", &typeid(bool), NULL, offsetof(TComputeDomainContingency_DomainTransformation, resultInOriginalDomain), false, false, 0},
  {"class_is_outer", "tells whether the class is the outer variable in contingencies", &typeid(bool), NULL, offsetof(TComputeDomainContingency_DomainTransformation, classIsOuter), false, false, 0},
  {NULL}
};

size_t const TComputeDomainContingency_DomainTransformation_components[] = { offsetof(TComputeDomainContingency_DomainTransformation, domainTransformerConstructor), 0};
TClassDescription TComputeDomainContingency_DomainTransformation::st_classDescription = { "TComputeDomainContingency_DomainTransformation", &typeid(TComputeDomainContingency_DomainTransformation), &TComputeDomainContingency::st_classDescription, TComputeDomainContingency_DomainTransformation_properties, TComputeDomainContingency_DomainTransformation_components };
TClassDescription const *TComputeDomainContingency_DomainTransformation::classDescription() const { return &TComputeDomainContingency_DomainTransformation::st_classDescription; }
TOrange *TComputeDomainContingency_DomainTransformation::clone() const { return mlnew TComputeDomainContingency_DomainTransformation(*this); }


/****** TComputeDomainContingency_ImputeWithClassifier *****/


TPropertyDescription TComputeDomainContingency_ImputeWithClassifier_properties[] = {
  {"learner_for_discrete", "constructs a classifier for imputation of discrete values", &typeid(POrange), &TLearner::st_classDescription, offsetof(TComputeDomainContingency_ImputeWithClassifier, learnerForDiscrete), false, false, 0},
  {"learner_for_continuous", "constructs a classifier for imputation of continuous values", &typeid(POrange), &TLearner::st_classDescription, offsetof(TComputeDomainContingency_ImputeWithClassifier, learnerForContinuous), false, false, 0},
  {"class_is_outer", "tells whether the class is the outer variable in contingencies", &typeid(bool), NULL, offsetof(TComputeDomainContingency_ImputeWithClassifier, classIsOuter), false, false, 0},
  {NULL}
};

size_t const TComputeDomainContingency_ImputeWithClassifier_components[] = { offsetof(TComputeDomainContingency_ImputeWithClassifier, learnerForDiscrete), offsetof(TComputeDomainContingency_ImputeWithClassifier, learnerForContinuous), 0};
TClassDescription TComputeDomainContingency_ImputeWithClassifier::st_classDescription = { "TComputeDomainContingency_ImputeWithClassifier", &typeid(TComputeDomainContingency_ImputeWithClassifier), &TComputeDomainContingency::st_classDescription, TComputeDomainContingency_ImputeWithClassifier_properties, TComputeDomainContingency_ImputeWithClassifier_components };
TClassDescription const *TComputeDomainContingency_ImputeWithClassifier::classDescription() const { return &TComputeDomainContingency_ImputeWithClassifier::st_classDescription; }
TOrange *TComputeDomainContingency_ImputeWithClassifier::clone() const { return mlnew TComputeDomainContingency_ImputeWithClassifier(*this); }


/****** TComputeDomainContingency_Preprocessor *****/


TPropertyDescription TComputeDomainContingency_Preprocessor_properties[] = {
  {"preprocessor", "preprocesses the exmaples (see the manual for restrictions!)", &typeid(POrange), &TPreprocessor::st_classDescription, offsetof(TComputeDomainContingency_Preprocessor, preprocessor), false, false, 0},
  {"result_in_original_domain", "tells whether the resulting DomainContingency should consist of original attributes", &typeid(bool), NULL, offsetof(TComputeDomainContingency_Preprocessor, resultInOriginalDomain), false, false, 0},
  {"class_is_outer", "tells whether the class is the outer variable in contingencies", &typeid(bool), NULL, offsetof(TComputeDomainContingency_Preprocessor, classIsOuter), false, false, 0},
  {NULL}
};

size_t const TComputeDomainContingency_Preprocessor_components[] = { offsetof(TComputeDomainContingency_Preprocessor, preprocessor), 0};
TClassDescription TComputeDomainContingency_Preprocessor::st_classDescription = { "TComputeDomainContingency_Preprocessor", &typeid(TComputeDomainContingency_Preprocessor), &TComputeDomainContingency::st_classDescription, TComputeDomainContingency_Preprocessor_properties, TComputeDomainContingency_Preprocessor_components };
TClassDescription const *TComputeDomainContingency_Preprocessor::classDescription() const { return &TComputeDomainContingency_Preprocessor::st_classDescription; }
TOrange *TComputeDomainContingency_Preprocessor::clone() const { return mlnew TComputeDomainContingency_Preprocessor(*this); }
