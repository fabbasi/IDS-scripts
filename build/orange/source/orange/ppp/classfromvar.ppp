 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../classfromvar.hpp"
#include <cstddef>



/****** TClassifierFromVar *****/


TPropertyDescription TClassifierFromVar_properties[] = {
  {"whichVar", " variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierFromVar, whichVar), false, false, 0},
  {"variable", " variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierFromVar, whichVar), false, false, 0},
  {"transformer", "transformer", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TClassifierFromVar, transformer), false, false, 0},
  {"distribution_for_unknown", "distribution for unknown value", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TClassifierFromVar, distributionForUnknown), false, false, 0},
  {"transform_unknowns", "if false (default), unknowns stay unknown or are changed into distribution if given", &typeid(bool), NULL, offsetof(TClassifierFromVar, transformUnknowns), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierFromVar, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierFromVar, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierFromVar_components[] = { offsetof(TClassifierFromVar, whichVar), offsetof(TClassifierFromVar, transformer), offsetof(TClassifierFromVar, distributionForUnknown), offsetof(TClassifierFromVar, classVar), 0};
TClassDescription TClassifierFromVar::st_classDescription = { "TClassifierFromVar", &typeid(TClassifierFromVar), &TClassifier::st_classDescription, TClassifierFromVar_properties, TClassifierFromVar_components };
TClassDescription const *TClassifierFromVar::classDescription() const { return &TClassifierFromVar::st_classDescription; }
TOrange *TClassifierFromVar::clone() const { return mlnew TClassifierFromVar(*this); }


/****** TClassifierFromVarFD *****/


TPropertyDescription TClassifierFromVarFD_properties[] = {
  {"position", "position of the attribute in domain", &typeid(int), NULL, offsetof(TClassifierFromVarFD, position), false, false, 0},
  {"transformer", "transformer", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TClassifierFromVarFD, transformer), false, false, 0},
  {"distribution_for_unknown", "distribution for unknown value", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TClassifierFromVarFD, distributionForUnknown), false, false, 0},
  {"transform_unknowns", "if false (default is true), unknowns stay unknown or are changed into distribution if given", &typeid(bool), NULL, offsetof(TClassifierFromVarFD, transformUnknowns), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TClassifierFromVarFD, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TClassifierFromVarFD, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClassifierFromVarFD, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClassifierFromVarFD_components[] = { offsetof(TClassifierFromVarFD, transformer), offsetof(TClassifierFromVarFD, distributionForUnknown), offsetof(TClassifierFromVarFD, domain), offsetof(TClassifierFromVarFD, classVar), 0};
TClassDescription TClassifierFromVarFD::st_classDescription = { "TClassifierFromVarFD", &typeid(TClassifierFromVarFD), &TClassifierFD::st_classDescription, TClassifierFromVarFD_properties, TClassifierFromVarFD_components };
TClassDescription const *TClassifierFromVarFD::classDescription() const { return &TClassifierFromVarFD::st_classDescription; }
TOrange *TClassifierFromVarFD::clone() const { return mlnew TClassifierFromVarFD(*this); }
