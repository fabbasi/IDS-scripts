 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../redundancy.hpp"
#include <cstddef>



/****** TRemoveRedundant *****/


TPropertyDescription TRemoveRedundant_properties[] = {
  {"keep_values", "keep an attribute if number values is only smaller, not one", &typeid(bool), NULL, offsetof(TRemoveRedundant, keepValues), false, false, 0},
  {NULL}
};

size_t const TRemoveRedundant_components[] = { 0};
TClassDescription TRemoveRedundant::st_classDescription = { "TRemoveRedundant", &typeid(TRemoveRedundant), &TOrange::st_classDescription, TRemoveRedundant_properties, TRemoveRedundant_components };
TClassDescription const *TRemoveRedundant::classDescription() const { return &TRemoveRedundant::st_classDescription; }


/****** TRemoveRedundantByInduction *****/


TPropertyDescription TRemoveRedundantByInduction_properties[] = {
  {"feature_reducer", "feature construction algorithm", &typeid(POrange), &TFeatureInducer::st_classDescription, offsetof(TRemoveRedundantByInduction, featureReducer), false, false, 0},
  {"measure", "measure for initial ordering of attributes", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TRemoveRedundantByInduction, measure), false, false, 0},
  {"discretization", "discretization method", &typeid(POrange), &TDiscretization::st_classDescription, offsetof(TRemoveRedundantByInduction, discretization), false, false, 0},
  {"keep_values", "keep an attribute if number values is only smaller, not one", &typeid(bool), NULL, offsetof(TRemoveRedundantByInduction, keepValues), false, false, 0},
  {NULL}
};

size_t const TRemoveRedundantByInduction_components[] = { offsetof(TRemoveRedundantByInduction, featureReducer), offsetof(TRemoveRedundantByInduction, measure), offsetof(TRemoveRedundantByInduction, discretization), 0};
TClassDescription TRemoveRedundantByInduction::st_classDescription = { "TRemoveRedundantByInduction", &typeid(TRemoveRedundantByInduction), &TRemoveRedundant::st_classDescription, TRemoveRedundantByInduction_properties, TRemoveRedundantByInduction_components };
TClassDescription const *TRemoveRedundantByInduction::classDescription() const { return &TRemoveRedundantByInduction::st_classDescription; }
TOrange *TRemoveRedundantByInduction::clone() const { return mlnew TRemoveRedundantByInduction(*this); }


/****** TRemoveRedundantByQuality *****/


TPropertyDescription TRemoveRedundantByQuality_properties[] = {
  {"remeasure", "reapply the measure after removal", &typeid(bool), NULL, offsetof(TRemoveRedundantByQuality, remeasure), false, false, 0},
  {"min_quality", "minimal acceptable quality", &typeid(float), NULL, offsetof(TRemoveRedundantByQuality, minQuality), false, false, 0},
  {"remove_but", "the desired number of attributes", &typeid(int), NULL, offsetof(TRemoveRedundantByQuality, removeBut), false, false, 0},
  {"measure", "attribute quality measure", &typeid(POrange), &TMeasureAttribute::st_classDescription, offsetof(TRemoveRedundantByQuality, measure), false, false, 0},
  {"keep_values", "keep an attribute if number values is only smaller, not one", &typeid(bool), NULL, offsetof(TRemoveRedundantByQuality, keepValues), false, false, 0},
  {NULL}
};

size_t const TRemoveRedundantByQuality_components[] = { offsetof(TRemoveRedundantByQuality, measure), 0};
TClassDescription TRemoveRedundantByQuality::st_classDescription = { "TRemoveRedundantByQuality", &typeid(TRemoveRedundantByQuality), &TRemoveRedundant::st_classDescription, TRemoveRedundantByQuality_properties, TRemoveRedundantByQuality_components };
TClassDescription const *TRemoveRedundantByQuality::classDescription() const { return &TRemoveRedundantByQuality::st_classDescription; }
TOrange *TRemoveRedundantByQuality::clone() const { return mlnew TRemoveRedundantByQuality(*this); }


/****** TRemoveRedundantOneValue *****/


TPropertyDescription TRemoveRedundantOneValue_properties[] = {
  {"on_data", "observe the actual number of value on the data (not on attribute definitions)", &typeid(bool), NULL, offsetof(TRemoveRedundantOneValue, onData), false, false, 0},
  {"keep_values", "keep an attribute if number values is only smaller, not one", &typeid(bool), NULL, offsetof(TRemoveRedundantOneValue, keepValues), false, false, 0},
  {NULL}
};

size_t const TRemoveRedundantOneValue_components[] = { 0};
TClassDescription TRemoveRedundantOneValue::st_classDescription = { "TRemoveRedundantOneValue", &typeid(TRemoveRedundantOneValue), &TRemoveRedundant::st_classDescription, TRemoveRedundantOneValue_properties, TRemoveRedundantOneValue_components };
TClassDescription const *TRemoveRedundantOneValue::classDescription() const { return &TRemoveRedundantOneValue::st_classDescription; }
TOrange *TRemoveRedundantOneValue::clone() const { return mlnew TRemoveRedundantOneValue(*this); }


/****** TRemoveUnusedValues *****/


TPropertyDescription TRemoveUnusedValues_properties[] = {
  {"remove_one_valued", "if true (default is false), one valued attributes are also removed", &typeid(bool), NULL, offsetof(TRemoveUnusedValues, removeOneValued), false, false, 0},
  {NULL}
};

size_t const TRemoveUnusedValues_components[] = { 0};
TClassDescription TRemoveUnusedValues::st_classDescription = { "TRemoveUnusedValues", &typeid(TRemoveUnusedValues), &TOrange::st_classDescription, TRemoveUnusedValues_properties, TRemoveUnusedValues_components };
TClassDescription const *TRemoveUnusedValues::classDescription() const { return &TRemoveUnusedValues::st_classDescription; }
TOrange *TRemoveUnusedValues::clone() const { return mlnew TRemoveUnusedValues(*this); }
