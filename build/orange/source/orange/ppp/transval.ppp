 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../transval.hpp"
#include <cstddef>



/****** TTransformValue *****/


TPropertyDescription TTransformValue_properties[] = {
  {"sub_transform", "transformation executed prior to this", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TTransformValue, subTransform), false, false, 0},
  {NULL}
};

size_t const TTransformValue_components[] = { offsetof(TTransformValue, subTransform), 0};
TClassDescription TTransformValue::st_classDescription = { "TTransformValue", &typeid(TTransformValue), &TOrange::st_classDescription, TTransformValue_properties, TTransformValue_components };
TClassDescription const *TTransformValue::classDescription() const { return &TTransformValue::st_classDescription; }


/****** TMapIntValue *****/


TPropertyDescription TMapIntValue_properties[] = {
  {"mapping", "a lookup table", &typeid(POrange), &TIntList::st_classDescription, offsetof(TMapIntValue, mapping), false, false, 0},
  {"sub_transform", "transformation executed prior to this", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TMapIntValue, subTransform), false, false, 0},
  {NULL}
};

size_t const TMapIntValue_components[] = { offsetof(TMapIntValue, mapping), offsetof(TMapIntValue, subTransform), 0};
TClassDescription TMapIntValue::st_classDescription = { "TMapIntValue", &typeid(TMapIntValue), &TTransformValue::st_classDescription, TMapIntValue_properties, TMapIntValue_components };
TClassDescription const *TMapIntValue::classDescription() const { return &TMapIntValue::st_classDescription; }
TOrange *TMapIntValue::clone() const { return mlnew TMapIntValue(*this); }


/****** TDiscrete2Continuous *****/


TPropertyDescription TDiscrete2Continuous_properties[] = {
  {"value", "target value", &typeid(int), NULL, offsetof(TDiscrete2Continuous, value), false, false, 0},
  {"invert", "give 1.0 to values not equal to the target", &typeid(bool), NULL, offsetof(TDiscrete2Continuous, invert), false, false, 0},
  {"zero_based", "if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined", &typeid(bool), NULL, offsetof(TDiscrete2Continuous, zeroBased), false, false, 0},
  {"sub_transform", "transformation executed prior to this", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TDiscrete2Continuous, subTransform), false, false, 0},
  {NULL}
};

size_t const TDiscrete2Continuous_components[] = { offsetof(TDiscrete2Continuous, subTransform), 0};
TClassDescription TDiscrete2Continuous::st_classDescription = { "TDiscrete2Continuous", &typeid(TDiscrete2Continuous), &TTransformValue::st_classDescription, TDiscrete2Continuous_properties, TDiscrete2Continuous_components };
TClassDescription const *TDiscrete2Continuous::classDescription() const { return &TDiscrete2Continuous::st_classDescription; }
TOrange *TDiscrete2Continuous::clone() const { return mlnew TDiscrete2Continuous(*this); }


/****** TOrdinal2Continuous *****/


TPropertyDescription TOrdinal2Continuous_properties[] = {
  {"factor", "number of values", &typeid(float), NULL, offsetof(TOrdinal2Continuous, factor), false, false, 0},
  {"sub_transform", "transformation executed prior to this", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TOrdinal2Continuous, subTransform), false, false, 0},
  {NULL}
};

size_t const TOrdinal2Continuous_components[] = { offsetof(TOrdinal2Continuous, subTransform), 0};
TClassDescription TOrdinal2Continuous::st_classDescription = { "TOrdinal2Continuous", &typeid(TOrdinal2Continuous), &TTransformValue::st_classDescription, TOrdinal2Continuous_properties, TOrdinal2Continuous_components };
TClassDescription const *TOrdinal2Continuous::classDescription() const { return &TOrdinal2Continuous::st_classDescription; }
TOrange *TOrdinal2Continuous::clone() const { return mlnew TOrdinal2Continuous(*this); }


/****** TNormalizeContinuous *****/


TPropertyDescription TNormalizeContinuous_properties[] = {
  {"average", "the average value", &typeid(float), NULL, offsetof(TNormalizeContinuous, average), false, false, 0},
  {"span", "the value span", &typeid(float), NULL, offsetof(TNormalizeContinuous, span), false, false, 0},
  {"sub_transform", "transformation executed prior to this", &typeid(POrange), &TTransformValue::st_classDescription, offsetof(TNormalizeContinuous, subTransform), false, false, 0},
  {NULL}
};

size_t const TNormalizeContinuous_components[] = { offsetof(TNormalizeContinuous, subTransform), 0};
TClassDescription TNormalizeContinuous::st_classDescription = { "TNormalizeContinuous", &typeid(TNormalizeContinuous), &TTransformValue::st_classDescription, TNormalizeContinuous_properties, TNormalizeContinuous_components };
TClassDescription const *TNormalizeContinuous::classDescription() const { return &TNormalizeContinuous::st_classDescription; }
TOrange *TNormalizeContinuous::clone() const { return mlnew TNormalizeContinuous(*this); }


/****** TDomainContinuizer *****/

void *PTDomainContinuizer_ContinuousTreatment(void *);
void *PTDomainContinuizer_MultinomialTreatment(void *);
void *PTDomainContinuizer_ClassTreatment(void *);

TPropertyDescription TDomainContinuizer_properties[] = {
  {"zero_based", "if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined", &typeid(bool), NULL, offsetof(TDomainContinuizer, zeroBased), false, false, 0},
  {"continuous_treatment", " 0-leave as they are, 1-divide by span, 1-normalize", &typeid(int), NULL, offsetof(TDomainContinuizer, continuousTreatment), false, false, PTDomainContinuizer_ContinuousTreatment},
  {"multinomial_treatment", " 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized", &typeid(int), NULL, offsetof(TDomainContinuizer, multinomialTreatment), false, false, PTDomainContinuizer_MultinomialTreatment},
  {"class_treatment", " 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)", &typeid(int), NULL, offsetof(TDomainContinuizer, classTreatment), false, false, PTDomainContinuizer_ClassTreatment},
  {NULL}
};

size_t const TDomainContinuizer_components[] = { 0};
TClassDescription TDomainContinuizer::st_classDescription = { "TDomainContinuizer", &typeid(TDomainContinuizer), &TOrange::st_classDescription, TDomainContinuizer_properties, TDomainContinuizer_components };
TClassDescription const *TDomainContinuizer::classDescription() const { return &TDomainContinuizer::st_classDescription; }
TOrange *TDomainContinuizer::clone() const { return mlnew TDomainContinuizer(*this); }
