 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../earth.hpp"
#include <cstddef>



/****** TEarthLearner *****/


TPropertyDescription TEarthLearner_properties[] = {
  {"max_terms", "Maximum number of terms.", &typeid(int), NULL, offsetof(TEarthLearner, max_terms), false, false, 0},
  {"max_degree", "Maximum degree of terms.", &typeid(int), NULL, offsetof(TEarthLearner, max_degree), false, false, 0},
  {"penalty", "Penalty.", &typeid(float), NULL, offsetof(TEarthLearner, penalty), false, false, 0},
  {"threshold", "Forward step threshold.", &typeid(float), NULL, offsetof(TEarthLearner, threshold), false, false, 0},
  {"prune", "Prune terms (do backward pass).", &typeid(bool), NULL, offsetof(TEarthLearner, prune), false, false, 0},
  {"fast_beta", "Fast beta (aging coefficient).", &typeid(float), NULL, offsetof(TEarthLearner, fast_beta), false, false, 0},
  {"trace", "Execution trace (for debugging only).", &typeid(float), NULL, offsetof(TEarthLearner, trace), false, false, 0},
  {"min_span", "Min. span (training instances) between knots.", &typeid(int), NULL, offsetof(TEarthLearner, min_span), false, false, 0},
  {"fast_k", "Fast K.", &typeid(int), NULL, offsetof(TEarthLearner, fast_k), false, false, 0},
  {"new_var_penalty", "Penalty for adding a new variable.", &typeid(bool), NULL, offsetof(TEarthLearner, new_var_penalty), false, false, 0},
  {"use_beta_cache", "Use caching for betas.", &typeid(bool), NULL, offsetof(TEarthLearner, use_beta_cache), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TEarthLearner, needs), true, false, 0},
  {NULL}
};

size_t const TEarthLearner_components[] = { 0};
TClassDescription TEarthLearner::st_classDescription = { "TEarthLearner", &typeid(TEarthLearner), &TLearner::st_classDescription, TEarthLearner_properties, TEarthLearner_components };
TClassDescription const *TEarthLearner::classDescription() const { return &TEarthLearner::st_classDescription; }
TOrange *TEarthLearner::clone() const { return mlnew TEarthLearner(*this); }


/****** TEarthClassifier *****/


TPropertyDescription TEarthClassifier_properties[] = {
  {"num_preds", "Number of predictor variables", &typeid(int), NULL, offsetof(TEarthClassifier, num_preds), false, false, 0},
  {"num_terms", "Number of used terms", &typeid(int), NULL, offsetof(TEarthClassifier, num_terms), false, false, 0},
  {"max_terms", "Maximum number of terms", &typeid(int), NULL, offsetof(TEarthClassifier, max_terms), false, false, 0},
  {"num_responses", "Number of response variables", &typeid(int), NULL, offsetof(TEarthClassifier, num_responses), false, false, 0},
  {"best_set", "Used terms.", &typeid(POrange), &TBoolList::st_classDescription, offsetof(TEarthClassifier, best_set), false, false, 0},
  {"dirs", "max_preds x num_preds matrix", &typeid(POrange), &TFloatListList::st_classDescription, offsetof(TEarthClassifier, dirs), false, false, 0},
  {"cuts", "max_preds x num_preds matrix of cuts", &typeid(POrange), &TFloatListList::st_classDescription, offsetof(TEarthClassifier, cuts), false, false, 0},
  {"betas", "Term coefficients;", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TEarthClassifier, betas), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TEarthClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TEarthClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TEarthClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TEarthClassifier_components[] = { offsetof(TEarthClassifier, best_set), offsetof(TEarthClassifier, dirs), offsetof(TEarthClassifier, cuts), offsetof(TEarthClassifier, betas), offsetof(TEarthClassifier, domain), offsetof(TEarthClassifier, classVar), 0};
TClassDescription TEarthClassifier::st_classDescription = { "TEarthClassifier", &typeid(TEarthClassifier), &TClassifierFD::st_classDescription, TEarthClassifier_properties, TEarthClassifier_components };
TClassDescription const *TEarthClassifier::classDescription() const { return &TEarthClassifier::st_classDescription; }
TOrange *TEarthClassifier::clone() const { return mlnew TEarthClassifier(*this); }
