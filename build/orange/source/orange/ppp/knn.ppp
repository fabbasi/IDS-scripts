 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../knn.hpp"
#include <cstddef>



/****** TkNNLearner *****/


TPropertyDescription TkNNLearner_properties[] = {
  {"k", "number of neighbours (0 for sqrt of #examples)", &typeid(float), NULL, offsetof(TkNNLearner, k), false, false, 0},
  {"rank_weight", "enable weighting by ranks", &typeid(bool), NULL, offsetof(TkNNLearner, rankWeight), false, false, 0},
  {"distance_constructor", "metrics", &typeid(POrange), &TExamplesDistanceConstructor::st_classDescription, offsetof(TkNNLearner, distanceConstructor), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TkNNLearner, needs), true, false, 0},
  {NULL}
};

size_t const TkNNLearner_components[] = { offsetof(TkNNLearner, distanceConstructor), 0};
TClassDescription TkNNLearner::st_classDescription = { "TkNNLearner", &typeid(TkNNLearner), &TLearner::st_classDescription, TkNNLearner_properties, TkNNLearner_components };
TClassDescription const *TkNNLearner::classDescription() const { return &TkNNLearner::st_classDescription; }
TOrange *TkNNLearner::clone() const { return mlnew TkNNLearner(*this); }


/****** TkNNClassifier *****/


TPropertyDescription TkNNClassifier_properties[] = {
  {"find_nearest", "", &typeid(POrange), &TFindNearest::st_classDescription, offsetof(TkNNClassifier, findNearest), false, false, 0},
  {"k", "number of neighbours (0 for sqrt of #examples)", &typeid(float), NULL, offsetof(TkNNClassifier, k), false, false, 0},
  {"rank_weight", "enable weighting by ranks", &typeid(bool), NULL, offsetof(TkNNClassifier, rankWeight), false, false, 0},
  {"weight_ID", "id of meta-attribute with weight", &typeid(int), NULL, offsetof(TkNNClassifier, weightID), false, false, 0},
  {"n_examples", "the number of learning examples ", &typeid(int), NULL, offsetof(TkNNClassifier, nExamples), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TkNNClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TkNNClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TkNNClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TkNNClassifier_components[] = { offsetof(TkNNClassifier, findNearest), offsetof(TkNNClassifier, domain), offsetof(TkNNClassifier, classVar), 0};
TClassDescription TkNNClassifier::st_classDescription = { "TkNNClassifier", &typeid(TkNNClassifier), &TClassifierFD::st_classDescription, TkNNClassifier_properties, TkNNClassifier_components };
TClassDescription const *TkNNClassifier::classDescription() const { return &TkNNClassifier::st_classDescription; }
TOrange *TkNNClassifier::clone() const { return mlnew TkNNClassifier(*this); }
