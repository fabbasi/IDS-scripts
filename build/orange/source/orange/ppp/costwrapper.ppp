 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../costwrapper.hpp"
#include <cstddef>



/****** TCostWrapperLearner *****/


TPropertyDescription TCostWrapperLearner_properties[] = {
  {"basic_learner", "basic learner", &typeid(POrange), &TLearner::st_classDescription, offsetof(TCostWrapperLearner, basicLearner), false, false, 0},
  {"cost_matrix", "cost matrix", &typeid(POrange), &TCostMatrix::st_classDescription, offsetof(TCostWrapperLearner, costMatrix), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TCostWrapperLearner, needs), true, false, 0},
  {NULL}
};

size_t const TCostWrapperLearner_components[] = { offsetof(TCostWrapperLearner, basicLearner), offsetof(TCostWrapperLearner, costMatrix), 0};
TClassDescription TCostWrapperLearner::st_classDescription = { "TCostWrapperLearner", &typeid(TCostWrapperLearner), &TLearner::st_classDescription, TCostWrapperLearner_properties, TCostWrapperLearner_components };
TClassDescription const *TCostWrapperLearner::classDescription() const { return &TCostWrapperLearner::st_classDescription; }
TOrange *TCostWrapperLearner::clone() const { return mlnew TCostWrapperLearner(*this); }


/****** TCostWrapperClassifier *****/


TPropertyDescription TCostWrapperClassifier_properties[] = {
  {"classifier", "basic classifier", &typeid(POrange), &TClassifier::st_classDescription, offsetof(TCostWrapperClassifier, classifier), false, false, 0},
  {"cost_matrix", "cost matrix", &typeid(POrange), &TCostMatrix::st_classDescription, offsetof(TCostWrapperClassifier, costMatrix), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TCostWrapperClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TCostWrapperClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TCostWrapperClassifier_components[] = { offsetof(TCostWrapperClassifier, classifier), offsetof(TCostWrapperClassifier, costMatrix), offsetof(TCostWrapperClassifier, classVar), 0};
TClassDescription TCostWrapperClassifier::st_classDescription = { "TCostWrapperClassifier", &typeid(TCostWrapperClassifier), &TClassifier::st_classDescription, TCostWrapperClassifier_properties, TCostWrapperClassifier_components };
TClassDescription const *TCostWrapperClassifier::classDescription() const { return &TCostWrapperClassifier::st_classDescription; }
TOrange *TCostWrapperClassifier::clone() const { return mlnew TCostWrapperClassifier(*this); }
