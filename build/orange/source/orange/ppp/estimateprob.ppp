 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../estimateprob.hpp"
#include <cstddef>



/****** TProbabilityEstimator *****/


TPropertyDescription TProbabilityEstimator_properties[] = {
  {"supports_discrete", "can estimate probabilities of discrete attributes", &typeid(bool), NULL, offsetof(TProbabilityEstimator, supportsDiscrete), true, false, 0},
  {"supports_continuous", "can estimate probabilities of continuous attributes", &typeid(bool), NULL, offsetof(TProbabilityEstimator, supportsContinuous), true, false, 0},
  {NULL}
};

size_t const TProbabilityEstimator_components[] = { 0};
TClassDescription TProbabilityEstimator::st_classDescription = { "TProbabilityEstimator", &typeid(TProbabilityEstimator), &TOrange::st_classDescription, TProbabilityEstimator_properties, TProbabilityEstimator_components };
TClassDescription const *TProbabilityEstimator::classDescription() const { return &TProbabilityEstimator::st_classDescription; }


/****** TProbabilityEstimatorConstructor *****/


TPropertyDescription TProbabilityEstimatorConstructor_properties[] = {
  {NULL}
};

size_t const TProbabilityEstimatorConstructor_components[] = { 0};
TClassDescription TProbabilityEstimatorConstructor::st_classDescription = { "TProbabilityEstimatorConstructor", &typeid(TProbabilityEstimatorConstructor), &TOrange::st_classDescription, TProbabilityEstimatorConstructor_properties, TProbabilityEstimatorConstructor_components };
TClassDescription const *TProbabilityEstimatorConstructor::classDescription() const { return &TProbabilityEstimatorConstructor::st_classDescription; }


/****** TConditionalProbabilityEstimator *****/


TPropertyDescription TConditionalProbabilityEstimator_properties[] = {
  {"supports_discrete", "can estimate probabilities of discrete attributes", &typeid(bool), NULL, offsetof(TConditionalProbabilityEstimator, supportsDiscrete), true, false, 0},
  {"supports_continuous", "can estimate probabilities of continuous attributes", &typeid(bool), NULL, offsetof(TConditionalProbabilityEstimator, supportsContinuous), true, false, 0},
  {NULL}
};

size_t const TConditionalProbabilityEstimator_components[] = { 0};
TClassDescription TConditionalProbabilityEstimator::st_classDescription = { "TConditionalProbabilityEstimator", &typeid(TConditionalProbabilityEstimator), &TOrange::st_classDescription, TConditionalProbabilityEstimator_properties, TConditionalProbabilityEstimator_components };
TClassDescription const *TConditionalProbabilityEstimator::classDescription() const { return &TConditionalProbabilityEstimator::st_classDescription; }


/****** TConditionalProbabilityEstimatorConstructor *****/


TPropertyDescription TConditionalProbabilityEstimatorConstructor_properties[] = {
  {NULL}
};

size_t const TConditionalProbabilityEstimatorConstructor_components[] = { 0};
TClassDescription TConditionalProbabilityEstimatorConstructor::st_classDescription = { "TConditionalProbabilityEstimatorConstructor", &typeid(TConditionalProbabilityEstimatorConstructor), &TOrange::st_classDescription, TConditionalProbabilityEstimatorConstructor_properties, TConditionalProbabilityEstimatorConstructor_components };
TClassDescription const *TConditionalProbabilityEstimatorConstructor::classDescription() const { return &TConditionalProbabilityEstimatorConstructor::st_classDescription; }


/****** TProbabilityEstimator_FromDistribution *****/


TPropertyDescription TProbabilityEstimator_FromDistribution_properties[] = {
  {"probabilities", "probabilities", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TProbabilityEstimator_FromDistribution, probabilities), false, false, 0},
  {"supports_discrete", "can estimate probabilities of discrete attributes", &typeid(bool), NULL, offsetof(TProbabilityEstimator_FromDistribution, supportsDiscrete), true, false, 0},
  {"supports_continuous", "can estimate probabilities of continuous attributes", &typeid(bool), NULL, offsetof(TProbabilityEstimator_FromDistribution, supportsContinuous), true, false, 0},
  {NULL}
};

size_t const TProbabilityEstimator_FromDistribution_components[] = { offsetof(TProbabilityEstimator_FromDistribution, probabilities), 0};
TClassDescription TProbabilityEstimator_FromDistribution::st_classDescription = { "TProbabilityEstimator_FromDistribution", &typeid(TProbabilityEstimator_FromDistribution), &TProbabilityEstimator::st_classDescription, TProbabilityEstimator_FromDistribution_properties, TProbabilityEstimator_FromDistribution_components };
TClassDescription const *TProbabilityEstimator_FromDistribution::classDescription() const { return &TProbabilityEstimator_FromDistribution::st_classDescription; }
TOrange *TProbabilityEstimator_FromDistribution::clone() const { return mlnew TProbabilityEstimator_FromDistribution(*this); }


/****** TProbabilityEstimatorConstructor_relative *****/


TPropertyDescription TProbabilityEstimatorConstructor_relative_properties[] = {
  {NULL}
};

size_t const TProbabilityEstimatorConstructor_relative_components[] = { 0};
TClassDescription TProbabilityEstimatorConstructor_relative::st_classDescription = { "TProbabilityEstimatorConstructor_relative", &typeid(TProbabilityEstimatorConstructor_relative), &TProbabilityEstimatorConstructor::st_classDescription, TProbabilityEstimatorConstructor_relative_properties, TProbabilityEstimatorConstructor_relative_components };
TClassDescription const *TProbabilityEstimatorConstructor_relative::classDescription() const { return &TProbabilityEstimatorConstructor_relative::st_classDescription; }
TOrange *TProbabilityEstimatorConstructor_relative::clone() const { return mlnew TProbabilityEstimatorConstructor_relative(*this); }


/****** TProbabilityEstimatorConstructor_Laplace *****/


TPropertyDescription TProbabilityEstimatorConstructor_Laplace_properties[] = {
  {"l", "number of examples added to each class (default: 1)", &typeid(float), NULL, offsetof(TProbabilityEstimatorConstructor_Laplace, l), false, false, 0},
  {"renormalize", "computes the estimate on the original (not the normalized) distribution", &typeid(bool), NULL, offsetof(TProbabilityEstimatorConstructor_Laplace, renormalize), false, false, 0},
  {NULL}
};

size_t const TProbabilityEstimatorConstructor_Laplace_components[] = { 0};
TClassDescription TProbabilityEstimatorConstructor_Laplace::st_classDescription = { "TProbabilityEstimatorConstructor_Laplace", &typeid(TProbabilityEstimatorConstructor_Laplace), &TProbabilityEstimatorConstructor::st_classDescription, TProbabilityEstimatorConstructor_Laplace_properties, TProbabilityEstimatorConstructor_Laplace_components };
TClassDescription const *TProbabilityEstimatorConstructor_Laplace::classDescription() const { return &TProbabilityEstimatorConstructor_Laplace::st_classDescription; }
TOrange *TProbabilityEstimatorConstructor_Laplace::clone() const { return mlnew TProbabilityEstimatorConstructor_Laplace(*this); }


/****** TProbabilityEstimatorConstructor_m *****/


TPropertyDescription TProbabilityEstimatorConstructor_m_properties[] = {
  {"m", "parameter m for m-estimation", &typeid(float), NULL, offsetof(TProbabilityEstimatorConstructor_m, m), false, false, 0},
  {"renormalize", "computes the estimate on the original (not the normalized) distribution", &typeid(bool), NULL, offsetof(TProbabilityEstimatorConstructor_m, renormalize), false, false, 0},
  {NULL}
};

size_t const TProbabilityEstimatorConstructor_m_components[] = { 0};
TClassDescription TProbabilityEstimatorConstructor_m::st_classDescription = { "TProbabilityEstimatorConstructor_m", &typeid(TProbabilityEstimatorConstructor_m), &TProbabilityEstimatorConstructor::st_classDescription, TProbabilityEstimatorConstructor_m_properties, TProbabilityEstimatorConstructor_m_components };
TClassDescription const *TProbabilityEstimatorConstructor_m::classDescription() const { return &TProbabilityEstimatorConstructor_m::st_classDescription; }
TOrange *TProbabilityEstimatorConstructor_m::clone() const { return mlnew TProbabilityEstimatorConstructor_m(*this); }


/****** TProbabilityEstimatorConstructor_kernel *****/


TPropertyDescription TProbabilityEstimatorConstructor_kernel_properties[] = {
  {"min_impact", "Minimal impact the point must have to be counted", &typeid(float), NULL, offsetof(TProbabilityEstimatorConstructor_kernel, minImpact), false, false, 0},
  {"smoothing", "Smoothing factor", &typeid(float), NULL, offsetof(TProbabilityEstimatorConstructor_kernel, smoothing), false, false, 0},
  {"n_points", "Number of points for curve (negative means the given number of points is inserted in each interval)", &typeid(int), NULL, offsetof(TProbabilityEstimatorConstructor_kernel, nPoints), false, false, 0},
  {NULL}
};

size_t const TProbabilityEstimatorConstructor_kernel_components[] = { 0};
TClassDescription TProbabilityEstimatorConstructor_kernel::st_classDescription = { "TProbabilityEstimatorConstructor_kernel", &typeid(TProbabilityEstimatorConstructor_kernel), &TProbabilityEstimatorConstructor::st_classDescription, TProbabilityEstimatorConstructor_kernel_properties, TProbabilityEstimatorConstructor_kernel_components };
TClassDescription const *TProbabilityEstimatorConstructor_kernel::classDescription() const { return &TProbabilityEstimatorConstructor_kernel::st_classDescription; }
TOrange *TProbabilityEstimatorConstructor_kernel::clone() const { return mlnew TProbabilityEstimatorConstructor_kernel(*this); }


/****** TProbabilityEstimatorConstructor_loess *****/

void *PTProbabilityEstimatorConstructor_loess_DistributionMethod(void *);

TPropertyDescription TProbabilityEstimatorConstructor_loess_properties[] = {
  {"window_proportion", "The proportion of points in a window for LR", &typeid(float), NULL, offsetof(TProbabilityEstimatorConstructor_loess, windowProportion), false, false, 0},
  {"n_points", "The number of points on curve (negative means the given number of points is inserted in each interval)", &typeid(int), NULL, offsetof(TProbabilityEstimatorConstructor_loess, nPoints), false, false, 0},
  {"distribution_method", " Meaning of the 'nPoints'", &typeid(int), NULL, offsetof(TProbabilityEstimatorConstructor_loess, distributionMethod), false, false, PTProbabilityEstimatorConstructor_loess_DistributionMethod},
  {NULL}
};

size_t const TProbabilityEstimatorConstructor_loess_components[] = { 0};
TClassDescription TProbabilityEstimatorConstructor_loess::st_classDescription = { "TProbabilityEstimatorConstructor_loess", &typeid(TProbabilityEstimatorConstructor_loess), &TProbabilityEstimatorConstructor::st_classDescription, TProbabilityEstimatorConstructor_loess_properties, TProbabilityEstimatorConstructor_loess_components };
TClassDescription const *TProbabilityEstimatorConstructor_loess::classDescription() const { return &TProbabilityEstimatorConstructor_loess::st_classDescription; }
TOrange *TProbabilityEstimatorConstructor_loess::clone() const { return mlnew TProbabilityEstimatorConstructor_loess(*this); }


/****** TConditionalProbabilityEstimator_FromDistribution *****/


TPropertyDescription TConditionalProbabilityEstimator_FromDistribution_properties[] = {
  {"probabilities", "Contingency that stores conditional probabilities", &typeid(POrange), &TContingency::st_classDescription, offsetof(TConditionalProbabilityEstimator_FromDistribution, probabilities), false, false, 0},
  {"supports_discrete", "can estimate probabilities of discrete attributes", &typeid(bool), NULL, offsetof(TConditionalProbabilityEstimator_FromDistribution, supportsDiscrete), true, false, 0},
  {"supports_continuous", "can estimate probabilities of continuous attributes", &typeid(bool), NULL, offsetof(TConditionalProbabilityEstimator_FromDistribution, supportsContinuous), true, false, 0},
  {NULL}
};

size_t const TConditionalProbabilityEstimator_FromDistribution_components[] = { offsetof(TConditionalProbabilityEstimator_FromDistribution, probabilities), 0};
TClassDescription TConditionalProbabilityEstimator_FromDistribution::st_classDescription = { "TConditionalProbabilityEstimator_FromDistribution", &typeid(TConditionalProbabilityEstimator_FromDistribution), &TConditionalProbabilityEstimator::st_classDescription, TConditionalProbabilityEstimator_FromDistribution_properties, TConditionalProbabilityEstimator_FromDistribution_components };
TClassDescription const *TConditionalProbabilityEstimator_FromDistribution::classDescription() const { return &TConditionalProbabilityEstimator_FromDistribution::st_classDescription; }
TOrange *TConditionalProbabilityEstimator_FromDistribution::clone() const { return mlnew TConditionalProbabilityEstimator_FromDistribution(*this); }


/****** TConditionalProbabilityEstimator_ByRows *****/


TPropertyDescription TConditionalProbabilityEstimator_ByRows_properties[] = {
  {"estimator_list", "A list of probability estimators", &typeid(POrange), &TProbabilityEstimatorList::st_classDescription, offsetof(TConditionalProbabilityEstimator_ByRows, estimatorList), false, false, 0},
  {"supports_discrete", "can estimate probabilities of discrete attributes", &typeid(bool), NULL, offsetof(TConditionalProbabilityEstimator_ByRows, supportsDiscrete), true, false, 0},
  {"supports_continuous", "can estimate probabilities of continuous attributes", &typeid(bool), NULL, offsetof(TConditionalProbabilityEstimator_ByRows, supportsContinuous), true, false, 0},
  {NULL}
};

size_t const TConditionalProbabilityEstimator_ByRows_components[] = { offsetof(TConditionalProbabilityEstimator_ByRows, estimatorList), 0};
TClassDescription TConditionalProbabilityEstimator_ByRows::st_classDescription = { "TConditionalProbabilityEstimator_ByRows", &typeid(TConditionalProbabilityEstimator_ByRows), &TConditionalProbabilityEstimator::st_classDescription, TConditionalProbabilityEstimator_ByRows_properties, TConditionalProbabilityEstimator_ByRows_components };
TClassDescription const *TConditionalProbabilityEstimator_ByRows::classDescription() const { return &TConditionalProbabilityEstimator_ByRows::st_classDescription; }
TOrange *TConditionalProbabilityEstimator_ByRows::clone() const { return mlnew TConditionalProbabilityEstimator_ByRows(*this); }


/****** TConditionalProbabilityEstimatorConstructor_ByRows *****/


TPropertyDescription TConditionalProbabilityEstimatorConstructor_ByRows_properties[] = {
  {"estimator_constructor", "ProbabilityEstimator to be used ", &typeid(POrange), &TProbabilityEstimatorConstructor::st_classDescription, offsetof(TConditionalProbabilityEstimatorConstructor_ByRows, estimatorConstructor), false, false, 0},
  {NULL}
};

size_t const TConditionalProbabilityEstimatorConstructor_ByRows_components[] = { offsetof(TConditionalProbabilityEstimatorConstructor_ByRows, estimatorConstructor), 0};
TClassDescription TConditionalProbabilityEstimatorConstructor_ByRows::st_classDescription = { "TConditionalProbabilityEstimatorConstructor_ByRows", &typeid(TConditionalProbabilityEstimatorConstructor_ByRows), &TConditionalProbabilityEstimatorConstructor::st_classDescription, TConditionalProbabilityEstimatorConstructor_ByRows_properties, TConditionalProbabilityEstimatorConstructor_ByRows_components };
TClassDescription const *TConditionalProbabilityEstimatorConstructor_ByRows::classDescription() const { return &TConditionalProbabilityEstimatorConstructor_ByRows::st_classDescription; }
TOrange *TConditionalProbabilityEstimatorConstructor_ByRows::clone() const { return mlnew TConditionalProbabilityEstimatorConstructor_ByRows(*this); }


/****** TConditionalProbabilityEstimatorConstructor_loess *****/

void *PTConditionalProbabilityEstimatorConstructor_loess_DistributionMethod(void *);

TPropertyDescription TConditionalProbabilityEstimatorConstructor_loess_properties[] = {
  {"window_proportion", "The proportion of points in a window for LR", &typeid(float), NULL, offsetof(TConditionalProbabilityEstimatorConstructor_loess, windowProportion), false, false, 0},
  {"n_points", "The number of points on curve", &typeid(int), NULL, offsetof(TConditionalProbabilityEstimatorConstructor_loess, nPoints), false, false, 0},
  {"distribution_method", " Meaning of the 'nPoints'", &typeid(int), NULL, offsetof(TConditionalProbabilityEstimatorConstructor_loess, distributionMethod), false, false, PTConditionalProbabilityEstimatorConstructor_loess_DistributionMethod},
  {NULL}
};

size_t const TConditionalProbabilityEstimatorConstructor_loess_components[] = { 0};
TClassDescription TConditionalProbabilityEstimatorConstructor_loess::st_classDescription = { "TConditionalProbabilityEstimatorConstructor_loess", &typeid(TConditionalProbabilityEstimatorConstructor_loess), &TConditionalProbabilityEstimatorConstructor::st_classDescription, TConditionalProbabilityEstimatorConstructor_loess_properties, TConditionalProbabilityEstimatorConstructor_loess_components };
TClassDescription const *TConditionalProbabilityEstimatorConstructor_loess::classDescription() const { return &TConditionalProbabilityEstimatorConstructor_loess::st_classDescription; }
TOrange *TConditionalProbabilityEstimatorConstructor_loess::clone() const { return mlnew TConditionalProbabilityEstimatorConstructor_loess(*this); }
