 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../pythonvars.hpp"
#include <cstddef>



/****** TPythonValue *****/


TPropertyDescription TPythonValue_properties[] = {
  {NULL}
};

size_t const TPythonValue_components[] = { 0};
TClassDescription TPythonValue::st_classDescription = { "TPythonValue", &typeid(TPythonValue), &TSomeValue::st_classDescription, TPythonValue_properties, TPythonValue_components };
TClassDescription const *TPythonValue::classDescription() const { return &TPythonValue::st_classDescription; }
TOrange *TPythonValue::clone() const { return mlnew TPythonValue(*this); }


/****** TPythonVariable *****/

void *PTVariable_Type(void *);

TPropertyDescription TPythonVariable_properties[] = {
  {"use_pickle", "tells whether to use pickle for saving to/loading from files", &typeid(bool), NULL, offsetof(TPythonVariable, usePickle), false, false, 0},
  {"use_some_value", "tells whether the Variable will operate on Value or SomeValue (default)", &typeid(bool), NULL, offsetof(TPythonVariable, useSomeValue), false, false, 0},
  {"var_type", " variable type", &typeid(int), NULL, offsetof(TPythonVariable, varType), false, false, PTVariable_Type},
  {"ordered", "variable values are ordered", &typeid(bool), NULL, offsetof(TPythonVariable, ordered), false, false, 0},
  {"distributed", "variable values are distributions", &typeid(bool), NULL, offsetof(TPythonVariable, distributed), false, false, 0},
  {"default_meta_id", "default (proposed, suggested...) meta id for this variable", &typeid(int), NULL, offsetof(TPythonVariable, defaultMetaId), false, false, 0},
  {"random_generator", "random generator for random values (initialized when first needed)", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TPythonVariable, randomGenerator), false, false, 0},
  {"source_variable", "The attribute that this attribute is computed from (when applicable)", &typeid(POrange), &TVariable::st_classDescription, offsetof(TPythonVariable, sourceVariable), false, false, 0},
  {"get_value_from", "Function to compute the value from values of other variables", &typeid(POrange), &TClassifier::st_classDescription, offsetof(TPythonVariable, getValueFrom), false, false, 0},
  {NULL}
};

size_t const TPythonVariable_components[] = { offsetof(TPythonVariable, randomGenerator), offsetof(TPythonVariable, sourceVariable), offsetof(TPythonVariable, getValueFrom), 0};
TClassDescription TPythonVariable::st_classDescription = { "TPythonVariable", &typeid(TPythonVariable), &TVariable::st_classDescription, TPythonVariable_properties, TPythonVariable_components };
TClassDescription const *TPythonVariable::classDescription() const { return &TPythonVariable::st_classDescription; }
TOrange *TPythonVariable::clone() const { return mlnew TPythonVariable(*this); }


/****** TPythonValueSpecial *****/


TPropertyDescription TPythonValueSpecial_properties[] = {
  {"value_type", "value type", &typeid(int), NULL, offsetof(TPythonValueSpecial, valueType), false, false, 0},
  {NULL}
};

size_t const TPythonValueSpecial_components[] = { 0};
TClassDescription TPythonValueSpecial::st_classDescription = { "TPythonValueSpecial", &typeid(TPythonValueSpecial), &TOrange::st_classDescription, TPythonValueSpecial_properties, TPythonValueSpecial_components };
TClassDescription const *TPythonValueSpecial::classDescription() const { return &TPythonValueSpecial::st_classDescription; }
TOrange *TPythonValueSpecial::clone() const { return mlnew TPythonValueSpecial(*this); }
