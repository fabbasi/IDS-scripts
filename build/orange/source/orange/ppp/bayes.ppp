 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../bayes.hpp"
#include <cstddef>



/****** TBayesLearner *****/


TPropertyDescription TBayesLearner_properties[] = {
  {"estimator_constructor", "constructs a probability estimator for P(C)", &typeid(POrange), &TProbabilityEstimatorConstructor::st_classDescription, offsetof(TBayesLearner, estimatorConstructor), false, false, 0},
  {"conditional_estimator_constructor", "constructs a probability estimator for P(C|A) ", &typeid(POrange), &TConditionalProbabilityEstimatorConstructor::st_classDescription, offsetof(TBayesLearner, conditionalEstimatorConstructor), false, false, 0},
  {"conditional_estimator_constructor_continuous", "constructs a probability estimator for P(C|A) for continuous attributes", &typeid(POrange), &TConditionalProbabilityEstimatorConstructor::st_classDescription, offsetof(TBayesLearner, conditionalEstimatorConstructorContinuous), false, false, 0},
  {"normalize_predictions", "instructs learner to construct a classifier that normalizes probabilities", &typeid(bool), NULL, offsetof(TBayesLearner, normalizePredictions), false, false, 0},
  {"adjust_threshold", "adjust probability thresholds (for binary classes only)", &typeid(bool), NULL, offsetof(TBayesLearner, adjustThreshold), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TBayesLearner, needs), true, false, 0},
  {NULL}
};

size_t const TBayesLearner_components[] = { offsetof(TBayesLearner, estimatorConstructor), offsetof(TBayesLearner, conditionalEstimatorConstructor), offsetof(TBayesLearner, conditionalEstimatorConstructorContinuous), 0};
TClassDescription TBayesLearner::st_classDescription = { "TBayesLearner", &typeid(TBayesLearner), &TLearner::st_classDescription, TBayesLearner_properties, TBayesLearner_components };
TClassDescription const *TBayesLearner::classDescription() const { return &TBayesLearner::st_classDescription; }
TOrange *TBayesLearner::clone() const { return mlnew TBayesLearner(*this); }


/****** TBayesClassifier *****/


TPropertyDescription TBayesClassifier_properties[] = {
  {"distribution", "class distributions (P(C))", &typeid(POrange), &TDistribution::st_classDescription, offsetof(TBayesClassifier, distribution), false, false, 0},
  {"conditional_distributions", "conditional distributions, P(C|A)", &typeid(POrange), &TDomainContingency::st_classDescription, offsetof(TBayesClassifier, conditionalDistributions), false, false, 0},
  {"estimator", "a probability estimator for P(C)", &typeid(POrange), &TProbabilityEstimator::st_classDescription, offsetof(TBayesClassifier, estimator), false, false, 0},
  {"conditional_estimators", "a probability estimator for P(C|A)", &typeid(POrange), &TConditionalProbabilityEstimatorList::st_classDescription, offsetof(TBayesClassifier, conditionalEstimators), false, false, 0},
  {"normalize_predictions", "if true, classifier will normalize predictions", &typeid(bool), NULL, offsetof(TBayesClassifier, normalizePredictions), false, false, 0},
  {"threshold", "threshold probability for class 1 (for binary classes only)", &typeid(float), NULL, offsetof(TBayesClassifier, threshold), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TBayesClassifier, domain), false, false, 0},
  {"class_var", "class variable", &typeid(POrange), &TVariable::st_classDescription, offsetof(TBayesClassifier, classVar), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TBayesClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TBayesClassifier_components[] = { offsetof(TBayesClassifier, distribution), offsetof(TBayesClassifier, conditionalDistributions), offsetof(TBayesClassifier, estimator), offsetof(TBayesClassifier, conditionalEstimators), offsetof(TBayesClassifier, domain), offsetof(TBayesClassifier, classVar), 0};
TClassDescription TBayesClassifier::st_classDescription = { "TBayesClassifier", &typeid(TBayesClassifier), &TClassifierFD::st_classDescription, TBayesClassifier_properties, TBayesClassifier_components };
TClassDescription const *TBayesClassifier::classDescription() const { return &TBayesClassifier::st_classDescription; }
TOrange *TBayesClassifier::clone() const { return mlnew TBayesClassifier(*this); }
