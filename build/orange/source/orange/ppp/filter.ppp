 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../filter.hpp"
#include <cstddef>



/****** TFilter *****/


TPropertyDescription TFilter_properties[] = {
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_components[] = { offsetof(TFilter, domain), 0};
TClassDescription TFilter::st_classDescription = { "TFilter", &typeid(TFilter), &TOrange::st_classDescription, TFilter_properties, TFilter_components };
TClassDescription const *TFilter::classDescription() const { return &TFilter::st_classDescription; }


/****** TFilter_random *****/


TPropertyDescription TFilter_random_properties[] = {
  {"prob", "probability of selecting an example", &typeid(float), NULL, offsetof(TFilter_random, prob), false, false, 0},
  {"random_generator", "random generator", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TFilter_random, randomGenerator), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_random, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_random, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_random_components[] = { offsetof(TFilter_random, randomGenerator), offsetof(TFilter_random, domain), 0};
TClassDescription TFilter_random::st_classDescription = { "TFilter_random", &typeid(TFilter_random), &TFilter::st_classDescription, TFilter_random_properties, TFilter_random_components };
TClassDescription const *TFilter_random::classDescription() const { return &TFilter_random::st_classDescription; }
TOrange *TFilter_random::clone() const { return mlnew TFilter_random(*this); }


/****** TFilter_hasSpecial *****/


TPropertyDescription TFilter_hasSpecial_properties[] = {
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_hasSpecial, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_hasSpecial, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_hasSpecial_components[] = { offsetof(TFilter_hasSpecial, domain), 0};
TClassDescription TFilter_hasSpecial::st_classDescription = { "TFilter_hasSpecial", &typeid(TFilter_hasSpecial), &TFilter::st_classDescription, TFilter_hasSpecial_properties, TFilter_hasSpecial_components };
TClassDescription const *TFilter_hasSpecial::classDescription() const { return &TFilter_hasSpecial::st_classDescription; }
TOrange *TFilter_hasSpecial::clone() const { return mlnew TFilter_hasSpecial(*this); }


/****** TFilter_isDefined *****/


TPropertyDescription TFilter_isDefined_properties[] = {
  {"check", "tells which attributes to check; checks all if the list is empty", &typeid(POrange), &TAttributedBoolList::st_classDescription, offsetof(TFilter_isDefined, check), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_isDefined, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_isDefined, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_isDefined_components[] = { offsetof(TFilter_isDefined, check), offsetof(TFilter_isDefined, domain), 0};
TClassDescription TFilter_isDefined::st_classDescription = { "TFilter_isDefined", &typeid(TFilter_isDefined), &TFilter::st_classDescription, TFilter_isDefined_properties, TFilter_isDefined_components };
TClassDescription const *TFilter_isDefined::classDescription() const { return &TFilter_isDefined::st_classDescription; }
TOrange *TFilter_isDefined::clone() const { return mlnew TFilter_isDefined(*this); }


/****** TFilter_hasMeta *****/


TPropertyDescription TFilter_hasMeta_properties[] = {
  {"id", "meta attribute id", &typeid(int), NULL, offsetof(TFilter_hasMeta, id), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_hasMeta, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_hasMeta, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_hasMeta_components[] = { offsetof(TFilter_hasMeta, domain), 0};
TClassDescription TFilter_hasMeta::st_classDescription = { "TFilter_hasMeta", &typeid(TFilter_hasMeta), &TFilter::st_classDescription, TFilter_hasMeta_properties, TFilter_hasMeta_components };
TClassDescription const *TFilter_hasMeta::classDescription() const { return &TFilter_hasMeta::st_classDescription; }
TOrange *TFilter_hasMeta::clone() const { return mlnew TFilter_hasMeta(*this); }


/****** TFilter_hasClassValue *****/


TPropertyDescription TFilter_hasClassValue_properties[] = {
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_hasClassValue, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_hasClassValue, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_hasClassValue_components[] = { offsetof(TFilter_hasClassValue, domain), 0};
TClassDescription TFilter_hasClassValue::st_classDescription = { "TFilter_hasClassValue", &typeid(TFilter_hasClassValue), &TFilter::st_classDescription, TFilter_hasClassValue_properties, TFilter_hasClassValue_components };
TClassDescription const *TFilter_hasClassValue::classDescription() const { return &TFilter_hasClassValue::st_classDescription; }
TOrange *TFilter_hasClassValue::clone() const { return mlnew TFilter_hasClassValue(*this); }


/****** TFilter_sameValue *****/


TPropertyDescription TFilter_sameValue_properties[] = {
  {"position", "position of the observed attribute", &typeid(int), NULL, offsetof(TFilter_sameValue, position), false, false, 0},
  {"value", "value that the selected examples should have", &typeid(TValue), NULL, offsetof(TFilter_sameValue, value), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_sameValue, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_sameValue, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_sameValue_components[] = { offsetof(TFilter_sameValue, domain), 0};
TClassDescription TFilter_sameValue::st_classDescription = { "TFilter_sameValue", &typeid(TFilter_sameValue), &TFilter::st_classDescription, TFilter_sameValue_properties, TFilter_sameValue_components };
TClassDescription const *TFilter_sameValue::classDescription() const { return &TFilter_sameValue::st_classDescription; }
TOrange *TFilter_sameValue::clone() const { return mlnew TFilter_sameValue(*this); }


/****** TValueFilter *****/


TPropertyDescription TValueFilter_properties[] = {
  {"position", "attribute's position in domain", &typeid(int), NULL, offsetof(TValueFilter, position), false, false, 0},
  {"accept_special", "tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)", &typeid(int), NULL, offsetof(TValueFilter, acceptSpecial), false, false, 0},
  {NULL}
};

size_t const TValueFilter_components[] = { 0};
TClassDescription TValueFilter::st_classDescription = { "TValueFilter", &typeid(TValueFilter), &TOrange::st_classDescription, TValueFilter_properties, TValueFilter_components };
TClassDescription const *TValueFilter::classDescription() const { return &TValueFilter::st_classDescription; }


/****** TValueFilter_continuous *****/

void *PTValueFilter_Operator(void *);

TPropertyDescription TValueFilter_continuous_properties[] = {
  {"min", " reference value (lower bound for interval operators)", &typeid(float), NULL, offsetof(TValueFilter_continuous, min), false, false, 0},
  {"ref", " reference value (lower bound for interval operators)", &typeid(float), NULL, offsetof(TValueFilter_continuous, min), false, false, 0},
  {"max", "upper bound for interval operators", &typeid(float), NULL, offsetof(TValueFilter_continuous, max), false, false, 0},
  {"outside", "obsolete: if true, the filter accepts the values outside the interval, not inside", &typeid(bool), NULL, offsetof(TValueFilter_continuous, outside), false, false, 0},
  {"oper", " operator", &typeid(int), NULL, offsetof(TValueFilter_continuous, oper), false, false, PTValueFilter_Operator},
  {"position", "attribute's position in domain", &typeid(int), NULL, offsetof(TValueFilter_continuous, position), false, false, 0},
  {"accept_special", "tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)", &typeid(int), NULL, offsetof(TValueFilter_continuous, acceptSpecial), false, false, 0},
  {NULL}
};

size_t const TValueFilter_continuous_components[] = { 0};
TClassDescription TValueFilter_continuous::st_classDescription = { "TValueFilter_continuous", &typeid(TValueFilter_continuous), &TValueFilter::st_classDescription, TValueFilter_continuous_properties, TValueFilter_continuous_components };
TClassDescription const *TValueFilter_continuous::classDescription() const { return &TValueFilter_continuous::st_classDescription; }
TOrange *TValueFilter_continuous::clone() const { return mlnew TValueFilter_continuous(*this); }


/****** TValueFilter_discrete *****/


TPropertyDescription TValueFilter_discrete_properties[] = {
  {"values", "accepted values", &typeid(POrange), &TValueList::st_classDescription, offsetof(TValueFilter_discrete, values), false, false, 0},
  {"negate", "negate", &typeid(bool), NULL, offsetof(TValueFilter_discrete, negate), false, false, 0},
  {"position", "attribute's position in domain", &typeid(int), NULL, offsetof(TValueFilter_discrete, position), false, false, 0},
  {"accept_special", "tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)", &typeid(int), NULL, offsetof(TValueFilter_discrete, acceptSpecial), false, false, 0},
  {NULL}
};

size_t const TValueFilter_discrete_components[] = { offsetof(TValueFilter_discrete, values), 0};
TClassDescription TValueFilter_discrete::st_classDescription = { "TValueFilter_discrete", &typeid(TValueFilter_discrete), &TValueFilter::st_classDescription, TValueFilter_discrete_properties, TValueFilter_discrete_components };
TClassDescription const *TValueFilter_discrete::classDescription() const { return &TValueFilter_discrete::st_classDescription; }
TOrange *TValueFilter_discrete::clone() const { return mlnew TValueFilter_discrete(*this); }


/****** TValueFilter_string *****/

void *PTValueFilter_Operator(void *);

TPropertyDescription TValueFilter_string_properties[] = {
  {"min", " reference value (lower bound for interval operators)", &typeid(string), NULL, offsetof(TValueFilter_string, min), false, false, 0},
  {"ref", " reference value (lower bound for interval operators)", &typeid(string), NULL, offsetof(TValueFilter_string, min), false, false, 0},
  {"max", "upper bound for interval operators", &typeid(string), NULL, offsetof(TValueFilter_string, max), false, false, 0},
  {"oper", " operator", &typeid(int), NULL, offsetof(TValueFilter_string, oper), false, false, PTValueFilter_Operator},
  {"case_sensitive", "if true (default), the operator is case sensitive", &typeid(bool), NULL, offsetof(TValueFilter_string, caseSensitive), false, false, 0},
  {"position", "attribute's position in domain", &typeid(int), NULL, offsetof(TValueFilter_string, position), false, false, 0},
  {"accept_special", "tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)", &typeid(int), NULL, offsetof(TValueFilter_string, acceptSpecial), false, false, 0},
  {NULL}
};

size_t const TValueFilter_string_components[] = { 0};
TClassDescription TValueFilter_string::st_classDescription = { "TValueFilter_string", &typeid(TValueFilter_string), &TValueFilter::st_classDescription, TValueFilter_string_properties, TValueFilter_string_components };
TClassDescription const *TValueFilter_string::classDescription() const { return &TValueFilter_string::st_classDescription; }
TOrange *TValueFilter_string::clone() const { return mlnew TValueFilter_string(*this); }


/****** TValueFilter_stringList *****/


TPropertyDescription TValueFilter_stringList_properties[] = {
  {"values", "accepted values", &typeid(POrange), &TStringList::st_classDescription, offsetof(TValueFilter_stringList, values), false, false, 0},
  {"case_sensitive", "if true (default), the comparison is case sensitive", &typeid(bool), NULL, offsetof(TValueFilter_stringList, caseSensitive), false, false, 0},
  {"position", "attribute's position in domain", &typeid(int), NULL, offsetof(TValueFilter_stringList, position), false, false, 0},
  {"accept_special", "tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)", &typeid(int), NULL, offsetof(TValueFilter_stringList, acceptSpecial), false, false, 0},
  {NULL}
};

size_t const TValueFilter_stringList_components[] = { offsetof(TValueFilter_stringList, values), 0};
TClassDescription TValueFilter_stringList::st_classDescription = { "TValueFilter_stringList", &typeid(TValueFilter_stringList), &TValueFilter::st_classDescription, TValueFilter_stringList_properties, TValueFilter_stringList_components };
TClassDescription const *TValueFilter_stringList::classDescription() const { return &TValueFilter_stringList::st_classDescription; }
TOrange *TValueFilter_stringList::clone() const { return mlnew TValueFilter_stringList(*this); }


/****** TFilter_values *****/


TPropertyDescription TFilter_values_properties[] = {
  {"conditions", "a list of filters", &typeid(POrange), &TValueFilterList::st_classDescription, offsetof(TFilter_values, conditions), false, false, 0},
  {"conjunction", "if true, filter computes conjunction, otherwise disjunction", &typeid(bool), NULL, offsetof(TFilter_values, conjunction), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_values, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_values, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_values_components[] = { offsetof(TFilter_values, conditions), offsetof(TFilter_values, domain), 0};
TClassDescription TFilter_values::st_classDescription = { "TFilter_values", &typeid(TFilter_values), &TFilter::st_classDescription, TFilter_values_properties, TFilter_values_components };
TClassDescription const *TFilter_values::classDescription() const { return &TFilter_values::st_classDescription; }
TOrange *TFilter_values::clone() const { return mlnew TFilter_values(*this); }


/****** TFilter_sameExample *****/


TPropertyDescription TFilter_sameExample_properties[] = {
  {"example", "example with which examples are compared", &typeid(TExample), NULL, offsetof(TFilter_sameExample, example), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_sameExample, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_sameExample, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_sameExample_components[] = { offsetof(TFilter_sameExample, example), offsetof(TFilter_sameExample, domain), 0};
TClassDescription TFilter_sameExample::st_classDescription = { "TFilter_sameExample", &typeid(TFilter_sameExample), &TFilter::st_classDescription, TFilter_sameExample_properties, TFilter_sameExample_components };
TClassDescription const *TFilter_sameExample::classDescription() const { return &TFilter_sameExample::st_classDescription; }
TOrange *TFilter_sameExample::clone() const { return mlnew TFilter_sameExample(*this); }


/****** TFilter_compatibleExample *****/


TPropertyDescription TFilter_compatibleExample_properties[] = {
  {"example", "example with which examples are compared", &typeid(TExample), NULL, offsetof(TFilter_compatibleExample, example), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_compatibleExample, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_compatibleExample, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_compatibleExample_components[] = { offsetof(TFilter_compatibleExample, example), offsetof(TFilter_compatibleExample, domain), 0};
TClassDescription TFilter_compatibleExample::st_classDescription = { "TFilter_compatibleExample", &typeid(TFilter_compatibleExample), &TFilter::st_classDescription, TFilter_compatibleExample_properties, TFilter_compatibleExample_components };
TClassDescription const *TFilter_compatibleExample::classDescription() const { return &TFilter_compatibleExample::st_classDescription; }
TOrange *TFilter_compatibleExample::clone() const { return mlnew TFilter_compatibleExample(*this); }


/****** TFilter_conjunction *****/


TPropertyDescription TFilter_conjunction_properties[] = {
  {"filters", "a list of filters;", &typeid(POrange), &TFilterList::st_classDescription, offsetof(TFilter_conjunction, filters), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_conjunction, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_conjunction, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_conjunction_components[] = { offsetof(TFilter_conjunction, filters), offsetof(TFilter_conjunction, domain), 0};
TClassDescription TFilter_conjunction::st_classDescription = { "TFilter_conjunction", &typeid(TFilter_conjunction), &TFilter::st_classDescription, TFilter_conjunction_properties, TFilter_conjunction_components };
TClassDescription const *TFilter_conjunction::classDescription() const { return &TFilter_conjunction::st_classDescription; }
TOrange *TFilter_conjunction::clone() const { return mlnew TFilter_conjunction(*this); }


/****** TFilter_disjunction *****/


TPropertyDescription TFilter_disjunction_properties[] = {
  {"filters", "a list of filters;", &typeid(POrange), &TFilterList::st_classDescription, offsetof(TFilter_disjunction, filters), false, false, 0},
  {"negate", "if true, filter output should be negated.", &typeid(bool), NULL, offsetof(TFilter_disjunction, negate), false, false, 0},
  {"domain", "domain to which the examples are converted (if needed)", &typeid(POrange), &TDomain::st_classDescription, offsetof(TFilter_disjunction, domain), false, false, 0},
  {NULL}
};

size_t const TFilter_disjunction_components[] = { offsetof(TFilter_disjunction, filters), offsetof(TFilter_disjunction, domain), 0};
TClassDescription TFilter_disjunction::st_classDescription = { "TFilter_disjunction", &typeid(TFilter_disjunction), &TFilter::st_classDescription, TFilter_disjunction_properties, TFilter_disjunction_components };
TClassDescription const *TFilter_disjunction::classDescription() const { return &TFilter_disjunction::st_classDescription; }
TOrange *TFilter_disjunction::clone() const { return mlnew TFilter_disjunction(*this); }
