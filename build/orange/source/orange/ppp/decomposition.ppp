 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../decomposition.hpp"
#include <cstddef>



/****** TIM *****/

void *PTVariable_Type(void *);

TPropertyDescription TIM_properties[] = {
  {"var_type", " class variable type", &typeid(int), NULL, offsetof(TIM, varType), false, false, PTVariable_Type},
  {"row_examples", "examples with free attributes for each row", &typeid(POrange), &TExampleTable::st_classDescription, offsetof(TIM, rowExamples), false, false, 0},
  {NULL}
};

size_t const TIM_components[] = { offsetof(TIM, rowExamples), 0};
TClassDescription TIM::st_classDescription = { "TIM", &typeid(TIM), &TOrange::st_classDescription, TIM_properties, TIM_components };
TClassDescription const *TIM::classDescription() const { return &TIM::st_classDescription; }
TOrange *TIM::clone() const { return mlnew TIM(*this); }


/****** TIMConstructor *****/


TPropertyDescription TIMConstructor_properties[] = {
  {"record_row_examples", "enables creation of rowExample list", &typeid(bool), NULL, offsetof(TIMConstructor, recordRowExamples), false, false, 0},
  {NULL}
};

size_t const TIMConstructor_components[] = { 0};
TClassDescription TIMConstructor::st_classDescription = { "TIMConstructor", &typeid(TIMConstructor), &TOrange::st_classDescription, TIMConstructor_properties, TIMConstructor_components };
TClassDescription const *TIMConstructor::classDescription() const { return &TIMConstructor::st_classDescription; }


/****** TIMBySorting *****/


TPropertyDescription TIMBySorting_properties[] = {
  {"record_row_examples", "enables creation of rowExample list", &typeid(bool), NULL, offsetof(TIMBySorting, recordRowExamples), false, false, 0},
  {NULL}
};

size_t const TIMBySorting_components[] = { 0};
TClassDescription TIMBySorting::st_classDescription = { "TIMBySorting", &typeid(TIMBySorting), &TIMConstructor::st_classDescription, TIMBySorting_properties, TIMBySorting_components };
TClassDescription const *TIMBySorting::classDescription() const { return &TIMBySorting::st_classDescription; }
TOrange *TIMBySorting::clone() const { return mlnew TIMBySorting(*this); }


/****** TIMFromExamples *****/


TPropertyDescription TIMFromExamples_properties[] = {
  {NULL}
};

size_t const TIMFromExamples_components[] = { 0};
TClassDescription TIMFromExamples::st_classDescription = { "TIMFromExamples", &typeid(TIMFromExamples), &TOrange::st_classDescription, TIMFromExamples_properties, TIMFromExamples_components };
TClassDescription const *TIMFromExamples::classDescription() const { return &TIMFromExamples::st_classDescription; }


/****** TPreprocessIM *****/


TPropertyDescription TPreprocessIM_properties[] = {
  {NULL}
};

size_t const TPreprocessIM_components[] = { 0};
TClassDescription TPreprocessIM::st_classDescription = { "TPreprocessIM", &typeid(TPreprocessIM), &TOrange::st_classDescription, TPreprocessIM_properties, TPreprocessIM_components };
TClassDescription const *TPreprocessIM::classDescription() const { return &TPreprocessIM::st_classDescription; }


/****** TIMByRows *****/

void *PTVariable_Type(void *);

TPropertyDescription TIMByRows_properties[] = {
  {"var_type", " class variable type", &typeid(int), NULL, offsetof(TIMByRows, varType), false, false, PTVariable_Type},
  {NULL}
};

size_t const TIMByRows_components[] = { 0};
TClassDescription TIMByRows::st_classDescription = { "TIMByRows", &typeid(TIMByRows), &TOrange::st_classDescription, TIMByRows_properties, TIMByRows_components };
TClassDescription const *TIMByRows::classDescription() const { return &TIMByRows::st_classDescription; }
TOrange *TIMByRows::clone() const { return mlnew TIMByRows(*this); }


/****** TIMByRowsConstructor *****/


TPropertyDescription TIMByRowsConstructor_properties[] = {
  {NULL}
};

size_t const TIMByRowsConstructor_components[] = { 0};
TClassDescription TIMByRowsConstructor::st_classDescription = { "TIMByRowsConstructor", &typeid(TIMByRowsConstructor), &TOrange::st_classDescription, TIMByRowsConstructor_properties, TIMByRowsConstructor_components };
TClassDescription const *TIMByRowsConstructor::classDescription() const { return &TIMByRowsConstructor::st_classDescription; }


/****** TIMByRowsBySorting *****/


TPropertyDescription TIMByRowsBySorting_properties[] = {
  {NULL}
};

size_t const TIMByRowsBySorting_components[] = { 0};
TClassDescription TIMByRowsBySorting::st_classDescription = { "TIMByRowsBySorting", &typeid(TIMByRowsBySorting), &TIMByRowsConstructor::st_classDescription, TIMByRowsBySorting_properties, TIMByRowsBySorting_components };
TClassDescription const *TIMByRowsBySorting::classDescription() const { return &TIMByRowsBySorting::st_classDescription; }
TOrange *TIMByRowsBySorting::clone() const { return mlnew TIMByRowsBySorting(*this); }


/****** TIMByRowsByRelief *****/


TPropertyDescription TIMByRowsByRelief_properties[] = {
  {"k", "number of neighbours", &typeid(float), NULL, offsetof(TIMByRowsByRelief, k), false, false, 0},
  {"m", "number of reference examples", &typeid(float), NULL, offsetof(TIMByRowsByRelief, m), false, false, 0},
  {"k_from_columns", "if positive, number of neighbours is #columns*kFromColumns", &typeid(float), NULL, offsetof(TIMByRowsByRelief, kFromColumns), false, false, 0},
  {"ignore_same_example", "does not put reference example into M", &typeid(bool), NULL, offsetof(TIMByRowsByRelief, ignoreSameExample), false, false, 0},
  {"convert_to_binary", "convert to binary class (hit-miss)", &typeid(bool), NULL, offsetof(TIMByRowsByRelief, convertToBinary), false, false, 0},
  {"correct_class_first", "puts the correct class proportion to the first place", &typeid(bool), NULL, offsetof(TIMByRowsByRelief, correctClassFirst), false, false, 0},
  {"all_examples", "uses all examples for reference examples", &typeid(bool), NULL, offsetof(TIMByRowsByRelief, allExamples), false, false, 0},
  {"all_same_neighbours", "uses all the examples same to the reference as neighbours", &typeid(bool), NULL, offsetof(TIMByRowsByRelief, allSameNeighbours), false, false, 0},
  {NULL}
};

size_t const TIMByRowsByRelief_components[] = { 0};
TClassDescription TIMByRowsByRelief::st_classDescription = { "TIMByRowsByRelief", &typeid(TIMByRowsByRelief), &TIMByRowsConstructor::st_classDescription, TIMByRowsByRelief_properties, TIMByRowsByRelief_components };
TClassDescription const *TIMByRowsByRelief::classDescription() const { return &TIMByRowsByRelief::st_classDescription; }
TOrange *TIMByRowsByRelief::clone() const { return mlnew TIMByRowsByRelief(*this); }


/****** TIMByIMByRows *****/


TPropertyDescription TIMByIMByRows_properties[] = {
  {"record_row_examples", "enables creation of rowExample list", &typeid(bool), NULL, offsetof(TIMByIMByRows, recordRowExamples), false, false, 0},
  {NULL}
};

size_t const TIMByIMByRows_components[] = { 0};
TClassDescription TIMByIMByRows::st_classDescription = { "TIMByIMByRows", &typeid(TIMByIMByRows), &TIMConstructor::st_classDescription, TIMByIMByRows_properties, TIMByIMByRows_components };
TClassDescription const *TIMByIMByRows::classDescription() const { return &TIMByIMByRows::st_classDescription; }
TOrange *TIMByIMByRows::clone() const { return mlnew TIMByIMByRows(*this); }


/****** TIMByRelief *****/


TPropertyDescription TIMByRelief_properties[] = {
  {"distance", "distance measure", &typeid(POrange), &TExamplesDistance_Relief::st_classDescription, offsetof(TIMByRelief, distance), false, false, 0},
  {"k", "number of neighbours", &typeid(float), NULL, offsetof(TIMByRelief, k), false, false, 0},
  {"m", "number of reference examples", &typeid(float), NULL, offsetof(TIMByRelief, m), false, false, 0},
  {"k_from_columns", "if positive, number of neighbours is #columns*kFromColumns", &typeid(float), NULL, offsetof(TIMByRelief, kFromColumns), false, false, 0},
  {"ignore_same_example", "does not put reference example into M", &typeid(bool), NULL, offsetof(TIMByRelief, ignoreSameExample), false, false, 0},
  {"convert_to_binary", "convert to binary class (hit-miss)", &typeid(bool), NULL, offsetof(TIMByRelief, convertToBinary), false, false, 0},
  {"correct_class_first", "puts the correct class proportion to the first place", &typeid(bool), NULL, offsetof(TIMByRelief, correctClassFirst), false, false, 0},
  {"all_examples", "uses all examples for reference examples", &typeid(bool), NULL, offsetof(TIMByRelief, allExamples), false, false, 0},
  {"all_same_neighbours", "uses all the examples same to the reference as neighbours", &typeid(bool), NULL, offsetof(TIMByRelief, allSameNeighbours), false, false, 0},
  {"record_row_examples", "enables creation of rowExample list", &typeid(bool), NULL, offsetof(TIMByRelief, recordRowExamples), false, false, 0},
  {NULL}
};

size_t const TIMByRelief_components[] = { offsetof(TIMByRelief, distance), 0};
TClassDescription TIMByRelief::st_classDescription = { "TIMByRelief", &typeid(TIMByRelief), &TIMConstructor::st_classDescription, TIMByRelief_properties, TIMByRelief_components };
TClassDescription const *TIMByRelief::classDescription() const { return &TIMByRelief::st_classDescription; }
TOrange *TIMByRelief::clone() const { return mlnew TIMByRelief(*this); }


/****** TIMByRowsPreprocessor *****/


TPropertyDescription TIMByRowsPreprocessor_properties[] = {
  {NULL}
};

size_t const TIMByRowsPreprocessor_components[] = { 0};
TClassDescription TIMByRowsPreprocessor::st_classDescription = { "TIMByRowsPreprocessor", &typeid(TIMByRowsPreprocessor), &TOrange::st_classDescription, TIMByRowsPreprocessor_properties, TIMByRowsPreprocessor_components };
TClassDescription const *TIMByRowsPreprocessor::classDescription() const { return &TIMByRowsPreprocessor::st_classDescription; }


/****** TIMBlurer *****/


TPropertyDescription TIMBlurer_properties[] = {
  {"weight", "weight of neighbours", &typeid(float), NULL, offsetof(TIMBlurer, weight), false, false, 0},
  {"orig_weight", "weight of original row", &typeid(float), NULL, offsetof(TIMBlurer, origWeight), false, false, 0},
  {"attr_weights", "weights by individual (different) attributes", &typeid(POrange), &TFloatList::st_classDescription, offsetof(TIMBlurer, attrWeights), false, false, 0},
  {"adjust_orig_weight", "uses 1-weight(s) for weight of original row", &typeid(bool), NULL, offsetof(TIMBlurer, adjustOrigWeight), false, false, 0},
  {"only_empty", "blurs only empty cells", &typeid(bool), NULL, offsetof(TIMBlurer, onlyEmpty), false, false, 0},
  {NULL}
};

size_t const TIMBlurer_components[] = { offsetof(TIMBlurer, attrWeights), 0};
TClassDescription TIMBlurer::st_classDescription = { "TIMBlurer", &typeid(TIMBlurer), &TIMByRowsPreprocessor::st_classDescription, TIMBlurer_properties, TIMBlurer_components };
TClassDescription const *TIMBlurer::classDescription() const { return &TIMBlurer::st_classDescription; }
TOrange *TIMBlurer::clone() const { return mlnew TIMBlurer(*this); }
